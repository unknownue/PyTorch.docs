
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/shapes_and_collections/donut.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. meta::
        :keywords: codex

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_shapes_and_collections_donut.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_shapes_and_collections_donut.py:


=============
Mmh Donuts!!!
=============

Draw donuts (miam!) using `~.path.Path`\s and `~.patches.PathPatch`\es.
This example shows the effect of the path's orientations in a compound path.

.. GENERATED FROM PYTHON SOURCE LINES 9-66

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    import matplotlib.patches as mpatches
    import matplotlib.path as mpath


    def wise(v):
        if v == 1:
            return "CCW"
        else:
            return "CW"


    def make_circle(r):
        t = np.arange(0, np.pi * 2.0, 0.01)
        t = t.reshape((len(t), 1))
        x = r * np.cos(t)
        y = r * np.sin(t)
        return np.hstack((x, y))

    Path = mpath.Path

    fig, ax = plt.subplots()

    inside_vertices = make_circle(0.5)
    outside_vertices = make_circle(1.0)
    codes = np.ones(
        len(inside_vertices), dtype=mpath.Path.code_type) * mpath.Path.LINETO
    codes[0] = mpath.Path.MOVETO

    for i, (inside, outside) in enumerate(((1, 1), (1, -1), (-1, 1), (-1, -1))):
        # Concatenate the inside and outside subpaths together, changing their
        # order as needed
        vertices = np.concatenate((outside_vertices[::outside],
                                   inside_vertices[::inside]))
        # Shift the path
        vertices[:, 0] += i * 2.5
        # The codes will be all "LINETO" commands, except for "MOVETO"s at the
        # beginning of each subpath
        all_codes = np.concatenate((codes, codes))
        # Create the Path object
        path = mpath.Path(vertices, all_codes)
        # Add plot it
        patch = mpatches.PathPatch(path, facecolor='#885500', edgecolor='black')
        ax.add_patch(patch)

        ax.annotate(f"Outside {wise(outside)},\nInside {wise(inside)}",
                    (i * 2.5, -1.5), va="top", ha="center")

    ax.set_xlim(-2, 10)
    ax.set_ylim(-3, 2)
    ax.set_title('Mmm, donuts!')
    ax.set_aspect(1.0)
    plt.show()




.. image-sg:: /gallery/shapes_and_collections/images/sphx_glr_donut_001.png
   :alt: Mmm, donuts!
   :srcset: /gallery/shapes_and_collections/images/sphx_glr_donut_001.png, /gallery/shapes_and_collections/images/sphx_glr_donut_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-83

.. admonition:: References

   The use of the following functions, methods, classes and modules is shown
   in this example:

   - `matplotlib.path`
   - `matplotlib.path.Path`
   - `matplotlib.patches`
   - `matplotlib.patches.PathPatch`
   - `matplotlib.patches.Circle`
   - `matplotlib.axes.Axes.add_patch`
   - `matplotlib.axes.Axes.annotate`
   - `matplotlib.axes.Axes.set_aspect`
   - `matplotlib.axes.Axes.set_xlim`
   - `matplotlib.axes.Axes.set_ylim`
   - `matplotlib.axes.Axes.set_title`


.. _sphx_glr_download_gallery_shapes_and_collections_donut.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: donut.py <donut.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: donut.ipynb <donut.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
