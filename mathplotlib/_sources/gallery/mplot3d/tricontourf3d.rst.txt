
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/mplot3d/tricontourf3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. meta::
        :keywords: codex

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_mplot3d_tricontourf3d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_mplot3d_tricontourf3d.py:


=================================
Triangular 3D filled contour plot
=================================

Filled contour plots of unstructured triangular grids.

The data used is the same as in the second plot of :doc:`trisurf3d_2`.
:doc:`tricontour3d` shows the unfilled version of this example.

.. GENERATED FROM PYTHON SOURCE LINES 11-47



.. image-sg:: /gallery/mplot3d/images/sphx_glr_tricontourf3d_001.png
   :alt: tricontourf3d
   :srcset: /gallery/mplot3d/images/sphx_glr_tricontourf3d_001.png, /gallery/mplot3d/images/sphx_glr_tricontourf3d_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    import matplotlib.tri as tri

    # First create the x, y, z coordinates of the points.
    n_angles = 48
    n_radii = 8
    min_radius = 0.25

    # Create the mesh in polar coordinates and compute x, y, z.
    radii = np.linspace(min_radius, 0.95, n_radii)
    angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)
    angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)
    angles[:, 1::2] += np.pi/n_angles

    x = (radii*np.cos(angles)).flatten()
    y = (radii*np.sin(angles)).flatten()
    z = (np.cos(radii)*np.cos(3*angles)).flatten()

    # Create a custom triangulation.
    triang = tri.Triangulation(x, y)

    # Mask off unwanted triangles.
    triang.set_mask(np.hypot(x[triang.triangles].mean(axis=1),
                             y[triang.triangles].mean(axis=1))
                    < min_radius)

    ax = plt.figure().add_subplot(projection='3d')
    ax.tricontourf(triang, z, cmap=plt.cm.CMRmap)

    # Customize the view angle so it's easier to understand the plot.
    ax.view_init(elev=45.)

    plt.show()


.. _sphx_glr_download_gallery_mplot3d_tricontourf3d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tricontourf3d.py <tricontourf3d.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tricontourf3d.ipynb <tricontourf3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
