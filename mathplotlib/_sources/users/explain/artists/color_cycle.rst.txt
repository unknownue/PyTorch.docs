
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "users/explain/artists/color_cycle.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. meta::
        :keywords: codex

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_users_explain_artists_color_cycle.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_users_explain_artists_color_cycle.py:


.. redirect-from:: /tutorials/intermediate/color_cycle

.. _color_cycle:

===================
Styling with cycler
===================

Demo of custom property-cycle settings to control colors and other style
properties for multi-line plots.

.. note::

    More complete documentation of the ``cycler`` API can be found
    `here <https://matplotlib.org/cycler/>`_.

This example demonstrates two different APIs:

1. Setting the rc parameter specifying the default property cycle.
   This affects all subsequent axes (but not axes already created).
2. Setting the property cycle for a single pair of axes.

.. GENERATED FROM PYTHON SOURCE LINES 25-30

.. code-block:: default

    from cycler import cycler

    import matplotlib.pyplot as plt
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 31-33

First we'll generate some sample data, in this case, four offset sine
curves.

.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: default

    x = np.linspace(0, 2 * np.pi, 50)
    offsets = np.linspace(0, 2 * np.pi, 4, endpoint=False)
    yy = np.transpose([np.sin(x + phi) for phi in offsets])








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Now ``yy`` has shape

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    print(yy.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (50, 4)




.. GENERATED FROM PYTHON SOURCE LINES 42-47

So ``yy[:, i]`` will give you the ``i``-th offset sine curve. Let's set the
default ``prop_cycle`` using :func:`matplotlib.pyplot.rc`.  We'll combine a
color cycler and a linestyle cycler by adding (``+``) two ``cycler``'s
together.  See the bottom of this tutorial for more information about
combining different cyclers.

.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. code-block:: default

    default_cycler = (cycler(color=['r', 'g', 'b', 'y']) +
                      cycler(linestyle=['-', '--', ':', '-.']))

    plt.rc('lines', linewidth=4)
    plt.rc('axes', prop_cycle=default_cycler)








.. GENERATED FROM PYTHON SOURCE LINES 54-60

Now we'll generate a figure with two axes, one on top of the other. On the
first axis, we'll plot with the default cycler. On the second axis, we'll
set the ``prop_cycle`` using :func:`matplotlib.axes.Axes.set_prop_cycle`,
which will only set the ``prop_cycle`` for this :mod:`matplotlib.axes.Axes`
instance. We'll use a second ``cycler`` that combines a color cycler and a
linewidth cycler.

.. GENERATED FROM PYTHON SOURCE LINES 60-74

.. code-block:: default

    custom_cycler = (cycler(color=['c', 'm', 'y', 'k']) +
                     cycler(lw=[1, 2, 3, 4]))

    fig, (ax0, ax1) = plt.subplots(nrows=2)
    ax0.plot(yy)
    ax0.set_title('Set default color cycle to rgby')
    ax1.set_prop_cycle(custom_cycler)
    ax1.plot(yy)
    ax1.set_title('Set axes color cycle to cmyk')

    # Add a bit more space between the two plots.
    fig.subplots_adjust(hspace=0.3)
    plt.show()




.. image-sg:: /users/explain/artists/images/sphx_glr_color_cycle_001.png
   :alt: Set default color cycle to rgby, Set axes color cycle to cmyk
   :srcset: /users/explain/artists/images/sphx_glr_color_cycle_001.png, /users/explain/artists/images/sphx_glr_color_cycle_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 75-130

Setting ``prop_cycle`` in the :file:`matplotlibrc` file or style files
----------------------------------------------------------------------

Remember, a custom cycler can be set in your :file:`matplotlibrc`
file or a style file (:file:`style.mplstyle`) under ``axes.prop_cycle``:

.. code-block:: python

   axes.prop_cycle : cycler(color='bgrcmyk')

Cycling through multiple properties
-----------------------------------

You can add cyclers:

.. code-block:: python

   from cycler import cycler
   cc = (cycler(color=list('rgb')) +
         cycler(linestyle=['-', '--', '-.']))
   for d in cc:
       print(d)

Results in:

.. code-block:: python

    {'color': 'r', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}


You can multiply cyclers:

.. code-block:: python

    from cycler import cycler
    cc = (cycler(color=list('rgb')) *
          cycler(linestyle=['-', '--', '-.']))
    for d in cc:
        print(d)

Results in:

.. code-block:: python

    {'color': 'r', 'linestyle': '-'}
    {'color': 'r', 'linestyle': '--'}
    {'color': 'r', 'linestyle': '-.'}
    {'color': 'g', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'g', 'linestyle': '-.'}
    {'color': 'b', 'linestyle': '-'}
    {'color': 'b', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}


.. _sphx_glr_download_users_explain_artists_color_cycle.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: color_cycle.py <color_cycle.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: color_cycle.ipynb <color_cycle.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
