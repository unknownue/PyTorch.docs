
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/neighbors/plot_nearest_centroid.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_neighbors_plot_nearest_centroid.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_neighbors_plot_nearest_centroid.py:


===============================
Nearest Centroid Classification
===============================

Sample usage of Nearest Centroid classification.
It will plot the decision boundaries for each class.

.. GENERATED FROM PYTHON SOURCE LINES 10-48



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/neighbors/images/sphx_glr_plot_nearest_centroid_001.png
         :alt: 3-Class classification (shrink_threshold=None)
         :srcset: /auto_examples/neighbors/images/sphx_glr_plot_nearest_centroid_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/neighbors/images/sphx_glr_plot_nearest_centroid_002.png
         :alt: 3-Class classification (shrink_threshold=0.2)
         :srcset: /auto_examples/neighbors/images/sphx_glr_plot_nearest_centroid_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    None 0.8133333333333334
    0.2 0.82






|

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np
    from matplotlib.colors import ListedColormap

    from sklearn import datasets
    from sklearn.inspection import DecisionBoundaryDisplay
    from sklearn.neighbors import NearestCentroid

    # import some data to play with
    iris = datasets.load_iris()
    # we only take the first two features. We could avoid this ugly
    # slicing by using a two-dim dataset
    X = iris.data[:, :2]
    y = iris.target

    # Create color maps
    cmap_light = ListedColormap(["orange", "cyan", "cornflowerblue"])
    cmap_bold = ListedColormap(["darkorange", "c", "darkblue"])

    for shrinkage in [None, 0.2]:
        # we create an instance of Nearest Centroid Classifier and fit the data.
        clf = NearestCentroid(shrink_threshold=shrinkage)
        clf.fit(X, y)
        y_pred = clf.predict(X)
        print(shrinkage, np.mean(y == y_pred))

        _, ax = plt.subplots()
        DecisionBoundaryDisplay.from_estimator(
            clf, X, cmap=cmap_light, ax=ax, response_method="predict"
        )

        # Plot also the training points
        plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold, edgecolor="k", s=20)
        plt.title("3-Class classification (shrink_threshold=%r)" % shrinkage)
        plt.axis("tight")

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.115 seconds)


.. _sphx_glr_download_auto_examples_neighbors_plot_nearest_centroid.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/1.3.X?urlpath=lab/tree/notebooks/auto_examples/neighbors/plot_nearest_centroid.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_nearest_centroid.py <plot_nearest_centroid.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_nearest_centroid.ipynb <plot_nearest_centroid.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
