Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.2"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 424, 426, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 476, 477, 478, 479, 481, 483, 484, 487, 490, 491, 492, 493, 495, 496, 497, 499, 502, 503, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 571, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 700, 701, 703, 706, 707, 708, 710, 711, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 729, 730, 731, 732, 733, 734, 735, 736, 741, 747, 748, 749, 750, 751, 752, 754, 755, 756, 758, 761, 762, 767, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 913, 914, 919, 920, 922, 924, 925, 930, 932, 937, 938, 939, 940, 941, 942, 944, 947, 948, 949, 951, 952, 955, 956, 965, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "wa": [0, 4, 8, 9, 13, 16, 34, 40, 70, 71, 80, 86, 92, 129, 132, 149, 161, 170, 176, 179, 204, 214, 225, 239, 252, 255, 257, 259, 261, 267, 268, 287, 299, 308, 313, 314, 318, 324, 325, 333, 336, 347, 349, 356, 358, 362, 371, 373, 374, 376, 380, 381, 390, 393, 394, 397, 399, 400, 403, 406, 407, 411, 415, 434, 435, 439, 440, 444, 448, 451, 454, 463, 468, 509, 517, 529, 530, 532, 534, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 582, 584, 585, 596, 621, 624, 635, 644, 645, 648, 649, 650, 652, 658, 659, 679, 680, 707, 722, 723, 761, 776, 777, 780, 788, 789, 790, 793, 794, 804, 816, 818, 830, 840, 866, 867, 886, 890, 896, 897, 899, 924, 925, 948, 969, 970, 971, 980, 981, 984, 987, 991, 994, 997, 1001, 1007, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "start": [0, 4, 7, 10, 12, 20, 26, 53, 58, 64, 67, 74, 86, 98, 111, 117, 123, 125, 146, 149, 157, 159, 171, 176, 180, 181, 189, 200, 201, 202, 208, 218, 221, 225, 234, 236, 249, 261, 269, 281, 317, 319, 323, 347, 356, 358, 362, 363, 364, 365, 369, 376, 377, 378, 380, 381, 382, 388, 390, 393, 400, 403, 407, 408, 412, 413, 434, 436, 444, 448, 450, 532, 604, 611, 626, 639, 647, 653, 660, 662, 670, 671, 672, 684, 688, 774, 775, 782, 788, 789, 790, 793, 794, 804, 835, 836, 837, 839, 841, 849, 935, 965, 970, 977, 980, 985, 986, 995, 1002, 1005, 1007, 1015, 1016, 1025, 1027, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "2007": [0, 38, 188, 371, 403, 412, 434, 446, 448, 454, 456, 560, 650, 685, 711, 727, 730, 751, 752, 786, 973, 977, 979, 981], "googl": [0, 17, 388, 403, 436, 1000, 1012, 1022], "summer": [0, 4, 48, 1022], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 370, 374, 375, 377, 379, 380, 385, 388, 390, 391, 393, 394, 397, 399, 402, 403, 410, 411, 436, 437, 441, 443, 453, 490, 520, 524, 525, 531, 532, 536, 537, 539, 540, 542, 560, 566, 575, 576, 579, 580, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 658, 659, 676, 677, 679, 680, 821, 822, 823, 860, 867, 949, 978, 982, 991, 993, 995, 996, 1001, 1002, 1004, 1005, 1008, 1016, 1022, 1024, 1025], "david": [0, 2, 37, 57, 81, 118, 179, 184, 202, 239, 262, 264, 308, 347, 348, 349, 371, 403, 410, 413, 456, 526, 530, 561, 562, 616, 617, 622, 718, 788, 890, 971, 977, 985, 994, 1005, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "cournapeau": [0, 2, 1022, 1025], "later": [0, 9, 11, 34, 53, 80, 112, 117, 126, 152, 171, 176, 179, 214, 239, 287, 294, 333, 336, 349, 358, 382, 388, 389, 393, 397, 839, 862, 863, 871, 873, 991, 1011, 1016, 1025, 1028, 1030, 1034], "year": [0, 4, 135, 149, 157, 169, 170, 171, 200, 201, 218, 373, 375, 380, 388, 407, 411, 792, 797, 799, 872, 977, 981, 1002, 1005, 1014], "matthieu": [0, 2, 1022, 1026, 1037], "brucher": [0, 2, 1022], "work": [0, 4, 9, 17, 32, 44, 45, 48, 52, 67, 78, 115, 122, 135, 149, 158, 159, 169, 170, 171, 189, 204, 217, 236, 246, 248, 259, 287, 288, 309, 314, 316, 317, 319, 336, 348, 349, 358, 363, 364, 365, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 384, 389, 390, 391, 399, 400, 401, 403, 404, 405, 408, 410, 411, 412, 415, 416, 417, 418, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 454, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 498, 502, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 689, 702, 735, 767, 771, 772, 773, 774, 781, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 881, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 930, 934, 949, 970, 971, 973, 975, 976, 977, 978, 980, 981, 983, 984, 987, 988, 991, 994, 995, 1001, 1002, 1005, 1007, 1008, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "part": [0, 31, 36, 61, 68, 71, 82, 115, 118, 121, 125, 130, 138, 139, 140, 141, 146, 157, 167, 179, 236, 249, 256, 258, 275, 297, 305, 308, 310, 349, 364, 371, 373, 376, 378, 382, 384, 389, 390, 393, 399, 401, 403, 407, 408, 410, 411, 413, 440, 443, 487, 488, 489, 515, 525, 531, 536, 568, 578, 579, 580, 607, 619, 784, 858, 876, 878, 879, 880, 881, 882, 883, 884, 970, 971, 973, 978, 982, 1000, 1001, 1002, 1003, 1005, 1009, 1016, 1018, 1022, 1030, 1031, 1033, 1035, 1037], "hi": [0, 404, 981, 1016], "thesi": [0, 373, 403, 410], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 55, 57, 58, 60, 66, 67, 71, 72, 74, 75, 78, 80, 81, 82, 86, 89, 90, 95, 97, 100, 103, 104, 109, 111, 112, 115, 117, 118, 119, 120, 121, 122, 125, 127, 128, 129, 130, 132, 135, 145, 146, 148, 149, 152, 156, 157, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 184, 188, 189, 191, 195, 200, 201, 202, 203, 204, 205, 208, 217, 218, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 249, 251, 255, 257, 258, 259, 261, 262, 263, 264, 266, 267, 270, 271, 273, 275, 276, 279, 281, 284, 287, 288, 290, 300, 303, 304, 305, 306, 308, 309, 310, 313, 314, 315, 317, 318, 324, 326, 334, 338, 342, 347, 348, 349, 352, 356, 358, 362, 363, 364, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 431, 434, 435, 436, 437, 438, 441, 442, 443, 446, 456, 457, 458, 463, 466, 469, 487, 490, 497, 502, 503, 505, 517, 528, 530, 532, 534, 535, 536, 538, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 585, 596, 600, 603, 604, 605, 624, 626, 627, 628, 630, 637, 638, 639, 641, 642, 643, 645, 647, 649, 652, 653, 655, 657, 659, 660, 662, 663, 668, 669, 670, 673, 674, 678, 679, 680, 690, 693, 697, 706, 712, 714, 719, 721, 722, 727, 728, 731, 733, 735, 747, 749, 750, 774, 776, 778, 781, 785, 787, 788, 789, 790, 793, 794, 796, 804, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 835, 836, 837, 839, 840, 841, 843, 844, 845, 850, 858, 860, 866, 867, 871, 872, 874, 878, 879, 881, 882, 883, 884, 885, 886, 888, 889, 890, 893, 894, 895, 898, 901, 903, 908, 912, 914, 930, 970, 971, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 992, 993, 994, 995, 996, 997, 1002, 1004, 1005, 1007, 1014, 1015, 1016, 1019, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "2010": [0, 47, 67, 79, 171, 266, 267, 400, 403, 405, 407, 408, 416, 469, 530, 698, 702, 713, 714, 733, 818, 850, 851, 973, 977, 981, 985, 995, 1000, 1022], "fabian": [0, 2, 187, 205, 222, 293, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031], "pedregosa": [0, 2, 187, 205, 222, 293, 1022, 1023, 1024, 1025, 1026, 1028], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 66, 67, 82, 97, 101, 189, 190, 222, 234, 248, 1000, 1002, 1005, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 66, 67, 73, 82, 89, 90, 97, 101, 102, 183, 189, 190, 197, 198, 222, 224, 232, 234, 248, 305, 338, 339, 391, 1000, 1005, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 185, 187, 188, 189, 191, 193, 194, 229, 232, 267, 274, 293, 391, 1005, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 185, 187, 188, 189, 191, 193, 194, 229, 232, 267, 274, 293, 391, 1005, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "vincent": [0, 2, 47, 67, 155, 159, 1005, 1022, 1024, 1026, 1027, 1029, 1032, 1037, 1038], "michel": [0, 2, 47, 67, 1022, 1024, 1025, 1027, 1029, 1036, 1037], "inria": [0, 5, 9, 30, 37, 52, 54, 57, 75, 82, 118, 158, 179, 184, 185, 187, 191, 193, 194, 205, 222, 223, 229, 232, 239, 262, 264, 267, 274, 293, 308, 342, 347, 348, 349, 652, 999, 1022], "took": [0, 42, 269], "leadership": 0, "made": [0, 70, 81, 89, 100, 112, 118, 135, 159, 170, 171, 200, 218, 239, 252, 265, 309, 314, 334, 353, 362, 371, 373, 376, 380, 390, 391, 403, 410, 411, 415, 437, 440, 441, 443, 453, 490, 497, 582, 583, 585, 624, 625, 650, 659, 679, 680, 728, 776, 790, 793, 794, 804, 808, 809, 810, 830, 833, 834, 982, 987, 997, 1001, 1005, 1013, 1015, 1022, 1023, 1024, 1025, 1026, 1029, 1031, 1032, 1035, 1036], "first": [0, 4, 5, 7, 8, 11, 17, 20, 25, 26, 30, 31, 32, 39, 55, 56, 58, 61, 64, 65, 66, 67, 70, 71, 72, 75, 80, 85, 86, 89, 90, 91, 100, 104, 112, 113, 117, 119, 120, 121, 122, 124, 126, 129, 132, 133, 134, 135, 145, 146, 149, 152, 153, 154, 157, 158, 159, 160, 165, 169, 170, 171, 173, 176, 179, 181, 183, 189, 196, 197, 198, 201, 202, 208, 209, 214, 222, 225, 233, 234, 236, 237, 238, 240, 242, 243, 248, 252, 256, 261, 263, 264, 268, 270, 272, 273, 279, 281, 283, 286, 290, 291, 292, 297, 299, 303, 305, 308, 309, 310, 314, 315, 323, 326, 330, 331, 334, 336, 347, 348, 349, 352, 353, 356, 358, 363, 364, 370, 371, 373, 374, 375, 378, 380, 381, 382, 384, 388, 390, 400, 401, 403, 406, 407, 408, 410, 411, 412, 413, 415, 437, 440, 441, 444, 453, 454, 458, 466, 477, 481, 482, 484, 485, 486, 488, 491, 494, 496, 498, 502, 503, 504, 522, 527, 528, 532, 535, 547, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 576, 578, 582, 583, 584, 585, 587, 604, 605, 611, 615, 618, 625, 626, 627, 628, 640, 646, 653, 660, 662, 668, 670, 682, 689, 692, 693, 694, 696, 706, 710, 729, 756, 757, 775, 785, 788, 789, 793, 794, 795, 796, 797, 802, 804, 811, 812, 821, 822, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 858, 866, 870, 871, 872, 875, 882, 883, 895, 898, 901, 902, 903, 904, 906, 908, 913, 914, 915, 932, 934, 948, 952, 955, 967, 970, 971, 975, 976, 977, 978, 980, 981, 982, 983, 984, 988, 991, 992, 995, 996, 997, 1005, 1007, 1013, 1014, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "public": [0, 79, 370, 376, 378, 380, 381, 388, 389, 390, 391, 407, 410, 462, 658, 665, 679, 680, 686, 891, 977, 985, 1022, 1027, 1028, 1033, 1034, 1035, 1038], "releas": [0, 9, 34, 80, 214, 236, 287, 320, 333, 336, 363, 365, 374, 376, 377, 379, 384, 388, 390, 411, 437, 440, 441, 458, 461, 484, 485, 490, 495, 496, 498, 506, 509, 515, 518, 532, 555, 556, 558, 559, 561, 593, 596, 622, 624, 626, 628, 634, 640, 642, 646, 652, 663, 674, 682, 695, 696, 711, 741, 781, 786, 790, 793, 794, 796, 804, 812, 815, 819, 835, 837, 854, 858, 863, 866, 867, 868, 872, 873, 874, 890, 891, 893, 898, 901, 902, 925, 949, 997, 999, 1022, 1023, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "februari": [0, 405, 467, 981, 1023, 1027], "1st": [0, 4, 60, 90, 160, 201, 308, 871, 872], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 55, 66, 70, 71, 72, 96, 122, 138, 146, 149, 152, 157, 170, 171, 173, 176, 182, 200, 202, 204, 217, 230, 234, 235, 236, 248, 251, 257, 261, 263, 264, 270, 271, 281, 283, 284, 309, 316, 317, 327, 331, 334, 342, 347, 348, 349, 358, 363, 371, 374, 376, 377, 378, 380, 381, 384, 388, 389, 390, 393, 394, 401, 403, 404, 405, 406, 407, 408, 410, 411, 413, 420, 431, 435, 439, 440, 441, 443, 444, 447, 450, 463, 472, 490, 520, 530, 531, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 561, 563, 582, 583, 585, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 626, 627, 632, 638, 639, 644, 645, 648, 649, 650, 652, 653, 658, 659, 660, 662, 668, 669, 670, 673, 701, 703, 728, 734, 761, 782, 793, 794, 796, 821, 822, 823, 824, 828, 829, 830, 831, 832, 835, 840, 843, 850, 851, 858, 866, 883, 884, 888, 889, 893, 895, 896, 897, 898, 899, 901, 903, 927, 930, 970, 973, 974, 975, 977, 978, 982, 983, 984, 985, 987, 989, 991, 995, 996, 997, 1005, 1007, 1016, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 57, 61, 74, 91, 115, 123, 130, 132, 135, 146, 149, 152, 157, 158, 167, 170, 176, 184, 189, 200, 204, 220, 221, 227, 233, 248, 256, 261, 266, 283, 298, 303, 316, 342, 347, 348, 362, 370, 371, 373, 376, 378, 381, 388, 390, 400, 402, 403, 404, 407, 409, 410, 411, 413, 441, 443, 458, 481, 493, 502, 503, 532, 549, 550, 553, 554, 557, 558, 559, 564, 582, 583, 585, 604, 639, 640, 646, 682, 683, 684, 685, 686, 687, 788, 789, 790, 793, 794, 804, 821, 822, 828, 829, 830, 831, 832, 852, 853, 860, 877, 901, 902, 903, 904, 916, 970, 973, 978, 981, 982, 984, 989, 991, 995, 997, 998, 1000, 1001, 1004, 1005, 1007, 1014, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1035, 1038], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 55, 57, 60, 62, 64, 65, 70, 71, 78, 80, 86, 89, 91, 92, 100, 102, 112, 119, 121, 122, 123, 125, 145, 146, 149, 152, 153, 157, 158, 159, 165, 169, 170, 171, 172, 173, 176, 179, 184, 200, 201, 202, 204, 218, 225, 229, 231, 236, 237, 239, 240, 247, 248, 249, 251, 255, 261, 262, 264, 267, 268, 275, 281, 283, 284, 287, 288, 303, 308, 309, 310, 313, 315, 316, 323, 324, 325, 331, 337, 338, 339, 342, 347, 348, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 486, 488, 489, 490, 502, 503, 508, 517, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 681, 682, 683, 684, 685, 686, 693, 698, 699, 706, 709, 714, 719, 724, 729, 735, 749, 750, 751, 752, 775, 778, 779, 783, 786, 788, 789, 790, 793, 794, 795, 796, 801, 804, 808, 812, 814, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 913, 915, 917, 919, 930, 956, 970, 971, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 1001, 1002, 1005, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "appear": [0, 8, 46, 48, 115, 170, 173, 256, 258, 259, 287, 288, 297, 299, 304, 323, 338, 347, 348, 349, 371, 374, 376, 381, 390, 405, 408, 482, 483, 549, 561, 562, 573, 604, 621, 622, 624, 691, 694, 696, 706, 710, 712, 775, 782, 791, 808, 828, 829, 830, 831, 832, 895, 898, 932, 977, 983, 987, 1022, 1030, 1034, 1035], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 55, 57, 63, 67, 71, 72, 92, 95, 105, 112, 115, 125, 129, 144, 157, 164, 169, 170, 171, 172, 173, 179, 181, 184, 188, 189, 198, 200, 201, 215, 218, 230, 236, 237, 239, 252, 261, 270, 271, 303, 309, 310, 313, 314, 316, 317, 318, 331, 342, 347, 348, 349, 352, 356, 358, 362, 363, 370, 371, 373, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 424, 427, 435, 437, 439, 440, 441, 442, 443, 447, 455, 457, 458, 459, 462, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 509, 528, 532, 534, 535, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 564, 575, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 625, 627, 628, 640, 646, 652, 653, 664, 665, 674, 686, 688, 693, 699, 703, 707, 712, 809, 830, 835, 836, 837, 839, 841, 843, 844, 845, 852, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 882, 891, 893, 894, 901, 902, 903, 904, 908, 909, 929, 949, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1007, 1016, 1019, 1022, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 78, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 144, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 229, 230, 233, 234, 235, 236, 237, 239, 241, 243, 246, 247, 248, 250, 251, 252, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 325, 326, 327, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 347, 348, 349, 353, 354, 356, 358, 363, 364, 370, 371, 373, 374, 376, 377, 378, 381, 382, 388, 389, 390, 393, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 428, 431, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 487, 488, 490, 491, 496, 498, 499, 500, 501, 504, 506, 509, 510, 511, 512, 513, 515, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 575, 576, 577, 578, 581, 582, 584, 585, 587, 588, 596, 597, 601, 602, 604, 605, 606, 611, 621, 622, 623, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 686, 687, 688, 693, 694, 696, 697, 698, 699, 701, 703, 707, 710, 711, 715, 716, 717, 719, 721, 722, 723, 724, 727, 728, 729, 730, 734, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 749, 750, 761, 762, 768, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 881, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 919, 928, 929, 930, 932, 933, 934, 935, 937, 938, 939, 940, 941, 944, 945, 947, 948, 949, 955, 970, 971, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 987, 988, 991, 992, 994, 996, 997, 999, 1000, 1001, 1004, 1007, 1008, 1011, 1012, 1014, 1015, 1020, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1032, 1034, 1035, 1037], "month": [0, 4, 157, 171, 309, 371, 376, 380, 391, 1022], "cycl": [0, 4, 42, 44, 50, 62, 95, 185, 247, 252, 268, 270, 316, 317, 376, 380, 394, 402, 408, 573, 574, 621, 793, 794, 909, 970, 971, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "thrive": [0, 376], "intern": [0, 26, 71, 82, 100, 118, 126, 138, 149, 153, 164, 167, 200, 281, 283, 302, 311, 324, 349, 358, 363, 371, 373, 378, 382, 385, 388, 390, 394, 397, 400, 403, 407, 408, 410, 411, 413, 414, 431, 433, 438, 459, 462, 505, 528, 529, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 587, 588, 604, 605, 632, 634, 637, 640, 646, 662, 666, 670, 672, 690, 702, 724, 727, 751, 752, 776, 819, 833, 834, 849, 850, 851, 853, 854, 858, 872, 874, 888, 889, 891, 893, 894, 895, 898, 901, 902, 903, 904, 949, 977, 978, 979, 981, 984, 987, 991, 993, 996, 997, 1005, 1022, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 57, 60, 74, 80, 81, 86, 95, 109, 117, 121, 123, 125, 129, 134, 148, 152, 157, 158, 159, 165, 170, 171, 172, 173, 176, 193, 197, 200, 201, 202, 206, 217, 218, 221, 229, 233, 235, 236, 239, 240, 243, 246, 247, 249, 251, 252, 256, 259, 260, 261, 264, 265, 267, 272, 273, 279, 284, 287, 288, 289, 291, 299, 303, 304, 306, 308, 313, 314, 315, 316, 317, 319, 322, 325, 334, 338, 339, 341, 347, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 384, 385, 388, 389, 390, 391, 393, 394, 397, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 487, 488, 491, 492, 502, 503, 510, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 613, 621, 622, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 681, 682, 683, 684, 685, 686, 689, 705, 707, 714, 734, 756, 767, 771, 772, 773, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 804, 808, 811, 812, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 853, 856, 857, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 908, 912, 913, 914, 932, 950, 966, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 993, 994, 995, 996, 997, 1002, 1005, 1007, 1011, 1014, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "been": [0, 4, 9, 16, 26, 44, 53, 60, 81, 100, 109, 112, 149, 152, 157, 159, 170, 225, 229, 231, 236, 237, 259, 261, 267, 313, 314, 315, 316, 317, 319, 324, 347, 358, 363, 370, 371, 373, 374, 375, 376, 378, 380, 382, 384, 385, 388, 389, 390, 391, 394, 397, 400, 401, 403, 405, 407, 408, 410, 413, 428, 431, 463, 465, 466, 468, 472, 481, 517, 528, 530, 543, 544, 561, 562, 575, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 605, 627, 628, 652, 653, 660, 662, 667, 669, 670, 671, 672, 714, 771, 772, 773, 784, 790, 793, 794, 796, 804, 812, 817, 818, 842, 890, 893, 971, 973, 974, 976, 977, 978, 981, 982, 984, 987, 991, 993, 995, 996, 1002, 1005, 1007, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "lead": [0, 7, 25, 31, 37, 52, 55, 61, 72, 118, 122, 125, 148, 149, 170, 171, 172, 179, 184, 189, 191, 200, 204, 234, 236, 239, 261, 262, 264, 268, 286, 287, 299, 303, 305, 308, 309, 315, 334, 342, 348, 352, 358, 362, 363, 370, 375, 384, 385, 389, 390, 397, 400, 401, 403, 405, 407, 408, 409, 410, 412, 446, 456, 459, 462, 490, 509, 521, 529, 532, 533, 534, 537, 541, 545, 551, 552, 553, 554, 557, 558, 559, 560, 600, 624, 640, 641, 644, 646, 647, 648, 654, 655, 656, 657, 673, 685, 689, 739, 788, 793, 794, 821, 833, 834, 838, 857, 864, 874, 885, 886, 891, 893, 901, 902, 903, 904, 970, 975, 977, 978, 980, 981, 982, 984, 985, 987, 989, 991, 994, 995, 997, 1005, 1007, 1025, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 88, 91, 92, 93, 95, 98, 100, 103, 104, 105, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 171, 172, 173, 176, 179, 181, 182, 183, 184, 185, 188, 189, 191, 192, 193, 194, 195, 196, 198, 201, 202, 203, 204, 206, 208, 209, 214, 217, 218, 220, 224, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 251, 252, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 279, 281, 283, 286, 287, 288, 289, 290, 291, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 324, 325, 331, 332, 333, 334, 336, 338, 339, 340, 342, 343, 344, 347, 348, 349, 352, 354, 355, 356, 358, 362, 363, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 425, 426, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 745, 746, 747, 748, 749, 750, 751, 752, 755, 757, 758, 759, 760, 763, 764, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 911, 912, 913, 914, 916, 917, 918, 919, 920, 924, 925, 926, 927, 928, 929, 930, 932, 933, 937, 938, 941, 944, 946, 947, 948, 949, 950, 951, 952, 955, 965, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "decis": [0, 4, 16, 25, 27, 31, 34, 56, 58, 60, 110, 111, 114, 115, 117, 130, 136, 149, 156, 170, 182, 183, 192, 209, 210, 213, 214, 229, 230, 232, 240, 264, 289, 292, 297, 303, 304, 305, 308, 321, 328, 330, 331, 332, 333, 334, 335, 336, 340, 343, 344, 347, 357, 362, 365, 372, 373, 376, 390, 401, 403, 410, 431, 463, 494, 498, 513, 530, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 587, 588, 625, 626, 627, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 692, 694, 696, 697, 701, 714, 719, 720, 728, 732, 733, 735, 749, 775, 781, 782, 785, 790, 793, 794, 804, 819, 821, 822, 824, 835, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 975, 981, 982, 983, 984, 985, 987, 988, 989, 994, 995, 996, 999, 1001, 1002, 1003, 1005, 1014, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1035, 1036, 1038], "make": [0, 4, 7, 8, 11, 14, 17, 20, 21, 25, 26, 27, 39, 40, 43, 44, 56, 61, 62, 67, 73, 100, 112, 118, 122, 125, 130, 146, 149, 152, 157, 160, 169, 170, 171, 172, 179, 184, 186, 189, 192, 193, 194, 196, 200, 201, 202, 204, 206, 218, 222, 231, 233, 235, 236, 237, 239, 246, 248, 251, 252, 256, 261, 263, 264, 270, 271, 272, 290, 299, 303, 304, 309, 317, 319, 334, 344, 347, 348, 349, 358, 362, 363, 364, 365, 370, 371, 374, 375, 377, 378, 379, 381, 382, 384, 388, 390, 393, 397, 400, 401, 403, 404, 405, 407, 408, 410, 411, 412, 415, 434, 435, 436, 437, 439, 441, 443, 445, 446, 447, 452, 453, 454, 456, 482, 497, 508, 509, 516, 517, 521, 526, 528, 535, 545, 546, 549, 550, 577, 578, 601, 602, 625, 643, 649, 650, 665, 685, 689, 723, 730, 735, 761, 762, 774, 788, 789, 790, 792, 795, 801, 805, 806, 807, 809, 810, 815, 816, 823, 824, 827, 860, 869, 872, 873, 877, 881, 883, 884, 885, 886, 899, 907, 913, 914, 924, 930, 936, 942, 967, 970, 971, 973, 975, 977, 978, 980, 981, 982, 983, 984, 986, 987, 988, 989, 991, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1012, 1014, 1016, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "process": [0, 4, 5, 19, 26, 30, 31, 45, 46, 47, 48, 50, 66, 70, 72, 74, 79, 81, 96, 97, 99, 112, 122, 129, 138, 139, 140, 141, 162, 169, 179, 202, 204, 236, 237, 239, 246, 247, 252, 261, 263, 264, 273, 303, 315, 319, 323, 338, 348, 349, 352, 362, 363, 364, 365, 371, 375, 376, 378, 380, 382, 385, 388, 389, 390, 397, 403, 404, 405, 407, 408, 409, 410, 411, 412, 416, 442, 443, 469, 490, 498, 517, 528, 529, 530, 531, 532, 555, 556, 557, 582, 583, 585, 604, 605, 607, 608, 609, 611, 612, 613, 616, 617, 619, 621, 626, 627, 633, 637, 658, 666, 679, 680, 697, 716, 734, 774, 788, 790, 793, 794, 804, 814, 815, 816, 825, 826, 842, 856, 860, 862, 863, 864, 873, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 947, 949, 970, 973, 977, 981, 984, 991, 993, 995, 997, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1015, 1016, 1018, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1038], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 55, 68, 82, 106, 128, 151, 162, 167, 221, 225, 231, 236, 252, 256, 267, 286, 308, 314, 317, 321, 328, 334, 338, 351, 353, 357, 362, 371, 373, 376, 378, 381, 388, 390, 391, 393, 400, 403, 405, 406, 407, 408, 410, 411, 412, 413, 435, 436, 439, 440, 444, 445, 446, 447, 448, 451, 456, 457, 466, 490, 497, 498, 502, 505, 507, 508, 515, 524, 529, 535, 538, 557, 604, 605, 606, 610, 611, 612, 683, 690, 703, 707, 819, 841, 846, 873, 885, 886, 889, 901, 902, 903, 904, 907, 929, 930, 952, 955, 978, 980, 981, 984, 986, 987, 991, 994, 997, 1001, 1002, 1010, 1015, 1016, 1022, 1023, 1025, 1026, 1028, 1032], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 148, 149, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 338, 339, 340, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 358, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 930, 932, 935, 936, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 962, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "laid": [0, 169, 376], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 55, 70, 71, 103, 110, 116, 118, 119, 126, 136, 141, 167, 169, 172, 184, 200, 202, 204, 208, 218, 239, 246, 248, 259, 261, 264, 269, 273, 279, 308, 309, 316, 325, 327, 330, 331, 334, 342, 347, 361, 371, 373, 374, 376, 378, 379, 380, 382, 388, 390, 403, 406, 408, 410, 411, 413, 419, 429, 430, 436, 437, 439, 440, 441, 443, 466, 476, 477, 478, 479, 493, 509, 510, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 582, 583, 585, 598, 601, 602, 628, 633, 634, 635, 636, 645, 649, 660, 662, 667, 669, 670, 682, 683, 686, 695, 720, 734, 735, 790, 792, 793, 794, 795, 797, 798, 799, 800, 804, 819, 828, 829, 830, 831, 832, 837, 842, 845, 849, 850, 851, 859, 863, 870, 882, 885, 886, 908, 943, 945, 950, 971, 975, 976, 980, 981, 982, 984, 989, 991, 1002, 1003, 1004, 1005, 1011, 1014, 1016, 1018, 1022, 1024, 1026, 1028, 1030, 1031, 1034, 1035, 1038], "peopl": [0, 6, 70, 170, 238, 264, 347, 348, 363, 364, 371, 373, 375, 376, 380, 391, 409, 487, 488, 635, 830, 1001, 1012], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 97, 100, 103, 106, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 145, 146, 148, 149, 152, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 209, 211, 218, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 247, 248, 249, 251, 255, 256, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 279, 281, 283, 286, 287, 291, 294, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 322, 324, 325, 326, 327, 332, 334, 336, 338, 342, 343, 347, 348, 349, 352, 356, 358, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 389, 390, 391, 393, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 424, 427, 428, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 482, 483, 487, 489, 490, 492, 494, 495, 496, 497, 498, 502, 503, 504, 506, 509, 510, 511, 512, 513, 514, 517, 518, 520, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 703, 706, 707, 709, 710, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 733, 734, 736, 738, 739, 741, 743, 744, 746, 747, 749, 750, 754, 755, 756, 758, 760, 761, 762, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 802, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 917, 918, 919, 922, 924, 929, 930, 931, 934, 935, 937, 941, 944, 945, 947, 949, 952, 955, 956, 960, 961, 962, 965, 967, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "current": [0, 8, 46, 112, 157, 170, 171, 218, 303, 313, 363, 364, 371, 374, 376, 377, 378, 381, 385, 388, 390, 391, 399, 400, 402, 403, 407, 410, 411, 412, 413, 434, 440, 444, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 526, 529, 535, 547, 548, 551, 552, 553, 554, 556, 558, 559, 560, 570, 585, 587, 604, 611, 620, 621, 640, 652, 661, 665, 669, 670, 671, 672, 781, 788, 789, 838, 842, 850, 851, 869, 881, 891, 901, 902, 903, 904, 907, 948, 956, 970, 975, 977, 981, 984, 985, 991, 1002, 1014, 1030, 1034, 1036, 1037, 1038], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 20, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 78, 79, 82, 85, 90, 91, 92, 95, 96, 97, 100, 101, 104, 105, 106, 109, 111, 112, 114, 118, 119, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 141, 144, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 167, 170, 171, 173, 176, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 198, 200, 202, 204, 206, 207, 209, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 229, 230, 233, 235, 236, 237, 239, 246, 248, 249, 251, 256, 261, 262, 263, 264, 265, 268, 272, 274, 275, 281, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 300, 302, 303, 306, 309, 311, 313, 315, 316, 317, 318, 319, 323, 324, 331, 332, 333, 334, 335, 338, 339, 340, 341, 344, 347, 348, 349, 353, 354, 355, 356, 358, 362, 363, 364, 365, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 390, 391, 392, 393, 394, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 417, 424, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 454, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 483, 490, 492, 494, 498, 504, 505, 513, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 566, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 702, 705, 710, 714, 728, 734, 735, 751, 752, 772, 773, 788, 789, 790, 792, 793, 794, 799, 804, 808, 809, 815, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 908, 911, 913, 914, 917, 930, 932, 939, 941, 965, 969, 970, 972, 973, 975, 977, 978, 979, 982, 983, 984, 985, 986, 988, 989, 991, 993, 994, 995, 996, 997, 1001, 1002, 1005, 1007, 1011, 1012, 1014, 1015, 1016, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "mainten": [0, 376, 384, 388, 393, 396, 977, 1002, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "j\u00e9r\u00e9mie": [0, 1, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "du": [0, 1, 2, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "boisberrang": [0, 1, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "jori": [0, 1, 1029, 1030, 1031, 1034, 1035], "van": [0, 1, 370, 405, 463, 468, 528, 621, 686, 690, 971, 978, 981, 987, 1005, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1038], "den": [0, 1, 1023, 1024, 1029, 1030, 1031, 1034, 1035], "bossch": [0, 1, 1029, 1030, 1031, 1035], "lo\u00efc": [0, 1, 1030, 1033, 1035, 1036, 1037, 1038], "est\u00e8v": [0, 1, 1030, 1033, 1035, 1036, 1037, 1038], "thoma": [0, 1, 103, 229, 303, 363, 366, 391, 889, 977, 991, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "j": [0, 1, 11, 17, 37, 38, 40, 43, 61, 70, 79, 80, 81, 111, 112, 115, 116, 127, 153, 165, 171, 212, 224, 238, 246, 260, 261, 266, 272, 285, 291, 294, 307, 318, 356, 363, 370, 371, 373, 380, 382, 388, 400, 401, 403, 405, 407, 408, 410, 411, 413, 414, 431, 434, 438, 440, 447, 448, 463, 468, 492, 507, 510, 511, 512, 514, 522, 525, 528, 530, 531, 532, 534, 535, 541, 553, 554, 587, 588, 626, 627, 631, 638, 639, 642, 643, 660, 661, 663, 674, 682, 683, 684, 686, 687, 688, 690, 699, 702, 704, 708, 710, 712, 715, 716, 717, 719, 748, 749, 751, 752, 767, 771, 781, 782, 783, 784, 822, 823, 830, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 864, 873, 901, 902, 970, 971, 975, 977, 978, 979, 981, 982, 983, 984, 985, 987, 988, 989, 991, 993, 995, 996, 997, 999, 1016, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "fan": [0, 1, 363, 391, 996, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "olivi": [0, 1, 14, 17, 37, 48, 61, 189, 200, 218, 222, 262, 264, 347, 348, 349, 391, 889, 994, 1000, 1002, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "grisel": [0, 1, 14, 17, 37, 48, 61, 189, 200, 218, 222, 262, 264, 347, 348, 349, 391, 1000, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "yaroslav": [0, 1, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1038], "halchenko": [0, 1, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1038], "tim": [0, 1, 117, 131, 1022, 1027, 1028, 1031, 1032, 1033, 1035, 1037, 1038], "head": [0, 1, 26, 71, 117, 131, 157, 170, 188, 189, 218, 243, 251, 309, 313, 318, 376, 384, 408, 1005, 1027, 1028, 1037, 1038], "nicola": [0, 1, 149, 307, 652, 977, 994, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "hug": [0, 1, 149, 307, 999, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "adrin": [0, 1, 65, 343, 391, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "jalali": [0, 1, 65, 343, 391, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "julien": [0, 1, 652, 977, 1005, 1022, 1025, 1029, 1030, 1034, 1035, 1036, 1037, 1038], "jerphanion": [0, 1, 1034, 1035, 1036, 1037, 1038], "guillaum": [0, 1, 5, 7, 72, 75, 100, 132, 152, 157, 158, 159, 161, 188, 189, 202, 222, 303, 1005, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "lemaitr": [0, 1, 5, 7, 72, 75, 100, 132, 152, 157, 158, 159, 161, 188, 189, 202, 222, 303, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "christian": [0, 1, 19, 200, 201, 202, 218, 347, 348, 371, 1005, 1016, 1022, 1023, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "lorentzen": [0, 1, 200, 201, 202, 218, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "jan": [0, 1, 24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 201, 235, 872, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1034, 1038], "hendrik": [0, 1, 24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235, 1022, 1025, 1026, 1027, 1028], "metzen": [0, 1, 24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235, 1022, 1025, 1026, 1027, 1028], "andrea": [0, 1, 31, 74, 100, 116, 191, 234, 304, 305, 324, 342, 343, 391, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "mueller": [0, 1, 74, 100, 116, 191, 234, 324, 342, 343, 1005, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "vlad": [0, 1, 95, 237, 300, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031], "nicula": [0, 1, 95, 237, 300, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031], "joel": [0, 1, 72, 391, 411, 529, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "nothman": [0, 1, 72, 391, 411, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "hanmin": [0, 1, 304, 1029, 1030, 1031, 1032, 1033], "qin": [0, 1, 304, 373, 411, 1029, 1030, 1031, 1032, 1033], "omar": [0, 1, 1032, 1037, 1038], "salman": [0, 1, 1037, 1038], "bertrand": [0, 1, 1022, 1028, 1029, 1034, 1035], "thirion": [0, 1, 1022, 1028, 1029, 1035], "tom": [0, 1, 192, 208, 281, 283, 305, 306, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "dupr\u00e9": [0, 1, 305, 306, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "la": [0, 1, 192, 208, 281, 283, 305, 306, 309, 373, 1005, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "tour": [0, 1, 192, 208, 281, 283, 305, 306, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "nell": [0, 1, 39, 224, 232, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1034], "roman": [0, 1, 200, 218, 621, 907, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "yurchak": [0, 1, 200, 218, 411, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "meekail": [0, 1, 1036, 1037, 1038], "zain": [0, 1, 1036, 1037, 1038], "pleas": [0, 12, 17, 26, 71, 72, 111, 117, 119, 120, 126, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 204, 230, 231, 232, 234, 236, 239, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 281, 291, 300, 309, 313, 314, 315, 316, 317, 318, 319, 324, 338, 356, 363, 370, 371, 374, 376, 377, 378, 380, 384, 388, 389, 390, 393, 397, 399, 402, 403, 410, 411, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 490, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 621, 622, 623, 624, 625, 626, 627, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 882, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 981, 985, 991, 995, 996, 1001, 1002, 1004, 1007, 1014, 1016, 1022, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "do": [0, 4, 10, 25, 42, 55, 61, 67, 74, 90, 99, 101, 102, 105, 116, 119, 121, 123, 125, 126, 132, 139, 146, 157, 164, 170, 171, 172, 197, 200, 204, 218, 221, 223, 236, 237, 239, 252, 256, 259, 262, 264, 279, 281, 283, 287, 316, 327, 331, 334, 338, 339, 342, 347, 348, 349, 356, 358, 362, 363, 364, 371, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 390, 391, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 444, 455, 497, 530, 532, 536, 538, 546, 549, 575, 576, 582, 583, 585, 626, 627, 639, 640, 646, 649, 650, 653, 660, 662, 670, 730, 756, 771, 775, 807, 810, 825, 826, 830, 857, 858, 860, 867, 871, 873, 878, 879, 881, 882, 883, 884, 901, 902, 903, 904, 912, 955, 970, 973, 975, 977, 978, 981, 982, 984, 985, 989, 991, 996, 997, 1001, 1002, 1005, 1007, 1014, 1015, 1016, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "email": [0, 347, 376, 388, 411, 828, 983, 1005], "directli": [0, 6, 19, 27, 45, 46, 56, 71, 117, 149, 160, 184, 188, 200, 206, 218, 230, 266, 300, 303, 317, 349, 358, 362, 374, 376, 377, 378, 380, 382, 389, 390, 391, 399, 400, 401, 403, 404, 405, 406, 407, 411, 413, 436, 446, 456, 458, 463, 468, 521, 561, 562, 563, 564, 591, 605, 614, 626, 637, 640, 641, 646, 647, 654, 655, 656, 657, 658, 671, 675, 678, 684, 767, 771, 774, 783, 784, 790, 793, 794, 804, 838, 852, 853, 854, 860, 870, 872, 875, 882, 949, 970, 977, 979, 984, 986, 988, 991, 996, 997, 1002, 1008, 1011, 1012, 1022, 1030, 1031, 1033, 1034, 1035, 1038], "ask": [0, 164, 165, 261, 365, 375, 376, 380, 381, 384, 390, 391, 412, 835, 836, 837, 839, 841, 843, 844, 845, 999, 1004, 1038], "assist": [0, 376, 388, 991, 1005], "report": [0, 4, 8, 32, 70, 75, 146, 160, 188, 259, 269, 313, 322, 358, 371, 375, 377, 378, 379, 382, 384, 388, 390, 393, 397, 403, 407, 605, 643, 652, 658, 679, 680, 694, 707, 722, 723, 731, 776, 777, 780, 822, 831, 850, 851, 888, 906, 924, 977, 984, 1001, 1002, 1004, 1023, 1026, 1029, 1030, 1032, 1033, 1035, 1037, 1038], "issu": [0, 4, 25, 79, 86, 200, 218, 266, 310, 363, 365, 370, 379, 380, 381, 384, 385, 388, 390, 391, 392, 393, 394, 397, 399, 403, 405, 406, 411, 443, 446, 456, 467, 476, 477, 478, 528, 533, 537, 567, 579, 580, 582, 583, 585, 605, 621, 685, 689, 762, 864, 869, 881, 920, 970, 971, 978, 984, 989, 991, 996, 1001, 1002, 1004, 1015, 1016, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037], "instead": [0, 4, 5, 6, 20, 34, 48, 53, 55, 56, 57, 71, 100, 115, 120, 129, 146, 149, 152, 200, 202, 215, 218, 225, 239, 252, 257, 258, 262, 263, 279, 286, 303, 313, 314, 315, 316, 317, 334, 336, 338, 347, 349, 356, 358, 362, 363, 370, 371, 374, 375, 376, 377, 378, 380, 381, 384, 385, 388, 389, 390, 397, 399, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 426, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 450, 453, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 503, 504, 527, 528, 529, 531, 532, 533, 534, 535, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 588, 601, 602, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 624, 626, 629, 632, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 684, 688, 701, 739, 767, 771, 772, 773, 776, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 802, 804, 808, 809, 810, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 854, 855, 856, 858, 859, 860, 865, 866, 871, 872, 873, 883, 884, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 919, 925, 930, 949, 956, 970, 971, 973, 977, 978, 980, 981, 982, 985, 986, 991, 995, 996, 997, 1001, 1004, 1012, 1014, 1016, 1019, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "see": [0, 4, 5, 7, 20, 24, 25, 27, 37, 44, 49, 50, 53, 55, 57, 58, 62, 64, 65, 67, 69, 80, 86, 89, 90, 95, 100, 102, 106, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 126, 129, 132, 138, 145, 146, 147, 149, 152, 157, 158, 159, 164, 167, 170, 171, 173, 176, 179, 180, 181, 184, 191, 201, 202, 203, 204, 206, 217, 218, 221, 223, 231, 233, 236, 239, 240, 241, 243, 247, 248, 249, 255, 256, 258, 260, 261, 262, 263, 264, 268, 270, 271, 272, 275, 276, 281, 287, 288, 290, 294, 303, 309, 310, 313, 314, 315, 316, 317, 318, 319, 324, 334, 338, 342, 347, 348, 349, 352, 353, 354, 355, 358, 362, 363, 364, 368, 369, 370, 371, 373, 374, 375, 376, 378, 380, 382, 383, 384, 388, 389, 390, 393, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 427, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 482, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 603, 604, 605, 608, 613, 616, 617, 621, 622, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 695, 700, 702, 705, 707, 736, 756, 767, 771, 772, 773, 774, 781, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 929, 930, 950, 952, 955, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1002, 1005, 1007, 1009, 1014, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "what": [0, 4, 9, 12, 40, 45, 52, 53, 86, 96, 100, 121, 169, 170, 189, 206, 208, 216, 231, 236, 243, 299, 347, 349, 352, 358, 363, 371, 376, 377, 378, 380, 382, 384, 389, 390, 391, 392, 394, 403, 409, 410, 411, 497, 530, 582, 583, 585, 640, 646, 690, 878, 879, 881, 882, 883, 884, 901, 902, 903, 904, 980, 981, 982, 984, 997, 1002, 1004, 1007, 1022, 1029], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 55, 61, 70, 71, 72, 73, 78, 85, 95, 99, 103, 104, 105, 115, 118, 122, 123, 124, 125, 126, 132, 135, 149, 152, 153, 158, 164, 170, 179, 184, 188, 189, 196, 214, 215, 216, 221, 224, 229, 234, 235, 239, 248, 252, 255, 259, 260, 261, 262, 265, 268, 269, 272, 273, 275, 279, 285, 290, 304, 309, 315, 316, 334, 337, 338, 347, 348, 349, 355, 362, 363, 365, 370, 373, 375, 376, 379, 382, 389, 390, 393, 394, 400, 401, 403, 407, 408, 410, 411, 412, 413, 426, 437, 440, 441, 443, 445, 446, 447, 453, 456, 459, 466, 476, 477, 478, 532, 539, 540, 546, 548, 550, 551, 552, 553, 554, 556, 558, 559, 560, 562, 564, 587, 588, 591, 596, 604, 605, 629, 631, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 682, 683, 684, 687, 688, 697, 702, 713, 714, 715, 716, 717, 721, 722, 732, 733, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 776, 777, 778, 780, 783, 784, 785, 787, 788, 789, 790, 793, 794, 804, 816, 818, 821, 826, 827, 836, 844, 850, 851, 894, 896, 899, 901, 902, 903, 904, 970, 975, 976, 977, 978, 981, 984, 985, 987, 995, 997, 1001, 1002, 1005, 1007, 1012, 1016, 1022, 1025, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "wai": [0, 4, 17, 27, 50, 60, 71, 74, 117, 124, 128, 130, 149, 159, 170, 172, 173, 201, 204, 205, 215, 231, 232, 235, 236, 239, 240, 256, 261, 268, 270, 303, 304, 316, 318, 319, 358, 362, 363, 364, 370, 372, 374, 375, 378, 379, 384, 385, 390, 391, 393, 394, 397, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 418, 437, 438, 445, 446, 447, 453, 454, 456, 457, 463, 490, 549, 550, 557, 566, 583, 593, 594, 605, 626, 660, 661, 670, 671, 672, 693, 698, 700, 711, 729, 730, 747, 748, 750, 756, 767, 771, 781, 786, 814, 822, 839, 860, 866, 871, 877, 903, 904, 952, 955, 970, 971, 975, 976, 977, 978, 979, 980, 981, 982, 984, 986, 987, 988, 989, 991, 993, 995, 996, 997, 1001, 1002, 1004, 1005, 1007, 1015, 1016, 1022, 1024, 1030, 1035, 1036], "question": [0, 138, 169, 261, 342, 365, 375, 376, 381, 384, 407, 410, 822, 895, 898, 977, 980, 981, 987, 999, 1005], "faq": [0, 384, 407, 686, 978, 991], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 57, 60, 69, 70, 71, 74, 78, 80, 86, 101, 105, 112, 113, 116, 120, 121, 122, 123, 125, 126, 130, 132, 146, 157, 159, 167, 170, 171, 172, 173, 176, 181, 189, 190, 196, 201, 202, 203, 204, 207, 208, 214, 218, 225, 226, 231, 234, 236, 238, 239, 240, 242, 252, 256, 257, 259, 261, 262, 263, 268, 270, 271, 273, 274, 275, 281, 283, 284, 285, 287, 288, 299, 308, 310, 314, 315, 316, 319, 331, 332, 334, 337, 338, 342, 347, 348, 352, 356, 362, 363, 364, 365, 371, 374, 375, 377, 378, 379, 381, 384, 389, 390, 391, 394, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 417, 427, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 498, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 616, 617, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 698, 714, 750, 783, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 971, 975, 976, 977, 978, 980, 981, 987, 988, 989, 991, 993, 994, 996, 997, 1000, 1002, 1004, 1005, 1007, 1009, 1011, 1016, 1018, 1022, 1024, 1027, 1033, 1036, 1037, 1038], "you": [0, 14, 16, 20, 24, 71, 90, 120, 121, 124, 126, 146, 149, 165, 171, 188, 201, 202, 204, 231, 236, 243, 249, 256, 261, 262, 268, 276, 287, 313, 314, 317, 319, 323, 326, 347, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 389, 390, 393, 394, 397, 399, 401, 402, 403, 404, 405, 407, 410, 411, 412, 414, 415, 420, 431, 437, 438, 440, 441, 443, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 490, 494, 497, 498, 503, 504, 526, 527, 528, 530, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 573, 574, 575, 576, 582, 583, 584, 585, 588, 601, 602, 604, 605, 621, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 684, 693, 694, 778, 789, 790, 791, 792, 793, 794, 795, 797, 799, 804, 805, 806, 807, 808, 809, 810, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 843, 844, 850, 851, 852, 853, 856, 857, 858, 859, 860, 865, 866, 867, 872, 873, 878, 879, 881, 882, 883, 884, 886, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 930, 947, 949, 970, 971, 976, 977, 981, 982, 985, 987, 988, 991, 992, 995, 996, 997, 1000, 1001, 1004, 1005, 1007, 1008, 1011, 1014, 1016, 1022, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 20, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 71, 72, 73, 78, 79, 80, 81, 82, 86, 90, 96, 98, 99, 100, 101, 103, 105, 106, 109, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 144, 145, 146, 148, 149, 152, 157, 158, 159, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 184, 185, 188, 189, 191, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 208, 216, 217, 218, 221, 222, 223, 229, 230, 231, 232, 233, 235, 236, 239, 240, 243, 246, 247, 248, 249, 251, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 268, 270, 272, 273, 275, 276, 279, 281, 283, 285, 286, 287, 288, 290, 298, 299, 300, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 323, 324, 326, 327, 331, 332, 334, 337, 338, 342, 347, 348, 349, 354, 355, 356, 358, 362, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 426, 428, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 466, 476, 477, 478, 481, 490, 493, 497, 502, 503, 506, 515, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 573, 574, 575, 576, 577, 578, 582, 583, 585, 586, 588, 591, 596, 597, 598, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 626, 628, 629, 632, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 681, 683, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 698, 701, 703, 705, 706, 712, 714, 715, 716, 717, 719, 720, 722, 723, 725, 726, 730, 731, 732, 733, 735, 736, 739, 745, 748, 749, 750, 751, 752, 756, 772, 773, 775, 776, 777, 778, 780, 781, 782, 785, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 850, 851, 852, 853, 856, 857, 858, 860, 861, 862, 866, 867, 868, 871, 872, 873, 878, 885, 886, 891, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 905, 906, 909, 911, 913, 917, 919, 924, 929, 930, 936, 941, 944, 947, 949, 951, 952, 955, 962, 965, 966, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "contribut": [0, 13, 20, 126, 157, 184, 204, 270, 308, 365, 373, 374, 378, 379, 380, 384, 390, 391, 393, 408, 409, 410, 441, 443, 547, 548, 553, 554, 719, 722, 749, 975, 981, 984, 989, 996, 999, 1001, 1002, 1005, 1014, 1022, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "help": [0, 4, 9, 11, 16, 55, 70, 74, 100, 106, 171, 184, 218, 221, 262, 264, 300, 331, 334, 348, 349, 358, 362, 363, 374, 377, 378, 379, 380, 381, 382, 384, 385, 390, 391, 392, 397, 403, 404, 407, 411, 413, 427, 530, 571, 621, 644, 648, 659, 679, 680, 686, 708, 829, 901, 902, 903, 904, 971, 975, 976, 978, 980, 981, 983, 985, 991, 992, 997, 1000, 1001, 1002, 1004, 1005, 1016, 1028, 1029, 1030, 1033, 1036], "arturo": [0, 37, 57, 118, 179, 184, 239, 262, 264, 308, 347, 348, 349, 387, 1036, 1037, 1038], "amor": [0, 37, 57, 118, 179, 184, 239, 262, 264, 308, 347, 348, 349, 387, 1036, 1037, 1038], "luci": [0, 267, 366, 387, 1033, 1034, 1035, 1036, 1037, 1038], "liu": [0, 267, 366, 387, 557, 719, 749, 981, 987, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038], "activ": [0, 167, 208, 246, 252, 262, 321, 328, 349, 370, 371, 374, 376, 377, 382, 384, 388, 390, 391, 393, 404, 490, 496, 520, 626, 629, 631, 644, 645, 647, 648, 649, 657, 658, 659, 676, 677, 678, 679, 680, 707, 712, 788, 849, 850, 851, 889, 947, 977, 978, 979, 980, 984, 985, 986, 994], "who": [0, 70, 363, 365, 371, 376, 383, 391, 393, 835, 836, 837, 839, 841, 843, 844, 845, 999, 1001, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "also": [0, 4, 7, 11, 17, 19, 20, 24, 25, 26, 27, 32, 46, 48, 53, 57, 58, 60, 64, 70, 71, 78, 80, 85, 86, 95, 103, 105, 112, 115, 118, 120, 122, 124, 125, 126, 130, 132, 145, 146, 147, 149, 152, 154, 157, 165, 170, 171, 172, 173, 176, 180, 181, 183, 189, 192, 193, 196, 200, 201, 202, 204, 205, 209, 217, 218, 221, 232, 234, 236, 239, 240, 252, 259, 261, 262, 263, 264, 267, 268, 270, 271, 272, 281, 289, 292, 294, 297, 303, 304, 305, 307, 308, 313, 314, 315, 316, 327, 330, 331, 332, 334, 336, 338, 347, 348, 349, 352, 353, 356, 358, 362, 363, 364, 369, 370, 371, 373, 374, 375, 376, 378, 379, 382, 384, 385, 388, 389, 390, 391, 393, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 431, 432, 433, 435, 436, 439, 440, 441, 442, 444, 446, 456, 457, 459, 461, 476, 478, 486, 490, 492, 497, 502, 526, 527, 529, 530, 535, 540, 543, 545, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 604, 605, 616, 626, 627, 629, 637, 638, 639, 640, 641, 644, 646, 647, 648, 650, 652, 653, 654, 655, 656, 657, 666, 670, 672, 675, 678, 681, 685, 688, 689, 693, 704, 707, 716, 722, 723, 731, 736, 756, 772, 773, 776, 777, 780, 788, 789, 790, 793, 794, 804, 807, 810, 815, 816, 817, 818, 819, 820, 822, 832, 835, 836, 837, 839, 840, 841, 843, 844, 845, 849, 850, 851, 853, 855, 856, 861, 862, 866, 870, 873, 878, 882, 895, 898, 901, 902, 903, 904, 913, 932, 945, 949, 970, 971, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 992, 994, 995, 996, 997, 1001, 1002, 1004, 1005, 1007, 1012, 1014, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "triag": [0, 365, 376, 379, 391], "pr": [0, 134, 363, 376, 379, 384, 411, 734, 981, 1032, 1034], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 65, 70, 71, 72, 73, 74, 75, 79, 81, 85, 86, 88, 89, 90, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 146, 147, 149, 153, 154, 155, 156, 157, 160, 164, 165, 169, 170, 171, 172, 173, 176, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 252, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 319, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 362, 363, 365, 368, 369, 371, 373, 377, 378, 379, 380, 381, 382, 384, 385, 388, 389, 397, 400, 401, 403, 407, 409, 411, 412, 413, 415, 419, 424, 426, 431, 434, 437, 440, 441, 443, 446, 448, 452, 453, 454, 456, 458, 459, 461, 463, 466, 468, 476, 477, 478, 482, 485, 486, 489, 490, 491, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 532, 534, 535, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 576, 577, 578, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 604, 605, 608, 609, 612, 613, 614, 616, 617, 621, 622, 623, 624, 626, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 679, 680, 683, 684, 685, 686, 687, 688, 689, 695, 698, 700, 711, 715, 716, 717, 730, 736, 750, 771, 774, 778, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 823, 824, 825, 826, 827, 833, 834, 836, 838, 839, 841, 842, 843, 844, 845, 849, 850, 851, 853, 856, 857, 858, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 893, 894, 895, 896, 898, 899, 902, 904, 905, 906, 907, 924, 925, 929, 930, 933, 934, 946, 950, 952, 955, 970, 971, 973, 975, 976, 978, 980, 981, 982, 984, 986, 987, 988, 989, 993, 994, 996, 997, 999, 1001, 1003, 1004, 1005, 1007, 1010, 1014, 1015, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038], "juan": [0, 366, 1022, 1033, 1034, 1035, 1036, 1037], "carlo": [0, 234, 366, 410, 413, 605, 635, 636, 973, 986, 1022, 1033, 1034, 1035, 1036, 1037, 1038], "alfaro": [0, 366, 1033, 1034, 1035, 1036, 1037], "jim\u00e9nez": [0, 366, 1030, 1033, 1034, 1035, 1036, 1037], "maxwel": [0, 366, 1032, 1035, 1036, 1037, 1038], "martin": [0, 366, 715, 716, 717, 977, 981, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "loyola": [0, 366, 1035, 1036], "sylvain": [0, 366, 1026, 1031, 1032, 1033, 1034, 1035, 1036], "mari\u00e9": [0, 366, 1031, 1032, 1033, 1034, 1035, 1036], "norbert": [0, 366, 1024, 1034, 1035, 1036], "prein": [0, 366, 1034, 1035, 1036], "reshama": [0, 360, 366, 1030, 1031, 1033, 1034, 1035, 1036, 1037], "shaikh": [0, 360, 366, 1030, 1031, 1033, 1034, 1035, 1036, 1037], "albert": [0, 229, 366, 1029, 1030, 1031, 1034, 1035], "maren": [0, 366, 1033, 1034, 1035, 1036, 1037, 1038], "westermann": [0, 366, 1033, 1034, 1035, 1036, 1037, 1038], "around": [0, 4, 26, 37, 52, 85, 112, 115, 125, 158, 171, 176, 236, 239, 264, 300, 322, 324, 325, 334, 337, 338, 347, 348, 349, 358, 371, 373, 376, 382, 388, 394, 403, 407, 408, 411, 465, 466, 509, 538, 614, 634, 643, 698, 788, 796, 812, 839, 841, 843, 844, 845, 873, 977, 978, 980, 981, 987, 991, 995, 1001, 1002, 1005, 1014, 1016, 1026, 1027], "lauren": [0, 359, 686, 690, 978, 1034, 1037], "burk": [0, 359, 1037], "francoisgoupil": [0, 359, 1036], "longer": [0, 4, 53, 115, 171, 185, 299, 316, 376, 378, 403, 407, 410, 411, 443, 530, 557, 976, 980, 981, 983, 986, 996, 1005, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "mathieu": [0, 2, 24, 48, 100, 191, 201, 222, 237, 262, 347, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1035], "blondel": [0, 2, 24, 48, 100, 191, 201, 222, 237, 262, 347, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1035], "lar": [0, 2, 14, 98, 149, 167, 178, 189, 219, 347, 348, 349, 373, 465, 466, 472, 495, 525, 531, 533, 536, 537, 539, 540, 542, 645, 646, 647, 648, 649, 650, 657, 658, 659, 672, 676, 677, 678, 679, 680, 1003, 1014, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1035], "buitinck": [0, 2, 14, 347, 348, 349, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "noel": [0, 2, 111, 112, 113, 114, 1022, 1023, 1024, 1025, 1026, 1034], "daw": [0, 2, 111, 112, 113, 114, 1022, 1023, 1024, 1025, 1026], "dubourg": [0, 2, 155, 159, 1005, 1022, 1026], "edouard": [0, 2, 1022], "duchesnai": [0, 2, 1022], "alexand": [0, 2, 403, 408, 529, 859, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1036], "fabisch": [0, 2, 1024, 1025, 1026, 1028], "virgil": [0, 2, 9, 1022, 1023, 1025], "fritsch": [0, 2, 9, 1022, 1023, 1025], "satrajit": [0, 2, 1022, 1023], "ghosh": [0, 2, 403, 1022, 1023], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1022, 1025, 1030, 1031, 1032, 1033, 1036], "gorgolewski": [0, 2, 1022, 1025], "jaqu": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 183, 196, 197, 198, 223, 339, 342, 1022, 1023, 1024, 1025], "grobler": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 183, 196, 197, 198, 223, 339, 342, 1022, 1023, 1024, 1025], "brian": [0, 2, 46, 702, 981, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1035, 1036], "holt": [0, 2, 1022], "arnaud": [0, 2, 1023, 1024, 1025, 1026, 1027, 1028], "joli": [0, 2, 1023, 1024, 1025, 1026, 1027, 1028], "thoui": [0, 2, 1022], "rai": [0, 2, 949, 981, 1022, 1032, 1034, 1035], "jone": [0, 2, 371, 1022], "kyle": [0, 2, 99, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034], "kastner": [0, 2, 99, 1024, 1025, 1026, 1033, 1034], "manoj": [0, 2, 42, 149, 182, 1025, 1026, 1027, 1028, 1029], "kumar": [0, 2, 42, 149, 182, 371, 403, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "robert": [0, 2, 48, 72, 149, 188, 373, 408, 522, 529, 622, 650, 715, 716, 717, 728, 859, 971, 977, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1037], "layton": [0, 2, 48, 1022, 1023, 1024, 1025, 1027], "wei": [0, 2, 995, 1022, 1023, 1026, 1027, 1028, 1029, 1031, 1035, 1038], "li": [0, 2, 325, 371, 633, 636, 690, 719, 749, 886, 970, 973, 981, 984, 991, 993, 996, 1022, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "paolo": [0, 2, 1022, 1026, 1032], "losi": [0, 2, 1022], "gill": [0, 2, 115, 116, 1022, 1023, 1024, 1025, 1026, 1027, 1028], "loupp": [0, 2, 115, 116, 410, 549, 550, 1022, 1023, 1024, 1025, 1026, 1027, 1028], "jarrod": [0, 2, 1031, 1038], "millman": [0, 2, 1031, 1038], "passo": [0, 2, 1022, 1023], "peter": [0, 2, 11, 16, 63, 111, 124, 126, 127, 262, 347, 348, 403, 442, 444, 451, 643, 783, 784, 977, 981, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1037, 1038], "prettenhof": [0, 2, 11, 16, 111, 124, 126, 127, 262, 347, 348, 1022, 1023, 1024, 1025, 1026, 1027], "venkat": [0, 2], "raghav": [0, 2, 123, 265, 303, 1026, 1027, 1028, 1029, 1030, 1034], "rajagopalan": [0, 2, 1030, 1034], "jacob": [0, 2, 1027, 1028, 1029], "schreiber": [0, 2, 1027, 1028, 1029], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1022, 1023], "jake": [0, 2, 11, 159, 201, 221, 249, 286, 294, 1000, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1034, 1036], "vanderpla": [0, 2, 11, 159, 201, 221, 249, 286, 294, 1000, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "ward": [0, 2, 36, 39, 44, 52, 54, 56, 62, 68, 167, 173, 411, 435, 439, 457, 524, 846, 1022, 1025, 1027], "farlei": [0, 2, 1022], "ron": [0, 2, 248, 1022], "weiss": [0, 2, 248, 403, 685, 1022], "respons": [0, 149, 171, 196, 200, 203, 236, 271, 347, 373, 382, 390, 402, 403, 404, 410, 440, 458, 476, 477, 478, 625, 626, 627, 668, 669, 692, 694, 696, 788, 789, 982, 988, 999, 1007], "chiara": [0, 367, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "marmo": [0, 367, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "If": [0, 4, 11, 16, 27, 32, 42, 49, 55, 71, 82, 98, 109, 120, 125, 132, 161, 165, 170, 181, 200, 215, 217, 236, 239, 261, 268, 276, 286, 294, 303, 308, 309, 334, 338, 342, 343, 347, 348, 349, 356, 358, 362, 363, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 393, 394, 397, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 424, 427, 428, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 508, 509, 513, 516, 517, 518, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 705, 706, 707, 708, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 729, 731, 734, 735, 738, 739, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 754, 756, 757, 759, 760, 761, 762, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 796, 802, 804, 807, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 916, 917, 918, 919, 922, 928, 930, 932, 934, 940, 944, 947, 949, 950, 952, 955, 956, 962, 965, 966, 967, 968, 970, 971, 973, 975, 976, 977, 978, 979, 981, 984, 985, 987, 988, 991, 993, 995, 996, 997, 998, 1001, 1002, 1004, 1007, 1008, 1014, 1015, 1016, 1022, 1025, 1026, 1027, 1028, 1031, 1032, 1034, 1035, 1036, 1038], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 86, 90, 91, 92, 94, 97, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 138, 139, 140, 141, 145, 146, 148, 151, 152, 153, 158, 159, 160, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 193, 196, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 212, 215, 217, 218, 219, 221, 222, 223, 224, 226, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 322, 323, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 345, 346, 349, 350, 352, 354, 355, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 383, 385, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 409, 413, 414, 415, 416, 419, 421, 422, 424, 425, 433, 450, 451, 453, 455, 457, 465, 472, 474, 475, 479, 487, 497, 502, 503, 510, 525, 539, 540, 541, 542, 549, 566, 568, 569, 571, 572, 577, 579, 580, 586, 589, 590, 592, 595, 597, 603, 610, 614, 615, 618, 623, 630, 632, 636, 644, 645, 648, 654, 655, 657, 661, 669, 677, 679, 680, 681, 688, 689, 690, 693, 705, 708, 709, 710, 715, 716, 717, 719, 721, 723, 725, 729, 732, 736, 739, 744, 749, 751, 752, 756, 757, 759, 760, 761, 762, 764, 767, 768, 769, 770, 773, 774, 776, 785, 797, 798, 799, 800, 801, 802, 803, 813, 821, 823, 825, 827, 829, 833, 834, 843, 844, 845, 847, 855, 856, 859, 861, 864, 875, 876, 878, 880, 881, 883, 884, 885, 888, 892, 894, 903, 904, 905, 906, 909, 912, 913, 914, 919, 920, 929, 930, 937, 944, 948, 949, 950, 952, 953, 957, 958, 959, 963, 964, 970, 971, 973, 974, 976, 979, 980, 982, 983, 984, 986, 987, 988, 989, 991, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "scientif": [0, 32, 138, 139, 140, 141, 234, 365, 370, 374, 388, 393, 403, 446, 456, 495, 1005, 1008], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 58, 62, 64, 65, 66, 70, 71, 72, 73, 75, 78, 80, 81, 82, 86, 89, 90, 92, 95, 96, 97, 98, 100, 103, 104, 106, 111, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 132, 134, 135, 138, 144, 145, 146, 148, 149, 152, 154, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 183, 184, 186, 188, 189, 191, 193, 195, 197, 200, 201, 202, 203, 204, 206, 208, 209, 212, 213, 214, 215, 216, 218, 221, 222, 225, 226, 229, 230, 232, 233, 234, 236, 237, 239, 240, 242, 243, 246, 247, 248, 249, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 279, 281, 283, 284, 286, 289, 290, 291, 292, 294, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 327, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 388, 389, 390, 391, 394, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 444, 463, 464, 465, 466, 467, 468, 469, 470, 495, 517, 525, 526, 528, 531, 543, 555, 556, 557, 563, 564, 576, 577, 583, 605, 611, 621, 626, 627, 632, 634, 645, 649, 652, 653, 660, 662, 667, 668, 669, 670, 671, 686, 705, 712, 714, 719, 739, 749, 757, 774, 796, 812, 814, 835, 836, 837, 839, 841, 842, 843, 844, 845, 856, 865, 866, 867, 873, 878, 879, 881, 882, 883, 884, 886, 889, 893, 897, 945, 947, 970, 971, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1005, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "would": [0, 4, 6, 9, 26, 32, 45, 53, 55, 58, 70, 78, 80, 81, 86, 92, 100, 101, 112, 125, 149, 152, 157, 158, 170, 171, 172, 173, 176, 184, 190, 200, 201, 202, 215, 218, 229, 236, 239, 248, 257, 261, 262, 267, 269, 271, 281, 287, 299, 303, 304, 308, 309, 316, 319, 325, 334, 338, 342, 343, 347, 349, 356, 358, 362, 371, 372, 376, 377, 378, 382, 384, 385, 388, 389, 390, 391, 394, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 426, 440, 459, 462, 476, 477, 478, 483, 526, 528, 530, 535, 538, 546, 548, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 562, 564, 577, 578, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 666, 667, 668, 669, 670, 672, 673, 694, 696, 702, 706, 707, 714, 749, 775, 778, 782, 790, 792, 804, 818, 826, 827, 836, 844, 851, 878, 879, 881, 882, 883, 884, 885, 886, 891, 893, 894, 896, 899, 901, 902, 903, 904, 941, 970, 971, 974, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 991, 996, 1001, 1002, 1005, 1007, 1012, 1014, 1016, 1019, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "appreci": [0, 376], "citat": [0, 370, 373, 388], "paper": [0, 149, 176, 261, 373, 382, 388, 403, 405, 436, 443, 472, 498, 528, 535, 557, 635, 652, 660, 661, 665, 670, 673, 686, 781, 830, 839, 842, 885, 886, 977, 981, 984, 987, 996, 1016, 1022, 1029, 1030], "machin": [0, 4, 6, 8, 9, 27, 63, 118, 145, 146, 149, 152, 157, 168, 172, 174, 212, 242, 261, 264, 267, 296, 301, 303, 308, 310, 315, 318, 330, 335, 338, 342, 347, 349, 362, 363, 365, 369, 370, 371, 373, 374, 376, 379, 382, 383, 388, 389, 390, 392, 397, 401, 403, 407, 408, 410, 411, 413, 431, 433, 442, 465, 466, 472, 496, 498, 504, 510, 511, 512, 524, 526, 528, 535, 538, 549, 550, 551, 552, 553, 554, 558, 559, 560, 587, 588, 604, 605, 608, 613, 616, 628, 632, 633, 635, 637, 638, 639, 644, 645, 648, 649, 650, 651, 652, 653, 670, 676, 677, 686, 702, 707, 718, 728, 734, 736, 778, 781, 788, 818, 819, 833, 834, 839, 842, 849, 850, 851, 853, 871, 873, 879, 893, 894, 895, 896, 898, 899, 903, 904, 949, 970, 971, 973, 974, 977, 978, 979, 981, 982, 984, 987, 988, 989, 991, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1016, 1017, 1018, 1019, 1022, 1024, 1034, 1035, 1036, 1037], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 362, 364, 370, 374, 376, 377, 378, 379, 380, 381, 384, 385, 388, 390, 393, 404, 411, 490, 502, 503, 575, 693, 801, 867, 949, 981, 991, 996, 997, 999, 1002, 1004, 1005, 1007, 1008, 1010, 1016, 1018, 1022, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "et": [0, 11, 78, 79, 111, 112, 127, 188, 294, 373, 400, 403, 405, 408, 410, 411, 412, 445, 492, 513, 514, 522, 529, 535, 538, 557, 676, 677, 713, 714, 828, 830, 850, 851, 886, 929, 930, 977, 978, 981, 987, 991, 993, 996, 997, 1030, 1038], "al": [0, 11, 78, 79, 111, 112, 127, 188, 294, 373, 400, 403, 405, 408, 410, 411, 412, 445, 492, 513, 514, 522, 529, 535, 538, 557, 676, 677, 713, 714, 828, 830, 850, 851, 886, 929, 930, 977, 978, 981, 987, 991, 993, 996, 997, 1030, 1035, 1038], "jmlr": [0, 403, 660, 661, 670, 698, 977, 996], "12": [0, 4, 6, 7, 15, 20, 40, 42, 43, 53, 55, 56, 57, 73, 74, 85, 111, 121, 122, 126, 136, 149, 155, 156, 157, 165, 170, 171, 173, 180, 184, 186, 200, 208, 218, 219, 221, 223, 224, 225, 229, 230, 232, 240, 243, 248, 249, 260, 261, 263, 264, 267, 273, 279, 280, 284, 301, 307, 308, 309, 318, 342, 349, 373, 374, 381, 389, 391, 403, 407, 411, 437, 441, 443, 476, 477, 478, 479, 526, 528, 535, 564, 658, 663, 665, 679, 680, 683, 686, 687, 788, 789, 791, 808, 811, 824, 845, 861, 970, 971, 977, 979, 982, 991, 995, 996, 999, 1007, 1012, 1020, 1023, 1025, 1029, 1030, 1032, 1033, 1038], "pp": [0, 63, 149, 260, 373, 403, 405, 411, 414, 415, 438, 442, 446, 456, 505, 527, 528, 535, 584, 629, 637, 658, 679, 680, 714, 719, 723, 733, 749, 762, 776, 828, 830, 832, 849, 869, 881, 974, 981, 983, 984, 994], "2825": 0, "2830": 0, "2011": [0, 47, 171, 222, 382, 408, 411, 529, 532, 534, 535, 541, 584, 621, 632, 652, 723, 971, 985, 995, 1000, 1022], "bibtex": 0, "entri": [0, 16, 71, 75, 132, 165, 170, 171, 257, 313, 348, 358, 380, 382, 384, 389, 390, 400, 401, 403, 408, 410, 413, 457, 466, 525, 526, 531, 539, 540, 555, 556, 582, 585, 588, 605, 614, 626, 632, 634, 641, 645, 647, 649, 650, 653, 655, 657, 658, 659, 667, 669, 676, 677, 679, 680, 693, 698, 701, 703, 706, 709, 710, 712, 719, 722, 723, 724, 727, 728, 731, 736, 749, 751, 752, 776, 778, 781, 782, 783, 784, 803, 817, 833, 834, 841, 842, 843, 844, 845, 864, 870, 882, 967, 970, 971, 977, 981, 984, 991, 996, 1002, 1007, 1029, 1032, 1033, 1035], "articl": [0, 17, 70, 347, 371, 375, 376, 384, 407, 416, 469, 699, 977, 981, 1016, 1035], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 78, 79, 81, 82, 85, 86, 90, 91, 95, 96, 97, 98, 99, 103, 104, 105, 113, 114, 115, 118, 120, 121, 122, 125, 126, 128, 131, 134, 135, 141, 144, 145, 147, 148, 149, 152, 153, 154, 156, 157, 158, 159, 160, 170, 179, 180, 182, 184, 185, 187, 188, 189, 192, 193, 199, 200, 202, 204, 205, 206, 208, 209, 214, 217, 218, 221, 222, 223, 229, 233, 234, 235, 237, 238, 239, 246, 247, 248, 249, 250, 251, 252, 255, 256, 260, 261, 262, 264, 265, 266, 270, 271, 275, 283, 284, 287, 288, 289, 290, 292, 293, 294, 303, 307, 308, 309, 310, 324, 327, 330, 331, 332, 333, 334, 337, 338, 343, 344, 347, 353, 354, 355, 375, 376, 380, 384, 404, 981, 1004, 1012], "p": [0, 11, 13, 24, 26, 27, 41, 61, 80, 81, 85, 92, 103, 124, 145, 149, 155, 176, 212, 217, 218, 221, 223, 233, 249, 261, 267, 268, 294, 370, 371, 373, 374, 381, 384, 400, 401, 403, 405, 406, 408, 410, 412, 413, 414, 416, 436, 438, 440, 441, 444, 451, 463, 465, 468, 469, 472, 492, 522, 528, 532, 534, 535, 541, 543, 544, 545, 547, 549, 550, 551, 552, 553, 555, 558, 559, 560, 584, 586, 587, 588, 589, 590, 592, 593, 594, 598, 599, 600, 601, 602, 603, 609, 610, 621, 634, 637, 682, 684, 686, 688, 693, 699, 709, 717, 734, 745, 779, 781, 792, 798, 799, 800, 803, 818, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 849, 853, 854, 869, 881, 887, 903, 904, 905, 974, 975, 977, 978, 979, 981, 983, 984, 985, 986, 987, 988, 991, 995, 996, 999, 1011, 1014, 1022, 1023, 1025, 1028, 1030, 1037, 1038], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 20, 26, 32, 37, 43, 47, 48, 49, 52, 53, 55, 58, 64, 67, 71, 75, 86, 98, 112, 115, 118, 119, 120, 122, 125, 132, 133, 140, 143, 145, 148, 149, 150, 152, 158, 159, 161, 167, 169, 170, 171, 172, 173, 176, 184, 186, 189, 200, 201, 202, 204, 210, 218, 222, 233, 235, 236, 239, 243, 251, 259, 261, 262, 263, 264, 267, 268, 270, 271, 273, 281, 284, 297, 298, 299, 305, 308, 309, 313, 315, 317, 319, 322, 323, 338, 342, 347, 348, 349, 358, 371, 376, 377, 378, 380, 382, 388, 401, 404, 408, 410, 411, 412, 413, 481, 502, 503, 525, 526, 531, 532, 560, 575, 576, 577, 586, 589, 590, 592, 593, 594, 598, 599, 600, 601, 602, 603, 611, 621, 626, 629, 652, 707, 716, 719, 722, 723, 749, 776, 777, 780, 781, 791, 792, 795, 797, 798, 799, 800, 803, 805, 806, 807, 808, 809, 810, 811, 817, 850, 851, 855, 864, 867, 868, 872, 873, 908, 913, 914, 973, 976, 985, 988, 989, 991, 995, 1024, 1030, 1031, 1032, 1034, 1036], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 55, 65, 70, 73, 82, 86, 103, 112, 115, 116, 124, 125, 132, 139, 152, 153, 154, 155, 157, 159, 160, 161, 165, 169, 182, 185, 200, 201, 202, 204, 218, 222, 226, 235, 236, 246, 261, 265, 266, 272, 279, 287, 303, 308, 325, 341, 342, 349, 358, 362, 368, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 388, 390, 394, 397, 401, 402, 403, 405, 407, 408, 410, 411, 412, 413, 415, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 497, 522, 525, 527, 528, 531, 532, 535, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 583, 584, 585, 587, 588, 591, 598, 604, 605, 611, 616, 617, 624, 627, 628, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 684, 686, 691, 714, 721, 731, 733, 756, 778, 790, 791, 792, 793, 794, 796, 797, 799, 804, 808, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 840, 842, 843, 844, 845, 849, 850, 851, 853, 856, 858, 859, 860, 863, 865, 866, 869, 871, 872, 873, 876, 878, 879, 880, 881, 882, 883, 884, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 929, 930, 941, 949, 970, 971, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 991, 995, 996, 997, 1002, 1004, 1005, 1016, 1022, 1026, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 60, 68, 75, 78, 81, 86, 92, 96, 97, 98, 103, 113, 114, 119, 120, 122, 131, 135, 138, 139, 140, 141, 146, 147, 148, 152, 155, 157, 159, 160, 161, 167, 170, 171, 184, 188, 201, 204, 210, 214, 215, 218, 222, 236, 239, 261, 262, 264, 268, 275, 297, 303, 305, 308, 313, 315, 318, 323, 325, 327, 334, 339, 347, 348, 349, 354, 356, 358, 362, 364, 365, 370, 371, 373, 374, 376, 378, 379, 381, 384, 388, 389, 390, 391, 392, 394, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 426, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 452, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 482, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 504, 505, 506, 507, 508, 514, 516, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 601, 602, 604, 605, 611, 614, 621, 622, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 698, 699, 704, 705, 706, 710, 711, 713, 715, 716, 717, 718, 719, 724, 729, 730, 733, 736, 737, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 757, 759, 760, 767, 768, 769, 770, 771, 774, 781, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 878, 879, 881, 882, 883, 884, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 928, 929, 930, 940, 941, 966, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1007, 1008, 1014, 1015, 1016, 1018, 1022, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 55, 58, 68, 70, 75, 77, 80, 83, 84, 85, 87, 95, 97, 98, 101, 116, 118, 125, 167, 168, 173, 174, 178, 189, 200, 204, 215, 219, 233, 247, 248, 251, 252, 254, 257, 276, 277, 313, 331, 348, 358, 363, 368, 373, 374, 376, 382, 384, 390, 400, 401, 402, 405, 406, 408, 411, 426, 435, 439, 446, 456, 457, 458, 459, 464, 467, 468, 469, 470, 471, 476, 477, 478, 490, 506, 518, 524, 525, 531, 535, 539, 540, 544, 546, 548, 550, 552, 554, 556, 558, 559, 562, 564, 575, 583, 587, 588, 594, 600, 605, 624, 625, 628, 629, 633, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 664, 666, 667, 670, 672, 673, 682, 689, 693, 695, 698, 711, 729, 730, 732, 747, 748, 750, 781, 786, 790, 795, 802, 804, 815, 819, 821, 822, 823, 826, 827, 828, 836, 844, 846, 849, 851, 853, 854, 857, 860, 866, 867, 868, 873, 877, 887, 893, 894, 895, 896, 898, 899, 902, 904, 908, 975, 976, 977, 978, 981, 982, 983, 986, 989, 995, 996, 998, 1018, 1022, 1025, 1026, 1027, 1030, 1032, 1033, 1036, 1037], "b": [0, 8, 9, 10, 24, 26, 59, 65, 80, 101, 103, 114, 115, 121, 125, 126, 135, 138, 139, 153, 154, 155, 160, 165, 182, 184, 185, 200, 201, 206, 218, 237, 239, 260, 264, 266, 271, 275, 279, 316, 325, 358, 371, 373, 376, 380, 381, 382, 400, 401, 403, 406, 407, 408, 411, 431, 476, 494, 535, 540, 560, 582, 583, 584, 585, 601, 602, 604, 605, 622, 640, 641, 642, 643, 652, 663, 666, 668, 670, 674, 681, 682, 699, 713, 723, 724, 783, 784, 801, 802, 840, 866, 867, 868, 869, 872, 873, 881, 908, 930, 931, 944, 971, 973, 977, 978, 979, 981, 984, 986, 991, 995, 996, 1011, 1022, 1030, 1033, 1035, 1036, 1037], "o": [0, 17, 19, 27, 30, 38, 49, 55, 60, 61, 63, 64, 82, 85, 91, 97, 129, 149, 160, 188, 193, 198, 200, 215, 235, 246, 261, 263, 270, 303, 304, 308, 314, 317, 326, 338, 352, 362, 371, 373, 376, 393, 403, 405, 408, 410, 414, 416, 438, 441, 442, 444, 467, 469, 528, 598, 621, 660, 661, 686, 821, 849, 864, 905, 949, 950, 973, 975, 977, 978, 981, 982, 984, 985, 995, 996, 997, 1022, 1025, 1028, 1030, 1031, 1034, 1035, 1037, 1038], "m": [0, 8, 9, 11, 19, 26, 27, 44, 58, 59, 63, 64, 65, 80, 81, 95, 112, 135, 157, 182, 200, 218, 261, 265, 294, 326, 330, 341, 347, 362, 363, 370, 371, 373, 374, 380, 382, 390, 393, 400, 401, 403, 405, 408, 410, 412, 414, 438, 439, 440, 444, 451, 467, 468, 494, 507, 522, 526, 528, 530, 535, 633, 639, 643, 658, 665, 679, 680, 683, 687, 702, 710, 719, 734, 749, 751, 752, 788, 789, 839, 864, 930, 960, 961, 971, 973, 975, 977, 978, 979, 981, 982, 983, 984, 985, 989, 991, 995, 997, 1005, 1030, 1031, 1032, 1033, 1036, 1037, 1038], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 65, 75, 78, 79, 80, 81, 86, 95, 103, 106, 112, 115, 116, 121, 125, 126, 127, 135, 145, 153, 154, 155, 159, 160, 161, 164, 165, 170, 182, 184, 185, 189, 200, 207, 210, 218, 226, 232, 235, 246, 249, 252, 260, 261, 264, 266, 267, 268, 271, 274, 276, 279, 283, 284, 288, 292, 294, 309, 317, 336, 338, 349, 358, 371, 373, 377, 380, 388, 390, 400, 401, 403, 405, 406, 407, 408, 410, 411, 420, 426, 431, 440, 445, 447, 459, 463, 468, 472, 476, 477, 478, 492, 498, 507, 514, 528, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 582, 583, 584, 585, 600, 603, 604, 605, 621, 629, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 679, 680, 686, 690, 710, 715, 716, 717, 721, 723, 774, 778, 781, 790, 804, 807, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 843, 844, 850, 851, 864, 869, 881, 888, 889, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 906, 947, 971, 973, 975, 977, 978, 981, 982, 983, 984, 985, 988, 989, 991, 995, 996, 997, 1001, 1016, 1022, 1026, 1029, 1032, 1033, 1034, 1035, 1037], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 60, 61, 63, 70, 71, 82, 89, 92, 95, 98, 103, 105, 123, 152, 160, 200, 208, 214, 216, 218, 226, 230, 232, 233, 234, 235, 249, 260, 261, 269, 279, 287, 288, 294, 299, 322, 323, 326, 333, 334, 338, 339, 349, 370, 371, 373, 378, 382, 388, 401, 403, 405, 406, 408, 410, 411, 413, 414, 438, 440, 441, 446, 454, 457, 482, 487, 497, 520, 528, 530, 551, 552, 559, 560, 575, 576, 584, 608, 609, 613, 616, 617, 638, 639, 642, 663, 664, 665, 674, 682, 683, 686, 687, 691, 693, 699, 702, 715, 716, 717, 719, 749, 757, 761, 771, 774, 781, 802, 828, 830, 832, 833, 834, 849, 860, 864, 866, 867, 869, 881, 886, 903, 904, 908, 973, 975, 977, 978, 979, 980, 981, 983, 989, 991, 993, 996, 997, 1004, 1012, 1013, 1014, 1025, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038], "perrot": [0, 1022], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 55, 57, 61, 70, 78, 80, 81, 82, 85, 86, 90, 98, 100, 101, 112, 115, 122, 124, 125, 128, 138, 145, 148, 149, 160, 169, 170, 171, 176, 180, 184, 189, 190, 200, 201, 202, 204, 218, 221, 222, 235, 236, 257, 261, 262, 264, 266, 267, 275, 276, 287, 294, 305, 308, 313, 315, 342, 349, 354, 355, 356, 358, 362, 363, 364, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 388, 389, 390, 393, 394, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 431, 433, 435, 437, 438, 439, 441, 443, 444, 448, 457, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 490, 492, 494, 495, 496, 497, 518, 527, 528, 529, 530, 532, 534, 535, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 575, 576, 582, 583, 584, 585, 587, 588, 591, 597, 598, 600, 601, 602, 603, 604, 605, 611, 616, 617, 624, 627, 628, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 681, 682, 684, 686, 688, 691, 693, 695, 698, 699, 702, 703, 721, 722, 723, 724, 731, 734, 735, 748, 756, 760, 778, 781, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 803, 804, 808, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 849, 850, 851, 853, 856, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 888, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 908, 924, 929, 930, 932, 935, 936, 941, 949, 956, 967, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 991, 992, 995, 996, 997, 1002, 1004, 1005, 1014, 1015, 1016, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "journal": [0, 81, 171, 261, 267, 370, 371, 373, 401, 403, 405, 410, 446, 456, 467, 528, 535, 621, 629, 639, 683, 686, 687, 699, 709, 724, 727, 728, 751, 752, 779, 818, 823, 869, 881, 970, 971, 975, 977, 978, 979, 982, 988, 993, 995, 996], "research": [0, 149, 169, 261, 267, 371, 373, 388, 403, 495, 507, 629, 639, 686, 728, 818, 823, 970, 978, 982, 984, 996, 1001, 1002, 1005], "volum": [0, 66, 79, 149, 157, 371, 373, 403, 405, 467, 528, 762, 977, 996, 1005], "page": [0, 12, 17, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 149, 157, 170, 171, 172, 181, 221, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 362, 371, 373, 376, 378, 380, 382, 384, 391, 402, 403, 405, 467, 510, 511, 512, 622, 638, 823, 888, 930, 971, 981, 982, 1007, 1016, 1020, 1022, 1026, 1027], "want": [0, 4, 12, 20, 24, 25, 26, 55, 64, 71, 149, 165, 170, 200, 201, 202, 236, 239, 252, 261, 275, 284, 299, 327, 331, 347, 358, 362, 363, 364, 374, 375, 377, 378, 380, 381, 382, 388, 389, 390, 391, 393, 394, 397, 401, 402, 403, 404, 405, 410, 411, 412, 494, 497, 498, 504, 529, 543, 648, 649, 650, 652, 653, 660, 662, 668, 669, 670, 757, 839, 842, 858, 865, 886, 893, 970, 977, 980, 981, 982, 985, 987, 991, 992, 996, 1001, 1002, 1007, 1015, 1022, 1036], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 55, 65, 66, 78, 80, 82, 86, 90, 91, 92, 100, 109, 112, 118, 121, 125, 138, 149, 152, 157, 159, 170, 171, 173, 176, 179, 189, 213, 217, 218, 223, 229, 236, 238, 239, 241, 243, 246, 251, 252, 260, 264, 266, 268, 270, 281, 283, 287, 288, 305, 316, 325, 331, 338, 344, 347, 348, 352, 356, 358, 363, 364, 369, 370, 371, 372, 376, 377, 378, 380, 381, 384, 388, 389, 390, 391, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 419, 434, 435, 436, 438, 439, 440, 444, 448, 450, 454, 457, 458, 459, 461, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 491, 497, 517, 525, 527, 528, 531, 532, 534, 535, 536, 538, 544, 549, 550, 551, 552, 553, 554, 558, 559, 560, 577, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 638, 639, 665, 666, 668, 679, 680, 681, 682, 686, 690, 693, 702, 718, 722, 723, 729, 730, 734, 771, 774, 776, 788, 789, 790, 814, 821, 822, 824, 835, 836, 837, 839, 840, 841, 843, 844, 845, 852, 853, 857, 862, 865, 866, 868, 885, 886, 889, 893, 894, 901, 903, 913, 914, 919, 925, 949, 951, 970, 976, 977, 978, 980, 981, 982, 983, 984, 987, 988, 989, 994, 995, 996, 997, 1001, 1005, 1007, 1009, 1011, 1014, 1015, 1016, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "api": [0, 12, 50, 108, 167, 228, 230, 236, 240, 244, 281, 348, 349, 364, 365, 369, 370, 376, 377, 379, 380, 385, 386, 388, 389, 391, 393, 397, 408, 410, 411, 417, 420, 421, 422, 425, 427, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 490, 498, 502, 504, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 557, 558, 560, 561, 562, 563, 564, 573, 574, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 652, 671, 682, 683, 684, 685, 686, 696, 788, 789, 793, 794, 796, 812, 819, 837, 839, 841, 842, 845, 849, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 897, 898, 947, 949, 965, 970, 979, 980, 981, 984, 991, 995, 1001, 1002, 1005, 1007, 1011, 1013, 1018, 1019, 1020, 1021, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "design": [0, 13, 20, 80, 112, 132, 155, 169, 170, 181, 251, 303, 309, 356, 364, 370, 376, 381, 388, 389, 390, 391, 392, 403, 410, 412, 509, 522, 626, 627, 642, 659, 663, 670, 674, 679, 790, 808, 809, 828, 830, 971, 977, 978, 981, 982, 991, 1001, 1002, 1005, 1009, 1024, 1031], "mai": [0, 8, 19, 25, 39, 44, 46, 56, 71, 86, 95, 111, 122, 149, 156, 158, 160, 170, 173, 176, 180, 184, 189, 204, 206, 226, 236, 239, 264, 266, 268, 269, 297, 308, 323, 334, 338, 342, 347, 348, 349, 358, 362, 363, 364, 368, 370, 371, 372, 373, 375, 376, 378, 380, 381, 384, 388, 390, 391, 394, 397, 400, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 426, 433, 434, 435, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 453, 456, 459, 463, 466, 476, 477, 478, 481, 482, 483, 490, 502, 503, 509, 528, 529, 532, 534, 538, 541, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 568, 575, 588, 591, 596, 604, 605, 611, 614, 628, 629, 631, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 666, 667, 668, 670, 671, 672, 673, 675, 678, 680, 682, 683, 685, 686, 687, 689, 691, 699, 706, 709, 710, 712, 713, 715, 716, 717, 719, 731, 749, 756, 778, 779, 790, 792, 793, 794, 795, 804, 805, 806, 807, 809, 810, 814, 818, 821, 826, 827, 828, 829, 830, 832, 835, 836, 837, 839, 841, 843, 844, 845, 851, 852, 853, 856, 858, 868, 870, 871, 872, 873, 874, 876, 882, 885, 886, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 911, 933, 934, 949, 970, 971, 973, 975, 977, 978, 981, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1002, 1007, 1013, 1014, 1022, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "consid": [0, 4, 12, 13, 20, 25, 39, 55, 66, 71, 81, 90, 95, 99, 122, 123, 125, 144, 148, 149, 165, 171, 200, 202, 236, 261, 264, 268, 272, 281, 284, 287, 288, 303, 315, 331, 338, 339, 342, 347, 358, 362, 363, 364, 368, 375, 376, 378, 382, 384, 388, 390, 391, 399, 403, 408, 409, 410, 411, 412, 413, 414, 415, 432, 438, 440, 444, 451, 468, 502, 503, 515, 527, 543, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 579, 580, 582, 583, 585, 587, 601, 602, 614, 626, 627, 640, 646, 652, 653, 654, 656, 665, 673, 682, 683, 684, 686, 687, 688, 690, 694, 696, 699, 701, 703, 709, 719, 723, 727, 749, 779, 781, 785, 835, 836, 837, 839, 841, 843, 844, 845, 848, 850, 851, 856, 866, 867, 874, 888, 889, 898, 899, 901, 902, 903, 904, 965, 970, 976, 977, 978, 979, 981, 982, 984, 987, 988, 989, 991, 995, 996, 997, 1002, 1007, 1014, 1025, 1026, 1030, 1034, 1035, 1037, 1038], "softwar": [0, 149, 362, 373, 376, 384, 388, 390, 411, 621, 629, 652, 971, 1005], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 310, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 364, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 426, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 496, 498, 500, 501, 502, 503, 504, 506, 509, 513, 515, 517, 518, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 681, 682, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 711, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 756, 757, 761, 762, 764, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 920, 921, 922, 923, 924, 925, 928, 930, 932, 933, 934, 935, 940, 942, 943, 944, 945, 946, 948, 949, 950, 952, 955, 969, 970, 971, 973, 975, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1005, 1008, 1010, 1011, 1012, 1013, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "2013": [0, 176, 373, 403, 407, 408, 530, 719, 749, 973, 981, 1000, 1023, 1024], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 66, 67, 81, 115, 149, 172, 192, 195, 204, 209, 210, 266, 267, 268, 298, 307, 342, 373, 374, 382, 384, 400, 401, 403, 407, 408, 410, 413, 468, 510, 511, 512, 532, 534, 541, 549, 550, 551, 552, 559, 560, 584, 601, 602, 604, 605, 609, 613, 616, 617, 628, 642, 643, 652, 663, 666, 668, 674, 681, 683, 686, 687, 699, 709, 718, 719, 724, 749, 779, 830, 864, 901, 902, 903, 904, 970, 975, 977, 978, 981, 983, 984, 985, 989, 993, 995, 997, 1015, 1025, 1030, 1034, 1035, 1036, 1037], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 403, 411, 828, 983, 1000], "languag": [0, 349, 381, 397, 408, 411, 995, 1001, 1002, 1005, 1008], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 56, 59, 60, 62, 65, 68, 69, 71, 72, 74, 76, 79, 81, 90, 92, 94, 95, 98, 99, 104, 106, 107, 109, 112, 114, 115, 117, 118, 121, 122, 123, 124, 125, 129, 130, 131, 133, 135, 138, 139, 140, 141, 146, 151, 152, 153, 154, 156, 157, 159, 161, 162, 164, 167, 170, 171, 178, 179, 182, 183, 184, 185, 189, 190, 192, 195, 196, 198, 199, 200, 201, 202, 203, 206, 208, 209, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 229, 232, 233, 234, 236, 238, 239, 240, 243, 246, 247, 248, 249, 250, 252, 255, 259, 261, 263, 264, 265, 266, 269, 275, 279, 281, 285, 287, 289, 290, 291, 292, 294, 298, 299, 302, 304, 305, 306, 310, 311, 313, 315, 317, 318, 319, 323, 324, 326, 327, 330, 331, 333, 338, 339, 347, 353, 354, 355, 356, 361, 363, 365, 368, 369, 370, 372, 373, 376, 378, 379, 382, 383, 384, 385, 389, 393, 394, 397, 399, 400, 401, 402, 405, 408, 409, 410, 411, 413, 414, 415, 416, 418, 420, 421, 422, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 514, 515, 516, 517, 518, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 611, 612, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 704, 705, 707, 711, 712, 714, 718, 720, 721, 722, 723, 724, 727, 729, 730, 731, 733, 734, 735, 747, 748, 750, 754, 756, 757, 762, 776, 777, 778, 780, 781, 782, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 911, 912, 913, 914, 917, 918, 919, 929, 930, 944, 947, 952, 953, 955, 956, 957, 958, 959, 962, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "mine": [0, 261, 348, 371, 403, 414, 438, 505, 557, 714, 727, 733, 776, 977, 981, 987, 993], "108": [0, 8, 124, 136, 1023], "122": [0, 114, 157, 165, 171, 234, 382, 982], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 55, 57, 62, 65, 70, 74, 80, 81, 97, 98, 115, 117, 118, 119, 120, 125, 126, 128, 130, 140, 141, 149, 152, 158, 165, 169, 171, 172, 173, 184, 195, 201, 202, 204, 214, 221, 222, 223, 229, 233, 246, 252, 259, 263, 267, 268, 276, 287, 288, 297, 299, 305, 307, 308, 309, 310, 319, 325, 331, 333, 334, 347, 348, 354, 355, 362, 371, 373, 376, 381, 384, 385, 388, 389, 400, 401, 402, 403, 407, 409, 410, 411, 412, 413, 438, 441, 443, 444, 446, 463, 476, 477, 478, 547, 548, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 638, 664, 665, 673, 683, 686, 687, 719, 724, 735, 739, 749, 782, 783, 798, 800, 833, 834, 838, 867, 868, 872, 874, 895, 897, 898, 901, 902, 903, 904, 950, 970, 975, 976, 977, 978, 980, 981, 984, 985, 987, 989, 991, 993, 996, 997, 998, 1001, 1002, 1007, 1008, 1010, 1016, 1022, 1023, 1025, 1026, 1030, 1033, 1034, 1035, 1036, 1037], "qualiti": [0, 6, 20, 24, 37, 46, 48, 49, 58, 98, 121, 170, 206, 255, 259, 268, 269, 270, 338, 376, 384, 388, 390, 397, 398, 402, 403, 405, 408, 446, 456, 463, 468, 551, 552, 553, 554, 558, 559, 736, 804, 885, 886, 901, 902, 903, 904, 930, 976, 978, 986, 993, 997, 1001, 1002, 1005, 1011, 1012, 1018], "png": [0, 32, 905], "svg": 0, "logo": [0, 407, 797], "avail": [0, 5, 11, 12, 13, 41, 56, 57, 98, 120, 123, 124, 149, 152, 157, 161, 169, 170, 171, 189, 200, 208, 218, 222, 236, 239, 258, 259, 264, 265, 268, 286, 287, 288, 294, 308, 313, 314, 315, 316, 318, 319, 325, 327, 358, 362, 370, 371, 373, 374, 375, 376, 377, 381, 385, 389, 390, 393, 397, 400, 403, 404, 407, 408, 409, 410, 411, 412, 414, 441, 444, 445, 446, 447, 463, 464, 465, 466, 467, 468, 469, 470, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 502, 529, 543, 549, 550, 551, 552, 553, 554, 558, 559, 582, 585, 587, 588, 604, 605, 626, 627, 651, 659, 664, 666, 667, 668, 670, 683, 690, 693, 725, 726, 790, 793, 794, 804, 815, 816, 821, 822, 824, 825, 826, 827, 839, 850, 851, 860, 869, 872, 877, 881, 886, 937, 942, 949, 971, 975, 978, 980, 981, 982, 983, 984, 987, 991, 994, 995, 996, 1000, 1001, 1002, 1005, 1007, 1011, 1016, 1018, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1038], "doc": [0, 4, 8, 19, 347, 349, 363, 374, 376, 380, 381, 384, 390, 393, 396, 397, 411, 582, 583, 585, 771, 774, 783, 784, 816, 1016, 1022, 1026, 1036], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 370, 373, 375, 376, 377, 379, 380, 382, 384, 385, 388, 389, 393, 397, 400, 404, 408, 410, 411, 415, 458, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 497, 502, 527, 528, 532, 534, 535, 538, 541, 551, 552, 567, 575, 585, 707, 736, 853, 857, 893, 935, 978, 991, 997, 1001, 1005, 1015, 1016, 1032, 1036], "directori": [0, 8, 283, 370, 374, 376, 378, 382, 384, 390, 393, 404, 435, 439, 444, 480, 493, 853, 854, 1036], "driven": [0, 173, 1005], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 55, 60, 72, 75, 78, 82, 85, 100, 103, 115, 117, 118, 122, 125, 126, 132, 146, 149, 152, 157, 158, 171, 172, 181, 189, 200, 204, 222, 225, 226, 229, 235, 236, 261, 268, 275, 279, 281, 286, 298, 303, 315, 338, 342, 347, 348, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 378, 382, 384, 388, 390, 394, 397, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 434, 437, 441, 443, 445, 448, 453, 490, 502, 526, 545, 561, 575, 576, 577, 583, 600, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 624, 626, 627, 632, 637, 649, 650, 666, 681, 686, 689, 694, 756, 758, 790, 793, 794, 804, 816, 820, 821, 832, 850, 851, 856, 865, 866, 871, 895, 896, 898, 909, 950, 970, 971, 974, 975, 976, 977, 978, 980, 981, 982, 984, 985, 986, 988, 989, 991, 995, 996, 997, 1007, 1011, 1014, 1031, 1032, 1034, 1035, 1038], "institut": [0, 373, 984], "privat": [0, 380, 390, 391, 909, 1005, 1022, 1030, 1032, 1033, 1035, 1036], "grant": [0, 239, 376], "assur": [0, 390, 788, 789, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "sustain": 0, "like": [0, 4, 12, 19, 52, 55, 58, 60, 70, 89, 92, 98, 103, 105, 109, 112, 114, 119, 125, 128, 152, 158, 170, 180, 200, 252, 261, 264, 265, 268, 269, 275, 290, 300, 303, 308, 309, 313, 325, 334, 338, 347, 348, 358, 362, 364, 368, 370, 371, 374, 375, 376, 378, 380, 383, 384, 385, 388, 389, 390, 397, 399, 401, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 509, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 573, 575, 576, 577, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 765, 766, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 918, 919, 927, 932, 944, 945, 949, 952, 953, 954, 966, 968, 970, 973, 975, 976, 977, 978, 981, 983, 984, 985, 987, 988, 991, 996, 997, 1001, 1002, 1004, 1005, 1007, 1014, 1016, 1019, 1022, 1025, 1026, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1038], "thank": [0, 4, 17, 25, 55, 86, 172, 176, 200, 270, 347, 348, 375, 384, 1005, 1022, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "funder": 0, "member": [0, 347, 348, 371, 376, 379, 391, 403, 418, 436, 440, 442, 445, 447, 486, 549, 550, 557, 575, 652, 653, 660, 662, 670, 671, 672, 698, 699, 709, 711, 724, 729, 730, 750, 779, 786, 790, 893, 977, 984, 1007, 1022, 1034, 1037], "consortium": [0, 1005], "foundat": [0, 132, 376, 401, 984], "face": [0, 3, 15, 36, 53, 68, 94, 98, 107, 120, 167, 228, 244, 369, 376, 380, 403, 408, 410, 412, 443, 466, 487, 488, 489, 515, 526, 527, 531, 533, 534, 535, 537, 552, 578, 651, 667, 691, 707, 804, 819, 836, 873, 898, 916, 984, 997, 998, 999, 1010, 1015, 1018, 1022, 1030], "2022": [0, 363, 410, 699, 991, 1036, 1037], "microsoft": [0, 12, 374, 377, 393], "m\u00fcller": [0, 31, 304, 305, 391, 408, 529, 859, 985, 991, 995, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036], "2020": [0, 371, 1032, 1033, 1034, 1035], "quansight": 0, "lab": [0, 371, 462, 530, 891, 1005, 1033], "2021": [0, 374, 376, 665, 1034, 1035], "columbia": 0, "univers": [0, 160, 347, 371, 373, 379, 403, 408, 411, 584, 781, 828, 832, 888, 977, 979, 981, 983], "2016": [0, 226, 370, 403, 970, 1027, 1028], "sydnei": 0, "2017": [0, 261, 370, 401, 403, 414, 438, 981, 1028, 1029], "receiv": [0, 19, 138, 167, 236, 254, 258, 277, 349, 358, 376, 378, 384, 390, 407, 410, 498, 652, 696, 700, 702, 720, 775, 781, 782, 809, 819, 821, 822, 860, 898, 982, 985, 986, 995, 1032, 1033], "improv": [0, 4, 24, 25, 33, 78, 79, 82, 100, 106, 112, 113, 118, 121, 123, 124, 125, 127, 132, 145, 165, 170, 176, 186, 200, 208, 218, 262, 264, 281, 284, 300, 308, 319, 337, 338, 348, 358, 363, 374, 379, 381, 382, 384, 385, 388, 390, 391, 397, 402, 408, 410, 412, 443, 444, 525, 526, 528, 531, 532, 533, 535, 536, 537, 540, 548, 551, 552, 553, 554, 555, 556, 558, 559, 604, 605, 637, 646, 658, 660, 661, 662, 666, 667, 668, 669, 670, 672, 679, 681, 686, 722, 723, 777, 780, 781, 842, 850, 851, 867, 869, 881, 901, 902, 904, 930, 975, 977, 978, 981, 984, 985, 995, 996, 997, 1000, 1001, 1002, 1005, 1014, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 67, 106, 129, 134, 169, 170, 184, 185, 195, 200, 201, 202, 204, 218, 224, 233, 239, 258, 261, 264, 268, 270, 271, 303, 314, 315, 319, 347, 356, 362, 371, 375, 376, 378, 383, 385, 390, 391, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 415, 432, 433, 436, 440, 441, 443, 458, 461, 488, 492, 494, 498, 502, 503, 504, 519, 521, 523, 524, 525, 527, 529, 530, 531, 536, 539, 540, 542, 543, 544, 555, 556, 557, 586, 587, 588, 589, 590, 592, 593, 594, 600, 604, 605, 614, 626, 637, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 663, 666, 667, 668, 669, 671, 674, 675, 676, 677, 678, 681, 684, 692, 694, 696, 701, 703, 706, 707, 709, 712, 714, 717, 720, 722, 723, 724, 728, 729, 731, 732, 733, 734, 735, 736, 737, 745, 747, 751, 759, 775, 776, 777, 780, 781, 782, 788, 789, 793, 794, 816, 833, 834, 839, 856, 857, 860, 866, 869, 872, 877, 881, 885, 886, 888, 889, 893, 894, 897, 898, 899, 910, 928, 930, 946, 948, 972, 973, 977, 979, 981, 982, 984, 985, 986, 988, 991, 996, 1012, 1014, 1016, 1023, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "It": [0, 4, 7, 8, 9, 16, 20, 25, 37, 40, 53, 55, 58, 72, 78, 80, 82, 95, 98, 99, 105, 112, 115, 117, 118, 121, 125, 132, 149, 157, 158, 159, 164, 165, 170, 171, 172, 180, 184, 188, 189, 197, 200, 204, 214, 217, 218, 221, 222, 229, 234, 236, 239, 256, 257, 259, 261, 262, 264, 267, 268, 281, 287, 288, 289, 291, 292, 294, 303, 307, 308, 310, 313, 319, 330, 334, 338, 342, 347, 348, 349, 358, 362, 363, 364, 369, 371, 373, 374, 376, 378, 380, 381, 382, 384, 385, 388, 389, 390, 393, 394, 397, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 428, 431, 432, 435, 436, 437, 438, 439, 441, 442, 443, 446, 453, 456, 461, 462, 463, 468, 472, 479, 481, 490, 502, 509, 518, 527, 529, 530, 532, 534, 535, 543, 544, 547, 548, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 583, 590, 596, 600, 601, 602, 605, 608, 609, 613, 614, 616, 617, 621, 624, 625, 626, 627, 635, 636, 637, 640, 641, 644, 646, 647, 648, 649, 652, 654, 655, 656, 657, 660, 661, 662, 664, 665, 666, 668, 670, 671, 672, 675, 676, 677, 678, 681, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 698, 702, 703, 704, 710, 716, 727, 735, 736, 740, 751, 752, 755, 758, 774, 776, 790, 792, 793, 794, 796, 802, 803, 804, 812, 817, 820, 829, 830, 835, 836, 837, 839, 842, 843, 844, 845, 849, 850, 851, 855, 856, 857, 861, 862, 863, 867, 870, 872, 882, 885, 886, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 917, 930, 939, 949, 952, 955, 957, 958, 959, 960, 961, 962, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 992, 994, 995, 996, 997, 1001, 1005, 1007, 1013, 1014, 1015, 1016, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 55, 60, 81, 95, 114, 119, 120, 130, 132, 152, 158, 170, 171, 179, 186, 188, 189, 192, 201, 204, 209, 222, 226, 230, 231, 236, 251, 261, 262, 263, 267, 291, 294, 299, 303, 307, 313, 314, 316, 318, 332, 338, 339, 342, 347, 348, 352, 353, 356, 358, 362, 364, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 384, 385, 388, 389, 390, 392, 393, 394, 397, 399, 400, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 424, 431, 434, 436, 437, 438, 440, 441, 443, 444, 446, 453, 454, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 487, 488, 490, 492, 495, 526, 527, 528, 529, 532, 534, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 584, 585, 587, 588, 595, 599, 604, 605, 621, 626, 627, 628, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 688, 693, 705, 728, 734, 757, 767, 771, 781, 783, 785, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 802, 803, 804, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 850, 851, 853, 856, 858, 859, 860, 863, 864, 865, 868, 870, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 908, 919, 924, 940, 957, 958, 959, 970, 971, 973, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 994, 995, 996, 997, 998, 1001, 1002, 1005, 1007, 1011, 1014, 1016, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "2012": [0, 81, 401, 410, 549, 550, 557, 633, 736, 970, 974, 981, 1000, 1022], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 362, 363, 364, 369, 371, 374, 376, 381, 384, 388, 390, 391, 393, 399, 402, 403, 405, 407, 408, 411, 435, 439, 441, 443, 453, 482, 483, 486, 490, 491, 494, 495, 496, 497, 498, 499, 501, 504, 529, 531, 535, 553, 554, 561, 562, 626, 642, 644, 648, 663, 674, 715, 716, 721, 738, 739, 741, 743, 744, 746, 778, 788, 789, 801, 830, 919, 970, 977, 980, 983, 984, 988, 991, 994, 1002, 1014, 1022, 1026, 1028, 1030, 1032, 1033, 1035, 1036, 1038], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 394, 399, 400, 401, 402, 403, 405, 406, 408, 410, 411, 414, 431, 435, 437, 438, 439, 440, 441, 444, 446, 449, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 466, 490, 493, 495, 513, 517, 528, 530, 532, 534, 541, 556, 561, 562, 563, 564, 584, 604, 613, 621, 622, 623, 624, 628, 633, 634, 637, 640, 644, 646, 648, 654, 656, 658, 660, 661, 667, 670, 671, 672, 679, 680, 684, 686, 688, 695, 785, 788, 789, 790, 792, 793, 794, 795, 797, 799, 804, 805, 806, 809, 811, 814, 815, 816, 817, 818, 821, 823, 828, 829, 830, 831, 832, 833, 834, 841, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 857, 858, 860, 863, 866, 867, 868, 872, 877, 885, 886, 890, 891, 895, 898, 899, 907, 932, 947, 970, 971, 973, 974, 977, 978, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 993, 994, 995, 996, 997, 1001, 1005, 1007, 1012, 1014, 1015, 1016, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "host": [0, 118, 319, 347, 371, 376, 380, 384, 385, 886, 949, 1016, 1038], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 57, 66, 69, 72, 86, 97, 98, 100, 103, 115, 117, 118, 121, 122, 126, 128, 134, 144, 164, 165, 167, 169, 170, 171, 172, 176, 179, 193, 200, 204, 218, 221, 222, 223, 225, 229, 230, 231, 233, 235, 236, 239, 240, 248, 251, 256, 258, 261, 262, 263, 270, 271, 286, 287, 288, 302, 303, 307, 308, 310, 311, 313, 314, 316, 322, 334, 338, 341, 344, 347, 348, 352, 356, 358, 362, 368, 369, 371, 372, 373, 376, 378, 380, 381, 382, 384, 385, 389, 390, 391, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 431, 437, 438, 440, 441, 442, 443, 444, 446, 451, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 482, 490, 491, 497, 527, 528, 529, 532, 535, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 583, 584, 585, 588, 591, 596, 604, 605, 606, 607, 614, 621, 622, 624, 629, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 684, 686, 690, 693, 698, 712, 756, 767, 771, 778, 783, 790, 791, 792, 793, 794, 795, 796, 797, 799, 804, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 848, 850, 851, 853, 854, 856, 858, 859, 860, 862, 863, 865, 866, 867, 869, 870, 871, 872, 873, 874, 881, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 924, 970, 971, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 995, 996, 997, 999, 1002, 1003, 1004, 1005, 1007, 1011, 1014, 1015, 1018, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1035, 1036, 1037, 1038], "event": [0, 4, 16, 200, 218, 264, 401, 403, 582, 583, 630, 828, 918, 977, 982, 983, 1001, 1005, 1028], "pari": [0, 373, 404, 460, 757, 861, 992, 1036], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 56, 59, 60, 61, 63, 64, 81, 91, 100, 102, 105, 123, 124, 125, 126, 149, 165, 171, 181, 192, 194, 200, 201, 211, 212, 224, 225, 229, 230, 239, 246, 249, 250, 256, 262, 272, 286, 289, 291, 298, 303, 305, 306, 317, 324, 332, 334, 335, 336, 341, 348, 349, 371, 372, 373, 381, 402, 403, 405, 406, 408, 409, 410, 416, 434, 436, 437, 440, 441, 442, 443, 446, 448, 453, 454, 455, 456, 457, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 495, 506, 518, 528, 529, 535, 538, 544, 600, 603, 604, 605, 626, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 684, 688, 788, 858, 859, 862, 871, 873, 883, 884, 893, 894, 975, 977, 978, 980, 988, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036], "scienc": [0, 38, 80, 149, 160, 370, 373, 388, 403, 434, 448, 532, 534, 541, 682, 683, 687, 840, 971, 973, 977, 978, 981, 984, 993, 1002, 1005, 1010, 1030], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 55, 57, 58, 60, 61, 64, 66, 71, 81, 89, 90, 91, 95, 98, 100, 101, 105, 117, 118, 125, 128, 132, 135, 148, 149, 152, 159, 160, 164, 169, 170, 171, 172, 173, 176, 179, 180, 184, 189, 190, 192, 193, 194, 196, 200, 202, 209, 210, 215, 218, 223, 229, 236, 237, 239, 248, 251, 257, 258, 259, 261, 262, 264, 265, 268, 269, 270, 271, 279, 281, 286, 300, 304, 305, 308, 309, 313, 315, 316, 317, 325, 333, 334, 343, 347, 348, 349, 352, 356, 358, 362, 363, 364, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 392, 393, 394, 397, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 435, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 454, 456, 458, 463, 468, 481, 482, 484, 485, 486, 487, 488, 489, 490, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 508, 528, 533, 534, 537, 541, 545, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 563, 575, 577, 578, 582, 583, 584, 585, 604, 605, 609, 610, 614, 621, 624, 626, 627, 628, 629, 637, 641, 642, 643, 644, 648, 651, 652, 653, 655, 660, 662, 663, 665, 667, 668, 669, 670, 672, 674, 682, 686, 689, 693, 697, 703, 714, 727, 743, 744, 747, 756, 764, 767, 771, 772, 773, 774, 776, 781, 783, 784, 787, 788, 789, 790, 793, 794, 796, 797, 798, 800, 802, 804, 808, 809, 812, 814, 816, 817, 819, 820, 821, 822, 823, 825, 826, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 849, 853, 856, 857, 858, 860, 861, 863, 864, 865, 866, 867, 872, 873, 874, 877, 879, 893, 895, 896, 897, 898, 899, 901, 902, 903, 904, 909, 919, 922, 932, 952, 970, 971, 973, 975, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 995, 996, 997, 998, 1000, 1001, 1005, 1007, 1011, 1013, 1014, 1015, 1016, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "2014": [0, 52, 370, 408, 410, 413, 524, 601, 602, 616, 617, 652, 686, 850, 851, 929, 930, 978, 985, 1005, 1025], "2015": [0, 171, 370, 702, 715, 716, 717, 850, 851, 981, 988, 1005, 1026, 1027], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 59, 60, 65, 66, 70, 71, 85, 92, 95, 98, 105, 112, 115, 118, 125, 130, 131, 149, 153, 155, 156, 157, 158, 169, 170, 171, 180, 184, 195, 200, 203, 207, 208, 212, 214, 216, 218, 221, 225, 226, 232, 233, 235, 243, 256, 261, 263, 264, 274, 281, 303, 307, 315, 317, 323, 325, 327, 332, 341, 348, 371, 373, 376, 381, 407, 410, 411, 412, 415, 436, 467, 494, 498, 517, 527, 533, 538, 547, 548, 563, 587, 588, 609, 611, 652, 653, 660, 662, 664, 670, 671, 672, 686, 707, 790, 804, 822, 842, 893, 902, 976, 977, 981, 982, 984, 987, 991, 1022], "2018": [0, 200, 218, 411, 444, 970, 981, 999, 1005, 1029, 1030], "nyu": [0, 123, 182, 842], "moor": [0, 728, 981, 1005], "environ": [0, 12, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 362, 371, 373, 374, 376, 382, 384, 388, 393, 397, 399, 404, 493, 1002, 1005, 1029, 1030], "student": [0, 97, 261, 978, 1002, 1005], "t\u00e9l\u00e9com": [0, 999], "paristech": [0, 24, 25, 42, 229, 999], "rv": [0, 123, 265, 303, 794, 802, 804, 970, 1022, 1023, 1026, 1027, 1028, 1029, 1030], "thierri": [0, 246, 248, 1005, 1028, 1029, 1036], "guillemot": [0, 246, 248, 1028, 1029], "labex": 0, "digicosm": 0, "goix": [0, 1026, 1028, 1029, 1030, 1031], "mathurin": [0, 1033, 1035, 1036], "massia": [0, 1033, 1035, 1036], "2019": [0, 171, 374, 403, 446, 456, 686, 978, 988, 991, 1030, 1031, 1032], "dure": [0, 4, 5, 12, 50, 55, 58, 72, 75, 86, 100, 116, 122, 129, 146, 152, 157, 170, 171, 173, 189, 201, 208, 259, 263, 281, 315, 316, 338, 362, 364, 374, 376, 378, 381, 390, 391, 403, 404, 408, 410, 411, 413, 414, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 607, 608, 609, 611, 613, 614, 616, 617, 619, 621, 622, 623, 624, 626, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 694, 782, 788, 789, 790, 793, 794, 804, 814, 815, 816, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 881, 884, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 971, 973, 977, 978, 984, 991, 993, 997, 1011, 1016, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "phd": [0, 403, 410, 1002, 1005], "chan": [0, 831, 873], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 57, 58, 60, 64, 68, 81, 126, 133, 134, 135, 153, 158, 167, 170, 180, 193, 215, 221, 222, 226, 245, 247, 248, 253, 261, 281, 315, 324, 334, 348, 358, 363, 371, 376, 378, 384, 385, 388, 390, 403, 408, 410, 412, 413, 415, 436, 437, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 472, 506, 509, 525, 526, 527, 531, 532, 534, 537, 539, 540, 541, 542, 547, 548, 553, 554, 587, 601, 602, 604, 605, 613, 614, 621, 634, 639, 640, 641, 642, 646, 647, 652, 654, 655, 656, 657, 660, 661, 662, 663, 665, 670, 671, 672, 674, 675, 678, 684, 685, 686, 688, 689, 788, 789, 823, 842, 849, 850, 851, 889, 916, 929, 930, 950, 955, 956, 973, 977, 978, 980, 985, 986, 987, 995, 997, 1001, 1013, 1015, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "were": [0, 4, 32, 70, 71, 74, 80, 81, 118, 122, 125, 146, 149, 157, 165, 200, 201, 204, 230, 239, 270, 272, 299, 300, 308, 314, 315, 317, 318, 319, 325, 338, 347, 349, 356, 358, 370, 371, 373, 376, 377, 380, 388, 390, 394, 400, 404, 410, 411, 458, 461, 462, 490, 555, 556, 582, 585, 596, 793, 794, 809, 817, 890, 891, 927, 970, 981, 982, 997, 1004, 1015, 1016, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "through": [0, 7, 117, 122, 149, 160, 170, 204, 221, 234, 236, 256, 261, 264, 286, 307, 308, 332, 339, 349, 356, 373, 374, 376, 378, 383, 385, 390, 391, 393, 394, 403, 406, 408, 410, 412, 413, 440, 458, 461, 466, 529, 551, 552, 555, 558, 559, 560, 575, 587, 588, 591, 641, 645, 647, 649, 652, 653, 655, 657, 659, 662, 670, 671, 682, 685, 714, 796, 812, 869, 881, 885, 886, 901, 902, 903, 904, 936, 939, 970, 971, 978, 981, 983, 984, 985, 987, 989, 991, 995, 996, 997, 1005, 1007, 1014, 1016, 1022, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1038], "program": [0, 50, 149, 348, 358, 363, 364, 373, 374, 376, 382, 388, 502, 629, 664, 883, 884, 977, 996, 997, 1001, 1002, 1022, 1024], "immanuel": [0, 1022, 1023, 1027], "bayer": [0, 1022, 1023, 1027], "kemal": [0, 20, 21, 1024, 1025], "eren": [0, 20, 21, 1024, 1025], "tr\u00e9segni": [0, 1024], "hamzeh": [0, 1025, 1026], "alsalhi": [0, 1025, 1026], "issam": [0, 297, 1028], "laradji": [0, 297, 1028], "maheshakya": [0, 1025, 1026, 1027], "wijewardena": [0, 1025, 1026, 1027], "xue": [0, 1026, 1027, 1028, 1030, 1031, 1034], "nelson": [0, 1028, 1029, 1034], "yenchen": [0, 1028], "lin": [0, 528, 652, 996, 1027, 1028, 1029, 1030], "neurodebian": 0, "debian": [0, 362, 374, 382], "packag": [0, 46, 53, 164, 236, 281, 363, 369, 370, 373, 374, 376, 377, 378, 380, 382, 385, 388, 390, 393, 405, 410, 411, 446, 472, 640, 641, 971, 977, 980, 984, 991, 997, 1005, 1010, 1022, 1028, 1030, 1031, 1032], "dr": [0, 149, 373, 403, 1036], "jame": [0, 373, 407, 823, 982, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1038], "haxbi": 0, "dartmouth": 0, "colleg": [0, 169], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 56, 58, 62, 67, 71, 74, 78, 80, 81, 86, 95, 113, 114, 125, 128, 129, 132, 133, 145, 152, 154, 157, 158, 159, 160, 161, 164, 165, 167, 170, 171, 172, 173, 176, 179, 181, 183, 184, 188, 189, 190, 194, 195, 200, 201, 204, 208, 209, 214, 217, 218, 221, 223, 229, 233, 236, 239, 247, 248, 249, 255, 256, 261, 262, 263, 264, 267, 269, 284, 287, 292, 298, 299, 303, 308, 314, 315, 316, 317, 318, 319, 330, 331, 333, 334, 342, 344, 347, 348, 349, 356, 358, 362, 363, 364, 369, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 393, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 426, 431, 437, 438, 441, 443, 445, 447, 453, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 490, 493, 502, 503, 509, 517, 518, 527, 528, 530, 532, 535, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 575, 576, 582, 584, 585, 588, 600, 603, 604, 605, 626, 627, 629, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 683, 684, 686, 687, 691, 692, 694, 695, 696, 701, 702, 709, 714, 719, 720, 731, 732, 733, 739, 747, 749, 750, 756, 775, 777, 780, 781, 782, 785, 788, 790, 791, 792, 793, 794, 797, 799, 804, 808, 809, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 913, 914, 949, 970, 971, 973, 976, 977, 978, 980, 981, 982, 983, 984, 985, 987, 988, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1004, 1005, 1007, 1012, 1014, 1015, 1016, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "particip": [0, 375, 376, 391, 1005], "could": [0, 4, 9, 13, 27, 37, 42, 53, 71, 72, 95, 98, 113, 114, 122, 125, 146, 152, 157, 165, 169, 170, 171, 200, 201, 204, 209, 218, 225, 234, 235, 236, 255, 261, 289, 292, 316, 330, 331, 347, 352, 364, 376, 382, 384, 390, 393, 397, 401, 407, 410, 411, 415, 468, 527, 532, 601, 602, 623, 665, 792, 797, 799, 970, 971, 977, 978, 988, 989, 991, 996, 1002, 1015, 1019, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "attend": 0, "psf": [0, 376], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 55, 71, 78, 95, 115, 118, 129, 152, 170, 171, 172, 173, 200, 217, 218, 234, 236, 261, 262, 263, 264, 266, 267, 268, 270, 271, 279, 313, 334, 342, 347, 348, 358, 362, 363, 364, 369, 370, 371, 374, 376, 377, 378, 379, 380, 382, 384, 388, 389, 390, 393, 397, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 413, 415, 417, 426, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 490, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 703, 715, 716, 717, 721, 749, 771, 776, 778, 781, 788, 789, 790, 792, 793, 794, 796, 802, 803, 804, 808, 809, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 911, 913, 914, 917, 922, 949, 952, 955, 970, 973, 976, 977, 978, 980, 981, 982, 983, 984, 989, 991, 996, 997, 1002, 1005, 1007, 1014, 1015, 1016, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038], "tinyclu": 0, "french": [0, 218, 309], "associ": [0, 11, 24, 25, 80, 112, 152, 169, 170, 204, 249, 309, 322, 324, 347, 384, 403, 405, 407, 408, 410, 411, 440, 443, 463, 464, 465, 466, 467, 468, 469, 470, 487, 488, 489, 518, 551, 555, 558, 599, 600, 624, 639, 652, 653, 660, 662, 668, 669, 670, 683, 689, 693, 724, 732, 816, 836, 844, 858, 870, 882, 890, 899, 901, 903, 919, 980, 981, 984, 991, 994, 1005, 1015, 1022, 1034, 1038], "fond": [0, 1005], "de": [0, 12, 24, 25, 26, 27, 74, 116, 132, 152, 153, 155, 156, 157, 158, 159, 161, 191, 234, 235, 309, 324, 342, 373, 629, 682, 757, 977, 978, 1002, 1023, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 55, 62, 66, 72, 112, 120, 125, 132, 146, 149, 157, 164, 171, 172, 189, 200, 201, 202, 218, 222, 234, 255, 258, 261, 262, 264, 270, 334, 342, 348, 356, 362, 371, 373, 376, 381, 382, 384, 388, 391, 403, 405, 408, 411, 413, 487, 488, 494, 498, 504, 640, 641, 893, 971, 977, 978, 981, 986, 987, 988, 1002, 1005, 1012, 1014, 1015, 1022], "our": [0, 4, 5, 7, 11, 12, 42, 53, 56, 70, 71, 80, 81, 86, 95, 96, 111, 112, 113, 119, 122, 125, 126, 144, 149, 152, 157, 159, 169, 170, 171, 172, 173, 200, 204, 218, 223, 225, 236, 255, 261, 264, 267, 268, 284, 299, 303, 309, 314, 316, 327, 331, 337, 339, 342, 347, 348, 349, 358, 363, 375, 380, 381, 384, 388, 389, 390, 391, 394, 403, 407, 410, 411, 413, 414, 438, 444, 557, 638, 686, 702, 714, 719, 731, 749, 835, 836, 837, 839, 841, 843, 844, 845, 970, 971, 977, 978, 981, 987, 991, 994, 995, 996, 1002, 1005, 1007, 1014, 1015, 1016, 1029, 1030, 1032, 1033, 1036, 1037], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 368, 373, 374, 377, 378, 380, 384, 388, 389, 390, 391, 393, 394, 397, 400, 401, 403, 404, 406, 407, 408, 412, 413, 431, 495, 529, 533, 535, 537, 540, 553, 554, 605, 610, 615, 618, 632, 633, 634, 635, 650, 660, 662, 667, 670, 681, 683, 686, 687, 703, 790, 813, 821, 822, 823, 825, 831, 839, 850, 854, 873, 970, 975, 977, 978, 980, 981, 982, 988, 989, 995, 996, 1002, 1005, 1007, 1018, 1022, 1026, 1027, 1030, 1034, 1035, 1036, 1037, 1038], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 55, 60, 64, 75, 82, 91, 95, 97, 98, 109, 117, 118, 120, 121, 125, 134, 135, 149, 157, 158, 160, 167, 169, 170, 171, 173, 179, 184, 186, 192, 193, 194, 200, 201, 202, 203, 204, 209, 211, 215, 217, 218, 221, 222, 229, 235, 236, 239, 240, 243, 247, 249, 251, 259, 262, 263, 264, 265, 267, 268, 269, 271, 273, 279, 281, 284, 286, 299, 303, 304, 308, 313, 314, 315, 316, 318, 319, 322, 324, 325, 326, 331, 334, 338, 339, 342, 343, 347, 348, 349, 353, 356, 358, 362, 363, 364, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 384, 385, 388, 389, 390, 391, 394, 399, 400, 401, 402, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 420, 421, 422, 425, 426, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 502, 503, 509, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 699, 703, 707, 708, 709, 710, 711, 712, 714, 715, 716, 719, 721, 722, 723, 725, 726, 728, 729, 730, 731, 738, 739, 741, 743, 744, 746, 749, 754, 762, 767, 771, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 800, 802, 804, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914, 915, 919, 921, 922, 923, 924, 935, 944, 949, 956, 965, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 991, 994, 995, 996, 997, 1001, 1002, 1005, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "handl": [0, 4, 71, 118, 122, 128, 132, 176, 184, 235, 236, 263, 268, 270, 281, 288, 309, 313, 347, 349, 356, 362, 368, 370, 374, 376, 377, 378, 385, 388, 390, 394, 410, 411, 413, 490, 538, 571, 575, 576, 579, 580, 582, 583, 585, 604, 629, 640, 641, 646, 652, 653, 654, 655, 656, 662, 669, 670, 672, 675, 714, 781, 857, 866, 867, 893, 894, 898, 905, 931, 938, 941, 978, 981, 982, 983, 984, 987, 989, 996, 997, 1001, 1002, 1005, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 57, 62, 71, 75, 80, 82, 96, 97, 98, 100, 111, 114, 122, 129, 130, 132, 145, 146, 148, 156, 158, 165, 167, 170, 171, 172, 173, 178, 179, 184, 186, 193, 194, 199, 201, 202, 206, 215, 216, 218, 219, 224, 225, 230, 231, 232, 233, 235, 239, 246, 248, 252, 254, 255, 261, 270, 277, 281, 285, 300, 303, 305, 307, 308, 314, 315, 316, 317, 319, 326, 329, 331, 336, 337, 338, 342, 343, 345, 347, 348, 349, 356, 358, 362, 363, 368, 371, 372, 376, 377, 378, 381, 382, 384, 385, 388, 390, 391, 401, 402, 403, 404, 407, 409, 410, 411, 412, 413, 415, 431, 435, 439, 440, 444, 446, 450, 456, 457, 458, 459, 461, 462, 482, 490, 491, 497, 498, 502, 520, 526, 529, 530, 532, 534, 538, 541, 543, 545, 546, 547, 551, 552, 553, 554, 555, 556, 558, 559, 560, 566, 582, 583, 585, 586, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 629, 632, 637, 644, 646, 651, 652, 653, 654, 658, 659, 660, 662, 663, 666, 670, 671, 672, 679, 680, 681, 682, 683, 684, 685, 686, 688, 692, 693, 696, 700, 701, 706, 709, 711, 713, 714, 719, 720, 721, 728, 730, 732, 733, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 775, 778, 781, 782, 785, 788, 789, 790, 791, 795, 797, 798, 799, 800, 802, 808, 815, 819, 822, 841, 843, 844, 845, 848, 853, 854, 856, 857, 858, 861, 865, 866, 867, 868, 869, 870, 872, 873, 880, 881, 882, 883, 884, 886, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 913, 914, 928, 930, 934, 936, 944, 970, 971, 972, 973, 974, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 992, 993, 994, 995, 996, 997, 1002, 1014, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "profit": 0, "organ": [0, 11, 70, 80, 347, 370, 375, 376, 391, 841, 1001], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 58, 65, 67, 70, 71, 72, 75, 78, 80, 81, 86, 90, 92, 97, 99, 100, 101, 106, 112, 115, 116, 117, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 138, 144, 146, 148, 149, 152, 153, 157, 158, 159, 164, 165, 169, 170, 171, 173, 176, 179, 180, 184, 189, 193, 200, 201, 202, 204, 206, 208, 214, 216, 217, 218, 221, 222, 223, 225, 229, 230, 233, 234, 235, 236, 237, 239, 240, 246, 247, 251, 252, 255, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 279, 281, 286, 287, 288, 298, 303, 305, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 319, 322, 324, 325, 326, 334, 338, 342, 344, 347, 348, 349, 352, 356, 358, 362, 363, 364, 368, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 454, 456, 457, 458, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 481, 517, 525, 526, 527, 528, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 573, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 604, 605, 606, 607, 608, 609, 611, 613, 616, 621, 622, 623, 624, 626, 627, 628, 634, 636, 637, 638, 641, 642, 643, 646, 648, 649, 650, 652, 653, 655, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 701, 703, 710, 711, 713, 714, 716, 718, 719, 727, 728, 729, 730, 736, 739, 749, 751, 771, 772, 773, 774, 775, 776, 782, 788, 789, 790, 793, 794, 795, 796, 798, 800, 804, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 850, 853, 857, 860, 864, 866, 867, 868, 871, 872, 873, 874, 875, 877, 885, 886, 888, 889, 890, 893, 895, 898, 899, 901, 902, 903, 904, 905, 909, 922, 925, 929, 930, 932, 937, 938, 941, 949, 950, 953, 956, 962, 965, 970, 971, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1005, 1007, 1009, 1011, 1014, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "manag": [0, 86, 243, 361, 370, 374, 377, 378, 380, 384, 388, 390, 391, 410, 444, 462, 620, 891, 949, 975, 997, 1001, 1002, 1005, 1016, 1018, 1035, 1038], "board": 0, "scipi": [0, 6, 13, 17, 19, 34, 41, 46, 47, 53, 54, 78, 79, 82, 96, 98, 101, 103, 124, 152, 170, 173, 186, 190, 202, 247, 251, 252, 258, 261, 269, 273, 281, 286, 291, 300, 314, 315, 322, 323, 362, 370, 371, 374, 376, 378, 382, 385, 388, 389, 390, 393, 396, 403, 408, 411, 444, 445, 446, 447, 451, 456, 457, 490, 497, 502, 526, 528, 529, 535, 538, 575, 576, 579, 580, 582, 583, 604, 605, 642, 643, 647, 651, 652, 653, 657, 660, 662, 663, 664, 666, 668, 670, 671, 672, 674, 678, 681, 685, 686, 689, 753, 756, 771, 772, 773, 774, 783, 784, 794, 802, 804, 819, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 856, 865, 871, 872, 873, 876, 880, 883, 884, 893, 895, 896, 898, 899, 932, 952, 955, 970, 971, 977, 979, 982, 984, 985, 991, 995, 996, 1000, 1002, 1010, 1012, 1015, 1016, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "mission": [0, 348, 1005], "foster": [0, 1030], "comput": [0, 4, 6, 7, 11, 13, 20, 26, 37, 39, 41, 42, 46, 52, 54, 57, 58, 60, 61, 70, 72, 79, 80, 81, 82, 96, 105, 111, 115, 119, 120, 124, 125, 126, 127, 148, 149, 152, 157, 159, 160, 164, 170, 171, 172, 173, 176, 180, 181, 184, 185, 186, 187, 188, 189, 200, 202, 204, 208, 214, 217, 218, 222, 225, 230, 232, 233, 235, 239, 240, 242, 257, 259, 261, 262, 263, 264, 268, 270, 272, 281, 283, 285, 287, 288, 290, 291, 294, 303, 313, 317, 318, 323, 325, 334, 338, 342, 347, 348, 349, 356, 363, 364, 365, 370, 371, 373, 376, 381, 382, 383, 385, 388, 389, 390, 392, 393, 397, 398, 400, 401, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 451, 453, 455, 456, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 510, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 576, 579, 580, 583, 584, 585, 587, 588, 597, 598, 599, 600, 603, 604, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 722, 723, 724, 727, 729, 731, 732, 733, 735, 736, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 849, 850, 851, 858, 859, 862, 863, 868, 869, 870, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 927, 928, 929, 930, 946, 947, 954, 956, 962, 970, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 993, 994, 995, 996, 997, 1001, 1002, 1005, 1011, 1012, 1015, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "particular": [0, 4, 11, 13, 37, 39, 40, 60, 71, 78, 92, 100, 104, 122, 125, 128, 156, 164, 170, 171, 200, 202, 208, 234, 258, 262, 264, 270, 281, 290, 294, 303, 313, 314, 317, 348, 349, 358, 362, 370, 371, 374, 375, 376, 378, 380, 381, 382, 384, 385, 389, 390, 393, 403, 404, 407, 408, 410, 411, 412, 413, 440, 463, 467, 490, 538, 557, 603, 647, 652, 657, 666, 668, 678, 681, 706, 721, 778, 825, 840, 912, 914, 971, 973, 975, 977, 981, 984, 985, 986, 987, 989, 991, 1002, 1005, 1015, 1022, 1025, 1029, 1030, 1031, 1033, 1035, 1036, 1037], "As": [0, 4, 7, 20, 25, 27, 30, 40, 43, 53, 55, 57, 58, 66, 82, 86, 100, 112, 113, 119, 122, 124, 126, 131, 144, 152, 157, 165, 170, 172, 173, 176, 179, 182, 184, 189, 191, 200, 204, 208, 218, 226, 236, 249, 256, 258, 259, 261, 262, 264, 274, 279, 286, 304, 316, 325, 334, 348, 349, 352, 354, 355, 358, 362, 363, 371, 374, 375, 376, 378, 380, 381, 389, 390, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 440, 487, 548, 556, 560, 613, 626, 649, 650, 666, 668, 681, 728, 751, 757, 835, 836, 837, 839, 841, 872, 970, 975, 977, 978, 980, 981, 982, 984, 988, 991, 995, 996, 997, 1001, 1002, 1005, 1007, 1011, 1014, 1015, 1016, 1022, 1028, 1033, 1038], "fiscal": 0, "home": [0, 12, 132, 318, 371, 374, 384, 393, 402, 480, 493, 673, 1005], "ensur": [0, 20, 41, 57, 82, 92, 112, 118, 119, 173, 200, 222, 256, 264, 299, 356, 358, 362, 363, 376, 378, 380, 381, 382, 391, 393, 394, 401, 403, 404, 407, 415, 463, 527, 528, 535, 605, 621, 690, 699, 775, 782, 814, 886, 913, 914, 930, 936, 947, 977, 978, 981, 991, 997, 1011, 1024, 1026, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "monei": [0, 218, 1005], "when": [0, 4, 9, 10, 11, 20, 24, 25, 26, 27, 39, 40, 43, 56, 60, 67, 70, 71, 72, 78, 80, 81, 86, 95, 98, 99, 100, 103, 115, 118, 121, 122, 123, 125, 128, 132, 133, 134, 146, 152, 164, 169, 170, 171, 172, 173, 179, 180, 184, 189, 191, 193, 197, 200, 202, 204, 205, 216, 229, 230, 231, 235, 236, 243, 247, 249, 257, 260, 261, 262, 263, 264, 268, 270, 271, 281, 283, 284, 287, 288, 289, 303, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 324, 325, 327, 334, 337, 338, 342, 347, 348, 349, 352, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 393, 394, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 419, 426, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 483, 484, 485, 486, 490, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 509, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 572, 575, 576, 577, 578, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 694, 695, 696, 698, 699, 701, 702, 706, 707, 710, 720, 721, 722, 723, 725, 727, 728, 731, 735, 739, 741, 744, 747, 748, 750, 754, 756, 760, 761, 762, 764, 767, 771, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 788, 789, 790, 793, 794, 795, 796, 804, 808, 809, 812, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 879, 880, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 912, 913, 914, 920, 924, 928, 929, 930, 931, 933, 934, 939, 942, 949, 950, 970, 971, 973, 975, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 1002, 1005, 1007, 1013, 1014, 1015, 1016, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "need": [0, 4, 9, 12, 32, 46, 48, 53, 55, 57, 82, 97, 109, 118, 122, 124, 125, 126, 132, 149, 152, 157, 164, 165, 170, 188, 202, 217, 218, 222, 229, 232, 234, 236, 240, 246, 247, 251, 252, 259, 261, 263, 264, 266, 281, 283, 308, 313, 325, 334, 347, 348, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 419, 431, 435, 439, 443, 459, 497, 535, 545, 566, 576, 577, 582, 583, 584, 585, 621, 629, 632, 633, 634, 636, 643, 660, 662, 665, 670, 673, 686, 714, 715, 716, 717, 774, 778, 788, 789, 790, 793, 794, 804, 805, 806, 814, 822, 825, 833, 834, 850, 853, 856, 860, 865, 866, 870, 888, 895, 898, 970, 971, 973, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 992, 994, 995, 996, 997, 1002, 1005, 1013, 1014, 1015, 1016, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "keep": [0, 6, 42, 75, 98, 100, 118, 148, 164, 169, 170, 171, 172, 173, 184, 200, 201, 202, 208, 218, 251, 256, 259, 307, 308, 316, 323, 334, 347, 348, 352, 358, 362, 363, 368, 376, 380, 389, 390, 401, 403, 404, 405, 406, 407, 408, 426, 444, 459, 476, 477, 478, 479, 487, 488, 528, 534, 535, 538, 541, 548, 550, 552, 554, 556, 559, 562, 564, 589, 592, 594, 597, 605, 628, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 670, 671, 672, 673, 702, 808, 826, 827, 836, 844, 850, 851, 889, 894, 896, 899, 902, 904, 977, 982, 986, 989, 991, 1002, 1005, 1007, 1012, 1014, 1016, 1018, 1022, 1027, 1030, 1031, 1035, 1036, 1038], "while": [0, 4, 7, 8, 10, 12, 17, 20, 24, 27, 34, 37, 39, 43, 44, 48, 55, 62, 66, 70, 73, 75, 92, 99, 100, 112, 115, 118, 119, 129, 132, 149, 153, 158, 160, 161, 164, 169, 170, 171, 172, 176, 179, 181, 184, 189, 194, 200, 202, 204, 216, 229, 232, 233, 236, 237, 247, 248, 252, 255, 256, 260, 261, 262, 264, 268, 269, 270, 271, 272, 274, 283, 303, 304, 305, 308, 309, 310, 313, 316, 319, 331, 334, 347, 349, 356, 358, 363, 368, 369, 370, 371, 372, 375, 376, 378, 380, 381, 382, 384, 385, 388, 390, 391, 397, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 415, 438, 458, 461, 462, 477, 479, 490, 515, 526, 546, 551, 552, 553, 554, 558, 559, 560, 561, 562, 563, 564, 569, 576, 582, 583, 584, 585, 588, 591, 596, 600, 628, 637, 640, 641, 643, 650, 651, 652, 653, 670, 671, 672, 673, 702, 722, 723, 731, 747, 767, 771, 776, 777, 780, 781, 785, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 812, 814, 815, 816, 817, 818, 820, 828, 839, 841, 843, 844, 845, 852, 853, 854, 855, 856, 869, 881, 886, 891, 893, 894, 901, 902, 903, 904, 909, 934, 970, 971, 974, 975, 977, 978, 980, 981, 982, 983, 984, 987, 988, 991, 993, 996, 997, 1001, 1002, 1007, 1013, 1014, 1016, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 70, 200, 218, 308, 384, 388, 390, 408, 410, 411, 515, 772, 773, 996, 1001, 1005, 1030, 1031, 1032, 1038], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 371, 376, 378, 381, 385, 391, 393, 404, 408, 410, 412, 437, 555, 556, 579, 580, 714, 933, 934, 991, 997, 1001, 1002, 1007, 1016, 1033], "toward": [0, 26, 27, 63, 82, 119, 125, 131, 152, 172, 179, 204, 205, 226, 239, 342, 376, 390, 403, 442, 446, 456, 670, 672, 689, 867, 980, 995, 997, 1000, 1002], "cover": [0, 52, 176, 200, 218, 358, 368, 371, 376, 389, 629, 714, 785, 981, 982, 1000], "travel": 0, "expens": [0, 56, 118, 132, 152, 169, 171, 230, 258, 270, 334, 338, 347, 348, 349, 364, 382, 390, 403, 404, 407, 410, 411, 443, 462, 502, 790, 793, 794, 804, 816, 891, 893, 978, 980, 991, 996, 1001, 1005, 1016, 1026], "well": [0, 4, 9, 12, 20, 24, 25, 27, 39, 48, 53, 57, 58, 62, 70, 78, 86, 112, 113, 115, 118, 123, 125, 130, 132, 149, 157, 159, 169, 170, 171, 172, 176, 184, 188, 198, 200, 201, 202, 204, 208, 221, 222, 223, 226, 229, 233, 236, 239, 248, 261, 268, 270, 272, 276, 281, 284, 286, 287, 288, 310, 314, 315, 316, 317, 318, 319, 338, 342, 347, 348, 349, 358, 371, 373, 375, 376, 380, 382, 384, 385, 388, 389, 390, 391, 401, 403, 405, 407, 408, 410, 414, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 453, 454, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 694, 715, 716, 717, 778, 781, 783, 786, 788, 789, 790, 793, 794, 804, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 928, 929, 949, 970, 971, 973, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 991, 994, 995, 997, 998, 1001, 1002, 1005, 1015, 1016, 1022, 1023, 1026, 1028, 1029, 1030, 1033], "budget": [0, 122, 828, 829, 830, 831, 832, 970], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 320, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 389, 390, 391, 393, 394, 395, 396, 397, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 424, 425, 426, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 485, 487, 489, 490, 491, 494, 495, 496, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 756, 757, 759, 761, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 914, 919, 924, 927, 928, 930, 932, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 955, 956, 962, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1020, 1024], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 20, 26, 32, 37, 53, 66, 71, 72, 80, 82, 85, 86, 92, 98, 115, 116, 118, 121, 125, 126, 129, 149, 152, 159, 164, 169, 170, 171, 172, 173, 176, 188, 189, 193, 200, 201, 202, 204, 208, 214, 216, 218, 221, 222, 223, 225, 229, 230, 232, 234, 235, 236, 237, 239, 247, 256, 257, 261, 264, 267, 268, 269, 279, 281, 283, 287, 288, 298, 303, 304, 307, 313, 314, 315, 316, 317, 318, 319, 323, 325, 327, 334, 338, 347, 356, 362, 363, 370, 373, 374, 376, 377, 378, 380, 382, 383, 388, 389, 390, 393, 394, 398, 401, 402, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 426, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 484, 490, 492, 498, 503, 509, 513, 521, 524, 527, 528, 532, 533, 534, 535, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 577, 579, 580, 582, 583, 584, 585, 587, 588, 591, 593, 594, 596, 597, 598, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 623, 624, 626, 627, 629, 630, 632, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 690, 693, 694, 697, 701, 702, 707, 709, 714, 715, 716, 717, 721, 722, 723, 725, 727, 731, 734, 735, 739, 747, 748, 751, 756, 757, 761, 763, 767, 771, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 814, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 909, 919, 920, 929, 930, 944, 949, 956, 970, 971, 973, 974, 975, 976, 978, 979, 980, 981, 982, 984, 985, 987, 988, 989, 991, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1007, 1014, 1015, 1016, 1018, 1020, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "regard": [0, 5, 7, 11, 53, 55, 71, 90, 100, 140, 152, 157, 171, 172, 189, 197, 202, 223, 235, 239, 263, 270, 271, 284, 348, 372, 376, 377, 381, 388, 390, 397, 402, 403, 408, 410, 411, 413, 437, 441, 446, 453, 456, 495, 608, 613, 650, 652, 695, 736, 789, 796, 812, 817, 835, 836, 974, 977, 981, 983, 984, 986, 988, 995, 996, 997, 1009, 1016, 1029, 1032], "might": [0, 4, 5, 31, 42, 44, 60, 62, 70, 121, 130, 146, 158, 165, 170, 171, 172, 176, 200, 218, 229, 261, 263, 284, 298, 315, 338, 344, 358, 362, 363, 370, 374, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 393, 397, 401, 404, 407, 408, 409, 410, 411, 413, 428, 437, 482, 490, 495, 497, 502, 509, 517, 530, 549, 550, 551, 558, 573, 574, 576, 604, 605, 621, 644, 648, 649, 650, 652, 653, 670, 672, 686, 750, 785, 793, 794, 817, 842, 858, 873, 886, 905, 907, 909, 913, 914, 930, 950, 970, 971, 973, 975, 977, 978, 980, 981, 983, 984, 988, 989, 991, 996, 997, 1016, 1023, 1025, 1030, 1031, 1033, 1036, 1037, 1038], "pai": [0, 218, 376], "dn": [0, 984], "continu": [0, 17, 19, 42, 122, 123, 152, 167, 171, 201, 208, 218, 222, 225, 239, 242, 247, 251, 252, 299, 302, 308, 309, 311, 315, 316, 356, 371, 374, 378, 379, 380, 381, 384, 388, 390, 391, 393, 403, 408, 410, 462, 486, 586, 589, 590, 593, 594, 601, 602, 603, 626, 640, 641, 646, 647, 651, 654, 655, 656, 657, 719, 735, 749, 802, 804, 856, 858, 860, 862, 863, 872, 873, 874, 890, 891, 902, 944, 970, 977, 978, 981, 982, 984, 985, 991, 997, 1002, 1004, 1005, 1007, 1014, 1019, 1022, 1024, 1025, 1030, 1035, 1036, 1037], "integr": [0, 42, 71, 146, 160, 189, 299, 315, 374, 378, 379, 380, 382, 384, 390, 393, 408, 413, 440, 709, 748, 779, 956, 980, 988, 1005, 1010, 1023, 1025, 1026, 1034, 1035], "servic": [0, 4, 230, 239, 376, 380, 1005, 1030], "azur": [0, 376], "cirru": [0, 376], "cl": [0, 8, 12, 16, 383, 390, 903], "circlecl": 0, "free": [0, 5, 55, 157, 158, 165, 199, 251, 303, 370, 375, 376, 377, 384, 388, 393, 411, 446, 603, 665, 849, 899, 970, 973, 977, 981, 1002, 1030], "cpu": [0, 61, 262, 281, 318, 362, 363, 374, 382, 390, 393, 411, 490, 626, 641, 645, 647, 649, 652, 653, 655, 657, 659, 660, 662, 670, 673, 790, 804, 814, 815, 816, 837, 845, 886, 949, 981, 1007, 1011, 1016, 1027, 1036, 1037], "server": [0, 149, 362, 373, 374, 490, 1030], "anaconda": [0, 363, 374, 380], "inc": [0, 70, 260, 971, 993, 1005], "storag": [0, 349, 390, 652, 653, 660, 662, 670, 671, 672, 893, 984, 996, 1025, 1030], "thei": [0, 4, 26, 27, 37, 50, 57, 82, 97, 109, 113, 119, 120, 122, 124, 126, 128, 145, 148, 149, 152, 153, 157, 170, 171, 184, 186, 189, 195, 200, 201, 218, 222, 225, 229, 235, 236, 239, 255, 258, 261, 262, 264, 270, 281, 283, 298, 303, 308, 315, 317, 338, 347, 348, 354, 355, 358, 362, 363, 364, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 384, 385, 388, 389, 390, 391, 400, 402, 403, 404, 405, 406, 408, 410, 412, 413, 415, 434, 436, 440, 441, 447, 448, 453, 461, 490, 502, 503, 527, 529, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 582, 585, 604, 613, 623, 637, 640, 641, 646, 652, 653, 654, 655, 656, 664, 666, 670, 672, 675, 681, 755, 756, 758, 761, 767, 782, 790, 804, 822, 828, 829, 830, 831, 832, 850, 853, 855, 861, 872, 873, 895, 898, 901, 902, 903, 904, 908, 970, 971, 973, 975, 977, 980, 981, 982, 983, 984, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 1005, 1007, 1011, 1013, 1014, 1016, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "stage": [0, 7, 26, 72, 112, 117, 123, 126, 374, 380, 390, 399, 403, 410, 442, 547, 548, 553, 554, 555, 556, 582, 583, 585, 596, 978, 991, 1000, 1030, 1034], "nightli": [0, 363, 379, 380], "build": [0, 4, 7, 17, 32, 43, 55, 67, 74, 99, 112, 121, 123, 129, 135, 146, 148, 163, 164, 166, 167, 170, 208, 266, 269, 281, 299, 300, 304, 309, 310, 349, 358, 362, 363, 364, 372, 378, 379, 380, 381, 382, 390, 393, 396, 402, 403, 407, 410, 411, 436, 484, 495, 497, 518, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 579, 580, 582, 583, 585, 621, 622, 624, 685, 707, 708, 791, 795, 799, 808, 813, 815, 854, 871, 873, 901, 902, 903, 904, 906, 926, 970, 971, 978, 981, 985, 987, 991, 996, 997, 1001, 1002, 1005, 1008, 1010, 1014, 1015, 1022, 1025, 1027, 1028, 1029, 1031, 1034], "applic": [3, 5, 9, 19, 49, 55, 80, 167, 176, 200, 217, 223, 255, 264, 303, 362, 364, 371, 373, 376, 378, 382, 384, 385, 388, 390, 401, 403, 407, 408, 409, 410, 413, 415, 438, 440, 446, 490, 492, 526, 527, 528, 547, 548, 623, 682, 683, 684, 688, 706, 722, 723, 731, 776, 777, 780, 819, 970, 977, 978, 979, 980, 981, 985, 987, 993, 997, 1001, 1002, 1005, 1014, 1016, 1022, 1023, 1028, 1030, 1033], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 55, 57, 66, 95, 112, 115, 118, 120, 125, 126, 152, 167, 172, 176, 179, 184, 186, 189, 193, 194, 200, 202, 204, 217, 218, 223, 229, 230, 237, 239, 242, 259, 261, 266, 270, 271, 275, 281, 286, 293, 307, 316, 331, 334, 338, 342, 343, 347, 348, 356, 358, 362, 371, 372, 373, 374, 375, 377, 378, 381, 382, 385, 388, 390, 401, 402, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 438, 441, 443, 444, 446, 451, 456, 459, 472, 497, 502, 503, 509, 510, 511, 512, 517, 518, 522, 525, 527, 531, 533, 536, 537, 538, 539, 540, 541, 542, 545, 546, 551, 555, 558, 561, 565, 567, 583, 604, 625, 637, 642, 644, 646, 648, 649, 650, 651, 652, 653, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 679, 680, 681, 682, 683, 685, 687, 689, 702, 710, 722, 723, 728, 732, 777, 780, 781, 788, 789, 791, 792, 793, 794, 795, 797, 798, 799, 800, 805, 806, 807, 808, 809, 810, 813, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 859, 860, 866, 874, 877, 883, 884, 893, 894, 901, 903, 919, 930, 971, 972, 976, 977, 978, 980, 981, 982, 983, 984, 985, 989, 991, 995, 998, 1002, 1003, 1005, 1008, 1009, 1010, 1016, 1017, 1018, 1022, 1023, 1025, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "medium": [3, 167, 235, 276, 310, 334, 403, 408, 637, 867, 974, 977], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 55, 57, 58, 60, 61, 62, 66, 67, 73, 78, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 101, 103, 105, 115, 124, 125, 128, 129, 145, 152, 154, 155, 158, 159, 167, 169, 171, 172, 179, 180, 181, 182, 186, 190, 195, 198, 201, 202, 203, 206, 213, 214, 221, 226, 229, 232, 233, 234, 235, 236, 238, 239, 248, 255, 257, 259, 261, 263, 264, 266, 267, 268, 287, 288, 289, 297, 300, 304, 305, 306, 307, 310, 314, 317, 319, 323, 327, 330, 332, 333, 334, 342, 344, 347, 348, 349, 352, 362, 363, 364, 371, 372, 376, 381, 385, 388, 389, 390, 393, 394, 400, 401, 402, 405, 407, 408, 411, 413, 414, 438, 439, 440, 442, 443, 444, 451, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 487, 488, 489, 509, 521, 528, 530, 532, 534, 541, 551, 552, 553, 554, 555, 556, 558, 559, 577, 581, 582, 585, 588, 626, 627, 637, 651, 660, 661, 673, 677, 686, 689, 699, 713, 731, 733, 736, 774, 784, 792, 795, 796, 800, 807, 810, 811, 814, 817, 819, 828, 829, 830, 832, 835, 836, 837, 838, 839, 841, 843, 844, 845, 850, 851, 868, 870, 882, 887, 891, 895, 896, 897, 898, 899, 901, 902, 903, 904, 907, 929, 933, 934, 944, 945, 947, 950, 956, 971, 973, 974, 976, 977, 978, 980, 981, 982, 983, 984, 985, 988, 991, 993, 995, 996, 997, 1005, 1010, 1012, 1014, 1015, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1037, 1038], "interact": [3, 126, 167, 200, 226, 231, 262, 314, 375, 377, 378, 380, 382, 388, 390, 391, 404, 553, 554, 555, 556, 626, 627, 868, 872, 970, 973, 977, 978, 979, 986, 988, 991, 1000, 1002, 1024, 1029, 1036, 1037], "user": [3, 25, 55, 69, 95, 118, 161, 167, 170, 188, 221, 236, 251, 258, 268, 270, 281, 287, 288, 291, 309, 313, 314, 315, 316, 317, 318, 319, 358, 362, 363, 365, 370, 374, 375, 376, 378, 380, 382, 383, 384, 388, 389, 390, 393, 394, 397, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 414, 415, 416, 417, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 926, 930, 970, 971, 977, 978, 980, 981, 982, 984, 991, 995, 999, 1001, 1002, 1005, 1009, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "interfac": [3, 111, 112, 167, 369, 370, 377, 378, 385, 388, 390, 407, 413, 414, 435, 439, 444, 490, 693, 790, 793, 794, 804, 853, 854, 879, 966, 970, 984, 996, 1001, 1002, 1005, 1022, 1024, 1027, 1028, 1030, 1031, 1036, 1038], "compress": [3, 11, 15, 48, 167, 303, 371, 403, 408, 411, 412, 646, 666, 686, 823, 952, 955, 977, 991, 1015, 1022, 1031], "sens": [3, 4, 15, 25, 55, 158, 167, 170, 176, 233, 236, 303, 309, 323, 334, 347, 358, 362, 376, 377, 390, 403, 405, 407, 412, 456, 463, 464, 465, 466, 467, 468, 469, 470, 646, 649, 650, 666, 791, 801, 890, 975, 977, 984, 985, 987, 991, 994], "tomographi": [3, 15, 167, 646, 666, 977], "reconstruct": [3, 15, 20, 95, 96, 100, 167, 199, 224, 225, 317, 408, 411, 476, 477, 478, 525, 527, 529, 531, 532, 533, 534, 536, 537, 542, 577, 581, 646, 666, 682, 683, 687, 885, 886, 977, 978, 1036], "l1": [3, 7, 15, 30, 40, 82, 85, 167, 178, 185, 189, 211, 215, 219, 231, 262, 281, 316, 385, 388, 402, 403, 405, 408, 435, 439, 444, 451, 458, 463, 464, 465, 466, 467, 468, 469, 470, 472, 490, 496, 498, 525, 531, 532, 533, 534, 536, 537, 541, 542, 552, 559, 583, 584, 585, 591, 638, 639, 640, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 664, 666, 670, 671, 672, 673, 675, 682, 728, 755, 761, 766, 771, 772, 773, 778, 804, 811, 819, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 865, 873, 880, 893, 894, 900, 902, 904, 916, 963, 977, 979, 981, 984, 991, 995, 996, 997, 1014, 1027, 1029, 1035, 1038], "prior": [3, 15, 46, 47, 57, 67, 151, 152, 162, 167, 172, 179, 181, 184, 245, 247, 251, 252, 253, 261, 376, 378, 380, 390, 393, 403, 406, 408, 410, 413, 459, 517, 530, 542, 543, 544, 545, 553, 579, 580, 605, 607, 608, 609, 613, 616, 617, 624, 638, 639, 640, 641, 645, 646, 648, 649, 650, 654, 655, 656, 666, 672, 675, 710, 788, 828, 829, 830, 831, 832, 853, 854, 868, 895, 898, 948, 970, 973, 975, 977, 980, 981, 983, 989, 997, 998, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1038], "lasso": [3, 15, 105, 132, 138, 167, 170, 178, 219, 316, 342, 362, 388, 405, 406, 408, 410, 411, 412, 465, 466, 472, 495, 518, 525, 531, 533, 536, 537, 539, 540, 542, 591, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 672, 675, 676, 677, 678, 679, 680, 715, 716, 717, 814, 815, 816, 854, 873, 970, 981, 995, 1003, 1011, 1014, 1018, 1022, 1026, 1027, 1028, 1030, 1031, 1033, 1035, 1036], "recognit": [3, 9, 15, 167, 300, 308, 369, 381, 408, 410, 412, 488, 496, 526, 528, 535, 691, 702, 707, 734, 762, 781, 782, 788, 804, 819, 873, 898, 973, 977, 981, 982, 986, 996, 998, 1007, 1010, 1018, 1022], "eigenfac": [3, 15, 167, 371, 408, 488, 535, 691, 707, 804, 819, 873, 898, 998, 1010, 1022], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 70, 72, 74, 133, 137, 139, 142, 143, 147, 150, 167, 178, 193, 219, 229, 235, 237, 241, 242, 255, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 271, 272, 276, 305, 313, 315, 321, 325, 328, 329, 332, 341, 342, 345, 347, 362, 365, 371, 378, 382, 390, 397, 404, 407, 408, 410, 412, 431, 488, 498, 506, 509, 535, 549, 550, 557, 561, 562, 571, 587, 588, 593, 594, 599, 625, 633, 637, 662, 670, 671, 672, 683, 691, 692, 694, 696, 707, 728, 735, 754, 790, 804, 810, 815, 816, 819, 821, 822, 839, 853, 854, 866, 868, 873, 889, 890, 969, 970, 973, 976, 978, 979, 981, 982, 986, 994, 996, 998, 1003, 1007, 1010, 1011, 1012, 1016, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1029], "imag": [3, 6, 13, 15, 20, 32, 36, 46, 48, 51, 54, 58, 68, 70, 89, 94, 95, 107, 120, 147, 149, 156, 167, 191, 222, 231, 234, 238, 259, 290, 299, 300, 314, 322, 323, 347, 348, 368, 369, 371, 373, 376, 381, 384, 388, 390, 393, 396, 403, 408, 435, 439, 446, 456, 487, 488, 489, 490, 496, 497, 500, 501, 528, 529, 531, 535, 601, 602, 685, 691, 731, 819, 863, 977, 981, 982, 984, 986, 993, 997, 1001, 1005, 1007, 1012, 1013, 1015, 1016, 1018, 1022, 1025, 1030, 1031, 1035, 1037, 1038], "denois": [3, 15, 94, 107, 167, 408, 490, 529, 531, 535, 578, 581, 819, 863], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 74, 94, 105, 107, 133, 139, 141, 147, 151, 153, 154, 155, 156, 159, 162, 164, 177, 201, 214, 228, 229, 237, 241, 244, 255, 259, 261, 263, 266, 267, 271, 276, 282, 295, 316, 324, 327, 329, 331, 334, 335, 336, 339, 340, 343, 345, 358, 362, 365, 368, 378, 388, 390, 401, 403, 404, 407, 410, 411, 426, 434, 442, 446, 455, 456, 459, 476, 477, 478, 485, 490, 492, 496, 498, 508, 527, 528, 529, 535, 538, 548, 550, 552, 554, 556, 559, 562, 564, 587, 588, 604, 605, 625, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 670, 671, 672, 673, 682, 684, 685, 686, 689, 728, 751, 752, 754, 759, 760, 767, 768, 769, 770, 790, 796, 801, 804, 819, 821, 826, 827, 833, 834, 836, 838, 844, 851, 853, 854, 859, 863, 865, 866, 868, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 902, 904, 970, 976, 977, 978, 981, 982, 984, 987, 994, 995, 1003, 1007, 1011, 1012, 1017, 1018, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "pca": [3, 6, 15, 69, 72, 74, 76, 86, 94, 97, 106, 107, 167, 222, 224, 234, 237, 241, 260, 281, 285, 290, 316, 358, 368, 378, 390, 402, 403, 404, 409, 419, 467, 470, 490, 496, 498, 508, 526, 527, 528, 529, 533, 534, 537, 538, 543, 637, 652, 682, 684, 686, 790, 815, 819, 842, 849, 852, 853, 855, 863, 871, 873, 973, 975, 978, 984, 991, 995, 997, 1012, 1017, 1018, 1022, 1024, 1025, 1026, 1028, 1029, 1030, 1033, 1035, 1036, 1037], "libsvm": [3, 15, 167, 176, 332, 369, 382, 481, 502, 557, 893, 894, 895, 896, 897, 898, 899, 996, 1018, 1022, 1024, 1030, 1033, 1036], "gui": [3, 15, 167, 481, 897, 898, 1014, 1022, 1023, 1033], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 56, 58, 61, 69, 71, 76, 78, 82, 86, 94, 95, 107, 110, 112, 115, 117, 121, 123, 124, 125, 127, 129, 131, 132, 135, 136, 138, 139, 141, 143, 145, 150, 155, 156, 158, 159, 160, 161, 165, 168, 169, 173, 174, 180, 182, 186, 190, 191, 193, 195, 196, 197, 201, 202, 204, 206, 208, 212, 213, 215, 216, 217, 219, 229, 232, 237, 246, 248, 249, 250, 253, 255, 256, 257, 259, 262, 264, 266, 267, 269, 270, 274, 275, 277, 279, 281, 283, 284, 285, 287, 290, 294, 304, 307, 309, 310, 313, 315, 317, 318, 319, 322, 323, 331, 333, 334, 335, 336, 337, 339, 340, 342, 344, 348, 349, 353, 354, 355, 358, 365, 368, 370, 371, 379, 382, 390, 392, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 412, 413, 422, 426, 428, 431, 436, 443, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 482, 483, 484, 490, 492, 494, 495, 496, 497, 503, 516, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 582, 583, 585, 587, 588, 591, 596, 600, 603, 604, 605, 609, 621, 626, 627, 628, 629, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 695, 700, 705, 715, 716, 717, 727, 728, 734, 735, 743, 746, 778, 781, 782, 783, 788, 789, 790, 793, 794, 795, 796, 804, 805, 806, 807, 811, 812, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 838, 839, 840, 842, 844, 849, 850, 851, 853, 854, 856, 858, 860, 865, 866, 868, 869, 870, 872, 873, 874, 878, 879, 881, 882, 883, 884, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 908, 971, 973, 974, 975, 978, 979, 982, 984, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 1001, 1002, 1003, 1005, 1008, 1010, 1012, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027], "complex": [3, 9, 14, 15, 16, 152, 157, 164, 167, 204, 214, 217, 228, 235, 236, 244, 254, 270, 277, 304, 313, 316, 317, 321, 328, 334, 338, 349, 351, 357, 372, 376, 381, 388, 404, 408, 410, 414, 434, 438, 441, 442, 444, 461, 483, 494, 495, 496, 508, 528, 535, 545, 551, 552, 553, 554, 556, 558, 559, 598, 624, 632, 650, 652, 670, 671, 727, 743, 790, 819, 821, 849, 853, 854, 858, 866, 873, 889, 893, 896, 899, 901, 902, 903, 904, 970, 971, 973, 974, 976, 978, 980, 982, 987, 991, 994, 1002, 1003, 1005, 1018, 1023, 1025, 1031, 1032, 1035], "influenc": [3, 9, 15, 80, 81, 112, 167, 170, 182, 246, 269, 303, 310, 334, 338, 342, 358, 364, 405, 408, 410, 426, 434, 448, 459, 476, 477, 478, 483, 495, 548, 550, 552, 554, 556, 559, 562, 564, 605, 622, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 670, 672, 673, 727, 743, 819, 826, 827, 835, 836, 843, 844, 851, 870, 871, 882, 894, 896, 899, 902, 904, 913, 970, 975, 976, 984, 987, 991, 995, 996, 1005, 1025, 1030, 1031], "core": [3, 15, 49, 55, 65, 71, 112, 118, 120, 121, 167, 170, 171, 318, 361, 363, 365, 374, 376, 379, 384, 390, 393, 403, 408, 410, 411, 414, 438, 440, 443, 444, 449, 451, 493, 532, 583, 588, 652, 653, 660, 662, 670, 828, 829, 830, 831, 832, 837, 845, 977, 984, 987, 996, 999, 1002, 1003, 1005, 1014, 1016, 1018, 1024, 1026, 1027, 1029, 1032, 1036, 1037, 1038], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 34, 35, 45, 71, 72, 73, 88, 93, 98, 111, 112, 114, 116, 118, 119, 120, 121, 123, 126, 130, 137, 142, 145, 146, 147, 148, 149, 151, 162, 170, 171, 176, 178, 192, 193, 200, 208, 219, 228, 230, 234, 239, 242, 244, 249, 254, 258, 259, 260, 261, 262, 270, 276, 277, 282, 283, 289, 291, 294, 295, 296, 301, 305, 322, 328, 329, 330, 334, 337, 340, 342, 343, 345, 346, 348, 349, 350, 358, 362, 364, 365, 369, 370, 371, 373, 378, 381, 385, 389, 390, 398, 401, 403, 404, 407, 408, 411, 412, 420, 431, 463, 469, 476, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 504, 506, 508, 509, 513, 514, 516, 517, 535, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 563, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 600, 603, 604, 605, 607, 608, 616, 625, 626, 627, 637, 652, 653, 660, 662, 668, 669, 670, 691, 697, 699, 702, 706, 707, 709, 710, 712, 719, 720, 722, 723, 727, 728, 731, 734, 735, 736, 747, 749, 751, 752, 754, 775, 776, 777, 779, 780, 781, 782, 785, 787, 790, 791, 793, 794, 795, 796, 804, 808, 809, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 835, 840, 842, 843, 849, 850, 851, 853, 857, 860, 865, 866, 867, 868, 873, 874, 877, 879, 888, 889, 890, 893, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 916, 919, 927, 970, 971, 973, 974, 975, 978, 979, 983, 986, 988, 989, 991, 992, 994, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1012, 1013, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 57, 60, 62, 64, 70, 80, 81, 118, 123, 173, 180, 194, 195, 229, 233, 240, 241, 246, 248, 254, 267, 268, 272, 277, 286, 289, 291, 297, 305, 316, 321, 323, 328, 341, 350, 352, 362, 364, 365, 368, 369, 370, 376, 381, 388, 390, 401, 403, 404, 406, 407, 408, 410, 413, 441, 443, 462, 481, 482, 483, 493, 497, 502, 515, 530, 538, 558, 609, 619, 646, 652, 660, 662, 668, 670, 691, 697, 699, 701, 707, 711, 722, 730, 784, 786, 790, 804, 819, 828, 830, 832, 835, 840, 853, 854, 856, 857, 865, 889, 890, 891, 893, 905, 906, 907, 927, 970, 973, 977, 979, 981, 982, 983, 985, 988, 991, 993, 995, 996, 1000, 1002, 1005, 1008, 1018, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "document": [3, 14, 15, 18, 22, 31, 45, 51, 57, 71, 73, 89, 90, 92, 95, 129, 181, 183, 197, 198, 215, 233, 236, 237, 239, 262, 299, 326, 339, 342, 349, 350, 362, 363, 364, 365, 370, 371, 372, 374, 375, 377, 378, 379, 380, 381, 382, 384, 388, 390, 393, 394, 397, 400, 402, 403, 408, 411, 414, 438, 441, 442, 443, 444, 447, 451, 458, 482, 483, 493, 495, 505, 515, 517, 530, 538, 558, 582, 583, 584, 585, 588, 598, 625, 633, 637, 652, 653, 660, 662, 667, 668, 669, 670, 690, 691, 693, 697, 699, 705, 711, 730, 751, 752, 762, 771, 772, 773, 784, 786, 790, 793, 794, 796, 804, 812, 815, 817, 820, 823, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 854, 865, 893, 898, 909, 912, 914, 927, 947, 970, 977, 979, 981, 982, 983, 984, 985, 989, 995, 998, 999, 1000, 1005, 1009, 1014, 1016, 1023, 1024, 1028], "outlier": [3, 15, 44, 80, 81, 125, 128, 167, 178, 202, 203, 204, 206, 219, 228, 244, 282, 295, 302, 311, 344, 371, 390, 403, 405, 410, 425, 440, 458, 460, 463, 464, 467, 468, 469, 470, 484, 485, 486, 490, 504, 506, 516, 518, 557, 633, 643, 664, 665, 666, 670, 671, 672, 673, 686, 696, 819, 839, 843, 854, 862, 863, 865, 866, 867, 869, 870, 871, 872, 873, 878, 879, 880, 881, 882, 883, 884, 896, 897, 899, 981, 995, 996, 1001, 1003, 1017, 1018, 1022, 1027, 1028, 1030], "detect": [3, 8, 10, 15, 20, 63, 65, 80, 82, 119, 128, 167, 181, 204, 228, 244, 254, 261, 264, 277, 282, 295, 309, 333, 371, 374, 376, 380, 388, 390, 401, 402, 403, 405, 407, 411, 425, 440, 443, 458, 460, 463, 464, 467, 468, 469, 470, 482, 483, 485, 486, 490, 504, 506, 509, 516, 531, 532, 533, 540, 557, 558, 582, 585, 590, 633, 671, 692, 696, 720, 782, 819, 839, 843, 854, 863, 866, 867, 871, 872, 873, 893, 897, 973, 977, 1001, 1002, 1003, 1005, 1011, 1016, 1017, 1018, 1022, 1025, 1028, 1029, 1030, 1032, 1034, 1035, 1037, 1038], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 20, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 71, 73, 80, 81, 82, 86, 90, 94, 95, 100, 107, 109, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 134, 138, 145, 146, 149, 152, 158, 159, 160, 167, 169, 170, 171, 172, 173, 179, 184, 185, 188, 189, 191, 193, 195, 196, 199, 200, 201, 202, 205, 208, 213, 214, 218, 221, 222, 223, 229, 230, 231, 232, 234, 235, 236, 239, 243, 246, 248, 250, 251, 255, 256, 259, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 275, 279, 283, 287, 288, 289, 290, 291, 294, 298, 299, 300, 303, 305, 306, 307, 308, 309, 310, 313, 315, 316, 322, 323, 326, 327, 331, 333, 336, 338, 342, 347, 348, 349, 354, 355, 358, 362, 363, 364, 368, 369, 371, 373, 374, 376, 378, 380, 381, 383, 384, 389, 390, 391, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 420, 427, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 482, 483, 487, 489, 490, 491, 493, 496, 497, 498, 502, 503, 504, 509, 517, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 692, 693, 694, 695, 696, 697, 707, 708, 713, 715, 716, 719, 720, 721, 722, 723, 724, 727, 731, 733, 734, 738, 739, 741, 743, 744, 746, 749, 772, 773, 775, 776, 777, 778, 780, 782, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 913, 914, 924, 925, 930, 934, 949, 950, 951, 952, 955, 956, 962, 965, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1002, 1008, 1010, 1011, 1012, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 56, 58, 62, 70, 71, 72, 73, 75, 85, 106, 109, 110, 111, 112, 114, 115, 116, 118, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 136, 140, 141, 146, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 167, 170, 171, 172, 173, 176, 179, 182, 183, 184, 192, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 214, 215, 217, 218, 229, 230, 232, 234, 236, 238, 247, 248, 249, 250, 251, 252, 254, 255, 259, 261, 263, 264, 267, 270, 271, 275, 277, 279, 284, 287, 288, 289, 292, 293, 300, 303, 304, 308, 309, 313, 314, 315, 316, 317, 319, 323, 325, 326, 327, 330, 331, 333, 334, 338, 340, 341, 342, 343, 347, 348, 353, 354, 355, 356, 358, 361, 363, 365, 368, 371, 373, 376, 378, 383, 385, 390, 392, 394, 397, 398, 399, 401, 402, 403, 404, 408, 410, 411, 412, 420, 426, 431, 432, 433, 434, 436, 437, 438, 441, 442, 443, 459, 463, 476, 477, 478, 481, 495, 502, 518, 528, 535, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 576, 587, 588, 596, 600, 604, 605, 607, 608, 609, 610, 616, 619, 621, 622, 624, 625, 626, 627, 628, 629, 631, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 708, 709, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 731, 734, 735, 736, 739, 741, 743, 745, 749, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 787, 788, 789, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 840, 843, 844, 850, 851, 853, 860, 873, 874, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 955, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 982, 983, 984, 985, 987, 988, 989, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1016, 1018, 1019, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "latenc": [3, 7, 15, 123, 167, 361, 518, 559, 666, 672, 819, 873, 899, 946, 955, 1001, 1018, 1025], "speci": [3, 15, 90, 167, 239, 282, 295, 347, 371, 409, 492, 700, 782, 838, 897, 908, 981, 987, 1022], "distribut": [3, 4, 8, 9, 10, 15, 20, 27, 37, 39, 44, 52, 53, 55, 57, 62, 75, 79, 80, 81, 92, 112, 114, 125, 128, 144, 149, 152, 161, 167, 169, 170, 173, 176, 179, 200, 202, 204, 223, 225, 229, 233, 239, 246, 251, 252, 257, 261, 267, 269, 282, 286, 295, 302, 303, 305, 308, 311, 319, 322, 323, 339, 342, 347, 362, 363, 371, 372, 373, 374, 376, 377, 380, 381, 382, 390, 397, 401, 402, 403, 405, 407, 408, 409, 415, 441, 443, 463, 464, 465, 466, 467, 468, 469, 470, 482, 492, 497, 509, 510, 511, 512, 513, 517, 526, 527, 530, 544, 545, 546, 557, 605, 619, 634, 636, 638, 639, 642, 652, 653, 663, 673, 674, 682, 683, 684, 686, 700, 702, 717, 745, 782, 788, 789, 794, 795, 802, 804, 808, 809, 819, 829, 832, 838, 842, 849, 856, 869, 870, 871, 872, 873, 881, 882, 883, 888, 889, 897, 908, 932, 949, 970, 975, 977, 979, 980, 981, 983, 984, 986, 987, 993, 994, 999, 1001, 1002, 1007, 1011, 1015, 1017, 1018, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "relat": [3, 7, 12, 15, 17, 44, 62, 96, 98, 100, 167, 168, 170, 195, 204, 236, 239, 254, 268, 318, 338, 347, 356, 365, 371, 372, 375, 379, 380, 381, 383, 384, 385, 388, 390, 391, 392, 394, 397, 402, 403, 404, 405, 406, 407, 408, 410, 413, 444, 458, 463, 490, 543, 544, 556, 557, 633, 667, 671, 686, 695, 716, 736, 811, 816, 851, 852, 854, 857, 858, 863, 866, 867, 868, 869, 872, 881, 897, 970, 975, 981, 982, 984, 985, 988, 991, 996, 997, 998, 999, 1002, 1018, 1022, 1026, 1027, 1028, 1030, 1031, 1034, 1035, 1038], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 20, 25, 26, 27, 30, 33, 36, 42, 58, 60, 63, 68, 69, 70, 71, 72, 76, 80, 81, 86, 89, 90, 91, 92, 95, 97, 99, 103, 104, 106, 110, 111, 118, 121, 127, 131, 132, 133, 135, 136, 144, 146, 150, 152, 153, 154, 157, 158, 160, 164, 165, 168, 169, 170, 171, 174, 178, 183, 184, 186, 187, 189, 196, 200, 201, 202, 204, 205, 209, 215, 216, 217, 219, 228, 231, 233, 236, 239, 242, 243, 244, 254, 258, 261, 267, 268, 270, 271, 275, 277, 279, 284, 289, 290, 292, 296, 299, 301, 302, 303, 306, 310, 311, 312, 314, 317, 318, 319, 329, 330, 331, 334, 338, 342, 345, 346, 349, 350, 353, 355, 356, 358, 365, 368, 369, 370, 371, 372, 373, 374, 378, 379, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 397, 401, 403, 405, 406, 407, 408, 409, 413, 414, 415, 416, 419, 424, 426, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 573, 574, 575, 576, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 612, 613, 614, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 691, 695, 696, 697, 707, 715, 716, 717, 734, 751, 752, 756, 757, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 774, 778, 781, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 913, 914, 927, 946, 956, 957, 958, 962, 970, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 992, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "engin": [3, 15, 40, 117, 157, 167, 362, 370, 373, 403, 409, 411, 458, 490, 556, 633, 667, 695, 811, 816, 851, 852, 854, 857, 858, 863, 866, 867, 868, 872, 971, 981, 991, 999, 1028], "topic": [3, 7, 8, 15, 70, 167, 347, 348, 349, 371, 372, 407, 408, 411, 482, 491, 530, 532, 534, 541, 582, 585, 977, 982, 1001, 1002, 1016, 1027, 1029], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 55, 69, 70, 71, 76, 85, 95, 149, 167, 215, 254, 277, 300, 347, 349, 358, 365, 368, 371, 373, 378, 382, 385, 388, 403, 404, 407, 408, 444, 446, 449, 450, 456, 458, 482, 483, 487, 488, 497, 498, 525, 528, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 577, 578, 582, 583, 585, 587, 588, 591, 593, 625, 712, 781, 790, 804, 830, 852, 853, 898, 930, 945, 970, 978, 982, 986, 991, 995, 1001, 1005, 1008, 1012, 1013, 1018, 1022, 1023, 1031, 1034], "neg": [3, 4, 15, 16, 24, 60, 75, 78, 86, 118, 124, 125, 129, 167, 170, 178, 200, 218, 219, 250, 251, 258, 261, 264, 268, 270, 271, 281, 303, 307, 317, 347, 382, 390, 391, 403, 407, 410, 411, 412, 414, 415, 426, 434, 438, 446, 459, 463, 476, 477, 478, 482, 525, 527, 529, 530, 531, 532, 534, 536, 538, 541, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 582, 585, 586, 589, 590, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 663, 664, 666, 667, 671, 672, 673, 674, 681, 692, 693, 698, 699, 706, 707, 709, 712, 713, 715, 716, 717, 720, 722, 723, 724, 728, 731, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 775, 776, 777, 778, 780, 784, 788, 789, 796, 812, 814, 819, 826, 827, 836, 839, 844, 851, 860, 869, 871, 872, 877, 881, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 928, 930, 949, 979, 981, 982, 984, 985, 986, 987, 995, 996, 1016, 1017, 1018, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 62, 70, 79, 80, 81, 82, 85, 95, 96, 97, 106, 159, 167, 173, 178, 186, 201, 205, 219, 230, 233, 234, 251, 254, 268, 277, 299, 317, 322, 323, 338, 347, 348, 349, 356, 362, 365, 371, 372, 373, 376, 378, 382, 385, 388, 389, 390, 400, 404, 405, 406, 411, 412, 413, 414, 415, 425, 426, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 448, 451, 453, 454, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 486, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 504, 513, 515, 517, 518, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 579, 580, 582, 583, 584, 585, 587, 588, 597, 598, 599, 600, 601, 602, 603, 605, 614, 623, 624, 625, 627, 629, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 701, 706, 707, 708, 709, 710, 712, 722, 723, 724, 727, 731, 732, 733, 734, 747, 748, 751, 752, 753, 754, 756, 757, 759, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 780, 781, 783, 784, 787, 788, 789, 790, 793, 794, 804, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 862, 864, 865, 866, 868, 870, 871, 872, 873, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 909, 911, 912, 913, 914, 919, 928, 929, 930, 931, 934, 935, 936, 944, 945, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 967, 971, 973, 975, 977, 978, 982, 983, 984, 985, 991, 992, 993, 994, 995, 996, 997, 998, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "factor": [3, 15, 26, 31, 44, 46, 53, 55, 62, 94, 100, 105, 107, 130, 167, 170, 226, 229, 239, 272, 273, 281, 282, 295, 297, 298, 303, 305, 315, 317, 362, 363, 376, 382, 385, 390, 400, 402, 403, 410, 411, 413, 434, 436, 448, 463, 465, 466, 467, 468, 470, 472, 482, 498, 508, 509, 521, 526, 529, 530, 532, 534, 535, 538, 539, 540, 541, 543, 544, 555, 556, 557, 582, 585, 591, 607, 643, 644, 645, 648, 649, 650, 676, 677, 686, 713, 776, 790, 793, 794, 815, 839, 873, 887, 889, 897, 929, 930, 970, 977, 978, 984, 991, 994, 998, 1001, 1017, 1018, 1022, 1023, 1025, 1026, 1028, 1036, 1038], "latent": [3, 15, 17, 106, 167, 300, 348, 406, 411, 413, 482, 526, 530, 532, 533, 534, 537, 538, 582, 585, 849, 980, 1001, 1016, 1017, 1018, 1024, 1027], "dirichlet": [3, 15, 167, 246, 247, 252, 256, 411, 482, 530, 532, 534, 582, 585, 788, 1001, 1017, 1018, 1022, 1027, 1028], "alloc": [3, 15, 25, 61, 167, 273, 315, 372, 376, 377, 403, 411, 437, 441, 453, 482, 530, 532, 534, 578, 582, 585, 640, 646, 654, 656, 793, 794, 796, 812, 817, 820, 970, 991, 1001, 1017, 1018, 1026, 1027, 1032, 1033], "visual": [3, 4, 9, 15, 16, 20, 25, 30, 32, 43, 46, 49, 52, 57, 60, 61, 80, 91, 94, 97, 99, 105, 107, 118, 126, 128, 130, 134, 135, 160, 165, 167, 171, 173, 184, 191, 200, 202, 218, 226, 228, 231, 234, 240, 241, 244, 251, 254, 255, 257, 258, 262, 271, 277, 286, 290, 291, 296, 298, 301, 303, 307, 308, 313, 315, 323, 338, 365, 368, 372, 374, 382, 383, 400, 405, 407, 408, 409, 410, 432, 435, 439, 440, 448, 466, 490, 496, 498, 501, 504, 508, 516, 526, 528, 535, 558, 560, 565, 625, 627, 652, 683, 686, 691, 692, 694, 695, 696, 712, 720, 775, 782, 791, 792, 795, 796, 807, 808, 809, 810, 811, 812, 819, 850, 854, 858, 862, 863, 865, 869, 870, 871, 873, 895, 898, 907, 926, 976, 978, 979, 984, 985, 987, 988, 991, 997, 1001, 1007, 1018, 1025, 1032, 1033, 1034, 1036], "stock": [3, 15, 167, 403, 405, 448, 466, 683, 1010], "market": [3, 15, 167, 403, 405, 448, 466, 683, 1005, 1010], "wikipedia": [3, 15, 24, 167, 384, 402, 403, 589, 601, 602, 630, 650, 662, 665, 676, 677, 689, 698, 699, 701, 703, 706, 710, 712, 719, 722, 723, 724, 727, 728, 731, 736, 749, 776, 778, 779, 781, 782, 783, 784, 835, 836, 841, 842, 843, 844, 871, 887, 901, 902, 973, 977, 981, 984, 993, 997, 1016, 1022, 1029], "princip": [3, 15, 84, 87, 90, 94, 97, 99, 100, 102, 104, 107, 130, 167, 221, 234, 237, 290, 308, 315, 368, 403, 406, 415, 478, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 544, 651, 682, 683, 684, 686, 687, 819, 842, 854, 873, 929, 930, 978, 984, 1017, 1018, 1022], "eigenvector": [3, 15, 46, 86, 90, 167, 246, 403, 446, 456, 528, 529, 535, 544, 682, 683, 685, 689, 978, 1022, 1026, 1036], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 374, 376, 378, 380, 388, 390, 391, 393, 400, 403, 404, 406, 410, 444, 450, 462, 482, 483, 502, 503, 531, 540, 551, 552, 553, 554, 558, 559, 560, 639, 640, 641, 644, 645, 646, 647, 648, 649, 654, 655, 656, 657, 675, 676, 677, 678, 790, 793, 794, 804, 811, 814, 851, 853, 891, 901, 902, 903, 904, 934, 935, 965, 970, 977, 978, 980, 981, 991, 993, 995, 1001, 1005, 1013, 1016, 1027, 1029, 1032, 1035, 1036], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 369, 371, 373, 374, 380, 381, 384, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 504, 997, 1012, 1014, 1016, 1018, 1026, 1027, 1030, 1034, 1035, 1036], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 362, 363, 365, 373, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 389, 390, 393, 396, 397, 402, 414, 415, 419, 433, 450, 455, 465, 479, 501, 502, 525, 541, 549, 566, 567, 571, 577, 586, 589, 590, 592, 595, 597, 606, 610, 614, 615, 618, 623, 632, 636, 644, 645, 648, 654, 655, 657, 661, 669, 693, 702, 709, 715, 716, 717, 719, 721, 723, 724, 732, 736, 737, 739, 740, 744, 747, 749, 756, 757, 761, 762, 764, 766, 774, 776, 785, 797, 798, 799, 800, 801, 802, 803, 821, 823, 825, 827, 829, 833, 834, 843, 844, 845, 847, 855, 856, 859, 861, 864, 875, 881, 885, 888, 894, 903, 904, 905, 906, 919, 928, 930, 932, 933, 935, 943, 944, 945, 949, 952, 969, 971, 979, 1002, 1003, 1005, 1008, 1011, 1012, 1016, 1018, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1035, 1037, 1038], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 374, 376, 377, 378, 380, 381, 382, 383, 384, 388, 390, 391, 393, 399, 403, 405, 407, 410, 413, 414, 415, 431, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 456, 458, 461, 462, 465, 466, 525, 526, 527, 528, 529, 531, 533, 535, 536, 537, 539, 540, 542, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 576, 586, 588, 589, 590, 592, 593, 594, 596, 604, 605, 628, 634, 640, 641, 643, 645, 646, 647, 649, 650, 654, 655, 656, 657, 676, 677, 682, 683, 684, 685, 686, 687, 688, 774, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 825, 826, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 850, 851, 852, 855, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 924, 925, 949, 952, 955, 970, 980, 982, 985, 994, 996, 997, 1001, 1002, 1005, 1007, 1014, 1016, 1022, 1025, 1027, 1029, 1030, 1031, 1032, 1036, 1037, 1038], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 374, 375, 376, 377, 379, 380, 382, 384, 385, 388, 389, 390, 393, 397, 399, 402, 403, 404, 405, 410, 411, 414, 415, 438, 440, 497, 527, 555, 556, 596, 628, 640, 681, 790, 793, 794, 796, 804, 812, 816, 818, 924, 978, 985, 991, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1005, 1009, 1016, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 376, 384, 991], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 377, 382, 404, 462, 891, 997, 1000, 1001, 1002, 1033, 1036], "introduc": [4, 78, 80, 81, 100, 148, 167, 172, 179, 184, 204, 228, 233, 236, 239, 244, 268, 318, 319, 349, 369, 372, 374, 376, 378, 380, 381, 384, 388, 390, 394, 401, 403, 405, 407, 408, 410, 411, 427, 435, 436, 437, 439, 441, 443, 453, 458, 462, 476, 477, 478, 479, 490, 498, 509, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 549, 550, 560, 561, 562, 563, 564, 575, 576, 577, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 652, 658, 679, 680, 682, 683, 686, 819, 837, 842, 845, 849, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 887, 891, 975, 977, 980, 983, 984, 987, 991, 993, 995, 996, 1007, 1014, 1022, 1023, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 20, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 57, 58, 64, 65, 66, 67, 68, 70, 71, 72, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 103, 104, 105, 111, 112, 115, 117, 118, 121, 122, 125, 127, 132, 133, 134, 135, 138, 141, 144, 149, 151, 152, 153, 154, 157, 158, 159, 162, 164, 165, 167, 169, 170, 172, 176, 179, 180, 186, 187, 188, 189, 191, 197, 200, 201, 202, 204, 205, 206, 207, 208, 218, 221, 222, 223, 226, 229, 231, 234, 235, 236, 239, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 275, 276, 281, 284, 287, 288, 290, 297, 298, 302, 307, 308, 311, 313, 329, 333, 334, 342, 343, 345, 347, 348, 349, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 379, 381, 383, 385, 389, 390, 393, 397, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 428, 431, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 452, 453, 456, 458, 469, 472, 484, 487, 488, 490, 497, 498, 502, 503, 506, 508, 516, 531, 532, 533, 534, 540, 541, 543, 544, 549, 550, 557, 575, 576, 582, 583, 584, 585, 588, 605, 607, 608, 609, 613, 616, 617, 621, 625, 626, 627, 628, 632, 637, 638, 641, 643, 645, 647, 649, 652, 655, 660, 661, 662, 666, 668, 670, 671, 672, 674, 684, 686, 688, 692, 694, 695, 698, 699, 700, 701, 703, 709, 711, 712, 720, 721, 722, 723, 724, 727, 728, 730, 736, 750, 751, 752, 754, 761, 771, 775, 776, 777, 779, 780, 782, 783, 784, 786, 789, 790, 792, 793, 794, 795, 796, 799, 804, 805, 806, 807, 808, 809, 810, 812, 814, 816, 817, 820, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 846, 849, 853, 858, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 878, 879, 880, 881, 882, 883, 884, 893, 894, 895, 898, 901, 902, 903, 904, 945, 970, 971, 973, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 994, 995, 996, 997, 998, 1001, 1002, 1005, 1007, 1009, 1010, 1011, 1015, 1016, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "strategi": [4, 52, 54, 58, 61, 71, 122, 127, 132, 148, 164, 165, 167, 172, 184, 189, 200, 208, 218, 231, 239, 241, 254, 262, 264, 266, 270, 271, 277, 296, 301, 302, 309, 310, 311, 313, 314, 317, 349, 361, 378, 382, 389, 390, 407, 410, 411, 412, 415, 431, 432, 433, 441, 446, 456, 466, 496, 498, 506, 508, 516, 527, 532, 545, 546, 555, 556, 561, 562, 565, 582, 583, 585, 586, 588, 596, 621, 622, 624, 628, 639, 641, 645, 647, 649, 655, 657, 659, 667, 669, 685, 689, 698, 707, 748, 750, 786, 790, 793, 794, 796, 804, 807, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 850, 858, 863, 874, 888, 893, 895, 898, 901, 902, 903, 904, 952, 970, 971, 980, 982, 983, 984, 985, 987, 989, 991, 995, 996, 997, 1001, 1011, 1016, 1018, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "leverag": [4, 8, 37, 49, 86, 218, 347, 348, 362, 363, 374, 407, 410, 868, 970, 977, 1007, 1025, 1037], "task": [4, 7, 98, 111, 119, 120, 126, 147, 148, 160, 167, 178, 200, 216, 219, 221, 239, 258, 338, 349, 362, 364, 371, 373, 374, 375, 376, 380, 381, 382, 385, 388, 389, 390, 408, 410, 411, 412, 413, 442, 455, 487, 499, 509, 586, 589, 590, 592, 593, 594, 598, 599, 600, 603, 626, 627, 640, 641, 646, 647, 654, 655, 656, 657, 668, 675, 678, 720, 722, 723, 747, 775, 777, 780, 782, 791, 795, 808, 813, 947, 948, 978, 981, 982, 983, 984, 992, 994, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1014, 1015, 1016, 1018, 1022, 1027, 1031, 1037], "highli": [4, 9, 72, 80, 81, 97, 106, 128, 184, 195, 205, 261, 264, 270, 298, 338, 348, 362, 363, 376, 378, 382, 401, 403, 407, 410, 411, 446, 456, 490, 557, 665, 686, 802, 804, 849, 977, 981, 984, 985, 987, 995, 996, 1000, 1001], "depend": [4, 5, 7, 37, 53, 75, 99, 118, 122, 125, 126, 129, 132, 144, 148, 158, 164, 167, 168, 170, 173, 174, 176, 180, 184, 218, 222, 228, 229, 235, 239, 244, 251, 261, 262, 266, 267, 268, 281, 298, 303, 308, 315, 318, 331, 338, 342, 348, 349, 358, 362, 363, 364, 369, 376, 378, 379, 384, 385, 388, 389, 390, 391, 392, 393, 396, 397, 399, 402, 403, 405, 407, 408, 410, 411, 412, 413, 414, 432, 433, 434, 438, 440, 441, 443, 444, 446, 448, 451, 453, 454, 456, 458, 463, 478, 483, 484, 485, 487, 490, 494, 495, 496, 498, 499, 504, 528, 529, 535, 538, 545, 553, 554, 556, 582, 583, 584, 585, 596, 598, 601, 602, 605, 621, 626, 627, 632, 634, 642, 652, 653, 663, 665, 667, 670, 671, 672, 674, 681, 684, 685, 688, 689, 722, 734, 771, 774, 783, 784, 788, 789, 809, 818, 835, 836, 837, 839, 841, 842, 843, 844, 845, 851, 852, 854, 866, 867, 870, 873, 887, 894, 895, 898, 902, 911, 970, 971, 973, 974, 975, 977, 978, 980, 981, 983, 984, 985, 986, 989, 993, 995, 996, 997, 1007, 1014, 1016, 1018, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1037, 1038], "busi": [4, 200, 261, 384, 388, 781, 977, 981, 1005], "dai": [4, 12, 157, 171, 201, 363, 373, 376, 872, 1005, 1028, 1029, 1036, 1037], "week": [4, 375, 376, 391, 1005, 1036], "yearli": 4, "season": [4, 157, 171, 201, 375], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 57, 58, 62, 64, 66, 67, 68, 70, 71, 74, 78, 86, 98, 105, 109, 111, 112, 118, 120, 122, 124, 126, 127, 131, 132, 138, 148, 149, 153, 164, 165, 167, 170, 171, 172, 173, 176, 184, 189, 200, 202, 204, 206, 207, 208, 217, 218, 222, 223, 225, 229, 234, 237, 239, 248, 251, 254, 256, 257, 258, 259, 261, 262, 263, 266, 267, 269, 270, 272, 274, 276, 277, 279, 281, 294, 300, 303, 305, 307, 309, 310, 313, 319, 321, 328, 334, 337, 338, 340, 342, 347, 349, 358, 361, 363, 364, 371, 373, 378, 379, 380, 382, 384, 385, 388, 389, 390, 392, 394, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 421, 425, 434, 436, 437, 438, 440, 441, 442, 444, 446, 448, 449, 453, 455, 462, 463, 476, 477, 478, 479, 488, 496, 506, 509, 525, 526, 527, 529, 531, 533, 536, 537, 538, 539, 540, 542, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 575, 576, 577, 582, 583, 584, 585, 595, 596, 597, 604, 605, 621, 624, 625, 632, 634, 639, 645, 648, 649, 650, 652, 658, 659, 660, 661, 662, 664, 667, 669, 670, 671, 672, 676, 677, 679, 681, 683, 684, 687, 688, 691, 697, 698, 699, 701, 702, 706, 707, 719, 722, 723, 731, 733, 735, 748, 749, 750, 771, 776, 777, 779, 780, 781, 785, 786, 787, 788, 789, 790, 793, 794, 801, 802, 804, 808, 814, 815, 816, 818, 819, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 840, 842, 848, 849, 850, 851, 853, 854, 856, 859, 860, 862, 863, 865, 866, 867, 869, 870, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 888, 889, 891, 895, 896, 897, 898, 899, 901, 902, 903, 904, 913, 914, 954, 965, 970, 971, 973, 975, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 995, 996, 997, 1001, 1002, 1005, 1007, 1008, 1011, 1014, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 362, 363, 364, 365, 369, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 390, 392, 393, 394, 397, 399, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 1001, 1002, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 55, 58, 62, 70, 71, 72, 73, 75, 86, 95, 106, 117, 122, 145, 149, 157, 161, 172, 176, 179, 181, 188, 189, 191, 200, 201, 206, 216, 218, 222, 230, 231, 240, 243, 258, 268, 270, 275, 284, 289, 290, 297, 298, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 326, 334, 337, 348, 364, 365, 368, 370, 373, 376, 381, 389, 390, 400, 403, 404, 407, 410, 411, 412, 458, 459, 460, 461, 483, 561, 575, 576, 582, 583, 585, 624, 652, 653, 666, 668, 670, 672, 681, 822, 853, 854, 893, 894, 895, 896, 898, 899, 971, 977, 982, 985, 992, 995, 996, 998, 1001, 1004, 1005, 1007, 1012, 1013, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "splinetransform": [4, 201, 239, 316, 868, 991, 1035, 1037, 1038], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 56, 58, 71, 72, 90, 91, 92, 100, 104, 109, 110, 111, 118, 120, 128, 133, 136, 149, 152, 153, 156, 160, 161, 164, 167, 170, 171, 176, 178, 190, 191, 192, 208, 212, 215, 216, 219, 222, 229, 236, 237, 239, 246, 247, 248, 254, 255, 256, 261, 263, 267, 271, 272, 277, 279, 281, 284, 286, 289, 290, 291, 292, 308, 313, 317, 319, 322, 324, 325, 329, 330, 334, 335, 338, 343, 345, 347, 348, 349, 356, 364, 365, 368, 370, 371, 372, 373, 376, 377, 378, 380, 381, 382, 383, 385, 388, 389, 393, 399, 401, 403, 404, 406, 408, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 494, 496, 497, 498, 502, 503, 504, 506, 508, 509, 513, 516, 517, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 714, 720, 722, 723, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 747, 748, 750, 775, 776, 777, 779, 780, 781, 782, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 918, 919, 920, 921, 922, 924, 925, 937, 938, 939, 942, 947, 949, 951, 952, 965, 970, 971, 972, 973, 975, 976, 977, 978, 980, 982, 983, 985, 988, 989, 991, 992, 994, 997, 1002, 1003, 1005, 1007, 1011, 1014, 1016, 1018, 1019, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "extrapol": [4, 152, 179, 201, 232, 264, 872, 981, 991, 997, 1035, 1037], "option": [4, 30, 46, 52, 103, 118, 126, 158, 165, 181, 184, 201, 239, 264, 270, 314, 347, 352, 358, 364, 370, 371, 372, 374, 376, 377, 379, 381, 382, 384, 385, 388, 390, 391, 393, 397, 403, 404, 406, 407, 408, 410, 411, 414, 427, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 453, 455, 456, 457, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 622, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 681, 682, 683, 684, 686, 688, 689, 705, 707, 711, 722, 723, 728, 729, 730, 750, 751, 752, 757, 759, 760, 764, 767, 768, 769, 770, 771, 774, 776, 777, 780, 783, 784, 786, 790, 791, 792, 793, 794, 796, 797, 799, 804, 808, 812, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 885, 886, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 920, 967, 970, 971, 977, 980, 981, 984, 991, 994, 996, 997, 1002, 1004, 1014, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 71, 72, 89, 95, 106, 111, 117, 119, 121, 128, 129, 132, 133, 135, 146, 147, 157, 170, 171, 176, 181, 196, 197, 200, 208, 216, 231, 232, 236, 238, 239, 240, 241, 243, 251, 257, 259, 261, 266, 268, 273, 279, 281, 285, 290, 298, 299, 300, 314, 315, 317, 318, 324, 325, 326, 353, 356, 362, 365, 368, 371, 373, 379, 382, 389, 397, 402, 406, 407, 408, 410, 476, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 526, 528, 537, 833, 834, 930, 991, 1002, 1008, 1010, 1012, 1018, 1022, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "openml": [4, 71, 132, 157, 170, 200, 208, 216, 218, 230, 279, 299, 369, 393, 490, 1018, 1030, 1032, 1035], "repositori": [4, 8, 176, 319, 369, 371, 373, 374, 376, 378, 380, 384, 391, 393, 498, 1001, 1004, 1018], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 392, 393, 394, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 482, 489, 490, 494, 496, 497, 498, 500, 501, 502, 504, 506, 509, 515, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 573, 574, 575, 576, 577, 578, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 682, 683, 684, 685, 686, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 709, 711, 712, 715, 716, 717, 719, 720, 721, 722, 723, 724, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 756, 757, 761, 762, 764, 766, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 881, 882, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 920, 925, 928, 930, 932, 933, 934, 935, 942, 943, 944, 945, 949, 952, 955, 969, 970, 971, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 991, 992, 993, 994, 995, 996, 997, 1002, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "fetch_openml": [4, 5, 71, 75, 122, 132, 157, 170, 171, 172, 200, 208, 216, 218, 230, 239, 243, 279, 281, 299, 309, 313, 317, 370, 380, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "bike_shar": 4, "bike_sharing_demand": [4, 171], "version": [4, 46, 53, 55, 71, 95, 100, 112, 154, 165, 171, 172, 176, 179, 184, 198, 201, 202, 208, 214, 216, 236, 239, 243, 279, 299, 306, 308, 313, 314, 315, 316, 318, 319, 334, 347, 362, 365, 371, 375, 376, 377, 378, 379, 382, 384, 385, 388, 390, 391, 393, 396, 397, 402, 403, 404, 406, 408, 410, 411, 413, 414, 415, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 494, 495, 496, 498, 499, 502, 503, 504, 506, 508, 516, 517, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 695, 696, 698, 701, 702, 707, 708, 712, 715, 716, 717, 718, 720, 721, 722, 723, 724, 727, 732, 733, 734, 736, 739, 746, 747, 749, 750, 751, 752, 754, 759, 760, 761, 762, 771, 775, 776, 777, 778, 780, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 803, 804, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 879, 881, 882, 883, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 911, 913, 914, 924, 925, 927, 929, 930, 937, 938, 939, 940, 941, 944, 947, 948, 949, 951, 956, 962, 967, 968, 970, 973, 975, 978, 981, 983, 985, 987, 989, 994, 995, 997, 999, 1001, 1002, 1004, 1015, 1020], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 138, 139, 141, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 373, 374, 376, 378, 380, 381, 382, 383, 385, 388, 389, 390, 393, 394, 395, 396, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 426, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 454, 456, 457, 458, 459, 462, 463, 465, 466, 467, 468, 469, 472, 476, 477, 478, 479, 487, 490, 494, 495, 498, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 575, 576, 578, 579, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 597, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 697, 698, 699, 700, 701, 702, 707, 709, 710, 711, 712, 715, 716, 717, 718, 719, 721, 722, 723, 724, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 756, 757, 761, 762, 764, 766, 769, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 877, 881, 886, 887, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 908, 913, 914, 919, 927, 928, 929, 930, 932, 933, 934, 935, 942, 943, 944, 945, 946, 947, 949, 952, 954, 955, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1004, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1019, 1020, 1022, 1023, 1024, 1026, 1027], "as_fram": [4, 5, 71, 75, 118, 122, 132, 157, 170, 171, 172, 173, 188, 189, 200, 208, 216, 218, 239, 243, 281, 284, 299, 308, 309, 313, 315, 317, 318, 370, 371, 483, 484, 485, 486, 490, 494, 495, 496, 498, 499, 504, 1032, 1033, 1034, 1035, 1038], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 55, 57, 58, 60, 63, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 92, 95, 96, 97, 98, 100, 106, 109, 111, 112, 116, 118, 122, 123, 124, 125, 127, 128, 129, 132, 133, 135, 138, 139, 140, 145, 148, 152, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 184, 185, 187, 188, 189, 191, 193, 195, 196, 197, 200, 202, 203, 204, 207, 208, 214, 215, 216, 218, 221, 224, 225, 229, 230, 233, 235, 236, 237, 238, 239, 242, 243, 246, 249, 251, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 286, 287, 290, 294, 297, 298, 299, 300, 304, 308, 309, 310, 313, 315, 317, 318, 319, 323, 325, 326, 327, 337, 341, 342, 343, 347, 348, 349, 352, 353, 356, 358, 362, 363, 369, 371, 372, 376, 377, 378, 381, 382, 383, 385, 389, 390, 392, 394, 397, 399, 400, 401, 403, 404, 405, 407, 408, 410, 411, 412, 413, 415, 416, 417, 420, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 513, 516, 517, 518, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 706, 707, 708, 709, 712, 714, 717, 719, 720, 721, 722, 723, 724, 727, 728, 731, 732, 733, 734, 735, 736, 743, 744, 745, 747, 749, 754, 760, 761, 762, 771, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 801, 802, 804, 808, 809, 813, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 911, 912, 913, 914, 924, 930, 931, 942, 943, 946, 947, 951, 952, 954, 962, 967, 969, 970, 971, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 993, 994, 995, 996, 997, 1001, 1007, 1011, 1012, 1014, 1015, 1016, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "parser": [4, 5, 8, 71, 75, 122, 132, 157, 170, 171, 172, 200, 208, 216, 218, 230, 239, 243, 279, 281, 299, 309, 313, 317, 490, 1037, 1038], "panda": [4, 5, 12, 25, 70, 71, 72, 73, 75, 112, 118, 119, 122, 125, 129, 132, 157, 164, 169, 170, 171, 172, 173, 179, 184, 189, 200, 204, 208, 216, 218, 230, 239, 240, 243, 251, 259, 261, 262, 264, 272, 273, 279, 281, 299, 308, 309, 310, 313, 316, 317, 342, 347, 348, 370, 371, 374, 375, 376, 378, 379, 390, 393, 396, 404, 427, 436, 437, 439, 441, 443, 458, 460, 462, 476, 477, 478, 479, 483, 484, 485, 486, 490, 494, 495, 496, 498, 499, 504, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 560, 561, 562, 563, 564, 575, 576, 577, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 626, 627, 629, 632, 633, 634, 635, 636, 682, 683, 686, 790, 793, 794, 804, 819, 837, 842, 845, 849, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 891, 909, 970, 971, 991, 1001, 1002, 1016, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "df": [4, 25, 27, 132, 169, 171, 179, 184, 200, 218, 251, 261, 307, 309, 348, 381, 411, 584, 585, 970, 971], "frame": [4, 16, 71, 157, 170, 171, 200, 309, 371, 376, 388, 391, 483, 484, 485, 486, 490, 494, 495, 496, 498, 499, 504, 1001, 1012, 1034], "To": [4, 8, 16, 26, 27, 32, 46, 55, 57, 78, 80, 82, 86, 100, 112, 122, 125, 126, 134, 138, 149, 157, 158, 161, 164, 165, 169, 170, 176, 181, 184, 188, 200, 201, 202, 204, 208, 218, 233, 234, 236, 239, 241, 243, 251, 256, 258, 259, 261, 263, 264, 266, 268, 279, 299, 303, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 344, 348, 352, 358, 362, 363, 369, 370, 374, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 394, 397, 399, 400, 403, 404, 405, 406, 407, 408, 410, 411, 440, 442, 443, 444, 455, 458, 461, 486, 490, 496, 497, 501, 502, 525, 531, 532, 533, 535, 537, 538, 539, 540, 551, 552, 553, 554, 558, 559, 563, 591, 605, 621, 626, 640, 641, 646, 647, 650, 652, 653, 654, 655, 656, 657, 678, 694, 706, 721, 756, 778, 784, 793, 794, 815, 822, 864, 869, 883, 884, 893, 894, 901, 902, 903, 904, 920, 930, 949, 968, 970, 971, 976, 977, 978, 979, 981, 982, 983, 984, 987, 988, 991, 995, 996, 997, 1004, 1005, 1007, 1011, 1013, 1014, 1016, 1022, 1025, 1027, 1028, 1029, 1031, 1033], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 56, 96, 100, 125, 134, 146, 149, 152, 157, 158, 164, 170, 171, 172, 173, 193, 202, 215, 218, 221, 237, 259, 262, 263, 265, 269, 272, 279, 281, 286, 294, 304, 313, 323, 326, 331, 334, 336, 339, 344, 347, 349, 352, 363, 365, 369, 370, 371, 374, 376, 377, 378, 381, 382, 383, 384, 390, 393, 397, 399, 401, 403, 404, 405, 407, 408, 410, 411, 412, 413, 417, 418, 419, 424, 426, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 456, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 689, 693, 715, 716, 717, 719, 725, 726, 735, 749, 756, 757, 762, 778, 781, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 908, 921, 922, 923, 929, 930, 940, 970, 976, 977, 978, 980, 981, 991, 994, 995, 996, 997, 1002, 1004, 1011, 1014, 1015, 1016, 1019, 1022, 1025, 1028, 1030, 1033, 1035, 1036], "quick": [4, 100, 242, 376, 378, 382, 393, 600, 819, 981, 982, 991, 1005, 1014, 1019], "understand": [4, 9, 112, 157, 167, 171, 236, 256, 259, 315, 316, 331, 338, 347, 351, 357, 358, 375, 376, 377, 382, 388, 392, 403, 410, 411, 498, 819, 850, 851, 901, 902, 903, 904, 907, 970, 971, 978, 980, 997, 1000, 1001, 1005, 1022, 1036], "pattern": [4, 16, 20, 63, 82, 90, 94, 107, 152, 164, 167, 171, 184, 204, 236, 239, 316, 347, 348, 349, 358, 373, 376, 378, 391, 400, 403, 404, 408, 410, 411, 442, 458, 460, 498, 526, 528, 535, 549, 550, 632, 702, 718, 734, 762, 781, 782, 788, 873, 973, 975, 977, 981, 982, 988, 996, 998, 1002, 1005, 1034], "let": [4, 5, 53, 55, 64, 71, 75, 90, 95, 100, 111, 119, 122, 125, 126, 129, 152, 158, 159, 165, 170, 171, 172, 181, 189, 200, 202, 218, 221, 225, 236, 243, 256, 261, 264, 268, 347, 349, 356, 358, 371, 376, 378, 382, 388, 400, 403, 407, 410, 411, 494, 498, 504, 528, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 675, 678, 859, 866, 867, 977, 978, 979, 980, 981, 988, 989, 991, 996, 997, 1005, 1014, 1016, 1032], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 56, 90, 95, 103, 122, 123, 152, 161, 169, 170, 171, 197, 201, 204, 208, 218, 222, 225, 233, 236, 242, 243, 247, 248, 252, 256, 261, 264, 268, 307, 309, 338, 347, 356, 363, 365, 371, 376, 380, 382, 384, 388, 393, 400, 403, 406, 408, 410, 411, 426, 457, 459, 476, 477, 478, 525, 531, 539, 540, 544, 546, 548, 550, 552, 554, 556, 559, 562, 564, 582, 583, 585, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 675, 678, 683, 687, 698, 714, 733, 748, 826, 827, 836, 844, 851, 873, 887, 894, 896, 899, 902, 904, 930, 975, 980, 981, 988, 991, 999, 1005, 1016, 1019, 1032], "look": [4, 5, 53, 55, 95, 98, 100, 125, 126, 152, 157, 158, 165, 170, 171, 202, 221, 225, 229, 236, 252, 256, 261, 263, 299, 347, 348, 358, 363, 364, 370, 371, 374, 376, 378, 380, 382, 384, 388, 389, 403, 406, 408, 409, 410, 411, 442, 482, 483, 551, 552, 553, 554, 558, 559, 596, 597, 625, 653, 686, 873, 901, 902, 903, 904, 977, 978, 991, 995, 996, 998, 1016, 1022, 1030, 1032], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 60, 62, 115, 116, 121, 125, 128, 133, 134, 135, 149, 157, 171, 181, 189, 200, 207, 218, 239, 264, 266, 269, 271, 279, 303, 313, 319, 326, 347, 358, 362, 371, 373, 378, 400, 401, 405, 407, 411, 414, 415, 431, 432, 435, 438, 439, 440, 441, 443, 484, 487, 488, 517, 525, 526, 527, 531, 532, 534, 535, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 563, 564, 581, 626, 627, 642, 652, 653, 660, 661, 663, 666, 668, 670, 671, 672, 674, 681, 694, 697, 698, 700, 701, 702, 707, 714, 715, 716, 718, 719, 721, 722, 723, 727, 728, 729, 731, 732, 733, 736, 738, 739, 741, 743, 744, 746, 749, 757, 774, 775, 776, 777, 778, 780, 781, 786, 787, 788, 789, 817, 839, 859, 874, 967, 971, 976, 977, 982, 985, 987, 988, 995, 996, 997, 1014, 1016, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038], "per": [4, 10, 20, 48, 53, 64, 91, 117, 118, 122, 157, 159, 170, 171, 200, 215, 218, 239, 243, 247, 257, 268, 270, 303, 309, 315, 342, 347, 349, 362, 371, 372, 376, 381, 382, 385, 388, 390, 401, 403, 407, 408, 409, 410, 411, 413, 440, 442, 444, 451, 455, 458, 462, 481, 494, 496, 497, 498, 502, 504, 506, 509, 517, 526, 528, 529, 530, 533, 535, 537, 543, 544, 555, 556, 563, 577, 582, 585, 604, 605, 626, 627, 635, 636, 652, 653, 660, 662, 665, 667, 668, 669, 670, 672, 686, 690, 707, 710, 714, 734, 747, 751, 752, 774, 776, 788, 789, 814, 821, 822, 823, 825, 826, 829, 831, 849, 852, 858, 860, 862, 863, 866, 867, 873, 874, 891, 893, 894, 895, 896, 897, 898, 899, 918, 919, 930, 956, 970, 973, 977, 980, 981, 982, 985, 988, 995, 996, 997, 1001, 1002, 1014, 1016, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1038], "hour": [4, 170, 171, 376, 382, 978, 1000], "sundai": 4, "weekend": 4, "clearli": [4, 60, 98, 171, 234, 338, 375, 376, 388, 390, 408, 410, 982, 988], "distinguish": [4, 20, 40, 80, 92, 100, 202, 258, 371, 378, 390, 391, 413, 970, 981, 984, 987], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 75, 86, 98, 118, 125, 158, 170, 171, 172, 189, 200, 201, 208, 218, 225, 226, 235, 247, 267, 303, 305, 307, 308, 327, 342, 347, 348, 349, 358, 364, 371, 375, 376, 377, 378, 380, 381, 384, 388, 390, 401, 402, 403, 404, 405, 407, 408, 410, 411, 413, 435, 437, 439, 440, 441, 442, 443, 453, 455, 526, 529, 551, 552, 553, 554, 558, 559, 576, 583, 588, 621, 622, 624, 633, 652, 653, 689, 694, 699, 706, 736, 754, 760, 767, 771, 774, 779, 781, 816, 853, 854, 885, 886, 901, 902, 903, 904, 930, 950, 970, 971, 973, 975, 977, 980, 981, 984, 986, 987, 989, 991, 993, 995, 996, 997, 1005, 1016, 1029, 1030, 1031, 1034, 1036], "leisur": 4, "spread": [4, 40, 223, 262, 303, 322, 323, 324, 327, 342, 362, 376, 403, 446, 456, 509, 870, 882, 890, 981], "peak": [4, 27, 171, 401, 407, 1036], "middl": [4, 24, 60, 100, 184, 343, 373, 988, 991], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 173, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 370, 379, 383, 393, 396, 432, 496, 625, 626, 691, 692, 694, 695, 696, 796, 812, 907, 976, 1001, 1010, 1012, 1013, 1014, 1019, 1031, 1034, 1035, 1036, 1037], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 173, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 376, 383, 432, 496, 625, 626, 691, 692, 694, 695, 696, 796, 812, 1012, 1013, 1014, 1019, 1036], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 173, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 383, 432, 496, 625, 626, 691, 692, 694, 695, 696, 796, 812, 907, 988, 1012, 1013, 1014, 1019], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 55, 57, 60, 64, 66, 73, 78, 80, 86, 90, 95, 100, 101, 102, 106, 111, 112, 117, 118, 119, 122, 125, 126, 129, 130, 132, 134, 155, 161, 164, 171, 173, 176, 180, 188, 191, 194, 195, 197, 198, 200, 201, 204, 208, 213, 215, 218, 221, 222, 223, 224, 225, 226, 230, 232, 239, 240, 251, 256, 257, 258, 261, 262, 263, 264, 267, 270, 271, 272, 279, 281, 283, 285, 286, 294, 298, 299, 303, 304, 305, 307, 308, 309, 313, 317, 318, 331, 338, 341, 342, 343, 344, 347, 348, 349, 352, 383, 1012], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 57, 64, 66, 72, 73, 75, 80, 82, 86, 90, 92, 95, 101, 102, 106, 111, 112, 114, 117, 119, 122, 129, 130, 132, 133, 134, 155, 156, 161, 164, 169, 170, 171, 172, 173, 176, 179, 180, 183, 184, 189, 191, 192, 195, 197, 198, 200, 201, 202, 204, 205, 208, 209, 211, 213, 215, 218, 221, 222, 223, 224, 225, 226, 230, 235, 239, 240, 242, 246, 248, 251, 256, 257, 258, 261, 263, 264, 265, 267, 268, 270, 271, 272, 273, 275, 279, 281, 283, 284, 285, 286, 289, 291, 292, 297, 298, 299, 303, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 330, 331, 332, 335, 336, 338, 341, 342, 343, 344, 347, 348, 349, 352, 353, 378, 379, 408, 413, 432, 528, 535, 544, 625, 626, 691, 692, 694, 695, 696, 712, 796, 812, 907, 981, 984, 988, 1019, 1032, 1038], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 57, 60, 62, 65, 66, 73, 75, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 100, 105, 106, 112, 114, 115, 117, 118, 119, 121, 122, 126, 129, 130, 132, 133, 134, 144, 154, 156, 161, 164, 165, 170, 171, 173, 176, 180, 183, 191, 192, 194, 195, 198, 199, 200, 201, 202, 204, 208, 213, 216, 218, 221, 222, 225, 226, 229, 230, 232, 234, 235, 237, 238, 239, 240, 246, 247, 248, 249, 251, 252, 256, 257, 258, 261, 263, 264, 266, 267, 268, 270, 271, 272, 274, 275, 279, 281, 283, 284, 285, 286, 289, 290, 292, 293, 294, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 313, 317, 318, 325, 327, 331, 332, 334, 338, 341, 342, 343, 344, 347, 348, 349, 352, 353, 383, 1012], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 73, 75, 80, 82, 85, 86, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 105, 106, 112, 114, 115, 122, 123, 124, 125, 126, 130, 132, 133, 144, 154, 156, 160, 161, 164, 165, 170, 171, 173, 176, 179, 180, 183, 184, 190, 194, 197, 198, 199, 200, 201, 202, 204, 206, 208, 211, 214, 216, 218, 221, 222, 223, 225, 226, 229, 230, 232, 234, 237, 238, 239, 240, 246, 248, 249, 252, 256, 257, 258, 263, 264, 265, 268, 270, 271, 275, 279, 281, 283, 284, 297, 298, 300, 303, 304, 305, 306, 307, 308, 309, 317, 318, 322, 324, 332, 334, 338, 339, 341, 342, 343, 344, 347, 348, 349, 907, 1012], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 71, 72, 73, 74, 81, 82, 85, 86, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 104, 105, 111, 112, 113, 115, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 138, 141, 145, 149, 155, 157, 158, 160, 161, 164, 165, 170, 171, 176, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 204, 206, 207, 208, 210, 213, 214, 216, 218, 221, 225, 229, 233, 234, 235, 236, 237, 238, 239, 241, 243, 246, 247, 248, 249, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 268, 269, 270, 272, 275, 279, 281, 283, 285, 286, 287, 288, 291, 297, 299, 300, 303, 304, 306, 307, 309, 313, 314, 316, 318, 319, 322, 323, 324, 325, 326, 331, 333, 337, 338, 339, 342, 343, 344, 347, 348, 356, 358, 363, 370, 371, 373, 374, 376, 381, 382, 385, 388, 389, 390, 393, 394, 395, 396, 401, 403, 404, 405, 407, 408, 410, 411, 412, 413, 415, 431, 433, 434, 435, 437, 439, 440, 441, 442, 443, 445, 446, 447, 453, 454, 456, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 490, 498, 506, 507, 510, 511, 512, 522, 526, 527, 528, 529, 531, 532, 533, 534, 538, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 564, 571, 575, 576, 583, 584, 585, 587, 588, 597, 601, 602, 608, 611, 613, 616, 621, 622, 623, 624, 627, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 671, 673, 674, 678, 681, 683, 684, 686, 687, 692, 693, 696, 700, 701, 709, 710, 719, 720, 727, 736, 737, 739, 740, 741, 742, 744, 745, 749, 761, 762, 774, 775, 781, 782, 785, 787, 788, 789, 790, 791, 792, 795, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 817, 819, 822, 823, 824, 827, 828, 829, 830, 832, 841, 850, 851, 852, 858, 859, 860, 865, 866, 867, 868, 869, 871, 874, 877, 881, 887, 893, 894, 896, 897, 899, 901, 902, 903, 919, 927, 929, 930, 932, 934, 935, 945, 949, 952, 970, 971, 974, 975, 976, 977, 979, 981, 982, 983, 984, 991, 992, 995, 996, 999, 1007, 1011, 1012, 1013, 1014, 1016, 1020, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1035, 1036, 1037], "average_week_demand": 4, "groupbi": [4, 73, 171, 208, 218], "weekdai": [4, 171], "count": [4, 14, 25, 27, 41, 49, 53, 70, 71, 92, 133, 134, 170, 171, 200, 202, 233, 243, 270, 281, 314, 315, 348, 349, 356, 371, 373, 380, 385, 390, 391, 401, 402, 403, 408, 410, 411, 440, 443, 483, 530, 538, 575, 582, 583, 584, 585, 588, 598, 611, 634, 691, 699, 709, 712, 722, 723, 731, 747, 776, 777, 779, 780, 828, 832, 833, 834, 842, 845, 856, 905, 907, 932, 946, 970, 973, 977, 981, 983, 984, 991, 997, 1005, 1016, 1022, 1025, 1027, 1030, 1031, 1033, 1034], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 55, 68, 71, 79, 80, 81, 82, 86, 92, 95, 98, 99, 100, 102, 103, 112, 114, 115, 118, 121, 122, 125, 126, 132, 133, 134, 139, 148, 149, 152, 157, 159, 161, 164, 167, 170, 171, 180, 182, 189, 191, 193, 196, 200, 202, 206, 207, 209, 215, 216, 217, 218, 224, 226, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 246, 247, 248, 249, 251, 252, 257, 258, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 275, 276, 279, 281, 292, 303, 306, 308, 309, 310, 313, 316, 319, 325, 334, 337, 338, 342, 344, 346, 347, 349, 350, 358, 362, 368, 370, 371, 373, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 390, 394, 400, 401, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 426, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 482, 495, 496, 498, 500, 506, 513, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 582, 583, 584, 585, 588, 591, 596, 600, 601, 602, 603, 604, 605, 607, 616, 621, 622, 624, 626, 627, 628, 629, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 678, 682, 683, 684, 685, 686, 687, 688, 689, 698, 699, 701, 703, 706, 707, 710, 711, 717, 719, 722, 723, 724, 729, 730, 731, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 750, 767, 771, 772, 774, 776, 777, 778, 780, 781, 783, 784, 786, 788, 789, 790, 793, 794, 796, 804, 808, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 839, 840, 841, 843, 844, 846, 847, 849, 850, 851, 852, 854, 855, 857, 858, 862, 863, 865, 869, 871, 873, 874, 879, 881, 882, 884, 886, 888, 889, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 909, 913, 914, 916, 955, 956, 962, 966, 970, 971, 972, 975, 977, 978, 980, 983, 984, 985, 986, 988, 989, 994, 995, 996, 997, 1001, 1005, 1011, 1014, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 58, 59, 60, 61, 62, 65, 68, 72, 73, 75, 79, 80, 81, 86, 88, 93, 95, 98, 103, 104, 105, 106, 110, 112, 114, 115, 116, 117, 119, 124, 125, 127, 129, 130, 131, 136, 139, 141, 144, 145, 147, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 167, 168, 169, 170, 172, 173, 174, 176, 178, 182, 183, 185, 187, 188, 189, 190, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 210, 212, 213, 214, 215, 217, 218, 219, 223, 224, 225, 226, 228, 229, 232, 233, 235, 237, 238, 243, 244, 246, 247, 248, 250, 252, 254, 255, 256, 261, 262, 264, 266, 267, 271, 272, 273, 275, 277, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 303, 304, 305, 306, 307, 308, 310, 314, 317, 318, 319, 323, 324, 327, 329, 330, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 354, 355, 356, 357, 365, 376, 379, 385, 388, 392, 393, 398, 401, 403, 405, 407, 409, 410, 432, 435, 440, 444, 450, 458, 465, 490, 495, 496, 498, 506, 509, 513, 517, 547, 551, 554, 556, 558, 559, 563, 564, 604, 616, 625, 626, 627, 651, 652, 666, 670, 691, 692, 694, 695, 696, 697, 712, 720, 728, 754, 775, 777, 780, 781, 782, 790, 796, 807, 812, 814, 815, 816, 817, 820, 831, 835, 851, 854, 866, 867, 868, 870, 873, 893, 895, 898, 901, 902, 907, 974, 975, 977, 978, 980, 981, 984, 985, 987, 995, 996, 997, 1001, 1002, 1011, 1012, 1014, 1018, 1023, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "_": [4, 5, 7, 8, 11, 12, 14, 20, 25, 26, 27, 32, 33, 40, 43, 50, 53, 55, 58, 63, 67, 70, 82, 90, 92, 95, 100, 101, 103, 105, 115, 116, 117, 144, 152, 157, 158, 159, 169, 170, 171, 173, 176, 179, 183, 184, 185, 187, 188, 189, 192, 197, 198, 200, 202, 204, 213, 217, 222, 225, 230, 235, 239, 243, 256, 261, 263, 264, 265, 267, 268, 270, 284, 289, 292, 300, 305, 308, 309, 310, 314, 317, 318, 319, 323, 324, 338, 342, 347, 349, 353, 378, 382, 390, 408, 410, 411, 440, 526, 527, 528, 529, 530, 532, 533, 534, 537, 541, 560, 591, 646, 647, 657, 678, 682, 683, 684, 685, 690, 692, 694, 757, 790, 796, 804, 812, 837, 845, 866, 867, 971, 977, 978, 981, 983, 984, 985, 988, 989, 991, 996, 997, 1014, 1029], "hourli": [4, 170], "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 98, 122, 123, 124, 154, 155, 156, 160, 183, 190, 196, 213, 229, 237, 247, 248, 249, 252, 260, 261, 275, 285, 294, 300, 309, 322, 334, 337, 339, 340, 691, 1012], "24": [4, 5, 66, 167, 171, 184, 281, 312, 313, 320, 322, 323, 380, 393, 403, 410, 411, 431, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 454, 456, 458, 463, 464, 465, 466, 467, 468, 469, 470, 483, 484, 485, 486, 490, 498, 509, 510, 511, 512, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 538, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 607, 621, 622, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 692, 693, 694, 696, 702, 708, 720, 739, 746, 788, 789, 790, 793, 794, 804, 811, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 854, 856, 857, 858, 859, 862, 863, 865, 867, 868, 869, 870, 871, 873, 883, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 924, 925, 956, 962, 970, 988, 991, 999, 1020, 1022, 1030, 1031, 1032, 1033, 1035], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 20, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 55, 60, 61, 63, 64, 65, 78, 79, 81, 82, 112, 114, 115, 116, 119, 125, 131, 144, 148, 153, 170, 171, 176, 184, 189, 190, 194, 198, 200, 201, 204, 207, 208, 216, 218, 222, 224, 232, 233, 238, 239, 246, 248, 251, 252, 256, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 279, 285, 291, 294, 300, 303, 308, 309, 313, 317, 318, 323, 334, 342, 347, 348, 353, 356, 363, 370, 371, 373, 376, 378, 382, 385, 390, 397, 403, 407, 410, 413, 434, 455, 463, 465, 466, 467, 468, 469, 470, 472, 475, 485, 488, 489, 508, 521, 535, 547, 548, 553, 554, 557, 582, 583, 585, 623, 626, 632, 634, 642, 643, 663, 665, 670, 674, 686, 706, 724, 739, 781, 819, 825, 839, 841, 843, 844, 849, 863, 870, 871, 872, 878, 879, 882, 883, 886, 887, 929, 930, 949, 970, 977, 981, 985, 995, 1002, 1005, 1010, 1011, 1012, 1014, 1027, 1028, 1029, 1030, 1032, 1035, 1038], "7": [4, 6, 12, 13, 14, 16, 19, 26, 30, 32, 34, 39, 42, 44, 46, 53, 54, 55, 56, 60, 64, 65, 67, 71, 72, 74, 80, 82, 98, 111, 112, 115, 125, 128, 132, 133, 149, 161, 169, 170, 171, 173, 176, 181, 182, 199, 200, 201, 202, 207, 214, 218, 221, 229, 233, 234, 235, 241, 243, 246, 247, 250, 251, 256, 259, 261, 265, 267, 268, 272, 274, 279, 281, 283, 286, 287, 289, 299, 300, 303, 307, 313, 316, 317, 318, 322, 323, 325, 326, 331, 333, 338, 342, 343, 348, 349, 358, 371, 373, 374, 380, 381, 382, 393, 395, 396, 401, 407, 408, 410, 411, 412, 433, 438, 442, 444, 445, 446, 447, 456, 465, 466, 485, 526, 527, 528, 529, 530, 532, 538, 555, 556, 582, 585, 594, 621, 622, 624, 641, 643, 652, 655, 686, 693, 701, 715, 716, 717, 719, 721, 737, 738, 739, 743, 744, 746, 778, 785, 788, 791, 792, 797, 800, 807, 808, 811, 816, 819, 823, 833, 834, 842, 851, 852, 865, 866, 888, 889, 930, 933, 934, 945, 970, 971, 976, 977, 979, 981, 982, 984, 985, 987, 991, 995, 996, 999, 1007, 1011, 1014, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1035], "xticklabel": [4, 10, 122, 171, 309], "sun": [4, 171, 1030, 1035, 1036], "mon": [4, 171], "tue": [4, 171, 1028], "wed": [4, 171], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 55, 60, 78, 82, 98, 100, 115, 117, 118, 120, 122, 145, 152, 157, 158, 171, 184, 188, 189, 200, 202, 218, 229, 235, 240, 248, 259, 261, 266, 267, 268, 284, 310, 313, 316, 352, 358, 362, 363, 371, 378, 382, 388, 390, 401, 403, 407, 408, 410, 411, 413, 414, 431, 433, 457, 509, 521, 547, 548, 549, 550, 551, 552, 557, 558, 559, 597, 600, 604, 616, 621, 626, 627, 637, 639, 652, 671, 699, 712, 718, 781, 786, 792, 797, 799, 811, 824, 827, 862, 893, 972, 973, 974, 975, 976, 977, 978, 981, 982, 987, 988, 989, 991, 993, 994, 995, 996, 1002, 1004, 1005, 1022, 1024, 1028, 1030, 1031, 1032, 1034, 1038], "fri": [4, 171, 371], "sat": [4, 171, 411], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 113, 114, 116, 122, 123, 124, 125, 126, 127, 131, 135, 138, 139, 144, 145, 148, 152, 153, 154, 155, 157, 158, 159, 170, 179, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 200, 202, 203, 205, 207, 209, 210, 214, 218, 233, 235, 237, 239, 256, 260, 261, 265, 266, 270, 271, 274, 275, 283, 284, 287, 288, 309, 310, 331, 333, 334, 337, 347, 353, 354, 355, 625], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 113, 114, 116, 123, 124, 125, 126, 127, 131, 135, 138, 139, 144, 145, 148, 152, 153, 154, 155, 157, 158, 159, 170, 179, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 200, 202, 203, 205, 207, 209, 210, 218, 233, 235, 237, 256, 260, 261, 264, 265, 266, 270, 271, 274, 275, 284, 310, 331, 334, 337, 347, 353, 354, 355, 625], "number": [4, 5, 7, 8, 10, 12, 13, 19, 20, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 57, 61, 62, 63, 67, 68, 70, 71, 72, 73, 75, 82, 85, 86, 91, 92, 95, 97, 99, 100, 103, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 132, 134, 145, 146, 149, 160, 161, 165, 167, 170, 171, 176, 184, 189, 199, 200, 201, 202, 207, 208, 214, 215, 216, 217, 218, 221, 229, 233, 237, 239, 240, 246, 247, 249, 251, 252, 255, 256, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 281, 283, 287, 288, 303, 305, 306, 309, 313, 314, 315, 316, 317, 318, 319, 326, 334, 339, 342, 348, 349, 352, 356, 358, 363, 364, 368, 370, 371, 372, 373, 374, 376, 379, 380, 382, 383, 384, 385, 388, 389, 390, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 426, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 575, 576, 577, 578, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 697, 698, 699, 701, 706, 707, 708, 710, 712, 714, 717, 721, 722, 723, 724, 727, 728, 731, 733, 745, 748, 767, 771, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 882, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 913, 914, 917, 929, 930, 933, 934, 949, 950, 952, 955, 956, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 995, 996, 997, 998, 1001, 1002, 1004, 1007, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "rental": [4, 171, 988], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 69, 74, 76, 86, 90, 99, 102, 104, 111, 113, 120, 121, 122, 125, 126, 129, 131, 132, 133, 135, 141, 144, 147, 149, 152, 154, 157, 158, 165, 167, 169, 170, 171, 172, 179, 183, 184, 193, 196, 200, 202, 204, 205, 208, 209, 222, 230, 232, 233, 234, 235, 238, 239, 240, 248, 255, 259, 262, 264, 266, 267, 270, 271, 281, 284, 289, 292, 293, 298, 302, 303, 311, 314, 315, 317, 319, 322, 323, 326, 327, 330, 331, 334, 338, 340, 341, 347, 348, 353, 354, 355, 356, 358, 362, 364, 365, 368, 369, 370, 371, 372, 373, 378, 380, 381, 384, 385, 389, 392, 403, 407, 410, 413, 427, 431, 432, 433, 436, 439, 458, 459, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 502, 504, 514, 518, 525, 526, 528, 530, 531, 533, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 567, 576, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 691, 692, 694, 695, 696, 701, 702, 703, 706, 707, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 728, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 775, 776, 777, 778, 780, 781, 782, 785, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 840, 842, 843, 844, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 877, 882, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 913, 943, 944, 945, 972, 973, 974, 977, 978, 981, 985, 988, 989, 995, 996, 997, 1002, 1004, 1005, 1007, 1012, 1014, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "absolut": [4, 75, 99, 122, 149, 170, 200, 202, 206, 218, 378, 403, 405, 407, 408, 410, 411, 412, 413, 414, 438, 444, 450, 451, 525, 531, 536, 539, 540, 542, 543, 544, 552, 554, 555, 556, 559, 582, 584, 585, 587, 591, 596, 613, 621, 626, 640, 643, 644, 646, 648, 650, 665, 666, 668, 670, 672, 676, 677, 698, 711, 715, 729, 730, 738, 739, 741, 746, 748, 750, 761, 786, 792, 796, 807, 810, 817, 819, 831, 833, 834, 838, 857, 862, 865, 878, 902, 904, 967, 977, 978, 991, 995, 997, 1014, 1015, 1023, 1028, 1033, 1034, 1035, 1036], "basi": [4, 6, 13, 100, 152, 157, 159, 201, 299, 316, 334, 338, 368, 374, 377, 403, 408, 410, 446, 528, 616, 626, 633, 685, 872, 979, 991, 996, 1003, 1011, 1012, 1015, 1018, 1030, 1032, 1035], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 58, 62, 67, 72, 77, 82, 83, 95, 98, 106, 112, 114, 121, 130, 138, 140, 141, 144, 145, 149, 154, 156, 157, 165, 167, 170, 182, 187, 188, 189, 193, 195, 202, 203, 206, 214, 216, 218, 224, 233, 237, 259, 260, 261, 272, 274, 279, 281, 283, 287, 288, 294, 297, 299, 303, 305, 306, 308, 316, 325, 327, 333, 340, 343, 362, 403, 405, 408, 463, 464, 465, 466, 467, 468, 469, 470, 471, 506, 530, 549, 550, 551, 552, 553, 554, 557, 558, 559, 600, 621, 625, 626, 642, 643, 663, 666, 668, 674, 685, 686, 690, 693, 698, 699, 734, 750, 783, 784, 790, 850, 851, 862, 863, 865, 872, 879, 880, 901, 902, 903, 904, 949, 977, 979, 984, 991, 995, 996, 1014, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "977": [4, 407], "rescal": [4, 46, 47, 55, 100, 181, 188, 224, 239, 303, 344, 405, 415, 463, 464, 465, 466, 467, 468, 469, 470, 527, 532, 640, 643, 646, 865, 871, 895, 896, 897, 898, 899, 981, 991, 1015, 1026, 1027], "variabl": [4, 9, 11, 12, 16, 37, 70, 115, 119, 122, 125, 126, 140, 141, 144, 149, 159, 160, 164, 165, 171, 172, 176, 184, 189, 200, 204, 205, 218, 223, 239, 252, 261, 264, 271, 308, 309, 310, 358, 362, 364, 371, 373, 374, 376, 378, 380, 381, 384, 390, 403, 404, 405, 406, 408, 410, 411, 412, 444, 476, 477, 478, 481, 493, 495, 502, 509, 526, 528, 530, 535, 538, 547, 553, 554, 598, 600, 601, 602, 634, 644, 645, 648, 649, 655, 676, 677, 689, 703, 740, 791, 792, 795, 797, 798, 799, 800, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 818, 821, 825, 826, 856, 867, 870, 874, 882, 894, 970, 971, 973, 977, 980, 981, 982, 983, 984, 986, 988, 989, 991, 995, 997, 1001, 1002, 1004, 1007, 1008, 1010, 1012, 1022, 1027, 1030, 1032, 1035, 1037], "rel": [4, 6, 8, 17, 20, 27, 55, 61, 100, 119, 157, 173, 176, 180, 200, 218, 249, 287, 288, 304, 314, 317, 334, 338, 347, 348, 371, 375, 378, 384, 390, 401, 403, 407, 410, 411, 413, 434, 437, 441, 443, 453, 515, 518, 525, 528, 531, 535, 551, 552, 553, 554, 558, 559, 560, 598, 643, 652, 653, 665, 666, 668, 684, 688, 722, 740, 790, 793, 794, 796, 804, 812, 817, 820, 833, 834, 838, 850, 851, 862, 863, 873, 889, 893, 894, 895, 898, 900, 901, 902, 903, 904, 977, 978, 981, 983, 984, 985, 987, 1004, 1012], "so": [4, 9, 12, 16, 17, 42, 48, 55, 56, 61, 65, 81, 118, 121, 124, 131, 152, 157, 170, 172, 176, 180, 200, 201, 229, 236, 239, 261, 281, 287, 288, 291, 298, 299, 304, 309, 310, 314, 325, 334, 347, 349, 356, 358, 362, 363, 364, 370, 371, 375, 376, 378, 380, 381, 382, 384, 385, 390, 394, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 416, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 490, 502, 503, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 689, 699, 702, 710, 719, 734, 749, 781, 788, 789, 790, 793, 794, 796, 797, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 883, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 930, 947, 956, 970, 971, 973, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 987, 991, 993, 994, 995, 996, 1002, 1005, 1014, 1015, 1016, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1038], "error": [4, 5, 7, 13, 17, 27, 75, 78, 79, 81, 99, 105, 110, 111, 115, 118, 119, 122, 126, 136, 149, 152, 164, 167, 170, 184, 189, 196, 200, 202, 206, 207, 214, 218, 232, 235, 236, 252, 254, 257, 261, 262, 266, 275, 277, 287, 288, 317, 333, 342, 347, 348, 373, 374, 376, 378, 379, 380, 381, 385, 388, 390, 394, 397, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 431, 437, 438, 441, 443, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 490, 497, 509, 518, 525, 527, 528, 531, 532, 536, 537, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 569, 575, 576, 582, 584, 585, 586, 588, 589, 590, 592, 593, 594, 600, 604, 605, 623, 626, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 682, 683, 684, 686, 687, 690, 692, 695, 696, 703, 706, 714, 715, 716, 720, 733, 736, 737, 738, 739, 740, 741, 743, 744, 746, 749, 757, 771, 775, 781, 782, 790, 791, 792, 793, 794, 796, 797, 799, 804, 808, 812, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 843, 844, 845, 848, 850, 851, 853, 854, 856, 858, 859, 860, 865, 866, 867, 872, 873, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 911, 912, 913, 914, 917, 944, 965, 968, 970, 971, 972, 974, 975, 976, 978, 982, 985, 989, 991, 995, 996, 997, 1003, 1014, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "easili": [4, 9, 31, 90, 146, 173, 203, 216, 234, 236, 240, 243, 261, 263, 270, 286, 305, 376, 378, 390, 391, 404, 410, 411, 413, 443, 975, 977, 978, 991, 995, 996, 997, 1008, 1011, 1016, 1028], "interpret": [4, 27, 149, 159, 167, 168, 169, 171, 174, 200, 201, 216, 218, 255, 261, 263, 264, 300, 304, 307, 315, 347, 349, 362, 374, 376, 377, 382, 384, 385, 390, 392, 401, 403, 404, 409, 411, 446, 458, 459, 461, 490, 535, 566, 605, 633, 637, 647, 666, 667, 685, 686, 689, 695, 722, 746, 751, 752, 776, 783, 784, 796, 805, 816, 817, 819, 822, 854, 866, 873, 949, 975, 977, 981, 982, 988, 991, 997, 1001, 1007, 1015, 1022, 1023, 1027, 1030, 1035, 1036, 1037], "fraction": [4, 25, 27, 123, 125, 200, 208, 218, 342, 348, 401, 407, 410, 432, 433, 443, 444, 450, 451, 509, 521, 551, 552, 553, 554, 558, 559, 560, 584, 587, 596, 660, 661, 662, 665, 670, 671, 672, 697, 715, 716, 717, 727, 785, 787, 792, 796, 817, 818, 832, 860, 895, 896, 897, 901, 902, 903, 904, 947, 977, 981, 984, 988, 989, 991, 996, 997, 1002, 1023, 1024, 1025, 1036], "maximum": [4, 8, 11, 27, 33, 37, 57, 78, 79, 80, 81, 82, 97, 112, 117, 118, 121, 123, 153, 159, 167, 178, 188, 219, 239, 271, 283, 287, 288, 294, 303, 329, 345, 348, 352, 354, 355, 362, 381, 382, 389, 390, 400, 401, 403, 405, 406, 408, 410, 411, 413, 414, 415, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 448, 451, 453, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 476, 477, 478, 492, 503, 505, 506, 507, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 577, 578, 591, 604, 621, 625, 626, 629, 631, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 670, 671, 672, 673, 676, 677, 679, 680, 681, 682, 683, 684, 686, 687, 688, 710, 737, 774, 788, 790, 793, 794, 796, 804, 811, 817, 842, 849, 850, 851, 857, 858, 862, 863, 865, 868, 869, 870, 872, 881, 882, 887, 888, 889, 890, 893, 894, 898, 901, 902, 903, 904, 905, 907, 910, 917, 970, 976, 977, 978, 980, 981, 983, 984, 985, 987, 991, 995, 996, 997, 1015, 1029, 1030, 1032, 1033, 1036, 1037], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 158, 159, 160, 161, 167, 169, 170, 171, 172, 173, 176, 178, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 224, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 347, 348, 352, 353, 354, 355, 356, 362, 364, 365, 368, 371, 373, 376, 379, 381, 382, 385, 388, 390, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 419, 425, 426, 427, 428, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 495, 503, 504, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 569, 571, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 688, 691, 692, 694, 695, 696, 705, 716, 728, 743, 781, 788, 789, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 922, 941, 949, 965, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 1001, 1002, 1003, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 56, 57, 58, 61, 65, 68, 69, 76, 79, 80, 84, 87, 95, 98, 100, 104, 105, 106, 109, 112, 117, 119, 120, 126, 132, 144, 149, 164, 176, 187, 189, 201, 208, 217, 220, 222, 227, 229, 235, 236, 239, 243, 245, 253, 263, 268, 270, 281, 287, 288, 290, 303, 307, 310, 313, 315, 316, 347, 348, 349, 356, 358, 362, 363, 364, 365, 368, 373, 374, 376, 377, 378, 382, 383, 385, 388, 389, 392, 394, 397, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 456, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 498, 506, 508, 516, 519, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 704, 705, 724, 725, 728, 729, 734, 735, 756, 761, 762, 767, 771, 776, 781, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 881, 882, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 908, 916, 930, 937, 939, 940, 941, 942, 947, 950, 965, 966, 969, 970, 971, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 989, 991, 993, 994, 995, 996, 997, 998, 1001, 1005, 1007, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "minim": [4, 12, 57, 66, 78, 79, 125, 152, 160, 179, 196, 198, 200, 202, 204, 208, 218, 221, 232, 233, 246, 251, 262, 270, 271, 303, 313, 316, 331, 338, 342, 352, 365, 375, 376, 379, 384, 388, 390, 401, 403, 405, 408, 410, 434, 435, 439, 440, 444, 457, 532, 534, 541, 551, 552, 553, 554, 558, 559, 603, 604, 605, 635, 640, 643, 651, 652, 661, 665, 666, 668, 672, 673, 681, 686, 688, 689, 741, 773, 840, 842, 851, 869, 881, 887, 901, 902, 903, 904, 972, 977, 978, 981, 984, 985, 991, 993, 994, 995, 996, 1001, 1003, 1014, 1015, 1018, 1026, 1031, 1032], "squar": [4, 5, 61, 71, 79, 80, 81, 84, 87, 96, 106, 115, 126, 128, 149, 152, 157, 167, 170, 178, 179, 181, 184, 189, 196, 200, 202, 205, 210, 217, 218, 219, 232, 233, 235, 249, 270, 271, 275, 307, 315, 316, 318, 331, 347, 368, 373, 376, 382, 385, 390, 403, 405, 406, 408, 409, 410, 414, 415, 426, 434, 436, 437, 438, 440, 441, 443, 444, 451, 453, 454, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 495, 525, 531, 533, 535, 537, 541, 543, 546, 548, 550, 552, 553, 554, 556, 559, 562, 564, 584, 585, 586, 589, 590, 592, 593, 594, 598, 599, 600, 603, 605, 609, 616, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 676, 677, 679, 680, 681, 682, 684, 686, 688, 690, 703, 715, 716, 717, 743, 744, 751, 752, 756, 762, 763, 778, 819, 826, 827, 835, 836, 839, 841, 843, 844, 851, 854, 873, 893, 894, 896, 898, 899, 900, 902, 904, 928, 954, 967, 972, 974, 975, 984, 985, 989, 995, 997, 1003, 1014, 1015, 1018, 1022, 1025, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 58, 61, 63, 71, 72, 74, 83, 85, 86, 95, 96, 97, 103, 105, 110, 111, 112, 117, 118, 119, 121, 123, 125, 129, 132, 133, 134, 135, 136, 138, 139, 147, 148, 149, 151, 152, 157, 159, 162, 163, 164, 166, 169, 170, 178, 181, 184, 188, 189, 195, 200, 202, 204, 205, 207, 208, 217, 218, 219, 228, 229, 230, 235, 241, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 258, 259, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 277, 281, 282, 288, 295, 303, 305, 316, 317, 319, 337, 338, 342, 348, 349, 353, 362, 363, 364, 365, 368, 374, 376, 379, 380, 383, 384, 385, 386, 393, 394, 397, 398, 401, 403, 406, 408, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 485, 486, 489, 490, 492, 495, 496, 518, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 569, 570, 571, 573, 574, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 681, 682, 683, 684, 685, 686, 691, 692, 694, 695, 696, 701, 702, 705, 706, 707, 710, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 775, 776, 777, 778, 780, 781, 782, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 801, 802, 804, 808, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 879, 881, 882, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 912, 913, 914, 916, 918, 919, 922, 924, 925, 926, 937, 939, 941, 949, 965, 969, 976, 978, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1034, 1035, 1036, 1037, 1038], "condit": [4, 12, 25, 27, 82, 120, 125, 167, 168, 170, 174, 189, 202, 205, 218, 236, 264, 316, 356, 382, 388, 392, 400, 401, 403, 405, 408, 410, 412, 445, 458, 465, 466, 467, 472, 490, 507, 517, 518, 530, 533, 534, 535, 537, 539, 541, 543, 544, 556, 621, 626, 627, 637, 644, 645, 646, 648, 649, 650, 664, 666, 667, 668, 669, 676, 677, 681, 691, 706, 711, 712, 729, 730, 786, 828, 829, 830, 831, 832, 851, 854, 857, 866, 867, 870, 874, 930, 975, 977, 978, 979, 981, 983, 984, 986, 991, 997, 1001, 1014, 1018, 1023, 1025, 1026, 1027, 1029, 1030, 1032, 1034, 1036, 1037, 1038], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 66, 68, 70, 71, 72, 73, 75, 78, 79, 80, 81, 89, 95, 96, 97, 98, 99, 100, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 135, 139, 140, 141, 145, 149, 152, 153, 154, 157, 158, 159, 161, 163, 164, 166, 167, 169, 170, 171, 172, 176, 178, 179, 180, 183, 184, 188, 195, 200, 201, 202, 204, 205, 207, 208, 214, 216, 217, 218, 219, 221, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 236, 237, 239, 243, 246, 247, 251, 252, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 274, 276, 279, 281, 284, 287, 288, 289, 292, 294, 303, 308, 309, 310, 314, 315, 316, 318, 319, 323, 327, 330, 331, 333, 334, 336, 337, 338, 347, 348, 349, 352, 355, 356, 358, 362, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 424, 427, 428, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 569, 570, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 604, 605, 606, 613, 616, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 703, 705, 706, 712, 714, 715, 720, 722, 723, 727, 728, 730, 735, 736, 738, 739, 741, 743, 744, 746, 749, 751, 752, 756, 757, 759, 760, 761, 762, 763, 766, 768, 769, 770, 771, 774, 775, 776, 777, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 908, 910, 911, 913, 914, 916, 917, 920, 924, 925, 926, 928, 929, 930, 932, 934, 938, 939, 940, 941, 942, 944, 945, 946, 949, 951, 952, 955, 956, 962, 965, 967, 968, 969, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1005, 1008, 1010, 1011, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "median": [4, 37, 71, 75, 80, 81, 125, 164, 165, 170, 202, 206, 217, 231, 239, 303, 314, 316, 317, 371, 405, 410, 412, 434, 448, 452, 455, 468, 546, 548, 552, 559, 591, 621, 624, 629, 664, 665, 673, 715, 746, 840, 871, 883, 902, 904, 971, 991, 997, 1025, 1026], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 58, 60, 61, 96, 115, 116, 125, 128, 135, 149, 152, 157, 167, 169, 170, 171, 176, 189, 194, 199, 200, 204, 206, 218, 254, 259, 261, 267, 268, 274, 277, 308, 338, 347, 348, 362, 371, 373, 378, 382, 390, 400, 402, 405, 407, 408, 409, 410, 411, 443, 446, 456, 492, 509, 532, 534, 541, 545, 551, 552, 553, 554, 557, 558, 559, 598, 601, 602, 605, 621, 625, 652, 684, 686, 692, 696, 698, 699, 701, 703, 706, 707, 710, 711, 714, 718, 719, 720, 722, 724, 729, 730, 732, 733, 736, 740, 748, 749, 750, 775, 776, 777, 779, 780, 782, 783, 786, 814, 816, 819, 839, 870, 882, 901, 902, 903, 904, 971, 977, 979, 984, 986, 987, 989, 995, 997, 1011, 1014, 1022, 1025, 1027, 1028, 1030, 1032], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 70, 71, 85, 100, 111, 112, 115, 117, 118, 119, 120, 123, 124, 125, 126, 127, 138, 141, 143, 145, 148, 150, 152, 153, 167, 169, 170, 171, 172, 173, 176, 184, 189, 195, 196, 200, 201, 202, 204, 207, 208, 215, 216, 218, 225, 230, 235, 236, 238, 248, 254, 255, 256, 259, 260, 261, 262, 263, 265, 266, 268, 269, 271, 272, 273, 277, 279, 284, 289, 290, 297, 299, 305, 308, 309, 310, 326, 334, 342, 349, 358, 362, 363, 370, 371, 373, 379, 380, 381, 382, 388, 389, 390, 392, 393, 396, 398, 399, 401, 404, 405, 408, 410, 411, 412, 413, 420, 422, 426, 429, 430, 431, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 482, 483, 487, 491, 492, 496, 498, 518, 525, 531, 533, 537, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 586, 588, 589, 590, 592, 593, 594, 596, 598, 599, 600, 602, 603, 604, 605, 621, 622, 624, 629, 630, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 706, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 840, 843, 844, 850, 851, 853, 878, 879, 881, 882, 883, 884, 888, 889, 891, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 922, 924, 925, 976, 977, 980, 981, 984, 985, 989, 991, 995, 996, 997, 1001, 1002, 1004, 1005, 1008, 1011, 1012, 1018, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "discuss": [4, 53, 58, 149, 170, 189, 221, 226, 264, 347, 358, 364, 371, 373, 376, 381, 382, 384, 388, 390, 391, 403, 405, 409, 410, 413, 492, 676, 677, 835, 836, 841, 843, 844, 971, 975, 977, 978, 981, 984, 991, 998, 1002, 1025], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 60, 62, 66, 78, 101, 102, 121, 132, 138, 139, 149, 170, 173, 193, 237, 256, 266, 273, 352, 358, 362, 363, 364, 365, 378, 381, 384, 390, 403, 405, 407, 410, 411, 414, 437, 438, 441, 443, 453, 517, 526, 532, 553, 554, 576, 596, 652, 653, 666, 668, 673, 681, 682, 683, 687, 719, 749, 790, 793, 794, 804, 860, 893, 894, 901, 902, 903, 904, 971, 972, 976, 977, 978, 979, 980, 984, 991, 994, 995, 996, 1008, 1010, 1014, 1015, 1024, 1025, 1029, 1031, 1033], "focu": [4, 9, 27, 95, 112, 152, 252, 291, 362, 381, 401, 410, 547, 548, 553, 555, 556, 672, 978, 984, 991, 1001, 1002], "intuit": [4, 31, 44, 52, 62, 100, 112, 115, 122, 144, 152, 170, 171, 201, 202, 223, 229, 262, 286, 305, 308, 331, 334, 338, 348, 376, 390, 401, 403, 405, 407, 409, 775, 776, 777, 780, 864, 895, 898, 973, 977, 978, 981, 982, 988, 991, 992, 996, 1005, 1014, 1016, 1022], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 55, 72, 75, 80, 82, 86, 92, 95, 98, 100, 103, 111, 112, 114, 115, 117, 118, 119, 121, 122, 125, 149, 152, 158, 164, 170, 171, 172, 176, 179, 184, 186, 189, 200, 202, 206, 216, 217, 218, 225, 229, 235, 236, 237, 239, 247, 258, 259, 261, 262, 263, 264, 267, 270, 279, 281, 287, 288, 300, 303, 307, 308, 309, 310, 315, 317, 319, 323, 338, 347, 348, 349, 358, 362, 363, 364, 370, 371, 372, 375, 376, 378, 381, 382, 384, 390, 391, 397, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 448, 451, 454, 457, 458, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 487, 488, 490, 503, 508, 509, 517, 525, 528, 529, 530, 531, 532, 534, 535, 536, 538, 541, 542, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 567, 575, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 621, 622, 624, 628, 634, 636, 637, 638, 639, 640, 641, 646, 647, 649, 652, 653, 654, 655, 656, 657, 660, 661, 662, 665, 666, 668, 670, 671, 672, 673, 676, 681, 686, 688, 690, 698, 699, 706, 714, 715, 716, 717, 728, 729, 732, 757, 772, 773, 774, 776, 778, 786, 788, 789, 790, 793, 794, 800, 804, 809, 811, 814, 815, 816, 817, 818, 821, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 847, 850, 851, 856, 866, 867, 868, 870, 871, 873, 876, 882, 883, 887, 890, 893, 894, 895, 898, 899, 901, 902, 903, 904, 905, 919, 930, 932, 933, 944, 950, 952, 955, 970, 971, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 995, 996, 997, 1001, 1002, 1007, 1011, 1014, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "root": [4, 8, 9, 16, 34, 50, 53, 80, 114, 149, 156, 158, 160, 161, 171, 179, 181, 192, 209, 214, 247, 287, 306, 313, 333, 336, 339, 353, 356, 373, 376, 384, 403, 436, 495, 535, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 633, 744, 901, 902, 903, 904, 905, 907, 987, 997, 1024, 1030, 1031, 1032, 1033, 1036, 1037], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 58, 60, 64, 68, 70, 75, 82, 111, 112, 117, 124, 126, 127, 132, 146, 149, 153, 164, 167, 169, 170, 172, 184, 189, 195, 196, 200, 202, 204, 206, 218, 224, 230, 233, 234, 239, 242, 254, 255, 257, 258, 259, 261, 262, 264, 268, 270, 271, 277, 279, 281, 283, 291, 294, 300, 303, 308, 313, 314, 316, 317, 318, 319, 322, 323, 325, 326, 347, 348, 358, 362, 365, 368, 371, 376, 378, 388, 389, 390, 392, 394, 398, 401, 408, 409, 410, 413, 414, 420, 431, 435, 438, 439, 440, 444, 451, 463, 514, 529, 543, 544, 545, 547, 549, 551, 552, 553, 555, 556, 558, 559, 561, 563, 572, 596, 604, 614, 622, 625, 628, 632, 633, 634, 635, 636, 637, 652, 653, 657, 660, 662, 668, 669, 670, 682, 684, 686, 688, 690, 790, 793, 794, 796, 804, 812, 814, 815, 816, 818, 821, 822, 823, 824, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 859, 865, 888, 889, 893, 895, 898, 901, 903, 971, 973, 976, 978, 982, 987, 989, 1001, 1002, 1011, 1012, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "studi": [4, 60, 125, 200, 218, 264, 267, 268, 347, 371, 373, 407, 412, 690, 702, 751, 752, 818, 979, 981, 995, 1007], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 56, 57, 60, 61, 62, 65, 66, 71, 72, 73, 74, 75, 81, 85, 86, 91, 92, 97, 99, 100, 101, 102, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 218, 221, 222, 223, 226, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 246, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 352, 353, 354, 355, 356, 358, 368, 369, 370, 371, 374, 376, 378, 381, 383, 385, 389, 390, 394, 397, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 422, 425, 426, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 492, 494, 496, 499, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 520, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 692, 693, 694, 695, 696, 700, 705, 719, 728, 734, 735, 749, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 781, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 913, 918, 919, 941, 943, 944, 945, 949, 952, 955, 968, 970, 971, 972, 973, 975, 976, 977, 979, 981, 982, 983, 984, 985, 986, 988, 991, 995, 996, 997, 1002, 1007, 1011, 1012, 1014, 1018, 1019, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "hist": [4, 25, 27, 53, 75, 114, 118, 200, 202, 233, 239, 267, 286, 303, 307, 309, 317, 410], "bin": [4, 24, 25, 27, 53, 75, 114, 118, 200, 233, 239, 267, 286, 303, 304, 305, 306, 307, 309, 310, 374, 384, 393, 401, 409, 410, 432, 433, 442, 455, 555, 556, 856, 858, 872, 932, 1015, 1030, 1031, 1032, 1036], "30": [4, 8, 10, 14, 19, 34, 39, 40, 44, 54, 60, 71, 72, 73, 76, 78, 92, 101, 103, 112, 121, 125, 131, 138, 149, 150, 152, 153, 156, 158, 171, 176, 179, 194, 198, 200, 218, 221, 222, 226, 234, 238, 239, 250, 261, 266, 275, 281, 290, 291, 307, 308, 309, 318, 319, 322, 323, 327, 332, 335, 337, 340, 362, 371, 373, 381, 382, 407, 411, 414, 438, 444, 451, 494, 525, 529, 531, 532, 533, 535, 537, 564, 586, 589, 590, 592, 642, 686, 728, 776, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 874, 889, 902, 970, 975, 981, 982, 984, 989, 1012, 1022, 1023, 1029, 1030, 1031], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 73, 95, 99, 111, 121, 125, 126, 158, 159, 160, 170, 176, 179, 200, 203, 204, 208, 215, 218, 232, 233, 235, 236, 243, 256, 285, 286, 299, 304, 305, 306, 307, 313, 316, 318, 334, 338, 340, 343, 349, 370, 373, 376, 379, 381, 385, 386, 388, 389, 390, 400, 401, 404, 407, 408, 409, 410, 411, 412, 413, 415, 421, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 439, 442, 443, 444, 448, 451, 452, 455, 458, 459, 461, 462, 463, 465, 466, 476, 477, 478, 483, 497, 503, 510, 511, 512, 514, 518, 522, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 605, 614, 616, 621, 622, 623, 624, 625, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 679, 680, 681, 682, 683, 684, 686, 687, 690, 691, 692, 693, 694, 695, 696, 715, 716, 717, 721, 738, 739, 741, 743, 744, 746, 747, 754, 760, 761, 764, 765, 767, 771, 772, 773, 774, 778, 788, 789, 790, 793, 794, 796, 804, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 839, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 910, 911, 912, 913, 914, 915, 919, 924, 929, 940, 941, 945, 954, 956, 962, 967, 968, 971, 973, 975, 977, 978, 979, 980, 981, 983, 984, 985, 986, 988, 989, 993, 994, 995, 996, 997, 1001, 1002, 1005, 1007, 1011, 1012, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "annot": [4, 9, 26, 134, 176, 222, 265, 268, 347, 376, 377, 378, 403, 710, 907, 981, 997, 1031], "log": [4, 20, 25, 26, 27, 78, 95, 112, 125, 132, 145, 149, 153, 154, 156, 157, 158, 161, 185, 188, 189, 193, 200, 205, 210, 218, 233, 235, 250, 291, 308, 347, 371, 373, 374, 376, 380, 384, 385, 390, 400, 401, 403, 404, 405, 408, 410, 411, 413, 442, 445, 454, 459, 464, 465, 466, 467, 468, 469, 470, 526, 530, 535, 543, 544, 545, 547, 549, 551, 553, 556, 558, 584, 585, 587, 588, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 636, 639, 642, 652, 653, 663, 665, 670, 674, 734, 744, 748, 788, 789, 790, 793, 794, 804, 828, 829, 830, 831, 832, 833, 834, 838, 849, 850, 857, 858, 887, 890, 895, 898, 900, 901, 903, 928, 970, 973, 975, 977, 978, 983, 984, 986, 989, 991, 995, 997, 1001, 1002, 1014, 1024, 1025, 1026, 1031, 1032, 1033, 1036], "describ": [4, 56, 132, 149, 170, 218, 234, 261, 270, 358, 362, 363, 369, 371, 373, 375, 376, 378, 381, 384, 390, 391, 400, 403, 405, 406, 407, 408, 410, 411, 456, 463, 467, 468, 485, 487, 489, 490, 491, 494, 495, 496, 497, 498, 499, 504, 510, 511, 512, 522, 601, 602, 639, 653, 708, 788, 789, 828, 830, 868, 930, 970, 973, 976, 977, 980, 981, 983, 987, 995, 996, 997, 1004, 1007, 1013, 1014, 1030, 1032], "weather": [4, 157, 171, 977, 981], "includ": [4, 32, 55, 80, 118, 122, 124, 169, 170, 172, 184, 200, 204, 218, 236, 262, 281, 298, 303, 316, 317, 319, 334, 339, 347, 349, 358, 362, 363, 370, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 390, 391, 393, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 438, 440, 444, 450, 460, 463, 464, 465, 466, 467, 468, 469, 470, 483, 484, 485, 490, 494, 495, 496, 498, 499, 504, 528, 535, 551, 558, 568, 626, 632, 640, 641, 646, 654, 655, 656, 659, 675, 682, 683, 691, 707, 722, 723, 728, 730, 731, 764, 776, 777, 780, 786, 790, 792, 793, 794, 803, 804, 807, 810, 816, 819, 841, 843, 844, 845, 866, 867, 868, 872, 890, 893, 894, 901, 903, 905, 907, 913, 914, 917, 919, 922, 941, 970, 977, 980, 981, 982, 984, 985, 991, 995, 996, 997, 1001, 1002, 1004, 1005, 1014, 1016, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "both": [4, 5, 7, 9, 10, 14, 16, 20, 25, 26, 42, 54, 55, 64, 71, 78, 80, 85, 86, 100, 103, 109, 111, 115, 118, 119, 122, 131, 132, 135, 144, 145, 149, 152, 159, 161, 169, 170, 171, 172, 179, 184, 186, 188, 189, 200, 201, 202, 204, 205, 206, 208, 218, 225, 235, 236, 237, 246, 247, 248, 249, 250, 251, 261, 262, 263, 264, 268, 270, 272, 276, 281, 293, 303, 307, 308, 313, 315, 319, 324, 325, 331, 336, 338, 347, 348, 349, 356, 358, 362, 363, 364, 369, 370, 371, 372, 374, 376, 378, 382, 383, 385, 388, 389, 390, 391, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 413, 416, 431, 440, 441, 446, 453, 456, 462, 469, 476, 477, 478, 479, 482, 483, 490, 491, 494, 496, 499, 501, 502, 503, 528, 532, 534, 541, 545, 549, 550, 551, 557, 558, 559, 560, 561, 571, 582, 583, 585, 591, 601, 602, 621, 626, 627, 637, 651, 652, 653, 666, 668, 670, 672, 681, 693, 698, 706, 710, 724, 729, 750, 754, 760, 767, 771, 776, 781, 782, 786, 793, 794, 796, 812, 822, 850, 851, 865, 867, 869, 881, 886, 891, 893, 894, 901, 903, 917, 931, 944, 956, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 994, 995, 996, 997, 1001, 1002, 1004, 1005, 1011, 1014, 1015, 1016, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "numer": [4, 19, 66, 71, 75, 120, 122, 132, 149, 157, 160, 171, 172, 189, 200, 218, 239, 241, 243, 291, 309, 316, 349, 370, 371, 373, 379, 381, 382, 388, 389, 390, 403, 405, 410, 411, 412, 413, 415, 416, 434, 437, 441, 453, 465, 466, 469, 472, 483, 484, 485, 490, 494, 495, 496, 498, 499, 504, 525, 527, 529, 534, 541, 561, 575, 584, 605, 611, 614, 621, 624, 626, 627, 640, 646, 648, 666, 681, 684, 688, 708, 781, 785, 790, 793, 794, 796, 804, 812, 815, 816, 817, 820, 828, 829, 830, 831, 832, 850, 851, 856, 861, 866, 867, 874, 905, 906, 907, 913, 914, 929, 930, 970, 971, 977, 978, 982, 989, 991, 992, 997, 1004, 1005, 1007, 1016, 1022, 1023, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "categor": [4, 71, 110, 117, 132, 136, 167, 170, 171, 172, 200, 218, 239, 241, 243, 310, 316, 318, 319, 364, 368, 370, 371, 378, 381, 390, 404, 411, 460, 461, 483, 484, 490, 499, 555, 556, 575, 576, 601, 602, 626, 627, 642, 652, 653, 663, 674, 703, 816, 828, 829, 830, 831, 832, 854, 856, 860, 861, 864, 866, 867, 874, 888, 889, 971, 977, 988, 989, 997, 1001, 1002, 1003, 1004, 1005, 1016, 1018, 1022, 1023, 1026, 1027, 1030, 1032, 1034, 1037, 1038], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 58, 66, 67, 70, 71, 86, 89, 90, 91, 102, 118, 119, 120, 143, 145, 146, 148, 149, 150, 152, 157, 167, 170, 171, 173, 176, 178, 179, 180, 184, 201, 204, 215, 217, 218, 219, 236, 240, 248, 249, 251, 256, 258, 261, 262, 263, 266, 268, 270, 284, 287, 288, 291, 310, 316, 337, 342, 347, 348, 349, 353, 356, 358, 362, 365, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 384, 388, 389, 390, 391, 397, 400, 407, 408, 410, 411, 412, 413, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 456, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 486, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 504, 509, 518, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 601, 602, 603, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 689, 691, 695, 698, 699, 709, 719, 723, 736, 748, 749, 750, 779, 781, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 938, 971, 973, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 991, 992, 995, 997, 1002, 1005, 1013, 1014, 1015, 1016, 1022, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "alreadi": [4, 6, 10, 16, 55, 58, 90, 100, 112, 132, 149, 170, 230, 237, 239, 242, 262, 268, 281, 316, 319, 376, 377, 381, 388, 390, 401, 405, 407, 409, 410, 415, 431, 493, 517, 527, 561, 562, 628, 640, 643, 658, 659, 660, 661, 662, 668, 670, 671, 672, 679, 680, 761, 828, 848, 856, 862, 863, 865, 870, 876, 878, 879, 880, 882, 883, 884, 890, 893, 894, 916, 940, 970, 987, 991, 992, 1002, 1007, 1012, 1016, 1019, 1023, 1027, 1030, 1034, 1035, 1036, 1037], "expand": [4, 16, 49, 65, 231, 309, 314, 358, 368, 410, 438, 444, 493, 551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904, 981, 1023, 1030, 1031, 1038], "complementari": [4, 411], "column": [4, 20, 21, 60, 69, 72, 75, 76, 90, 119, 121, 122, 125, 129, 132, 149, 157, 164, 167, 169, 170, 171, 172, 173, 189, 200, 201, 204, 208, 218, 238, 239, 240, 251, 261, 262, 272, 273, 299, 308, 310, 315, 316, 317, 318, 347, 348, 349, 362, 370, 371, 373, 376, 378, 382, 385, 388, 389, 390, 400, 403, 404, 406, 408, 410, 411, 412, 415, 418, 445, 447, 458, 460, 461, 465, 466, 472, 481, 482, 483, 484, 485, 486, 488, 490, 494, 495, 496, 498, 499, 502, 503, 504, 505, 507, 509, 520, 525, 528, 531, 536, 538, 542, 549, 551, 552, 558, 559, 560, 561, 575, 576, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 604, 621, 624, 626, 627, 628, 640, 642, 646, 652, 654, 656, 658, 659, 663, 674, 679, 680, 691, 707, 712, 713, 722, 723, 731, 747, 756, 761, 762, 763, 766, 776, 777, 780, 781, 790, 793, 794, 804, 814, 819, 824, 827, 828, 829, 830, 831, 832, 833, 834, 853, 857, 858, 859, 860, 866, 867, 868, 872, 873, 874, 875, 877, 893, 895, 898, 901, 903, 909, 913, 914, 919, 930, 944, 957, 958, 960, 968, 970, 971, 977, 979, 981, 982, 989, 991, 996, 1002, 1022, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 79, 80, 81, 82, 85, 86, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 221, 222, 223, 226, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 369, 370, 371, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 394, 397, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 424, 425, 426, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 481, 487, 488, 489, 492, 494, 495, 496, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 700, 704, 705, 718, 728, 735, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 781, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 917, 929, 930, 932, 941, 942, 949, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 970, 971, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 991, 993, 994, 995, 996, 997, 1002, 1007, 1011, 1012, 1014, 1015, 1016, 1019, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "drop": [4, 5, 71, 75, 86, 157, 169, 170, 171, 173, 200, 204, 218, 239, 243, 271, 309, 315, 318, 348, 380, 384, 404, 408, 410, 458, 461, 561, 562, 563, 564, 689, 694, 696, 775, 782, 852, 866, 872, 971, 977, 981, 989, 991, 1001, 1022, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 55, 61, 71, 72, 75, 82, 86, 91, 92, 95, 96, 97, 98, 99, 105, 114, 115, 119, 121, 128, 131, 135, 141, 145, 156, 157, 161, 164, 169, 170, 181, 185, 187, 189, 192, 193, 194, 200, 205, 209, 212, 214, 215, 217, 218, 222, 223, 226, 229, 233, 234, 238, 246, 248, 250, 251, 257, 258, 262, 263, 268, 270, 271, 279, 281, 286, 287, 288, 291, 292, 293, 300, 303, 307, 310, 323, 325, 327, 330, 333, 334, 337, 339, 340, 341, 342, 344, 347, 348, 353, 354, 355, 356, 378, 385, 390, 401, 403, 411, 415, 432, 439, 458, 461, 525, 527, 530, 531, 533, 535, 537, 544, 579, 606, 625, 626, 679, 680, 695, 756, 772, 773, 774, 775, 796, 812, 821, 862, 863, 870, 871, 873, 876, 878, 879, 880, 882, 883, 884, 907, 909, 913, 914, 932, 956, 962, 971, 981, 988, 991, 996, 1013, 1015, 1030, 1032, 1034], "holidai": [4, 171], "workingdai": [4, 171], "temp": [4, 171], "feel_temp": [4, 171], "humid": [4, 171, 988], "windspe": [4, 171], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 362, 363, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 385, 388, 389, 390, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 426, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 754, 756, 757, 759, 760, 761, 762, 764, 766, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 911, 913, 914, 919, 924, 925, 927, 929, 930, 932, 933, 934, 935, 942, 943, 944, 946, 947, 949, 950, 951, 952, 955, 956, 962, 970, 971, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "spring": [4, 171], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 55, 64, 67, 70, 71, 72, 73, 79, 81, 92, 99, 101, 104, 105, 111, 112, 118, 119, 122, 125, 126, 135, 138, 152, 157, 158, 159, 160, 170, 171, 172, 173, 179, 180, 184, 186, 200, 201, 205, 206, 208, 216, 218, 221, 224, 236, 237, 239, 243, 246, 258, 259, 261, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 281, 285, 291, 294, 298, 299, 303, 304, 309, 310, 313, 315, 316, 317, 318, 324, 334, 336, 342, 343, 347, 348, 370, 376, 377, 378, 381, 390, 394, 401, 403, 404, 405, 407, 408, 410, 411, 412, 413, 415, 416, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 509, 517, 518, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 629, 631, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 688, 689, 691, 692, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 708, 709, 712, 719, 720, 721, 722, 723, 724, 731, 735, 736, 743, 744, 747, 749, 754, 756, 760, 761, 762, 767, 771, 775, 776, 777, 778, 780, 782, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 801, 804, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 911, 912, 913, 914, 924, 931, 942, 943, 946, 947, 951, 952, 955, 962, 967, 968, 970, 971, 977, 981, 984, 991, 995, 996, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "6": [4, 6, 9, 10, 11, 12, 16, 19, 26, 31, 32, 40, 44, 46, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 65, 67, 73, 74, 75, 78, 79, 80, 82, 85, 90, 95, 97, 98, 105, 113, 122, 125, 126, 129, 131, 138, 144, 149, 152, 155, 157, 159, 160, 164, 165, 170, 171, 173, 176, 179, 180, 181, 184, 189, 193, 198, 200, 201, 202, 204, 214, 218, 221, 222, 225, 229, 232, 233, 237, 240, 241, 246, 247, 248, 249, 251, 252, 255, 256, 260, 261, 262, 263, 264, 265, 270, 271, 272, 273, 276, 279, 283, 286, 294, 297, 299, 300, 303, 305, 307, 308, 310, 313, 316, 317, 318, 319, 322, 323, 326, 327, 334, 335, 337, 339, 342, 344, 348, 349, 355, 358, 370, 371, 373, 374, 376, 381, 382, 389, 393, 395, 396, 401, 403, 404, 407, 408, 410, 411, 412, 440, 442, 443, 444, 445, 446, 447, 456, 476, 477, 478, 479, 499, 518, 524, 532, 534, 535, 541, 557, 563, 564, 587, 588, 605, 608, 609, 619, 621, 622, 624, 638, 639, 664, 683, 687, 693, 715, 721, 731, 738, 739, 743, 744, 746, 762, 778, 781, 788, 789, 791, 792, 797, 799, 800, 802, 807, 808, 811, 817, 819, 828, 829, 830, 832, 833, 834, 841, 843, 844, 845, 860, 861, 863, 866, 868, 871, 872, 877, 908, 930, 933, 935, 944, 970, 971, 975, 977, 978, 981, 991, 992, 995, 996, 997, 999, 1007, 1011, 1012, 1014, 1020, 1023, 1024, 1025, 1030, 1035], "clear": [4, 16, 55, 60, 72, 170, 171, 308, 371, 375, 376, 378, 388, 389, 390, 401, 404, 409, 907, 908, 970, 975, 1033, 1034, 1035], "9": [4, 7, 9, 12, 24, 26, 27, 30, 31, 32, 42, 44, 50, 55, 58, 62, 64, 74, 82, 85, 91, 111, 121, 122, 123, 124, 125, 130, 132, 140, 141, 149, 155, 159, 165, 169, 170, 171, 181, 182, 191, 200, 213, 214, 217, 218, 221, 224, 233, 234, 243, 246, 247, 248, 249, 255, 263, 264, 268, 270, 279, 283, 285, 286, 289, 290, 291, 297, 298, 300, 303, 305, 306, 307, 309, 310, 318, 319, 322, 323, 325, 326, 327, 334, 338, 344, 349, 358, 373, 374, 382, 389, 393, 395, 396, 401, 404, 405, 407, 410, 411, 433, 437, 444, 451, 476, 477, 478, 479, 484, 514, 521, 528, 532, 533, 534, 541, 554, 561, 564, 577, 585, 601, 602, 621, 624, 628, 633, 641, 652, 655, 686, 693, 703, 716, 719, 734, 741, 762, 771, 772, 773, 788, 791, 793, 794, 808, 811, 817, 819, 822, 830, 831, 835, 836, 841, 844, 850, 851, 859, 865, 868, 930, 934, 970, 976, 977, 981, 985, 991, 995, 996, 999, 1007, 1011, 1016, 1020, 1023, 1024, 1025, 1027, 1036, 1038], "84": [4, 6, 50, 70, 146, 191, 218, 305, 322, 336, 358, 373, 410, 411, 781, 804, 981, 991, 1012], "14": [4, 11, 38, 49, 60, 62, 63, 66, 74, 81, 98, 100, 144, 171, 176, 177, 184, 189, 191, 218, 223, 229, 234, 239, 260, 266, 267, 275, 279, 281, 300, 306, 307, 318, 341, 344, 349, 363, 371, 373, 374, 389, 393, 395, 396, 403, 407, 492, 504, 547, 548, 579, 580, 629, 637, 686, 804, 808, 859, 974, 977, 981, 991, 996, 999, 1007, 1020, 1022, 1023, 1025, 1026, 1030, 1035], "395": 4, "81": [4, 50, 243, 322, 323, 403, 693, 781, 790, 804, 981, 982, 984, 991], "0000": [4, 318], "02": [4, 12, 22, 28, 44, 50, 58, 62, 64, 67, 68, 76, 82, 85, 95, 98, 114, 121, 136, 142, 149, 150, 154, 159, 162, 169, 170, 181, 218, 219, 227, 229, 237, 239, 244, 256, 262, 268, 277, 286, 295, 297, 300, 301, 303, 305, 311, 327, 330, 347, 348, 353, 370, 373, 381, 407, 435, 439, 591, 652, 670, 790, 804, 872, 888, 902, 977], "13": [4, 6, 10, 11, 15, 44, 74, 100, 105, 121, 123, 124, 126, 161, 164, 170, 176, 186, 209, 255, 262, 265, 267, 269, 303, 307, 334, 371, 373, 376, 382, 389, 407, 415, 504, 507, 526, 527, 545, 546, 576, 629, 633, 727, 808, 837, 852, 859, 885, 886, 977, 981, 982, 987, 988, 991, 996, 999, 1007, 1020, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1034], "635": [4, 610], "80": [4, 6, 11, 16, 27, 67, 81, 101, 132, 141, 146, 171, 179, 237, 300, 305, 309, 322, 337, 339, 347, 354, 358, 371, 373, 376, 401, 407, 412, 438, 504, 535, 707, 790, 804, 874, 887, 906, 970, 976, 977, 981, 988, 994, 997, 1016], "75": [4, 6, 7, 10, 33, 44, 55, 82, 115, 146, 159, 160, 165, 170, 176, 179, 182, 191, 207, 215, 218, 243, 248, 249, 261, 270, 274, 286, 300, 303, 316, 344, 347, 358, 443, 545, 652, 700, 706, 727, 732, 738, 746, 749, 785, 790, 871, 883, 890, 906, 981, 983, 991, 997, 1000, 1012, 1024], "17374": 4, "19": [4, 9, 157, 170, 204, 251, 262, 277, 300, 307, 308, 323, 373, 380, 390, 403, 404, 411, 414, 438, 486, 510, 511, 512, 530, 534, 535, 541, 543, 544, 551, 552, 553, 554, 558, 559, 560, 576, 583, 642, 652, 653, 660, 661, 662, 665, 666, 668, 670, 672, 681, 701, 774, 778, 790, 804, 816, 821, 822, 824, 825, 839, 840, 859, 870, 891, 895, 898, 901, 902, 903, 904, 970, 981, 991, 999, 1020, 1022, 1023, 1024, 1025, 1027, 1030], "misti": [4, 171], "10": [4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 20, 25, 26, 27, 30, 31, 32, 34, 35, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 82, 85, 86, 92, 97, 98, 99, 100, 101, 105, 106, 111, 112, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 133, 135, 139, 141, 146, 149, 153, 154, 156, 158, 159, 161, 164, 165, 166, 169, 170, 171, 172, 173, 176, 179, 184, 190, 191, 193, 194, 198, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 216, 217, 218, 222, 223, 227, 229, 232, 233, 234, 235, 236, 238, 239, 240, 242, 244, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 269, 272, 275, 279, 286, 295, 297, 298, 299, 300, 303, 304, 306, 307, 308, 313, 314, 315, 316, 317, 319, 322, 323, 324, 326, 328, 332, 334, 336, 337, 339, 341, 342, 344, 345, 347, 348, 358, 362, 370, 371, 372, 373, 374, 376, 378, 381, 382, 388, 389, 390, 393, 394, 395, 396, 400, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 416, 432, 437, 441, 443, 445, 446, 447, 453, 454, 456, 469, 486, 487, 494, 495, 496, 498, 504, 505, 506, 507, 510, 514, 515, 518, 522, 525, 529, 530, 531, 532, 533, 535, 536, 538, 540, 542, 546, 549, 550, 551, 552, 555, 556, 558, 559, 560, 561, 562, 564, 576, 577, 587, 588, 593, 594, 605, 611, 613, 621, 624, 626, 628, 629, 634, 636, 637, 638, 643, 653, 658, 659, 660, 661, 663, 664, 666, 667, 669, 670, 671, 672, 679, 680, 685, 686, 693, 699, 709, 719, 735, 749, 762, 788, 789, 790, 791, 792, 793, 794, 801, 804, 805, 806, 807, 808, 810, 811, 812, 817, 819, 821, 822, 828, 829, 830, 832, 833, 834, 840, 849, 850, 851, 853, 859, 863, 866, 867, 870, 882, 890, 896, 899, 901, 902, 906, 930, 934, 945, 949, 951, 967, 970, 971, 976, 977, 978, 979, 981, 982, 984, 985, 987, 988, 991, 995, 996, 999, 1007, 1011, 1012, 1014, 1015, 1016, 1019, 1020, 1023, 1024, 1025, 1030, 1032, 1033, 1034, 1036, 1037], "66": [4, 225, 309, 373, 403, 526, 626, 706, 776, 777, 786, 872, 981, 993], "880": 4, "60": [4, 6, 16, 59, 73, 82, 200, 212, 218, 221, 222, 243, 249, 269, 274, 323, 337, 347, 370, 403, 407, 444, 451, 707, 790, 981, 991, 1012, 1022, 1025], "11": [4, 8, 9, 19, 74, 81, 97, 149, 155, 170, 171, 174, 184, 200, 201, 202, 205, 239, 258, 266, 267, 273, 284, 285, 287, 307, 311, 315, 318, 333, 337, 342, 370, 373, 374, 382, 389, 403, 406, 407, 410, 444, 451, 476, 477, 478, 479, 495, 511, 512, 606, 644, 650, 664, 709, 715, 716, 717, 771, 772, 773, 791, 794, 808, 811, 818, 845, 902, 945, 977, 979, 991, 995, 996, 999, 1007, 1014, 1016, 1020, 1024, 1028, 1030, 1031, 1033, 1036, 1037], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 19, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 55, 61, 67, 78, 82, 92, 95, 101, 103, 105, 114, 118, 121, 122, 125, 128, 132, 133, 135, 136, 141, 144, 145, 146, 149, 158, 162, 169, 171, 172, 182, 189, 190, 192, 196, 197, 199, 200, 201, 204, 209, 212, 213, 214, 215, 217, 224, 233, 239, 248, 250, 251, 261, 262, 264, 265, 267, 272, 273, 275, 277, 281, 285, 286, 287, 288, 289, 292, 300, 307, 308, 309, 314, 315, 316, 317, 319, 322, 323, 326, 331, 333, 337, 339, 344, 348, 349, 354, 355, 369, 373, 376, 378, 380, 381, 382, 393, 403, 410, 411, 435, 440, 441, 443, 458, 459, 463, 465, 466, 472, 482, 483, 484, 485, 486, 488, 490, 491, 494, 496, 498, 499, 506, 509, 510, 517, 525, 530, 531, 536, 539, 540, 542, 546, 549, 550, 553, 554, 555, 556, 557, 563, 564, 576, 583, 586, 588, 591, 593, 623, 624, 639, 643, 652, 660, 661, 662, 670, 672, 690, 698, 702, 707, 710, 718, 719, 732, 749, 750, 760, 783, 784, 788, 789, 790, 804, 815, 816, 817, 820, 822, 825, 826, 827, 830, 831, 838, 839, 850, 851, 852, 853, 855, 857, 858, 866, 867, 868, 869, 874, 888, 889, 891, 892, 897, 905, 911, 913, 914, 970, 977, 981, 984, 987, 988, 991, 994, 999, 1004, 1005, 1008, 1014, 1018, 1020, 1022, 1028, 1031, 1034, 1036, 1037], "17376": 4, "21": [4, 149, 170, 189, 201, 218, 251, 281, 300, 305, 307, 319, 373, 374, 378, 380, 393, 400, 410, 411, 435, 439, 468, 526, 555, 556, 557, 563, 564, 582, 583, 585, 621, 663, 681, 747, 790, 792, 804, 816, 859, 866, 868, 874, 891, 907, 977, 982, 991, 999, 1020, 1022, 1023, 1025, 1029, 1030, 1032], "17377": 4, "22": [4, 8, 15, 42, 92, 167, 170, 171, 217, 251, 300, 303, 307, 312, 320, 323, 349, 376, 380, 381, 393, 400, 431, 442, 466, 482, 483, 489, 490, 498, 509, 518, 525, 531, 536, 539, 540, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 588, 621, 622, 626, 628, 639, 641, 645, 647, 649, 652, 653, 655, 657, 659, 663, 682, 686, 696, 698, 707, 750, 762, 771, 776, 777, 781, 790, 791, 795, 804, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 837, 839, 841, 843, 844, 845, 850, 851, 852, 854, 857, 873, 893, 895, 896, 897, 898, 899, 901, 902, 903, 904, 924, 925, 981, 991, 999, 1020, 1022, 1025, 1030, 1033, 1035], "56": [4, 8, 209, 218, 233, 382, 707, 728, 981, 991, 1022], "8": [4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 55, 60, 62, 64, 65, 70, 72, 74, 75, 80, 81, 85, 90, 91, 92, 95, 96, 99, 100, 104, 106, 112, 115, 117, 118, 122, 124, 125, 127, 130, 132, 133, 134, 138, 148, 149, 153, 155, 157, 158, 160, 161, 165, 169, 170, 171, 173, 176, 179, 180, 185, 186, 191, 194, 200, 201, 204, 208, 210, 214, 216, 218, 221, 222, 223, 225, 226, 230, 234, 235, 237, 241, 242, 243, 246, 247, 248, 250, 251, 252, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 271, 272, 279, 283, 285, 287, 289, 293, 297, 299, 300, 303, 305, 306, 307, 308, 309, 313, 318, 322, 323, 324, 326, 327, 331, 333, 334, 336, 338, 339, 341, 342, 343, 347, 348, 349, 355, 358, 363, 370, 371, 373, 374, 376, 381, 382, 393, 401, 403, 407, 408, 410, 411, 412, 433, 437, 438, 441, 443, 444, 446, 456, 463, 464, 465, 466, 467, 468, 469, 470, 477, 478, 479, 481, 484, 496, 497, 508, 525, 528, 532, 534, 537, 539, 541, 543, 544, 549, 550, 559, 564, 576, 582, 583, 584, 585, 622, 623, 642, 652, 664, 670, 683, 686, 687, 688, 689, 693, 696, 700, 701, 703, 709, 715, 720, 721, 722, 734, 738, 739, 743, 744, 746, 775, 776, 778, 781, 782, 786, 788, 791, 792, 797, 800, 807, 808, 811, 812, 819, 822, 831, 833, 834, 840, 850, 851, 852, 858, 865, 872, 874, 895, 898, 928, 930, 934, 970, 971, 977, 978, 979, 981, 984, 989, 991, 995, 999, 1005, 1007, 1011, 1012, 1013, 1014, 1015, 1019, 1020, 1023, 1024, 1025, 1029, 1030, 1035, 1036, 1038], "9981": 4, "17378": 4, "23": [4, 5, 15, 19, 26, 34, 50, 98, 107, 149, 167, 219, 239, 243, 251, 300, 307, 312, 315, 316, 318, 320, 323, 326, 373, 374, 376, 382, 393, 395, 396, 410, 416, 426, 434, 441, 446, 448, 456, 459, 461, 462, 469, 476, 477, 478, 484, 486, 494, 495, 496, 498, 499, 504, 506, 508, 516, 518, 532, 533, 534, 537, 541, 548, 550, 552, 554, 555, 556, 559, 562, 563, 564, 601, 602, 605, 621, 624, 626, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 663, 664, 666, 667, 669, 672, 673, 674, 711, 723, 771, 819, 825, 826, 827, 836, 844, 851, 854, 866, 873, 881, 882, 891, 894, 896, 899, 902, 904, 911, 913, 914, 924, 925, 930, 981, 999, 1020, 1022, 1023, 1029, 1030, 1031, 1034], "65": [4, 33, 171, 200, 270, 309, 403, 433, 496, 591, 693, 734, 783, 784, 988, 1012, 1022, 1023, 1024], "17379": [4, 1034], "row": [4, 19, 20, 21, 25, 27, 44, 60, 75, 90, 92, 118, 121, 130, 133, 164, 200, 201, 202, 230, 233, 239, 240, 305, 356, 362, 371, 378, 385, 389, 390, 400, 403, 406, 411, 418, 436, 437, 441, 443, 444, 445, 447, 450, 451, 453, 458, 462, 482, 484, 485, 486, 487, 488, 489, 494, 495, 496, 498, 499, 504, 505, 507, 528, 536, 542, 545, 584, 585, 614, 626, 637, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 686, 690, 691, 704, 712, 713, 718, 751, 752, 756, 759, 761, 762, 763, 764, 766, 767, 769, 771, 772, 773, 774, 788, 789, 822, 828, 829, 830, 831, 832, 838, 841, 842, 843, 844, 845, 848, 859, 863, 865, 868, 880, 883, 884, 887, 891, 909, 913, 914, 930, 952, 955, 959, 961, 963, 964, 968, 970, 971, 975, 977, 979, 981, 982, 984, 991, 992, 995, 996, 1002, 1029, 1030, 1031, 1032, 1037], "onli": [4, 7, 11, 13, 14, 20, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 55, 58, 66, 70, 71, 72, 74, 75, 81, 90, 98, 99, 106, 112, 114, 119, 120, 121, 122, 124, 131, 132, 144, 145, 146, 149, 152, 154, 157, 159, 161, 165, 167, 169, 170, 171, 176, 178, 183, 184, 189, 196, 200, 201, 203, 206, 208, 209, 218, 219, 221, 222, 229, 231, 233, 235, 236, 240, 243, 246, 247, 248, 251, 252, 257, 259, 261, 263, 264, 267, 268, 269, 270, 272, 273, 281, 287, 289, 292, 294, 299, 303, 304, 308, 309, 315, 316, 322, 323, 325, 330, 331, 334, 338, 339, 342, 343, 347, 348, 349, 352, 353, 356, 358, 362, 363, 364, 369, 370, 371, 373, 374, 376, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 393, 394, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 483, 484, 485, 486, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 510, 513, 517, 518, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 701, 703, 707, 719, 722, 723, 727, 729, 730, 731, 734, 735, 736, 749, 751, 753, 767, 771, 772, 773, 774, 776, 777, 780, 781, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 804, 808, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 911, 913, 914, 917, 919, 922, 930, 932, 935, 937, 942, 947, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 1001, 1002, 1005, 1014, 1015, 1016, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038], "present": [4, 5, 43, 49, 92, 95, 103, 117, 118, 125, 128, 148, 149, 158, 161, 179, 182, 184, 189, 200, 229, 232, 236, 251, 259, 264, 267, 270, 271, 281, 303, 306, 308, 348, 373, 374, 378, 381, 388, 390, 394, 403, 405, 408, 410, 411, 421, 422, 425, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 483, 484, 485, 486, 490, 494, 495, 496, 497, 498, 499, 504, 525, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 543, 544, 557, 560, 563, 564, 575, 576, 577, 582, 583, 585, 611, 621, 622, 623, 624, 644, 648, 671, 682, 683, 684, 685, 706, 722, 723, 731, 735, 762, 776, 777, 780, 788, 789, 790, 793, 794, 802, 804, 817, 835, 836, 837, 839, 841, 843, 844, 845, 852, 857, 865, 866, 867, 868, 869, 871, 885, 886, 897, 905, 907, 908, 930, 965, 980, 981, 982, 983, 988, 991, 1000, 1002, 1025, 1030, 1032, 1033, 1034, 1036, 1037], "date": [4, 70, 149, 157, 171, 371, 373, 376, 380, 391, 404, 1002], "datetim": [4, 17, 157, 171], "http": [4, 6, 7, 8, 12, 17, 24, 50, 71, 126, 132, 149, 161, 165, 176, 200, 208, 216, 218, 226, 230, 279, 281, 299, 370, 371, 373, 374, 376, 380, 381, 382, 384, 388, 390, 393, 403, 407, 412, 436, 443, 446, 456, 481, 486, 490, 494, 496, 502, 503, 504, 524, 525, 528, 530, 531, 535, 589, 630, 635, 638, 643, 652, 658, 660, 661, 662, 665, 670, 673, 676, 677, 679, 680, 685, 686, 689, 699, 715, 716, 717, 751, 752, 762, 828, 830, 831, 832, 835, 836, 841, 842, 843, 844, 849, 871, 886, 887, 888, 901, 902, 977, 979, 981, 984, 994, 997, 1004, 1005, 1012, 1027, 1032], "pydata": [4, 1000, 1005], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 61, 66, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 161, 170, 171, 172, 176, 181, 191, 192, 200, 208, 216, 218, 222, 230, 231, 232, 234, 236, 240, 241, 242, 243, 251, 259, 261, 262, 264, 268, 273, 279, 299, 300, 309, 314, 315, 317, 318, 322, 323, 324, 327, 347, 348, 349, 356, 363, 369, 374, 376, 379, 382, 384, 391, 393, 407, 589, 630, 662, 665, 670, 689, 699, 762, 835, 836, 841, 842, 843, 844, 871, 887, 901, 902, 977, 981, 997, 999, 1018, 1030, 1034], "stabl": [4, 161, 170, 194, 198, 202, 281, 314, 342, 348, 374, 376, 380, 382, 385, 390, 393, 407, 411, 415, 465, 466, 472, 527, 649, 666, 668, 681, 686, 717, 745, 929, 930, 977, 983, 984, 991, 1002, 1022, 1023, 1028, 1033, 1035], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 149, 157, 161, 170, 171, 172, 176, 181, 230, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 371, 373, 376, 377, 380, 384, 404, 407, 411, 481, 502, 503, 652, 828, 832, 926, 979, 1001, 1002, 1033, 1034, 1035, 1036, 1037], "compon": [4, 5, 17, 44, 58, 62, 70, 73, 84, 85, 87, 90, 94, 96, 97, 99, 100, 102, 103, 104, 106, 107, 130, 157, 167, 169, 184, 221, 233, 234, 237, 246, 247, 250, 251, 252, 260, 262, 282, 295, 300, 308, 315, 362, 368, 371, 376, 378, 382, 385, 388, 402, 403, 404, 406, 411, 413, 415, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 456, 457, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 496, 498, 509, 515, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 567, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 689, 722, 723, 731, 776, 777, 780, 788, 789, 790, 793, 794, 804, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 929, 930, 973, 978, 980, 991, 993, 996, 1001, 1002, 1003, 1005, 1010, 1016, 1017, 1018, 1022, 1024, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "now": [4, 5, 7, 17, 20, 53, 57, 71, 86, 100, 111, 112, 113, 117, 119, 121, 122, 125, 126, 132, 135, 149, 152, 157, 158, 159, 165, 169, 170, 171, 172, 176, 179, 181, 186, 188, 189, 201, 202, 204, 225, 234, 236, 257, 261, 264, 272, 273, 284, 308, 314, 315, 317, 318, 319, 324, 334, 347, 348, 349, 358, 362, 364, 371, 376, 377, 378, 382, 388, 389, 390, 400, 403, 407, 408, 410, 411, 415, 487, 502, 503, 506, 530, 543, 573, 574, 576, 621, 624, 643, 647, 652, 657, 678, 719, 749, 788, 789, 793, 794, 825, 840, 956, 970, 971, 977, 981, 987, 990, 991, 996, 997, 1000, 1002, 1007, 1014, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "introspect": [4, 6, 71, 382, 553, 554, 582, 583, 585, 991, 1012], "value_count": [4, 171], "11413": 4, "4544": 4, "rain": [4, 171, 977], "1419": 4, "heavy_rain": [4, 171], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 34, 37, 44, 45, 58, 62, 71, 73, 75, 82, 96, 102, 115, 116, 117, 118, 122, 123, 125, 132, 170, 171, 172, 189, 198, 200, 202, 204, 206, 207, 215, 217, 218, 221, 222, 229, 235, 236, 238, 239, 243, 248, 256, 258, 259, 262, 264, 265, 268, 270, 271, 281, 289, 290, 297, 298, 305, 307, 309, 317, 318, 326, 339, 347, 348, 349, 363, 364, 370, 371, 374, 376, 378, 380, 381, 383, 384, 390, 393, 397, 400, 403, 407, 410, 411, 413, 417, 419, 424, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 571, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 691, 692, 693, 694, 696, 702, 703, 707, 725, 726, 772, 773, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 802, 804, 808, 812, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 917, 921, 922, 923, 925, 937, 938, 939, 941, 944, 951, 965, 969, 970, 975, 977, 981, 982, 988, 989, 991, 997, 1002, 1011, 1012, 1014, 1016, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 65, 70, 71, 124, 126, 127, 128, 153, 154, 155, 165, 170, 171, 202, 218, 243, 246, 259, 265, 269, 288, 294, 309, 316, 317, 319, 323, 356, 370, 371, 376, 378, 388, 390, 399, 404, 407, 418, 421, 436, 437, 441, 442, 443, 444, 445, 447, 458, 460, 461, 463, 466, 468, 482, 483, 484, 485, 490, 491, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 508, 516, 536, 551, 552, 553, 554, 557, 558, 559, 560, 575, 576, 579, 580, 582, 583, 585, 587, 588, 596, 600, 621, 622, 623, 624, 626, 627, 634, 635, 638, 639, 640, 646, 650, 651, 654, 655, 656, 657, 658, 659, 665, 667, 669, 691, 693, 699, 708, 709, 724, 731, 734, 748, 779, 796, 814, 816, 817, 829, 833, 834, 836, 844, 858, 864, 866, 867, 873, 874, 887, 895, 896, 897, 898, 899, 901, 902, 903, 904, 910, 911, 913, 914, 946, 956, 957, 958, 959, 962, 968, 971, 991, 994, 996, 1007, 1023, 1025, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "int64": [4, 13, 54, 71, 170, 171, 309, 356, 390, 411, 421, 436, 442, 444, 582, 634, 708, 709, 829, 1030, 1033, 1035, 1037, 1038], "cannot": [4, 40, 56, 75, 82, 95, 100, 120, 170, 171, 184, 200, 218, 236, 303, 334, 342, 364, 375, 377, 382, 390, 391, 403, 404, 405, 407, 408, 410, 411, 413, 459, 515, 532, 533, 534, 537, 541, 604, 607, 608, 609, 611, 613, 614, 616, 617, 619, 645, 649, 676, 686, 705, 711, 771, 793, 794, 840, 841, 843, 844, 845, 853, 854, 863, 864, 875, 911, 913, 914, 970, 971, 975, 977, 978, 982, 987, 991, 996, 997, 1002, 1005, 1011, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 56, 58, 64, 70, 71, 75, 85, 86, 95, 98, 100, 109, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 132, 133, 134, 138, 146, 152, 153, 154, 157, 158, 159, 160, 161, 167, 169, 170, 171, 172, 173, 176, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 200, 201, 202, 207, 208, 209, 212, 214, 215, 218, 229, 232, 234, 238, 248, 250, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 281, 284, 287, 288, 289, 290, 292, 294, 297, 298, 299, 303, 305, 307, 308, 313, 316, 321, 322, 323, 326, 327, 328, 330, 333, 341, 342, 349, 351, 354, 355, 357, 358, 362, 363, 364, 368, 371, 373, 378, 381, 388, 389, 390, 397, 399, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 415, 431, 434, 435, 437, 438, 441, 443, 445, 446, 447, 448, 453, 459, 463, 464, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 482, 483, 487, 491, 492, 494, 498, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 621, 622, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 682, 683, 685, 686, 690, 697, 734, 781, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 853, 858, 859, 862, 863, 866, 867, 871, 872, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 955, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 991, 995, 996, 997, 1001, 1002, 1003, 1005, 1008, 1011, 1012, 1018, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 53, 56, 67, 68, 70, 75, 80, 81, 82, 94, 100, 105, 107, 109, 111, 112, 114, 115, 116, 117, 118, 120, 121, 127, 129, 130, 131, 132, 138, 139, 140, 141, 146, 149, 152, 155, 156, 157, 158, 160, 161, 164, 165, 168, 172, 173, 174, 175, 177, 179, 186, 188, 189, 192, 204, 209, 214, 218, 225, 227, 228, 229, 234, 237, 239, 242, 247, 254, 258, 260, 261, 264, 266, 267, 269, 275, 277, 281, 285, 286, 287, 288, 289, 294, 296, 299, 300, 301, 303, 304, 306, 308, 310, 312, 320, 321, 325, 327, 328, 333, 336, 338, 339, 340, 342, 347, 348, 349, 352, 353, 354, 355, 358, 363, 365, 368, 369, 370, 371, 373, 375, 379, 382, 383, 384, 385, 389, 390, 392, 394, 397, 398, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 413, 417, 418, 420, 421, 422, 425, 426, 427, 431, 432, 433, 436, 437, 440, 441, 443, 444, 451, 453, 458, 459, 461, 462, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 502, 503, 504, 506, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 565, 570, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 593, 596, 597, 604, 605, 608, 613, 616, 620, 622, 624, 626, 628, 632, 634, 635, 637, 638, 639, 640, 642, 646, 651, 652, 662, 663, 670, 671, 672, 674, 682, 683, 684, 685, 686, 690, 694, 695, 696, 702, 707, 711, 712, 715, 716, 717, 719, 728, 734, 736, 741, 749, 771, 772, 773, 778, 781, 786, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 835, 837, 842, 849, 850, 851, 852, 854, 856, 858, 860, 863, 865, 866, 867, 868, 871, 872, 873, 874, 877, 885, 886, 888, 889, 890, 891, 893, 894, 895, 898, 901, 902, 903, 904, 916, 924, 925, 947, 948, 949, 970, 971, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 992, 995, 996, 997, 998, 1000, 1004, 1009, 1011, 1012, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "simplifi": [4, 71, 188, 334, 375, 377, 381, 403, 406, 509, 556, 852, 853, 981, 983, 991], "represent": [4, 12, 17, 20, 26, 53, 71, 72, 95, 98, 111, 117, 119, 120, 128, 129, 130, 132, 135, 146, 157, 170, 172, 176, 181, 184, 221, 222, 223, 230, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 291, 300, 309, 315, 317, 318, 324, 348, 349, 356, 358, 368, 370, 378, 390, 397, 403, 404, 408, 409, 410, 457, 525, 529, 531, 534, 536, 542, 560, 582, 584, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 624, 637, 640, 646, 652, 653, 654, 656, 660, 662, 670, 671, 672, 762, 788, 789, 796, 812, 849, 862, 866, 867, 871, 873, 886, 893, 905, 907, 910, 926, 947, 973, 978, 980, 982, 984, 985, 986, 988, 991, 996, 1002, 1007, 1008, 1010, 1014, 1016, 1022, 1023, 1026, 1033, 1034, 1035, 1036, 1037, 1038], "collaps": [4, 171, 239, 303, 334, 388], "those": [4, 7, 12, 17, 19, 55, 60, 71, 113, 125, 149, 169, 171, 172, 173, 200, 202, 204, 218, 226, 233, 236, 238, 239, 252, 255, 261, 264, 267, 298, 303, 308, 331, 334, 347, 348, 349, 362, 363, 370, 376, 378, 380, 381, 382, 383, 388, 390, 391, 393, 400, 401, 403, 407, 408, 410, 411, 413, 442, 444, 455, 458, 462, 488, 489, 490, 497, 551, 552, 558, 559, 563, 564, 575, 686, 691, 706, 712, 729, 790, 793, 794, 802, 804, 811, 835, 836, 837, 839, 841, 842, 843, 844, 845, 893, 894, 895, 898, 901, 902, 903, 904, 941, 970, 973, 977, 980, 981, 983, 984, 985, 988, 991, 997, 1000, 1001, 1005, 1007, 1016, 1022, 1025, 1028, 1029, 1030, 1035, 1036, 1037, 1038], "replac": [4, 25, 80, 99, 112, 152, 159, 164, 171, 186, 201, 264, 281, 305, 310, 315, 336, 374, 376, 378, 380, 382, 385, 390, 397, 404, 407, 410, 411, 435, 439, 497, 509, 549, 550, 557, 576, 582, 583, 584, 585, 601, 602, 621, 624, 628, 633, 635, 721, 778, 796, 802, 804, 812, 852, 853, 856, 876, 889, 896, 950, 952, 955, 970, 971, 977, 981, 991, 996, 997, 1001, 1002, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1038], "to_replac": [4, 171], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 20, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 55, 60, 61, 62, 66, 71, 73, 75, 78, 80, 82, 95, 98, 106, 109, 112, 114, 116, 117, 118, 119, 120, 122, 125, 126, 128, 129, 131, 132, 144, 145, 148, 152, 155, 156, 158, 160, 166, 169, 170, 171, 172, 173, 176, 179, 180, 182, 184, 186, 188, 189, 190, 191, 193, 198, 200, 201, 202, 204, 206, 215, 218, 220, 224, 227, 229, 230, 231, 232, 233, 234, 235, 239, 242, 243, 246, 252, 255, 257, 259, 261, 262, 264, 266, 267, 268, 270, 272, 273, 274, 276, 281, 284, 294, 297, 298, 300, 303, 304, 305, 306, 307, 308, 309, 310, 315, 325, 334, 338, 339, 342, 347, 348, 349, 352, 358, 362, 363, 364, 365, 368, 369, 370, 371, 373, 377, 378, 379, 381, 382, 383, 385, 388, 389, 390, 392, 393, 394, 400, 401, 402, 403, 404, 405, 406, 407, 411, 412, 413, 414, 415, 416, 417, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 481, 484, 485, 487, 490, 491, 492, 495, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 762, 764, 767, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 801, 802, 804, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 910, 911, 912, 913, 914, 917, 918, 919, 920, 922, 930, 932, 941, 942, 943, 944, 945, 949, 957, 958, 959, 970, 973, 974, 975, 976, 977, 978, 980, 982, 983, 984, 985, 986, 987, 988, 992, 994, 995, 996, 1003, 1005, 1007, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "inplac": [4, 171, 218, 239, 273, 448, 476, 477, 478, 479, 848, 856, 859, 862, 863, 865, 869, 870, 871, 873, 876, 878, 879, 880, 881, 882, 883, 884, 954, 957, 958, 959, 963, 964, 1031], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 86, 92, 100, 112, 115, 117, 119, 122, 125, 146, 152, 158, 167, 168, 172, 174, 186, 191, 200, 201, 202, 204, 208, 218, 233, 236, 239, 240, 247, 248, 251, 252, 268, 281, 308, 342, 347, 348, 358, 362, 363, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 394, 399, 401, 403, 404, 405, 407, 410, 411, 412, 426, 458, 459, 461, 462, 463, 476, 477, 478, 490, 517, 526, 530, 532, 535, 546, 548, 549, 550, 552, 554, 556, 557, 559, 561, 562, 564, 566, 579, 580, 582, 583, 585, 589, 591, 600, 605, 621, 626, 627, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 668, 669, 672, 673, 689, 698, 699, 710, 728, 781, 785, 826, 827, 828, 829, 830, 831, 832, 836, 839, 844, 851, 854, 859, 866, 867, 870, 873, 874, 883, 884, 891, 893, 894, 895, 896, 897, 898, 899, 902, 904, 944, 970, 977, 980, 981, 983, 987, 991, 995, 996, 997, 1004, 1012, 1015, 1016, 1018, 1022, 1023, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "balanc": [4, 6, 53, 66, 112, 167, 204, 205, 254, 264, 277, 303, 364, 388, 390, 401, 407, 408, 410, 496, 509, 528, 534, 535, 541, 551, 555, 558, 634, 652, 653, 660, 662, 668, 669, 670, 697, 702, 722, 736, 775, 780, 790, 791, 808, 853, 893, 895, 898, 901, 903, 918, 919, 970, 996, 997, 1012, 1022, 1024, 1027, 1028, 1031, 1032, 1036], "fall": [4, 125, 159, 260, 261, 376, 378, 402, 403, 411, 428, 440, 441, 502, 503, 720, 721, 785, 870, 882, 980, 981, 991, 1007, 1015, 1031], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 20, 24, 47, 55, 64, 65, 72, 78, 89, 105, 120, 121, 122, 126, 141, 157, 169, 170, 173, 176, 189, 193, 196, 200, 201, 206, 214, 218, 223, 233, 236, 239, 243, 248, 256, 259, 261, 268, 279, 300, 303, 308, 309, 310, 315, 316, 342, 347, 349, 358, 362, 363, 371, 376, 378, 381, 382, 385, 390, 393, 394, 397, 403, 404, 405, 407, 408, 409, 410, 411, 413, 415, 434, 437, 440, 441, 443, 444, 449, 450, 451, 453, 458, 482, 483, 484, 489, 491, 509, 528, 529, 533, 534, 535, 537, 541, 545, 547, 549, 550, 551, 553, 557, 558, 561, 575, 582, 585, 587, 588, 591, 600, 601, 602, 604, 616, 621, 625, 634, 652, 653, 659, 670, 679, 680, 682, 683, 687, 691, 693, 694, 696, 698, 706, 707, 712, 719, 722, 723, 731, 733, 734, 747, 749, 771, 775, 776, 777, 780, 781, 782, 785, 790, 791, 793, 794, 795, 797, 801, 804, 808, 809, 814, 821, 822, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 850, 853, 864, 866, 867, 868, 872, 873, 874, 877, 878, 879, 881, 882, 883, 884, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 913, 914, 919, 930, 945, 950, 971, 977, 978, 981, 982, 984, 985, 991, 994, 995, 996, 997, 1002, 1011, 1013, 1014, 1016, 1022, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "sensit": [4, 44, 55, 80, 81, 115, 125, 171, 202, 203, 204, 229, 303, 334, 363, 364, 391, 405, 410, 446, 456, 686, 706, 707, 781, 873, 976, 977, 978, 980, 981, 985, 987, 995, 996, 1007, 1015, 1026], "splitter": [4, 319, 390, 394, 407, 431, 466, 561, 562, 588, 596, 641, 645, 647, 649, 655, 657, 659, 667, 669, 790, 792, 793, 794, 795, 796, 804, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 824, 827, 901, 902, 903, 904, 997, 1002, 1028, 1029, 1030, 1031, 1038], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 55, 68, 71, 72, 98, 111, 112, 119, 120, 122, 123, 125, 145, 155, 167, 173, 176, 180, 189, 202, 207, 218, 228, 244, 254, 255, 258, 259, 261, 264, 266, 267, 268, 270, 272, 273, 275, 277, 279, 290, 294, 308, 310, 315, 319, 334, 338, 347, 358, 365, 369, 371, 378, 382, 390, 392, 402, 404, 411, 412, 413, 441, 443, 458, 460, 482, 485, 486, 487, 490, 503, 514, 530, 545, 555, 556, 557, 561, 562, 585, 588, 596, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 625, 626, 627, 628, 641, 647, 653, 667, 669, 691, 693, 695, 696, 697, 698, 699, 705, 707, 708, 709, 711, 712, 719, 720, 729, 730, 735, 747, 748, 749, 750, 779, 786, 788, 789, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 819, 820, 824, 830, 833, 834, 839, 851, 853, 854, 860, 863, 866, 867, 871, 872, 873, 878, 879, 881, 882, 883, 884, 895, 898, 901, 916, 924, 955, 973, 977, 979, 983, 984, 987, 988, 989, 992, 995, 997, 1001, 1005, 1007, 1008, 1011, 1012, 1014, 1017, 1018, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "forecast": [4, 151, 162, 167, 261, 401, 413, 490, 605, 609, 616, 617, 619, 981, 1001], "realist": [4, 8, 263, 270, 271, 331, 371, 981], "gap": [4, 347, 371, 407, 465, 466, 472, 582, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 811, 901, 902, 903, 904, 977, 978, 1030, 1034, 1036], "between": [4, 5, 8, 9, 11, 12, 20, 37, 38, 39, 40, 42, 43, 53, 60, 61, 66, 85, 90, 98, 100, 104, 111, 112, 115, 118, 122, 125, 144, 152, 157, 158, 160, 167, 169, 170, 171, 172, 179, 184, 186, 191, 195, 196, 200, 201, 202, 204, 205, 208, 218, 221, 229, 234, 236, 239, 254, 257, 260, 261, 262, 263, 264, 266, 267, 268, 270, 277, 283, 287, 288, 290, 291, 303, 308, 310, 316, 325, 334, 338, 342, 347, 348, 349, 356, 358, 362, 363, 371, 376, 378, 385, 388, 389, 390, 391, 394, 397, 400, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 424, 434, 435, 438, 439, 440, 444, 446, 447, 448, 450, 451, 452, 457, 463, 464, 465, 466, 467, 468, 469, 470, 485, 487, 488, 489, 490, 491, 492, 496, 508, 509, 515, 518, 521, 528, 530, 531, 532, 533, 534, 535, 540, 541, 543, 547, 548, 553, 554, 556, 557, 558, 559, 578, 582, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 605, 614, 621, 626, 627, 628, 633, 636, 639, 640, 641, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 664, 670, 672, 673, 675, 678, 682, 684, 686, 688, 689, 690, 693, 695, 697, 698, 699, 701, 703, 704, 708, 709, 710, 711, 713, 717, 718, 719, 722, 723, 724, 727, 729, 730, 736, 745, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 779, 780, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 795, 799, 807, 808, 809, 810, 811, 818, 819, 821, 823, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 850, 851, 857, 860, 861, 863, 864, 866, 867, 870, 871, 872, 874, 879, 882, 883, 887, 893, 894, 898, 901, 902, 903, 904, 906, 927, 939, 950, 970, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 1002, 1014, 1015, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "side": [4, 16, 27, 59, 125, 193, 204, 218, 223, 232, 303, 338, 347, 358, 371, 388, 401, 404, 407, 408, 411, 509, 977, 978, 981, 983, 996, 1031], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 70, 100, 111, 112, 117, 118, 119, 121, 124, 125, 126, 127, 128, 138, 145, 149, 169, 170, 173, 184, 195, 196, 200, 203, 208, 218, 230, 236, 239, 247, 248, 255, 256, 259, 261, 266, 268, 271, 284, 290, 297, 299, 304, 305, 310, 317, 319, 325, 334, 347, 349, 356, 371, 376, 383, 389, 390, 393, 394, 401, 403, 408, 410, 411, 431, 436, 437, 466, 467, 473, 474, 491, 525, 531, 533, 536, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 582, 583, 585, 588, 596, 641, 645, 647, 649, 655, 657, 659, 667, 669, 689, 698, 699, 711, 724, 730, 750, 786, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 827, 833, 834, 850, 851, 874, 878, 879, 881, 882, 883, 884, 901, 902, 903, 904, 952, 970, 977, 978, 984, 987, 988, 989, 991, 995, 997, 1002, 1007, 1011, 1012, 1014, 1015, 1016, 1018, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "limit": [4, 8, 17, 37, 42, 57, 66, 82, 112, 119, 120, 126, 132, 164, 170, 171, 172, 179, 200, 201, 217, 233, 268, 305, 309, 316, 342, 349, 358, 363, 377, 378, 381, 388, 390, 391, 401, 403, 406, 408, 412, 440, 457, 462, 553, 554, 555, 556, 626, 644, 652, 653, 673, 676, 677, 682, 771, 811, 841, 843, 844, 845, 866, 867, 891, 895, 896, 897, 898, 899, 949, 970, 977, 978, 980, 981, 988, 989, 991, 1002, 1007, 1018, 1030, 1032, 1035, 1036], "cv": [4, 12, 24, 25, 26, 54, 71, 72, 73, 74, 78, 103, 118, 122, 124, 138, 139, 148, 164, 165, 170, 189, 199, 202, 257, 259, 260, 261, 262, 263, 264, 266, 267, 271, 275, 309, 318, 334, 342, 389, 390, 394, 401, 407, 410, 431, 466, 561, 562, 588, 596, 641, 645, 647, 649, 653, 655, 657, 659, 667, 669, 790, 792, 793, 794, 795, 796, 804, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 824, 827, 874, 901, 902, 970, 973, 976, 977, 981, 991, 1002, 1011, 1012, 1016, 1024, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1038], "fold": [4, 67, 74, 78, 118, 121, 124, 138, 148, 170, 189, 248, 256, 257, 259, 261, 262, 264, 271, 310, 325, 342, 358, 371, 376, 379, 380, 389, 390, 394, 403, 412, 431, 466, 487, 530, 561, 562, 588, 596, 641, 645, 647, 649, 653, 655, 657, 659, 667, 669, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 824, 827, 874, 895, 898, 970, 977, 981, 991, 996, 1011, 1022, 1024, 1026, 1027, 1028, 1030, 1031, 1033, 1034], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 72, 75, 85, 105, 115, 117, 119, 124, 125, 129, 134, 140, 144, 158, 176, 186, 192, 203, 223, 232, 233, 235, 246, 250, 259, 261, 267, 270, 272, 286, 288, 304, 307, 314, 315, 317, 319, 335, 336, 343, 347, 348, 381, 382, 389, 401, 411, 431, 467, 473, 474, 525, 526, 531, 536, 537, 539, 540, 542, 547, 558, 626, 640, 641, 645, 646, 647, 649, 654, 655, 656, 657, 660, 661, 662, 666, 670, 671, 672, 681, 686, 692, 695, 757, 870, 882, 888, 893, 894, 970, 974, 996, 1011, 1014, 1029, 1031], "datapoint": [4, 42, 52, 56, 156, 159, 183, 234, 235, 239, 256, 261, 279, 340, 413, 440, 496, 551, 552, 553, 554, 558, 559, 560, 605, 901, 902, 903, 904, 974], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 109, 112, 115, 118, 122, 125, 149, 164, 170, 176, 179, 180, 184, 200, 202, 218, 229, 234, 235, 236, 239, 261, 264, 267, 268, 270, 281, 304, 305, 310, 324, 334, 342, 348, 358, 362, 363, 364, 371, 374, 375, 376, 378, 380, 381, 383, 384, 385, 389, 390, 393, 394, 397, 401, 403, 405, 407, 408, 410, 411, 412, 413, 414, 415, 417, 431, 434, 436, 437, 438, 439, 441, 443, 444, 446, 448, 451, 452, 453, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 490, 497, 502, 503, 510, 515, 517, 518, 521, 526, 527, 528, 530, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 579, 580, 582, 583, 584, 585, 587, 588, 591, 596, 601, 602, 604, 605, 614, 621, 622, 623, 625, 626, 627, 629, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 681, 683, 684, 685, 686, 687, 688, 689, 690, 695, 703, 720, 721, 759, 764, 767, 771, 772, 773, 774, 775, 778, 781, 782, 783, 790, 791, 792, 793, 794, 797, 798, 799, 800, 804, 807, 808, 809, 810, 815, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 872, 873, 874, 876, 880, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 917, 919, 922, 930, 942, 947, 950, 952, 955, 956, 957, 958, 959, 960, 961, 962, 970, 971, 975, 976, 977, 978, 981, 982, 984, 986, 987, 988, 991, 994, 995, 996, 997, 1002, 1004, 1005, 1012, 1016, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "enough": [4, 37, 44, 62, 118, 121, 152, 164, 171, 172, 189, 200, 234, 237, 239, 307, 347, 349, 358, 374, 376, 380, 391, 401, 402, 403, 405, 407, 410, 561, 562, 583, 790, 793, 794, 796, 804, 817, 930, 970, 975, 978, 980, 987, 991, 996, 1001, 1005, 1028, 1038], "quantifi": [4, 37, 49, 78, 157, 218, 268, 378, 390, 398, 402, 567, 856, 976, 989, 991, 1018], "repres": [4, 8, 10, 12, 14, 20, 26, 32, 44, 48, 49, 50, 53, 91, 95, 97, 104, 105, 119, 120, 128, 170, 179, 187, 192, 202, 204, 205, 209, 223, 225, 234, 239, 249, 255, 258, 261, 264, 268, 286, 305, 338, 347, 349, 356, 364, 368, 371, 373, 378, 388, 389, 390, 391, 397, 401, 403, 407, 408, 409, 410, 411, 412, 432, 436, 440, 446, 457, 464, 465, 466, 467, 468, 469, 470, 482, 484, 485, 486, 488, 490, 492, 494, 495, 496, 498, 499, 504, 528, 530, 532, 534, 535, 541, 549, 557, 575, 582, 585, 623, 626, 628, 634, 670, 672, 691, 693, 695, 723, 736, 782, 790, 792, 803, 804, 807, 810, 816, 818, 819, 822, 823, 829, 835, 836, 837, 839, 840, 841, 843, 844, 845, 850, 851, 860, 866, 867, 890, 893, 894, 913, 914, 934, 971, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 989, 991, 992, 994, 995, 997, 1007, 1012, 1013, 1015, 1028, 1030, 1033, 1034, 1037], "bit": [4, 48, 53, 78, 98, 198, 202, 303, 334, 348, 358, 362, 371, 374, 410, 411, 576, 583, 652, 823, 913, 914, 978, 982, 1000, 1009, 1016, 1022, 1025, 1028, 1030, 1031, 1034, 1035, 1036], "less": [4, 5, 8, 52, 53, 60, 92, 95, 98, 106, 112, 119, 125, 126, 152, 159, 170, 182, 184, 200, 202, 204, 235, 239, 247, 249, 261, 262, 270, 272, 275, 304, 307, 308, 309, 315, 317, 338, 347, 348, 358, 362, 364, 371, 376, 378, 388, 390, 403, 407, 408, 410, 411, 415, 433, 435, 437, 439, 442, 444, 446, 451, 454, 456, 457, 476, 477, 478, 490, 509, 525, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 584, 590, 613, 621, 628, 641, 655, 670, 672, 686, 695, 715, 716, 717, 718, 729, 745, 757, 772, 773, 778, 786, 788, 789, 792, 793, 794, 800, 817, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 856, 868, 870, 871, 873, 876, 882, 883, 893, 894, 901, 902, 903, 904, 919, 933, 970, 971, 973, 974, 975, 978, 980, 981, 984, 986, 991, 995, 996, 997, 1001, 1014, 1016, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1032, 1036, 1037], "half": [4, 24, 98, 234, 238, 259, 261, 273, 371, 372, 408, 457, 516, 556, 587, 591, 596, 763, 852, 860, 981, 984, 997], "contigu": [4, 21, 378, 388, 400, 407, 411, 437, 441, 443, 453, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 774, 809, 833, 834, 893, 895, 896, 897, 898, 899, 996, 1025, 1032, 1036], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 71, 72, 73, 74, 75, 78, 86, 100, 103, 111, 112, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 132, 138, 139, 145, 146, 148, 152, 164, 165, 167, 169, 170, 172, 173, 176, 184, 195, 200, 202, 207, 208, 215, 216, 218, 230, 235, 239, 241, 242, 243, 248, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 283, 284, 285, 289, 290, 297, 299, 300, 305, 307, 308, 309, 310, 313, 314, 315, 318, 325, 326, 334, 337, 342, 352, 356, 358, 365, 376, 378, 381, 389, 390, 394, 404, 407, 410, 431, 432, 552, 554, 561, 562, 573, 653, 691, 692, 694, 696, 735, 821, 824, 842, 850, 851, 853, 901, 902, 903, 904, 949, 970, 971, 976, 981, 983, 984, 989, 991, 996, 1002, 1011, 1012, 1016, 1019, 1026, 1028, 1029], "timeseriessplit": [4, 184, 256, 407, 1028, 1029, 1034], "ts_cv": 4, "n_split": [4, 118, 124, 164, 165, 170, 248, 256, 261, 263, 266, 271, 325, 334, 342, 358, 407, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 805, 806, 807, 808, 809, 810, 811, 816, 1011, 1028, 1030], "5": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 33, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 75, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 111, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 138, 141, 144, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 194, 195, 197, 198, 200, 201, 202, 203, 206, 208, 211, 212, 213, 214, 215, 216, 218, 222, 223, 224, 226, 229, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 272, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 297, 298, 299, 300, 303, 305, 306, 307, 308, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 371, 373, 374, 376, 378, 381, 382, 388, 389, 390, 393, 395, 396, 401, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 431, 432, 433, 434, 436, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 452, 456, 458, 460, 463, 466, 472, 476, 477, 478, 479, 484, 487, 488, 498, 510, 511, 515, 517, 518, 520, 522, 525, 527, 528, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 546, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 576, 586, 587, 588, 591, 596, 604, 607, 608, 609, 610, 613, 614, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 632, 635, 637, 638, 639, 640, 641, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 664, 666, 670, 671, 672, 674, 675, 678, 682, 683, 685, 686, 689, 690, 693, 697, 699, 701, 703, 706, 707, 715, 716, 717, 719, 720, 721, 723, 728, 731, 732, 734, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 762, 774, 775, 777, 778, 780, 781, 782, 785, 787, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 850, 851, 852, 853, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 872, 873, 874, 881, 882, 887, 893, 894, 895, 896, 897, 898, 899, 901, 903, 919, 928, 929, 930, 932, 934, 935, 944, 945, 949, 952, 970, 971, 973, 976, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 993, 995, 996, 999, 1003, 1007, 1011, 1012, 1014, 1015, 1016, 1018, 1020, 1023, 1024, 1025, 1027, 1029, 1030, 1032, 1036, 1037, 1038], "48": [4, 45, 85, 102, 157, 243, 309, 373, 382, 403, 504, 591, 693, 739, 817, 828, 970, 983, 991], "max_train_s": [4, 407, 811, 1029], "10000": [4, 11, 30, 43, 63, 72, 73, 126, 138, 186, 193, 200, 208, 216, 233, 235, 274, 315, 331, 358, 364, 410, 411, 555, 556, 638, 673, 870, 899, 993, 1012, 1016], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 71, 111, 117, 123, 124, 126, 127, 131, 169, 176, 184, 195, 200, 207, 208, 215, 216, 258, 259, 263, 268, 270, 274, 279, 289, 290, 297, 299, 300, 305, 307, 308, 315, 334, 342, 358, 381, 407, 692, 792, 807, 810, 811, 819, 821, 842, 971, 983, 984, 1011, 1012, 1022, 1023, 1028, 1029, 1034], "manual": [4, 46, 55, 170, 171, 173, 201, 211, 263, 281, 325, 332, 347, 349, 362, 363, 371, 376, 380, 381, 389, 393, 403, 407, 408, 409, 431, 443, 561, 843, 866, 872, 970, 975, 976, 977, 980, 981, 984, 991, 1002, 1007, 1008, 1016, 1030, 1032, 1038], "inspect": [4, 31, 56, 61, 114, 119, 126, 128, 129, 133, 146, 152, 157, 158, 170, 171, 172, 173, 183, 192, 209, 240, 261, 264, 273, 284, 289, 292, 308, 313, 314, 315, 316, 318, 330, 331, 332, 335, 336, 338, 347, 353, 363, 365, 378, 390, 403, 404, 410, 411, 458, 547, 548, 551, 552, 553, 554, 558, 559, 560, 822, 853, 854, 901, 902, 903, 904, 969, 981, 982, 985, 988, 989, 996, 1001, 1016, 1018, 1025], "variou": [4, 12, 36, 37, 55, 58, 60, 61, 68, 81, 85, 98, 167, 170, 178, 210, 219, 220, 221, 222, 227, 233, 307, 314, 347, 349, 356, 358, 362, 370, 371, 372, 373, 376, 378, 381, 389, 391, 401, 402, 403, 405, 431, 435, 466, 496, 508, 509, 519, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 588, 596, 641, 645, 647, 649, 652, 655, 657, 659, 660, 662, 667, 669, 670, 685, 686, 693, 790, 793, 794, 796, 804, 812, 813, 814, 815, 816, 817, 818, 819, 820, 853, 893, 894, 970, 971, 978, 981, 984, 988, 991, 995, 997, 1001, 1005, 1015, 1016, 1022, 1025, 1026], "check": [4, 5, 8, 17, 46, 53, 56, 99, 109, 118, 132, 152, 167, 169, 171, 172, 186, 188, 189, 200, 222, 236, 247, 254, 270, 277, 316, 324, 356, 362, 363, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 388, 390, 393, 394, 397, 404, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 496, 502, 503, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 682, 683, 684, 685, 686, 687, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 913, 914, 915, 924, 925, 936, 942, 943, 965, 966, 967, 969, 976, 977, 978, 981, 996, 997, 1002, 1005, 1018, 1022, 1023, 1025, 1029, 1033, 1034, 1035, 1036, 1037], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 20, 25, 32, 40, 44, 49, 62, 70, 105, 106, 116, 118, 124, 132, 139, 173, 204, 239, 240, 256, 259, 261, 262, 264, 265, 270, 274, 290, 305, 309, 313, 314, 315, 316, 317, 318, 319, 326, 337, 348, 349, 364, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 401, 402, 403, 404, 407, 409, 410, 411, 426, 428, 431, 444, 450, 451, 458, 459, 460, 465, 466, 472, 476, 477, 478, 482, 483, 484, 485, 486, 490, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 517, 526, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 583, 585, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 626, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 675, 678, 686, 690, 691, 693, 704, 706, 707, 710, 712, 718, 726, 739, 747, 771, 774, 776, 781, 785, 788, 789, 790, 793, 794, 796, 801, 802, 804, 812, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 857, 861, 864, 866, 867, 872, 874, 890, 894, 896, 899, 901, 902, 903, 904, 907, 909, 913, 914, 915, 919, 921, 922, 923, 925, 933, 934, 936, 947, 952, 955, 965, 970, 971, 977, 981, 983, 984, 985, 988, 989, 992, 997, 999, 1001, 1002, 1005, 1007, 1011, 1013, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "train_0": 4, "test_0": 4, "iloc": [4, 132, 170, 171, 218, 261, 284], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 54, 55, 80, 85, 91, 101, 103, 105, 116, 125, 145, 146, 153, 164, 170, 180, 190, 204, 229, 248, 261, 294, 297, 300, 303, 305, 318, 322, 323, 347, 355, 358, 362, 382, 407, 410, 411, 438, 471, 495, 498, 564, 591, 672, 727, 787, 807, 819, 845, 863, 868, 870, 871, 874, 882, 883, 885, 886, 977, 981, 982, 984, 991, 1012, 1022, 1024, 1030, 1033], "760": 4, "68": [4, 8, 191, 300, 322, 403, 529, 535, 584, 1022], "27": [4, 6, 8, 19, 31, 47, 54, 149, 150, 174, 320, 322, 323, 343, 373, 403, 411, 518, 707, 781, 782, 874, 894, 981, 991, 1015, 1022, 1024], "9993": [4, 647, 649, 1030], "12380": 4, "32": [4, 5, 51, 92, 169, 172, 238, 313, 317, 323, 370, 374, 381, 390, 400, 410, 411, 439, 558, 559, 576, 583, 628, 670, 872, 874, 913, 914, 946, 989, 991, 1015, 1022, 1025, 1028, 1030, 1031, 1034, 1035, 1036], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 74, 109, 152, 153, 172, 176, 233, 259, 261, 263, 281, 295, 308, 316, 347, 348, 358, 371, 382, 410, 411, 484, 555, 556, 638, 671, 995, 1016, 1033], "77": [4, 6, 44, 149, 176, 270, 300, 323, 370, 373, 528, 701], "0028": 4, "12381": 4, "72": [4, 6, 7, 118, 155, 381, 817], "9995": 4, "12382": 4, "240": [4, 24, 28, 44, 989, 1022], "82": [4, 30, 53, 58, 146, 203, 292, 300, 322, 781, 790, 804, 981, 984, 1012, 1022], "9980": [4, 1030], "12383": 4, "13374": 4, "34": [4, 8, 125, 149, 152, 286, 322, 323, 356, 373, 407, 514, 564, 591, 643, 661, 710, 757, 1012, 1022], "44": [4, 8, 157, 170, 171, 184, 285, 774, 874, 894, 897, 981, 988, 1022], "40": [4, 14, 42, 54, 66, 78, 90, 95, 101, 128, 134, 152, 184, 191, 192, 194, 217, 223, 225, 237, 239, 250, 262, 287, 293, 299, 305, 322, 323, 332, 333, 335, 337, 339, 341, 356, 363, 371, 407, 440, 489, 511, 512, 833, 834, 838, 850, 851, 970, 982, 991, 1022, 1023], "150": [4, 6, 90, 92, 116, 125, 138, 222, 226, 229, 274, 338, 342, 373, 407, 412, 498, 596, 814, 815, 816, 981, 1011, 1012, 1013], "53": [4, 53, 179, 239, 326, 403, 410, 529, 535, 783, 784], "15": [4, 6, 7, 12, 13, 14, 30, 31, 34, 40, 44, 53, 54, 61, 62, 66, 73, 74, 80, 82, 92, 105, 116, 118, 121, 122, 125, 136, 144, 146, 148, 152, 156, 164, 169, 170, 171, 189, 197, 202, 214, 218, 223, 226, 229, 239, 248, 249, 256, 264, 266, 269, 272, 273, 275, 285, 289, 297, 298, 300, 303, 305, 307, 319, 323, 332, 334, 337, 341, 344, 349, 350, 353, 370, 371, 376, 389, 407, 410, 411, 434, 448, 484, 491, 525, 531, 549, 550, 592, 638, 646, 655, 657, 662, 670, 672, 686, 734, 808, 822, 845, 874, 970, 976, 977, 978, 981, 984, 985, 991, 996, 999, 1007, 1012, 1020, 1024, 1034, 1036, 1037], "0013": 4, "13375": 4, "39": [4, 42, 149, 243, 371, 373, 374, 380, 403, 411, 489, 902], "49": [4, 149, 204, 239, 370, 371, 373, 381, 403, 444, 451, 707, 719, 749, 757, 788, 790, 874, 981, 991, 1025], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 76, 97, 107, 149, 158, 170, 218, 239, 337, 373, 382, 410, 411, 549, 550, 564, 728, 981, 1016, 1022], "08": [4, 15, 44, 50, 68, 98, 136, 162, 170, 171, 174, 184, 300, 348, 373, 525, 537, 539, 557, 635, 652, 790, 850, 851, 872, 987], "910": 4, "42": [4, 5, 6, 20, 24, 25, 26, 27, 31, 44, 46, 56, 78, 85, 97, 103, 112, 119, 120, 122, 125, 126, 128, 132, 145, 146, 165, 170, 172, 173, 176, 179, 189, 192, 194, 195, 202, 206, 207, 208, 214, 215, 217, 221, 222, 223, 229, 234, 235, 236, 239, 242, 260, 262, 265, 281, 287, 288, 289, 297, 303, 304, 305, 306, 308, 310, 313, 315, 317, 325, 332, 334, 347, 348, 358, 363, 378, 381, 382, 390, 394, 403, 407, 410, 411, 414, 431, 438, 482, 486, 518, 525, 531, 538, 551, 552, 559, 560, 561, 562, 564, 671, 788, 792, 817, 819, 833, 834, 838, 842, 845, 885, 886, 888, 889, 890, 903, 904, 984, 991, 1012, 1016, 1019, 1022], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 12, 15, 55, 71, 114, 134, 170, 171, 179, 188, 229, 239, 244, 308, 322, 323, 538, 642, 643, 650, 696, 700, 701, 720, 734, 749, 775, 782, 826, 970, 977, 981, 987, 988, 991, 1012, 1016, 1022, 1024], "26": [4, 46, 54, 80, 97, 157, 170, 227, 238, 274, 323, 382, 564, 642, 722, 776, 869, 881, 930, 981, 991, 1022, 1025, 1026, 1034], "47": [4, 192, 196, 371, 487, 488, 529, 535], "16": [4, 5, 19, 27, 43, 50, 51, 54, 66, 74, 80, 95, 98, 144, 171, 193, 199, 200, 201, 218, 221, 222, 234, 238, 263, 264, 265, 285, 300, 303, 307, 313, 338, 347, 348, 354, 371, 373, 374, 382, 389, 393, 395, 396, 407, 408, 411, 436, 465, 466, 472, 491, 496, 528, 529, 564, 583, 589, 590, 601, 602, 633, 644, 645, 648, 649, 650, 651, 676, 677, 803, 808, 819, 868, 894, 902, 970, 977, 981, 991, 996, 999, 1007, 1016, 1020, 1022, 1023, 1027, 1028, 1030, 1031], "9979": 4, "2331": 4, "31": [4, 70, 79, 218, 286, 316, 322, 323, 400, 411, 494, 555, 556, 591, 643, 665, 673, 946, 982, 1022], "060": [4, 744], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 92, 176, 218, 300, 305, 323, 487, 488, 647, 649, 658, 659, 790, 796, 817, 981, 1002, 1012], "275": [4, 323, 1025], "2334": 4, "96": [4, 8, 9, 32, 48, 62, 159, 229, 239, 259, 300, 305, 308, 309, 322, 323, 373, 407, 970, 976, 981, 991, 1022], "515": 4, "64": [4, 32, 48, 53, 58, 89, 95, 157, 170, 222, 233, 234, 238, 259, 270, 285, 290, 362, 363, 373, 374, 382, 408, 489, 496, 593, 594, 640, 652, 682, 683, 684, 685, 894, 984, 1013, 1022, 1024, 1030, 1031, 1034, 1035, 1036], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1031], "12329": 4, "46": [4, 53, 92, 200, 223, 239, 358, 382, 587, 588, 710, 897, 902, 991], "12330": [4, 1030], "52": [4, 19, 157, 200, 525, 627, 788, 1022], "last": [4, 20, 44, 58, 89, 123, 125, 170, 179, 200, 201, 208, 213, 229, 252, 264, 272, 273, 308, 315, 317, 325, 352, 362, 371, 374, 378, 380, 381, 384, 390, 393, 403, 404, 411, 415, 432, 436, 441, 453, 458, 462, 509, 527, 553, 554, 555, 556, 577, 578, 581, 587, 588, 591, 604, 676, 677, 679, 680, 691, 692, 694, 695, 696, 701, 775, 788, 789, 793, 794, 809, 833, 834, 838, 853, 854, 858, 866, 872, 908, 933, 956, 970, 976, 977, 978, 980, 982, 985, 995, 1002, 1007, 1014, 1022, 1029, 1030, 1031, 1036, 1038], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 54, 97, 121, 199, 237, 274, 300, 305, 322, 323, 410, 657, 781, 976, 981, 982, 991, 1016, 1022], "665": 4, "16380": 4, "71": [4, 92, 149, 204, 218, 373, 504, 723, 981, 1014, 1024], "16381": 4, "76": [4, 176, 200, 300, 323, 347, 358, 373, 382, 774, 853, 1014], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 40, 44, 49, 53, 60, 62, 74, 103, 125, 161, 170, 211, 223, 229, 234, 261, 307, 309, 323, 345, 347, 348, 349, 376, 382, 404, 407, 408, 411, 441, 453, 486, 494, 495, 496, 498, 499, 504, 529, 530, 532, 534, 535, 551, 552, 553, 554, 557, 558, 559, 560, 563, 565, 566, 567, 568, 569, 571, 572, 583, 588, 593, 594, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 640, 643, 652, 653, 665, 708, 712, 724, 727, 728, 734, 736, 788, 789, 811, 826, 849, 850, 851, 857, 863, 871, 872, 883, 893, 894, 901, 902, 903, 904, 905, 929, 930, 970, 979, 981, 991, 999, 1020, 1022, 1023, 1026, 1027, 1029, 1030, 1032, 1033], "940": 4, "6331": 4, "28": [4, 8, 66, 125, 149, 170, 216, 270, 299, 322, 323, 373, 382, 403, 407, 444, 451, 991, 1012, 1022, 1025, 1028], "790": [4, 70, 221, 227], "89": [4, 32, 157, 191, 300, 322, 323, 976, 981, 991, 1016, 1022, 1025, 1033], "6332": 4, "6333": 4, "88": [4, 6, 32, 191, 204, 260, 300, 322, 323, 352, 371, 373, 376, 405, 467, 853, 1012, 1022], "820": [4, 833, 834], "79": [4, 6, 30, 32, 80, 81, 98, 149, 176, 300, 323, 373, 381, 405, 468, 518, 591, 831, 1022, 1024], "6334": 4, "6335": 4, "70": [4, 6, 11, 46, 66, 71, 73, 112, 171, 239, 246, 261, 323, 371, 373, 407, 487, 488, 707, 719, 749, 790, 804, 970, 991, 1012], "33": [4, 8, 80, 200, 318, 323, 356, 371, 373, 374, 380, 381, 382, 393, 395, 396, 403, 411, 526, 642, 706, 707, 722, 723, 731, 736, 776, 777, 780, 796, 817, 819, 821, 904, 977, 981, 991, 1012, 1022, 1030], "335": 4, "74": [4, 11, 216, 287, 315, 322, 323, 373, 584, 790, 804, 872], "16326": [4, 1034], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 157, 201, 371, 380, 384], "tree": [4, 7, 26, 27, 31, 41, 44, 55, 62, 110, 111, 114, 115, 116, 118, 122, 123, 124, 125, 126, 128, 132, 133, 136, 149, 160, 164, 171, 173, 222, 236, 238, 239, 240, 265, 281, 286, 294, 303, 304, 308, 315, 357, 358, 362, 365, 371, 373, 382, 389, 390, 392, 401, 403, 409, 414, 431, 435, 436, 437, 438, 439, 440, 442, 444, 451, 457, 489, 494, 498, 508, 509, 513, 538, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 625, 626, 627, 628, 652, 682, 686, 696, 697, 781, 796, 817, 819, 828, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 854, 857, 866, 925, 971, 978, 981, 982, 987, 988, 1001, 1002, 1003, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "often": [4, 19, 24, 25, 33, 70, 74, 118, 130, 156, 164, 170, 171, 201, 218, 222, 239, 248, 263, 266, 303, 308, 334, 344, 347, 348, 349, 362, 363, 370, 371, 373, 376, 378, 381, 384, 388, 389, 390, 392, 397, 401, 403, 404, 405, 407, 408, 410, 411, 413, 415, 462, 515, 518, 527, 530, 626, 640, 641, 646, 647, 654, 655, 656, 657, 666, 668, 681, 721, 863, 871, 879, 891, 970, 971, 973, 976, 977, 978, 979, 980, 981, 983, 984, 986, 987, 988, 991, 994, 995, 997, 1007, 1009, 1014, 1015, 1016, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "flexibl": [4, 25, 122, 164, 200, 304, 331, 349, 378, 383, 407, 413, 668, 893, 894, 970, 975, 977, 981, 985, 991, 1001, 1002, 1005, 1031, 1035], "effici": [4, 5, 12, 13, 42, 46, 53, 55, 95, 118, 130, 176, 189, 193, 202, 208, 286, 347, 362, 368, 370, 376, 378, 379, 381, 382, 388, 390, 397, 400, 402, 403, 408, 409, 410, 413, 415, 436, 437, 440, 441, 443, 444, 446, 448, 451, 453, 455, 456, 490, 527, 528, 529, 532, 534, 535, 538, 557, 560, 568, 575, 576, 582, 583, 585, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 626, 627, 628, 632, 634, 649, 652, 653, 658, 660, 662, 667, 669, 670, 671, 672, 673, 679, 680, 682, 719, 749, 756, 772, 773, 788, 789, 790, 804, 822, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 858, 870, 882, 886, 893, 902, 904, 930, 949, 970, 973, 975, 977, 978, 980, 981, 982, 984, 985, 986, 987, 989, 991, 992, 993, 994, 995, 996, 1001, 1005, 1007, 1011, 1014, 1015, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "heteorogen": 4, "tabular": [4, 171, 378, 410, 989], "mix": [4, 62, 69, 76, 96, 97, 167, 200, 303, 370, 378, 388, 390, 404, 408, 415, 458, 460, 461, 490, 527, 532, 534, 541, 594, 598, 624, 640, 641, 646, 652, 653, 654, 655, 656, 657, 662, 670, 672, 675, 790, 804, 819, 853, 866, 867, 873, 874, 945, 952, 955, 977, 986, 1015, 1034, 1036, 1037], "long": [4, 11, 12, 44, 62, 125, 157, 165, 170, 172, 200, 236, 237, 239, 264, 294, 303, 314, 347, 348, 358, 363, 376, 384, 388, 390, 391, 397, 402, 403, 447, 492, 532, 670, 671, 672, 793, 794, 828, 829, 830, 831, 832, 850, 851, 861, 981, 987, 991, 992, 994, 995, 1000, 1004, 1024, 1028, 1034, 1036], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 56, 57, 58, 59, 60, 65, 80, 81, 82, 86, 90, 92, 95, 99, 100, 104, 105, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 128, 133, 134, 135, 146, 148, 149, 152, 157, 158, 159, 161, 164, 167, 170, 171, 176, 178, 184, 186, 188, 189, 200, 202, 204, 208, 214, 216, 217, 218, 219, 221, 229, 233, 234, 237, 239, 246, 247, 249, 250, 251, 252, 254, 256, 261, 263, 264, 265, 267, 269, 273, 275, 277, 279, 281, 285, 286, 287, 288, 290, 291, 292, 303, 305, 306, 307, 308, 310, 313, 315, 316, 318, 322, 324, 325, 326, 327, 329, 330, 332, 334, 336, 338, 342, 345, 347, 348, 353, 356, 362, 365, 369, 371, 372, 375, 376, 378, 379, 388, 389, 394, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 420, 422, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 450, 451, 452, 455, 456, 457, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 604, 605, 621, 622, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 681, 682, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 753, 754, 756, 757, 761, 762, 763, 764, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 913, 914, 918, 919, 930, 934, 950, 952, 955, 956, 959, 962, 970, 971, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 1001, 1002, 1004, 1007, 1013, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 55, 73, 75, 95, 99, 115, 117, 118, 125, 128, 130, 145, 157, 158, 172, 173, 179, 180, 189, 191, 200, 202, 204, 205, 206, 218, 234, 239, 258, 264, 267, 270, 283, 290, 299, 303, 305, 316, 317, 334, 339, 342, 348, 349, 362, 371, 376, 382, 385, 388, 389, 390, 393, 397, 402, 405, 407, 408, 409, 410, 412, 414, 416, 436, 438, 440, 441, 444, 445, 446, 447, 452, 456, 467, 469, 493, 508, 528, 530, 532, 534, 538, 541, 543, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 576, 582, 583, 585, 628, 635, 637, 644, 648, 651, 652, 653, 658, 665, 666, 668, 671, 673, 679, 681, 683, 685, 686, 687, 689, 739, 772, 773, 790, 798, 800, 804, 808, 818, 828, 829, 830, 831, 832, 833, 834, 839, 850, 851, 858, 862, 863, 871, 873, 885, 886, 893, 894, 898, 899, 901, 902, 903, 904, 929, 930, 970, 973, 975, 977, 978, 980, 983, 984, 985, 989, 991, 994, 995, 996, 997, 1001, 1002, 1005, 1012, 1014, 1015, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "here": [4, 8, 9, 12, 13, 17, 24, 57, 58, 66, 78, 82, 89, 90, 92, 97, 98, 100, 102, 103, 104, 106, 112, 115, 118, 122, 126, 132, 146, 149, 152, 160, 161, 170, 171, 172, 176, 179, 184, 189, 193, 200, 204, 206, 215, 216, 218, 221, 223, 229, 234, 236, 239, 240, 247, 248, 249, 255, 258, 259, 261, 263, 264, 266, 270, 271, 273, 281, 283, 290, 298, 299, 300, 305, 308, 315, 317, 322, 324, 334, 338, 342, 344, 349, 352, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 388, 389, 394, 397, 399, 400, 403, 404, 406, 407, 408, 409, 410, 411, 414, 416, 431, 434, 435, 436, 437, 438, 439, 441, 443, 446, 458, 466, 469, 530, 532, 533, 537, 538, 561, 562, 563, 564, 575, 576, 578, 582, 585, 588, 596, 622, 624, 641, 645, 647, 649, 655, 657, 659, 667, 669, 683, 685, 689, 693, 706, 719, 739, 749, 785, 790, 793, 794, 796, 804, 812, 813, 814, 815, 816, 817, 818, 820, 829, 833, 834, 857, 865, 868, 871, 885, 886, 896, 947, 970, 973, 977, 978, 979, 980, 981, 984, 987, 991, 993, 994, 995, 996, 1001, 1002, 1004, 1005, 1007, 1008, 1014, 1022, 1030, 1035], "ordin": [4, 53, 71, 132, 239, 306, 309, 310, 315, 318, 370, 390, 410, 490, 561, 703, 858, 861, 866, 867, 874, 977, 978, 991, 1002, 1030, 1036], "encod": [4, 8, 11, 48, 55, 71, 95, 117, 132, 167, 170, 171, 172, 199, 200, 239, 270, 302, 304, 305, 306, 311, 315, 317, 318, 334, 347, 349, 368, 370, 372, 378, 381, 388, 390, 404, 407, 408, 410, 411, 413, 458, 481, 490, 497, 520, 525, 531, 533, 534, 536, 538, 539, 540, 542, 545, 556, 560, 561, 563, 575, 582, 583, 585, 624, 642, 652, 653, 663, 666, 674, 728, 792, 797, 799, 816, 819, 853, 854, 856, 858, 860, 861, 864, 866, 867, 874, 877, 891, 970, 971, 977, 978, 981, 983, 984, 986, 995, 1001, 1002, 1018, 1023, 1024, 1030, 1034, 1036, 1037, 1038], "know": [4, 53, 66, 122, 146, 149, 152, 161, 170, 218, 236, 237, 261, 279, 317, 322, 342, 348, 362, 376, 388, 394, 397, 403, 406, 407, 408, 411, 494, 498, 504, 640, 646, 652, 653, 719, 749, 790, 804, 878, 879, 881, 882, 883, 884, 901, 902, 903, 904, 970, 980, 981, 982, 984, 993, 1028, 1029, 1032, 1034], "treat": [4, 6, 71, 122, 132, 164, 170, 200, 270, 309, 315, 325, 358, 376, 388, 390, 400, 410, 411, 436, 555, 556, 582, 583, 585, 601, 602, 626, 632, 639, 665, 668, 747, 781, 862, 863, 869, 870, 873, 874, 878, 881, 882, 884, 893, 894, 971, 973, 977, 981, 982, 988, 991, 995, 997, 1012, 1026, 1034, 1038], "dedic": [4, 259, 344, 374, 380, 382, 388, 391, 399, 403, 578, 666, 668, 681, 970, 1001, 1007, 1030], "rule": [4, 118, 176, 353, 356, 358, 362, 373, 376, 377, 378, 388, 390, 391, 398, 401, 402, 403, 407, 408, 410, 412, 530, 543, 544, 545, 546, 547, 555, 556, 563, 564, 596, 628, 639, 652, 653, 660, 662, 670, 671, 672, 700, 701, 790, 793, 794, 796, 804, 812, 816, 818, 842, 893, 906, 970, 975, 983, 984, 995, 997, 1002, 1007, 1014, 1018, 1024, 1027, 1034], "pass": [4, 7, 8, 20, 21, 38, 118, 122, 129, 146, 171, 181, 184, 201, 230, 232, 233, 236, 239, 240, 242, 251, 259, 262, 310, 313, 316, 339, 349, 358, 362, 363, 364, 371, 376, 377, 378, 381, 382, 383, 384, 385, 388, 390, 394, 397, 399, 403, 404, 407, 408, 410, 411, 413, 414, 415, 431, 432, 434, 437, 438, 440, 441, 443, 444, 446, 448, 451, 453, 454, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 482, 485, 486, 489, 490, 491, 497, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 575, 576, 582, 583, 584, 585, 587, 588, 591, 601, 602, 604, 605, 611, 614, 620, 625, 626, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 725, 726, 735, 756, 767, 771, 772, 773, 774, 781, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 802, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 864, 865, 866, 867, 868, 870, 872, 873, 874, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 913, 914, 920, 924, 925, 929, 930, 932, 934, 936, 941, 942, 949, 951, 952, 955, 970, 971, 977, 979, 981, 982, 983, 984, 985, 988, 991, 994, 995, 996, 1002, 1005, 1007, 1011, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "explicitli": [4, 46, 53, 119, 152, 159, 164, 165, 201, 232, 236, 306, 313, 338, 349, 358, 363, 370, 372, 376, 377, 378, 380, 388, 390, 394, 399, 407, 411, 413, 529, 543, 544, 573, 574, 591, 621, 642, 652, 653, 663, 674, 703, 720, 775, 781, 782, 793, 794, 824, 827, 833, 834, 859, 883, 884, 941, 949, 970, 971, 973, 975, 977, 978, 981, 983, 984, 991, 1005, 1016, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036], "logic": [4, 109, 363, 377, 378, 383, 399, 410, 997, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "integ": [4, 17, 48, 53, 71, 170, 200, 218, 314, 315, 358, 362, 370, 371, 373, 378, 381, 385, 389, 390, 403, 404, 407, 408, 410, 411, 428, 431, 456, 458, 461, 466, 481, 490, 492, 495, 496, 497, 499, 502, 503, 506, 508, 509, 513, 516, 544, 553, 554, 555, 556, 557, 561, 562, 566, 576, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 626, 627, 638, 645, 649, 653, 659, 667, 669, 670, 693, 708, 728, 790, 792, 793, 794, 795, 797, 799, 804, 805, 806, 807, 809, 810, 813, 816, 824, 827, 829, 832, 833, 834, 858, 866, 867, 872, 873, 874, 877, 887, 889, 901, 902, 903, 904, 909, 944, 945, 946, 950, 971, 977, 982, 984, 991, 994, 996, 997, 1007, 1014, 1016, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "lexicograph": [4, 390, 561, 781, 785, 835, 843], "ad": [4, 13, 20, 75, 103, 105, 111, 112, 118, 123, 145, 152, 158, 159, 179, 184, 202, 204, 225, 235, 236, 261, 262, 263, 303, 314, 315, 316, 317, 318, 319, 326, 338, 348, 375, 376, 380, 382, 388, 390, 391, 408, 410, 411, 412, 413, 435, 436, 437, 439, 441, 443, 446, 453, 456, 458, 508, 516, 526, 529, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 576, 583, 584, 585, 587, 596, 601, 602, 605, 607, 621, 623, 635, 636, 642, 644, 648, 652, 653, 663, 670, 672, 674, 689, 707, 708, 722, 723, 768, 770, 776, 777, 780, 782, 788, 789, 790, 804, 814, 821, 831, 850, 851, 852, 866, 872, 875, 890, 893, 894, 901, 902, 903, 904, 920, 970, 974, 976, 977, 978, 982, 984, 985, 987, 1002, 1005, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "benefit": [4, 56, 74, 75, 112, 170, 214, 225, 232, 234, 283, 317, 362, 376, 385, 390, 401, 403, 442, 455, 462, 502, 561, 562, 652, 653, 660, 662, 670, 671, 672, 824, 891, 893, 970, 976, 984, 989, 991, 1002, 1005, 1022, 1025, 1026, 1027, 1034, 1035, 1036, 1037], "prevent": [4, 55, 125, 146, 169, 201, 204, 303, 309, 310, 334, 347, 352, 358, 376, 378, 380, 388, 389, 403, 408, 411, 436, 443, 482, 483, 584, 585, 605, 721, 778, 850, 851, 878, 879, 881, 882, 883, 884, 981, 983, 986, 987, 991, 997, 1014, 1024, 1025, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 55, 57, 67, 129, 144, 149, 157, 158, 159, 169, 170, 171, 172, 173, 189, 200, 204, 218, 229, 232, 233, 236, 247, 251, 252, 261, 262, 264, 267, 270, 294, 303, 304, 307, 313, 315, 316, 318, 334, 338, 349, 358, 362, 363, 364, 370, 371, 373, 374, 376, 378, 380, 381, 382, 384, 389, 390, 391, 393, 394, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 428, 434, 440, 442, 443, 444, 446, 448, 450, 451, 455, 458, 461, 482, 483, 502, 503, 517, 528, 531, 533, 540, 545, 551, 552, 553, 554, 558, 559, 560, 561, 562, 563, 564, 573, 574, 576, 582, 583, 585, 587, 597, 604, 605, 614, 621, 626, 627, 639, 642, 652, 653, 660, 662, 663, 670, 671, 672, 673, 674, 686, 690, 693, 694, 698, 710, 711, 713, 717, 729, 730, 745, 748, 750, 767, 771, 772, 773, 774, 783, 784, 786, 790, 793, 794, 802, 803, 822, 825, 833, 834, 839, 843, 852, 853, 857, 858, 862, 864, 866, 867, 874, 883, 884, 887, 890, 893, 894, 901, 902, 903, 904, 905, 907, 909, 913, 914, 951, 965, 970, 971, 973, 976, 977, 978, 981, 982, 983, 984, 987, 988, 989, 991, 993, 994, 995, 996, 997, 1001, 1007, 1009, 1013, 1014, 1016, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "unknown": [4, 16, 56, 170, 236, 261, 322, 324, 364, 371, 390, 397, 400, 411, 860, 866, 867, 944, 980, 991, 1007, 1026, 1030, 1034, 1035], "sake": [4, 125, 165, 170, 200, 308, 338, 347, 349, 384, 388, 664], "simplic": [4, 13, 31, 184, 338, 347, 349, 390, 409, 984, 985, 986, 996], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 71, 72, 98, 111, 112, 117, 118, 119, 120, 121, 128, 129, 132, 135, 146, 152, 157, 165, 169, 170, 171, 172, 176, 179, 181, 189, 230, 231, 232, 236, 240, 241, 242, 243, 247, 248, 251, 259, 261, 262, 268, 273, 281, 294, 300, 309, 314, 315, 317, 318, 324, 336, 342, 347, 348, 356, 371, 374, 375, 376, 378, 381, 382, 384, 388, 390, 394, 397, 403, 406, 407, 410, 411, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 497, 561, 571, 583, 652, 667, 669, 683, 687, 790, 793, 794, 802, 804, 814, 815, 816, 818, 871, 873, 893, 970, 977, 978, 987, 996, 997, 1002, 1004, 1005, 1007, 1009, 1012, 1014, 1015, 1016, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 53, 55, 59, 95, 118, 145, 152, 164, 171, 179, 180, 189, 200, 201, 218, 231, 233, 239, 241, 243, 249, 256, 264, 270, 279, 281, 303, 306, 307, 310, 313, 314, 318, 338, 342, 343, 347, 348, 349, 352, 358, 362, 363, 370, 371, 374, 378, 379, 380, 381, 382, 383, 385, 388, 389, 390, 393, 394, 397, 401, 403, 404, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 420, 424, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 917, 919, 920, 922, 924, 929, 930, 931, 932, 933, 934, 935, 944, 946, 947, 949, 950, 951, 952, 954, 955, 956, 962, 965, 967, 968, 970, 971, 973, 975, 977, 980, 981, 982, 984, 985, 987, 988, 991, 993, 995, 996, 997, 1007, 1011, 1014, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "hyper": [4, 71, 118, 255, 261, 266, 300, 334, 358, 378, 388, 389, 390, 398, 407, 410, 412, 462, 638, 639, 794, 802, 804, 849, 891, 976, 977, 981, 984, 995, 996, 1007, 1018, 1022, 1036], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 55, 58, 60, 61, 62, 71, 72, 73, 79, 81, 82, 92, 95, 109, 112, 114, 116, 118, 121, 126, 127, 138, 139, 146, 149, 152, 156, 157, 158, 159, 160, 161, 164, 165, 167, 170, 171, 179, 180, 181, 182, 184, 185, 187, 188, 189, 191, 192, 200, 202, 204, 205, 208, 209, 217, 218, 225, 226, 229, 231, 234, 235, 236, 246, 247, 248, 249, 251, 252, 255, 260, 261, 262, 265, 266, 269, 272, 273, 274, 276, 281, 283, 284, 287, 288, 294, 297, 298, 300, 303, 304, 305, 313, 314, 316, 317, 318, 319, 326, 329, 331, 336, 338, 339, 343, 344, 345, 347, 348, 349, 352, 353, 354, 355, 358, 362, 363, 364, 365, 368, 369, 371, 379, 381, 382, 383, 384, 385, 388, 394, 398, 401, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 978, 980, 983, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 997, 1001, 1002, 1008, 1010, 1012, 1013, 1014, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "compos": [4, 5, 25, 69, 70, 71, 75, 86, 114, 122, 132, 167, 170, 171, 172, 200, 202, 218, 231, 239, 241, 243, 309, 314, 316, 317, 318, 365, 389, 403, 404, 407, 509, 606, 980, 1022], "columntransform": [4, 70, 71, 132, 170, 171, 172, 200, 218, 231, 239, 241, 243, 309, 314, 316, 317, 318, 368, 370, 388, 389, 460, 461, 623, 858, 970, 971, 1002, 1018, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "ensembl": [4, 7, 10, 26, 27, 31, 56, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 164, 165, 171, 172, 173, 200, 222, 229, 238, 239, 241, 242, 258, 273, 279, 305, 309, 313, 314, 315, 316, 318, 319, 347, 358, 362, 365, 380, 381, 389, 390, 401, 403, 407, 412, 431, 498, 509, 626, 627, 629, 652, 696, 793, 794, 819, 823, 824, 854, 857, 866, 897, 901, 903, 904, 970, 981, 982, 987, 988, 997, 1001, 1002, 1003, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "histgradientboostingregressor": [4, 7, 118, 122, 125, 126, 129, 132, 164, 171, 200, 309, 313, 314, 315, 316, 318, 319, 380, 410, 554, 559, 626, 627, 629, 971, 988, 1001, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "cross_valid": [4, 122, 132, 170, 202, 257, 264, 309, 376, 389, 394, 569, 814, 815, 981, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038], "pipelin": [4, 31, 54, 58, 71, 74, 76, 86, 117, 122, 143, 145, 149, 150, 164, 165, 171, 172, 176, 179, 188, 189, 200, 201, 206, 214, 218, 222, 228, 229, 230, 234, 239, 240, 243, 244, 254, 258, 260, 268, 275, 277, 281, 283, 284, 289, 290, 297, 300, 305, 308, 310, 313, 314, 315, 316, 317, 318, 319, 326, 347, 348, 358, 362, 365, 368, 370, 371, 376, 379, 390, 394, 407, 411, 413, 417, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 482, 496, 509, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 599, 601, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 691, 692, 694, 695, 696, 707, 788, 789, 790, 791, 792, 793, 794, 797, 799, 804, 808, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 971, 977, 984, 985, 990, 991, 995, 996, 1001, 1002, 1003, 1005, 1008, 1010, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1029], "make_pipelin": [4, 31, 58, 86, 117, 122, 132, 145, 146, 149, 164, 165, 170, 171, 176, 179, 188, 189, 200, 201, 206, 214, 218, 222, 229, 230, 231, 239, 240, 241, 243, 258, 268, 281, 290, 297, 305, 308, 309, 310, 313, 314, 315, 316, 317, 318, 348, 358, 389, 394, 404, 407, 561, 670, 672, 845, 853, 878, 879, 881, 882, 883, 884, 893, 894, 895, 896, 898, 899, 971, 984, 991, 995, 996, 1025, 1032, 1035], "ordinalencod": [4, 122, 132, 171, 172, 200, 239, 309, 318, 370, 390, 410, 575, 829, 861, 866, 874, 971, 983, 991, 1030, 1031, 1034, 1035, 1036, 1037, 1038], "categorical_column": [4, 122, 170, 172, 239, 461], "ordinal_encod": [4, 122, 239], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 57, 62, 69, 74, 76, 86, 89, 90, 97, 98, 100, 102, 104, 105, 110, 122, 132, 136, 146, 158, 165, 167, 170, 171, 172, 176, 192, 200, 201, 208, 214, 216, 218, 222, 225, 229, 231, 234, 236, 237, 239, 243, 248, 258, 259, 262, 270, 281, 283, 289, 290, 291, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 318, 334, 337, 338, 347, 349, 358, 365, 370, 371, 372, 373, 376, 378, 381, 385, 390, 394, 399, 401, 402, 403, 405, 408, 410, 411, 412, 413, 419, 424, 427, 431, 435, 436, 437, 439, 441, 443, 446, 458, 459, 460, 461, 462, 476, 477, 478, 479, 482, 483, 490, 497, 502, 503, 508, 509, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 551, 553, 555, 558, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 630, 632, 633, 634, 635, 636, 647, 652, 657, 667, 670, 678, 682, 683, 684, 685, 686, 688, 695, 696, 707, 746, 747, 778, 790, 793, 794, 804, 819, 822, 828, 837, 842, 845, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 893, 895, 898, 899, 922, 924, 970, 971, 973, 975, 977, 978, 981, 982, 985, 995, 996, 998, 1001, 1002, 1003, 1007, 1012, 1013, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "remaind": [4, 122, 170, 189, 200, 202, 218, 239, 318, 352, 404, 458, 461, 1022, 1029, 1030, 1031, 1034, 1035, 1038], "passthrough": [4, 72, 122, 170, 171, 200, 218, 239, 309, 318, 404, 458, 461, 561, 562, 852, 853, 991, 1031, 1033, 1036, 1037], "short": [4, 5, 90, 122, 128, 191, 259, 299, 347, 376, 384, 407, 411, 415, 977, 978, 984, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "easier": [4, 44, 62, 66, 82, 122, 179, 185, 231, 239, 258, 259, 303, 334, 347, 358, 371, 376, 378, 381, 384, 388, 393, 405, 407, 462, 509, 891, 924, 976, 981, 988, 997, 1002, 1005, 1016, 1031, 1036], "specifi": [4, 20, 55, 95, 122, 123, 153, 156, 158, 159, 160, 189, 201, 208, 246, 269, 362, 363, 370, 374, 376, 378, 385, 389, 390, 394, 397, 403, 404, 407, 408, 410, 412, 413, 415, 417, 431, 435, 439, 444, 446, 457, 458, 461, 463, 464, 466, 467, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 509, 525, 527, 531, 532, 534, 535, 540, 541, 546, 551, 553, 554, 555, 556, 558, 561, 562, 577, 578, 587, 588, 591, 596, 604, 605, 614, 625, 626, 627, 632, 637, 640, 641, 642, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 657, 659, 662, 663, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 681, 685, 692, 694, 696, 703, 705, 722, 723, 731, 747, 764, 772, 773, 776, 777, 780, 790, 792, 793, 794, 796, 797, 799, 803, 804, 807, 812, 813, 814, 815, 816, 817, 818, 820, 824, 827, 828, 829, 831, 832, 833, 834, 838, 866, 867, 868, 871, 872, 874, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 925, 932, 965, 971, 977, 978, 980, 981, 984, 988, 989, 991, 994, 995, 996, 1011, 1015, 1022, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "next": [4, 7, 25, 60, 80, 121, 122, 126, 135, 159, 169, 173, 193, 197, 200, 230, 238, 242, 243, 248, 256, 267, 279, 308, 309, 310, 315, 323, 347, 352, 356, 358, 365, 374, 376, 378, 380, 400, 403, 404, 407, 410, 502, 503, 604, 628, 686, 692, 694, 696, 774, 788, 789, 819, 947, 970, 974, 980, 981, 991, 1005, 1019, 1022, 1035, 1036], "verbose_feature_names_out": [4, 122, 170, 171, 172, 243, 309, 316, 317, 318, 404, 458, 461, 1035], "categorical_featur": [4, 71, 122, 171, 309, 315, 316, 317, 318, 381, 410, 555, 556, 626, 627, 988, 1030, 1034, 1037], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 75, 82, 86, 92, 95, 97, 100, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 138, 145, 146, 148, 152, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 181, 182, 186, 192, 199, 200, 203, 204, 206, 207, 208, 212, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 234, 237, 238, 239, 240, 242, 243, 246, 248, 249, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 279, 281, 284, 285, 289, 290, 291, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 325, 332, 334, 335, 336, 342, 343, 347, 348, 352, 356, 358, 378, 381, 385, 389, 390, 399, 403, 404, 407, 408, 410, 411, 415, 428, 431, 432, 434, 437, 441, 443, 445, 446, 447, 448, 452, 453, 454, 456, 463, 468, 482, 485, 486, 489, 491, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 578, 587, 588, 601, 602, 604, 605, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 626, 627, 628, 629, 632, 633, 634, 635, 636, 640, 641, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 670, 671, 672, 673, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692, 694, 695, 696, 728, 781, 784, 788, 789, 792, 793, 794, 795, 796, 802, 804, 805, 806, 807, 808, 809, 810, 812, 817, 818, 819, 821, 823, 824, 825, 826, 827, 838, 842, 849, 850, 851, 853, 858, 870, 874, 882, 885, 886, 893, 894, 895, 898, 901, 902, 903, 904, 906, 907, 929, 930, 950, 952, 955, 970, 971, 973, 976, 981, 982, 983, 984, 985, 988, 989, 991, 996, 997, 1007, 1011, 1012, 1016, 1019, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "set_output": [4, 122, 167, 171, 228, 244, 308, 309, 379, 427, 436, 437, 439, 441, 443, 458, 462, 476, 477, 478, 479, 490, 498, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 560, 561, 562, 563, 564, 575, 576, 577, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 652, 682, 683, 686, 819, 837, 842, 845, 849, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 891, 1037, 1038], "across": [4, 55, 61, 67, 85, 90, 118, 138, 170, 189, 194, 222, 256, 258, 261, 281, 303, 308, 338, 377, 378, 385, 390, 397, 402, 403, 407, 411, 415, 431, 434, 444, 446, 448, 451, 454, 456, 463, 466, 468, 482, 485, 486, 489, 491, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 545, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 561, 562, 582, 585, 588, 596, 601, 602, 604, 605, 626, 627, 628, 633, 634, 635, 636, 640, 641, 644, 646, 647, 648, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 670, 672, 673, 679, 680, 683, 684, 685, 686, 687, 688, 689, 698, 699, 711, 724, 750, 781, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 802, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 838, 842, 849, 850, 851, 858, 862, 863, 870, 871, 873, 874, 882, 885, 886, 888, 889, 893, 894, 895, 898, 901, 902, 929, 930, 949, 952, 955, 970, 977, 979, 981, 991, 995, 997, 1002, 1005, 1016, 1022, 1025, 1028, 1029, 1030, 1031, 1032], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 56, 58, 61, 70, 75, 92, 95, 97, 98, 101, 103, 105, 109, 112, 115, 117, 122, 123, 124, 125, 132, 155, 158, 160, 161, 165, 173, 180, 188, 189, 192, 197, 200, 201, 208, 209, 210, 218, 221, 222, 236, 237, 239, 246, 247, 248, 249, 251, 252, 256, 259, 260, 261, 262, 264, 269, 272, 275, 281, 286, 288, 291, 294, 298, 300, 303, 305, 308, 309, 313, 326, 330, 334, 338, 344, 347, 348, 349, 362, 371, 376, 378, 382, 383, 388, 404, 407, 411, 415, 502, 527, 591, 604, 605, 774, 866, 920, 925, 942, 981, 988, 996, 1012], "cv_result": [4, 71, 118, 259, 260, 262, 264, 394, 804, 816, 981], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 58, 60, 70, 71, 72, 73, 74, 75, 78, 82, 86, 103, 109, 111, 112, 114, 121, 122, 124, 125, 128, 131, 132, 139, 140, 145, 146, 149, 164, 167, 169, 170, 171, 172, 173, 176, 184, 191, 192, 195, 200, 202, 206, 208, 216, 218, 229, 234, 235, 236, 239, 243, 250, 254, 259, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 274, 275, 276, 277, 279, 288, 289, 290, 297, 298, 299, 300, 305, 308, 309, 310, 313, 314, 315, 316, 322, 323, 325, 326, 334, 342, 347, 348, 352, 358, 371, 376, 378, 381, 389, 390, 397, 398, 400, 401, 402, 404, 406, 408, 410, 412, 420, 422, 426, 431, 437, 441, 443, 446, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 496, 498, 526, 530, 535, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 586, 587, 588, 589, 590, 592, 593, 594, 596, 597, 598, 600, 603, 604, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 735, 748, 749, 750, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 793, 794, 796, 804, 809, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 839, 840, 842, 843, 844, 849, 850, 851, 853, 873, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 932, 970, 973, 977, 979, 984, 987, 989, 991, 995, 1002, 1010, 1012, 1014, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "neg_mean_absolute_error": [4, 132, 202, 981], "neg_root_mean_squared_error": [4, 309, 981], "mae": [4, 132, 200, 202, 552, 559, 738, 902, 904, 981, 997, 1029, 1030, 1034, 1035], "test_neg_mean_absolute_error": [4, 202], "rmse": [4, 81, 309, 743, 1033], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 58, 60, 61, 63, 67, 70, 71, 73, 74, 75, 80, 85, 86, 92, 95, 98, 103, 104, 106, 112, 115, 118, 119, 120, 121, 122, 124, 126, 138, 140, 145, 146, 148, 149, 152, 153, 155, 157, 161, 169, 171, 172, 173, 176, 184, 185, 186, 187, 191, 192, 195, 196, 200, 202, 203, 204, 207, 208, 215, 216, 218, 222, 223, 226, 231, 233, 235, 236, 239, 243, 249, 255, 259, 260, 261, 262, 264, 266, 269, 270, 274, 281, 285, 292, 294, 298, 299, 300, 305, 308, 310, 313, 314, 315, 317, 319, 322, 323, 326, 334, 347, 348, 349, 352, 356, 358, 362, 370, 371, 374, 377, 378, 384, 390, 394, 397, 404, 407, 410, 411, 413, 458, 461, 462, 466, 472, 496, 506, 535, 538, 543, 544, 553, 554, 555, 556, 558, 559, 563, 564, 571, 577, 578, 582, 583, 585, 606, 611, 624, 640, 641, 643, 644, 646, 647, 648, 650, 654, 655, 656, 657, 660, 661, 670, 671, 678, 707, 711, 730, 786, 788, 789, 791, 792, 795, 797, 798, 799, 800, 803, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 822, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 850, 851, 852, 853, 854, 855, 863, 869, 873, 881, 891, 892, 893, 894, 895, 898, 906, 917, 942, 949, 971, 981, 982, 983, 984, 989, 997, 1007, 1011, 1012, 1014, 1015, 1016, 1022, 1024, 1030, 1031, 1033, 1037], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 58, 71, 73, 75, 86, 112, 119, 120, 145, 149, 152, 153, 154, 156, 161, 169, 171, 172, 180, 184, 186, 192, 200, 202, 206, 215, 216, 218, 222, 233, 235, 259, 261, 262, 264, 267, 269, 272, 281, 297, 326, 347, 348, 349, 989, 1012], "std": [4, 11, 12, 37, 46, 50, 54, 61, 66, 79, 81, 82, 96, 97, 98, 119, 121, 122, 132, 139, 161, 164, 165, 170, 180, 185, 209, 233, 259, 260, 261, 263, 264, 266, 269, 271, 275, 309, 325, 337, 348, 358, 390, 403, 407, 410, 509, 600, 603, 873, 884, 991, 1015, 1030, 1034], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 58, 70, 75, 80, 85, 92, 95, 98, 100, 103, 105, 106, 112, 114, 115, 119, 123, 134, 144, 149, 152, 156, 161, 171, 173, 180, 184, 196, 200, 201, 204, 215, 217, 218, 221, 232, 233, 234, 237, 246, 248, 249, 259, 261, 264, 266, 267, 268, 270, 271, 281, 284, 286, 300, 305, 307, 308, 315, 318, 323, 338, 342, 356, 362, 370, 373, 374, 376, 380, 382, 385, 390, 393, 394, 400, 401, 403, 406, 407, 408, 409, 410, 411, 413, 414, 438, 439, 441, 442, 444, 463, 465, 468, 472, 483, 509, 510, 511, 512, 517, 522, 532, 534, 535, 541, 551, 552, 553, 554, 557, 558, 559, 560, 582, 583, 584, 585, 601, 602, 608, 621, 643, 665, 673, 686, 690, 693, 700, 701, 748, 795, 798, 800, 805, 806, 809, 829, 833, 834, 838, 858, 885, 887, 901, 902, 903, 904, 928, 933, 934, 956, 960, 961, 970, 973, 975, 977, 978, 981, 982, 983, 984, 985, 987, 988, 991, 993, 995, 996, 997, 1007, 1014, 1016, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "044": [4, 59, 68, 259, 744, 981], "003": [4, 149], "068": [4, 226, 261], "005": [4, 132, 136, 152, 261, 265, 286, 303, 348, 382], "quit": [4, 53, 57, 86, 115, 138, 149, 170, 171, 198, 218, 269, 316, 347, 362, 381, 389, 403, 411, 976, 978, 983, 1005, 1030], "good": [4, 9, 20, 25, 27, 40, 44, 46, 49, 52, 53, 55, 58, 74, 81, 86, 105, 118, 121, 124, 125, 153, 157, 164, 170, 184, 189, 200, 201, 206, 215, 226, 229, 233, 236, 239, 247, 249, 255, 261, 267, 276, 300, 308, 309, 315, 322, 327, 334, 347, 348, 358, 362, 363, 364, 375, 377, 378, 379, 380, 382, 388, 390, 397, 400, 401, 403, 405, 407, 408, 410, 411, 412, 413, 431, 433, 438, 528, 553, 555, 556, 584, 624, 634, 641, 642, 650, 652, 653, 655, 663, 674, 684, 688, 716, 724, 735, 757, 818, 887, 930, 970, 976, 977, 978, 981, 982, 984, 985, 986, 988, 989, 991, 995, 996, 997, 1002, 1005, 1007, 1011, 1014, 1016, 1028], "trial": [4, 266, 441, 443, 454, 665, 788, 789, 977, 1028], "without": [4, 5, 13, 24, 36, 42, 55, 56, 67, 68, 75, 100, 118, 124, 127, 129, 132, 145, 149, 159, 167, 169, 170, 171, 184, 189, 208, 229, 233, 236, 237, 240, 242, 255, 262, 266, 268, 282, 295, 303, 304, 308, 310, 313, 338, 342, 348, 364, 371, 372, 374, 376, 377, 378, 380, 381, 382, 385, 388, 389, 390, 394, 397, 403, 404, 408, 410, 411, 412, 413, 428, 433, 435, 440, 452, 463, 468, 490, 498, 509, 526, 528, 549, 550, 557, 573, 574, 605, 621, 625, 628, 633, 653, 686, 694, 774, 793, 794, 795, 802, 804, 818, 819, 835, 842, 846, 852, 853, 856, 859, 862, 863, 865, 869, 870, 871, 873, 878, 893, 909, 950, 970, 971, 975, 977, 978, 981, 984, 987, 991, 995, 996, 997, 1001, 1002, 1007, 1008, 1016, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038], "tune": [4, 44, 55, 71, 100, 112, 118, 148, 152, 164, 171, 189, 204, 205, 217, 225, 239, 255, 266, 283, 304, 334, 338, 342, 347, 358, 362, 363, 364, 389, 390, 398, 402, 403, 407, 410, 412, 413, 446, 456, 553, 554, 588, 607, 608, 609, 611, 613, 614, 616, 617, 619, 637, 653, 684, 688, 849, 975, 976, 977, 978, 980, 981, 984, 985, 987, 995, 996, 1008, 1018, 1022, 1036, 1038], "just": [4, 31, 70, 86, 95, 118, 122, 149, 190, 197, 222, 234, 261, 268, 272, 281, 297, 334, 347, 348, 356, 358, 371, 375, 376, 377, 378, 380, 381, 384, 388, 389, 390, 400, 403, 404, 407, 410, 412, 415, 462, 527, 529, 536, 540, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 573, 578, 604, 605, 640, 646, 651, 652, 654, 656, 660, 661, 662, 670, 671, 672, 796, 812, 842, 850, 851, 970, 977, 980, 981, 982, 985, 989, 991, 995, 1002, 1014, 1022, 1026, 1028, 1030, 1034, 1038], "had": [4, 9, 47, 125, 157, 236, 303, 309, 316, 358, 376, 377, 411, 414, 438, 971, 981, 1005, 1007, 1022, 1023, 1029, 1030, 1031, 1032, 1033, 1037], "explicit": [4, 167, 171, 176, 228, 236, 244, 338, 362, 363, 364, 375, 377, 388, 390, 391, 404, 411, 417, 466, 493, 495, 496, 535, 545, 546, 632, 633, 635, 670, 790, 791, 798, 837, 845, 853, 893, 898, 945, 949, 973, 975, 977, 981, 991, 997, 1001, 1022, 1026, 1031, 1032, 1035], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 56, 60, 65, 66, 70, 71, 86, 95, 97, 100, 111, 113, 128, 144, 149, 152, 164, 165, 170, 171, 172, 176, 179, 184, 195, 201, 202, 204, 218, 233, 236, 239, 240, 259, 261, 262, 264, 270, 283, 303, 308, 310, 316, 326, 334, 349, 356, 362, 364, 371, 374, 376, 377, 378, 379, 380, 384, 388, 390, 391, 392, 397, 401, 402, 403, 404, 407, 408, 410, 411, 413, 438, 441, 443, 444, 451, 458, 461, 487, 488, 502, 540, 561, 562, 563, 564, 601, 602, 610, 614, 615, 618, 626, 633, 658, 686, 761, 764, 767, 771, 772, 773, 774, 782, 790, 804, 811, 818, 857, 862, 863, 867, 871, 873, 874, 883, 884, 890, 901, 902, 947, 970, 971, 977, 980, 981, 982, 984, 985, 986, 991, 996, 997, 1000, 1001, 1004, 1005, 1007, 1014, 1015, 1016, 1022, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "But": [4, 9, 53, 169, 201, 202, 261, 281, 303, 376, 388, 403, 406, 409, 410, 456, 739, 901, 902, 970, 981, 996, 1002], "much": [4, 6, 7, 9, 19, 25, 40, 55, 80, 82, 92, 98, 105, 117, 125, 126, 132, 133, 134, 152, 164, 165, 170, 171, 172, 173, 176, 197, 198, 202, 233, 236, 261, 263, 264, 267, 272, 299, 304, 308, 309, 310, 315, 316, 318, 334, 339, 347, 348, 358, 362, 364, 371, 376, 377, 378, 381, 384, 388, 389, 393, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 441, 442, 490, 528, 529, 530, 532, 553, 554, 555, 556, 652, 653, 660, 662, 670, 671, 672, 686, 772, 773, 793, 794, 808, 868, 886, 893, 970, 973, 976, 977, 978, 980, 981, 982, 984, 985, 987, 989, 993, 994, 996, 997, 1002, 1005, 1011, 1012, 1014, 1015, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "monoton": [4, 25, 110, 136, 167, 171, 218, 232, 314, 401, 555, 556, 626, 629, 630, 688, 700, 869, 881, 895, 898, 978, 982, 991, 996, 1029, 1033, 1037], "relationship": [4, 20, 112, 113, 158, 169, 170, 179, 184, 200, 202, 203, 268, 304, 310, 390, 403, 405, 407, 456, 630, 708, 978, 981, 983, 984, 988, 989, 1014, 1027], "case": [4, 7, 8, 25, 27, 37, 49, 52, 55, 57, 61, 66, 71, 72, 81, 86, 100, 103, 115, 117, 118, 125, 126, 132, 146, 148, 149, 152, 159, 170, 171, 173, 184, 186, 189, 191, 200, 201, 202, 204, 205, 208, 214, 216, 217, 218, 229, 233, 234, 235, 236, 239, 240, 251, 255, 258, 260, 261, 262, 264, 267, 268, 270, 281, 284, 288, 299, 303, 305, 308, 310, 313, 316, 338, 347, 348, 349, 356, 358, 362, 363, 364, 370, 371, 374, 376, 377, 378, 380, 381, 382, 383, 385, 388, 389, 390, 391, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 431, 434, 437, 438, 440, 441, 445, 447, 457, 458, 459, 461, 468, 490, 502, 503, 509, 533, 535, 536, 537, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 575, 576, 582, 585, 587, 588, 591, 596, 600, 603, 604, 605, 619, 621, 622, 624, 626, 641, 642, 647, 650, 651, 652, 653, 655, 657, 660, 662, 663, 666, 668, 669, 670, 674, 676, 677, 678, 679, 680, 681, 693, 697, 702, 703, 706, 712, 714, 715, 716, 719, 721, 722, 727, 728, 731, 735, 736, 738, 739, 741, 743, 746, 747, 749, 756, 771, 774, 776, 778, 781, 782, 785, 787, 789, 790, 793, 794, 796, 804, 808, 812, 813, 814, 815, 816, 817, 818, 820, 822, 830, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 853, 860, 862, 863, 866, 867, 868, 871, 872, 873, 874, 877, 883, 884, 885, 886, 893, 895, 898, 901, 902, 908, 909, 919, 930, 931, 949, 970, 971, 973, 975, 976, 978, 979, 980, 982, 983, 984, 985, 987, 988, 991, 995, 996, 997, 1001, 1002, 1004, 1005, 1007, 1016, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "usual": [4, 40, 78, 79, 81, 124, 125, 127, 132, 169, 171, 186, 200, 201, 255, 258, 261, 270, 271, 304, 316, 334, 358, 362, 363, 374, 376, 378, 384, 388, 389, 390, 394, 400, 403, 404, 407, 408, 410, 411, 412, 444, 450, 532, 534, 536, 541, 553, 554, 601, 602, 624, 634, 652, 653, 660, 662, 670, 671, 672, 686, 719, 751, 796, 817, 821, 893, 930, 970, 971, 973, 976, 977, 978, 980, 981, 982, 985, 986, 987, 988, 991, 995, 996, 997, 1007, 1013, 1014, 1037], "hot": [4, 71, 117, 120, 132, 170, 200, 270, 304, 305, 309, 315, 334, 390, 410, 411, 545, 560, 575, 642, 652, 653, 663, 674, 856, 858, 860, 861, 864, 866, 867, 874, 977, 991, 1030, 1036, 1037], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 55, 57, 58, 60, 67, 73, 80, 86, 91, 96, 115, 117, 118, 120, 125, 126, 128, 130, 145, 146, 149, 152, 154, 159, 164, 165, 170, 171, 184, 188, 189, 200, 201, 204, 205, 208, 217, 218, 221, 223, 226, 229, 230, 232, 233, 234, 236, 243, 251, 258, 261, 262, 268, 276, 279, 281, 291, 297, 299, 300, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 325, 327, 334, 336, 338, 342, 347, 348, 349, 352, 353, 356, 358, 362, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 394, 397, 399, 400, 401, 402, 403, 404, 407, 408, 410, 411, 412, 413, 414, 419, 426, 431, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 448, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 466, 468, 476, 477, 478, 479, 483, 490, 492, 497, 508, 509, 517, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 575, 576, 577, 578, 579, 580, 582, 583, 585, 586, 587, 588, 591, 596, 601, 602, 603, 604, 605, 608, 613, 616, 617, 621, 622, 623, 624, 625, 626, 627, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 682, 683, 686, 687, 689, 695, 698, 700, 701, 722, 723, 731, 734, 735, 756, 762, 771, 776, 777, 780, 781, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 913, 919, 944, 965, 970, 971, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 995, 996, 997, 1000, 1004, 1005, 1007, 1014, 1015, 1016, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "consist": [4, 7, 26, 32, 37, 56, 57, 70, 80, 90, 92, 95, 118, 122, 128, 135, 149, 155, 157, 160, 165, 173, 200, 218, 235, 239, 267, 270, 299, 308, 313, 316, 342, 348, 358, 362, 369, 371, 373, 376, 378, 382, 383, 384, 385, 389, 390, 391, 401, 403, 405, 409, 410, 411, 421, 422, 425, 426, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 484, 491, 525, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 548, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 585, 605, 621, 622, 623, 624, 629, 632, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 668, 671, 672, 673, 681, 682, 683, 684, 685, 694, 728, 788, 789, 797, 821, 822, 823, 825, 826, 827, 828, 836, 837, 839, 841, 844, 845, 851, 856, 857, 858, 860, 864, 865, 868, 869, 871, 872, 874, 885, 886, 889, 893, 894, 896, 897, 899, 902, 904, 913, 915, 936, 952, 955, 970, 973, 974, 975, 977, 978, 980, 981, 982, 984, 985, 991, 994, 996, 997, 1000, 1002, 1005, 1007, 1014, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 56, 58, 61, 71, 72, 79, 82, 86, 97, 100, 101, 129, 149, 152, 153, 154, 157, 158, 159, 161, 167, 171, 176, 180, 181, 188, 200, 202, 204, 214, 215, 216, 218, 220, 223, 227, 229, 235, 239, 251, 258, 261, 262, 263, 268, 284, 298, 299, 300, 302, 303, 311, 314, 317, 319, 327, 329, 331, 334, 338, 345, 358, 361, 362, 368, 369, 370, 373, 376, 381, 385, 388, 389, 390, 402, 403, 404, 408, 410, 411, 412, 413, 440, 441, 444, 445, 451, 458, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 495, 504, 508, 509, 518, 528, 532, 534, 535, 541, 543, 544, 555, 556, 576, 584, 585, 591, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 625, 626, 635, 638, 639, 640, 641, 643, 646, 652, 653, 654, 655, 656, 666, 668, 670, 671, 672, 675, 681, 682, 683, 684, 686, 688, 693, 697, 710, 734, 740, 750, 752, 762, 768, 770, 796, 804, 807, 819, 820, 821, 833, 834, 835, 850, 851, 854, 857, 862, 863, 865, 868, 870, 871, 873, 878, 879, 880, 882, 883, 885, 886, 893, 894, 895, 896, 897, 898, 899, 957, 958, 959, 970, 973, 974, 977, 981, 982, 983, 984, 985, 989, 995, 996, 1002, 1005, 1007, 1014, 1015, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "same": [4, 7, 8, 16, 20, 26, 34, 37, 40, 44, 53, 55, 57, 58, 64, 70, 71, 72, 92, 95, 97, 100, 103, 105, 113, 115, 119, 122, 123, 125, 126, 130, 149, 152, 170, 171, 173, 186, 188, 189, 194, 200, 201, 202, 208, 218, 236, 240, 251, 256, 257, 258, 259, 261, 262, 264, 266, 267, 269, 274, 281, 284, 286, 299, 303, 304, 306, 308, 309, 313, 315, 325, 334, 347, 348, 349, 356, 358, 362, 363, 364, 370, 371, 373, 375, 376, 378, 380, 382, 385, 388, 389, 390, 391, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 424, 428, 432, 433, 440, 444, 450, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 487, 489, 490, 492, 498, 502, 503, 525, 526, 529, 530, 531, 532, 533, 534, 537, 541, 543, 545, 546, 547, 548, 551, 553, 554, 555, 556, 558, 559, 561, 562, 583, 584, 596, 597, 600, 604, 605, 607, 616, 621, 622, 623, 626, 627, 640, 643, 646, 647, 649, 652, 653, 657, 660, 661, 662, 666, 667, 668, 669, 670, 671, 672, 678, 681, 693, 698, 699, 706, 707, 709, 711, 719, 724, 725, 729, 748, 749, 750, 771, 772, 773, 779, 781, 783, 785, 786, 788, 789, 790, 791, 793, 794, 796, 798, 799, 804, 808, 809, 812, 814, 815, 816, 817, 818, 819, 820, 835, 836, 837, 841, 843, 844, 845, 856, 857, 858, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 882, 893, 894, 901, 903, 915, 919, 930, 947, 952, 955, 956, 966, 970, 971, 973, 975, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 995, 996, 997, 1001, 1002, 1011, 1016, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "minmaxscal": [4, 5, 72, 145, 176, 222, 239, 298, 315, 364, 404, 458, 879, 971, 991, 1024, 1027, 1030, 1032, 1033, 1034, 1038], "although": [4, 9, 25, 119, 132, 169, 197, 218, 229, 248, 279, 338, 358, 364, 378, 390, 403, 404, 408, 411, 490, 807, 810, 864, 980, 982, 983, 984, 987, 997, 1007, 1014, 1015, 1016, 1022, 1030, 1037], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 55, 57, 70, 72, 73, 86, 106, 112, 117, 118, 121, 127, 132, 149, 158, 170, 171, 184, 197, 200, 206, 218, 221, 222, 223, 226, 229, 232, 233, 234, 236, 237, 239, 248, 249, 256, 261, 263, 264, 268, 270, 271, 279, 281, 294, 303, 305, 307, 309, 310, 316, 317, 325, 326, 332, 334, 342, 344, 347, 348, 349, 362, 370, 374, 376, 377, 378, 380, 384, 389, 390, 394, 397, 401, 402, 403, 404, 407, 408, 410, 411, 412, 413, 428, 434, 436, 440, 441, 443, 444, 448, 450, 461, 467, 473, 481, 493, 497, 502, 521, 529, 531, 532, 533, 535, 538, 540, 543, 544, 551, 552, 553, 554, 555, 556, 558, 559, 575, 576, 577, 582, 583, 585, 587, 588, 591, 596, 600, 604, 626, 632, 643, 644, 645, 648, 649, 650, 653, 665, 676, 677, 692, 694, 696, 701, 721, 722, 723, 727, 729, 731, 736, 739, 771, 776, 777, 780, 781, 785, 790, 793, 794, 804, 850, 854, 855, 856, 858, 860, 862, 865, 866, 867, 870, 873, 874, 882, 885, 886, 890, 893, 894, 901, 902, 903, 904, 908, 913, 917, 930, 933, 934, 947, 949, 965, 970, 971, 973, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 987, 989, 991, 995, 996, 997, 1016, 1022, 1023, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 55, 60, 62, 66, 71, 73, 75, 81, 86, 95, 98, 100, 102, 106, 115, 116, 117, 119, 122, 125, 126, 128, 130, 131, 141, 148, 149, 152, 154, 156, 160, 164, 170, 171, 172, 173, 180, 185, 186, 189, 190, 195, 201, 202, 204, 208, 214, 215, 218, 221, 222, 225, 229, 232, 234, 240, 246, 251, 252, 255, 256, 259, 261, 262, 264, 267, 268, 269, 270, 272, 273, 276, 281, 283, 287, 297, 298, 299, 303, 304, 305, 308, 313, 315, 317, 318, 319, 322, 325, 327, 334, 338, 339, 342, 347, 349, 354, 355, 356, 362, 363, 364, 370, 371, 373, 376, 378, 380, 381, 382, 384, 388, 389, 390, 391, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 428, 434, 435, 437, 439, 440, 441, 444, 445, 446, 447, 448, 449, 451, 453, 456, 458, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 483, 502, 503, 505, 507, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 573, 574, 575, 576, 578, 582, 583, 585, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 624, 625, 626, 628, 630, 634, 637, 646, 647, 652, 658, 659, 660, 661, 670, 671, 672, 680, 683, 684, 685, 686, 687, 688, 689, 702, 704, 706, 711, 718, 719, 721, 722, 723, 724, 725, 729, 730, 731, 747, 749, 750, 757, 764, 767, 771, 772, 773, 774, 776, 777, 778, 780, 784, 785, 788, 789, 790, 792, 793, 794, 795, 800, 804, 805, 806, 807, 809, 810, 814, 820, 821, 822, 824, 825, 826, 827, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 857, 858, 866, 867, 870, 871, 874, 882, 886, 890, 893, 895, 898, 901, 902, 903, 904, 905, 906, 913, 914, 929, 930, 932, 936, 946, 952, 955, 971, 973, 975, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 993, 995, 996, 997, 1001, 1002, 1004, 1007, 1011, 1012, 1014, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 71, 82, 86, 112, 117, 120, 125, 149, 153, 156, 159, 170, 171, 173, 180, 186, 193, 200, 204, 206, 208, 218, 235, 236, 247, 258, 261, 262, 267, 279, 281, 298, 299, 300, 303, 307, 308, 309, 310, 324, 334, 338, 347, 348, 349, 352, 356, 358, 362, 363, 371, 374, 378, 381, 384, 388, 389, 390, 394, 397, 400, 401, 403, 404, 407, 408, 409, 410, 411, 413, 416, 426, 441, 442, 455, 459, 469, 476, 477, 478, 528, 530, 546, 548, 550, 552, 554, 556, 559, 562, 564, 582, 585, 601, 602, 605, 626, 627, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 666, 667, 670, 671, 672, 673, 674, 683, 693, 703, 706, 707, 715, 716, 717, 739, 756, 778, 781, 785, 790, 804, 817, 821, 826, 827, 836, 839, 841, 843, 844, 845, 851, 862, 863, 871, 873, 874, 878, 879, 881, 882, 883, 884, 894, 896, 899, 902, 904, 945, 971, 973, 974, 975, 976, 977, 978, 979, 981, 982, 984, 986, 988, 991, 996, 997, 1005, 1015, 1028, 1029, 1031, 1032, 1033, 1034, 1036, 1038], "compar": [4, 5, 19, 20, 24, 25, 27, 36, 37, 43, 49, 54, 55, 57, 58, 64, 68, 72, 81, 84, 86, 87, 98, 103, 105, 110, 112, 113, 115, 121, 122, 125, 130, 132, 136, 149, 156, 164, 165, 167, 170, 172, 173, 178, 182, 184, 188, 189, 195, 197, 200, 203, 204, 206, 208, 210, 217, 218, 219, 221, 222, 225, 228, 231, 234, 239, 240, 242, 244, 248, 249, 254, 256, 258, 266, 268, 270, 272, 277, 282, 286, 290, 291, 295, 296, 301, 302, 304, 308, 311, 315, 338, 347, 348, 349, 356, 358, 364, 371, 373, 376, 378, 400, 401, 403, 405, 406, 407, 408, 410, 412, 413, 434, 435, 436, 438, 439, 440, 442, 443, 444, 446, 452, 457, 458, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 484, 490, 496, 498, 506, 508, 516, 518, 522, 525, 531, 545, 546, 555, 556, 557, 558, 559, 565, 625, 633, 638, 639, 647, 649, 651, 652, 657, 660, 662, 670, 671, 678, 689, 699, 706, 709, 724, 731, 736, 779, 789, 790, 795, 804, 816, 819, 826, 835, 839, 842, 846, 850, 853, 854, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 878, 879, 880, 881, 882, 883, 884, 893, 894, 895, 897, 898, 970, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 985, 987, 991, 992, 995, 996, 997, 1000, 1001, 1014, 1015, 1022, 1024, 1029, 1030, 1035], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 111, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 141, 144, 145, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 300, 303, 304, 305, 306, 307, 308, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 353, 354, 355, 356, 358, 362, 369, 370, 371, 374, 376, 377, 378, 379, 380, 382, 384, 385, 388, 389, 390, 393, 394, 396, 397, 399, 400, 403, 404, 407, 408, 409, 410, 411, 433, 434, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 454, 456, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 479, 484, 487, 488, 490, 497, 500, 502, 503, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 563, 564, 575, 576, 582, 583, 585, 621, 622, 623, 624, 625, 626, 627, 637, 640, 641, 643, 646, 647, 651, 652, 653, 654, 655, 656, 657, 660, 662, 664, 666, 670, 671, 672, 678, 682, 685, 686, 687, 689, 693, 696, 697, 700, 701, 703, 706, 708, 719, 720, 722, 723, 727, 728, 731, 732, 747, 749, 766, 772, 774, 775, 776, 777, 780, 781, 782, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 821, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 856, 857, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 893, 895, 896, 898, 899, 901, 916, 928, 930, 934, 935, 936, 943, 944, 950, 952, 955, 968, 970, 971, 976, 977, 979, 981, 982, 984, 987, 991, 993, 996, 997, 1000, 1002, 1004, 1007, 1010, 1011, 1012, 1014, 1015, 1016, 1022, 1025, 1026, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 99, 101, 102, 103, 105, 106, 111, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 141, 144, 145, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 246, 247, 248, 249, 250, 251, 252, 255, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 300, 303, 304, 305, 306, 307, 308, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 353, 354, 355, 356, 358, 362, 370, 371, 376, 378, 381, 382, 385, 388, 390, 394, 400, 403, 404, 407, 408, 409, 410, 411, 413, 416, 418, 421, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 454, 456, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 479, 490, 491, 502, 503, 514, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 551, 552, 553, 554, 555, 557, 558, 559, 560, 563, 564, 575, 576, 579, 580, 582, 583, 587, 588, 591, 600, 603, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 635, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 664, 665, 666, 668, 669, 670, 671, 672, 675, 676, 677, 678, 685, 686, 689, 693, 696, 697, 700, 701, 703, 706, 707, 708, 709, 719, 720, 722, 723, 727, 728, 731, 732, 734, 747, 749, 756, 762, 766, 771, 774, 775, 776, 777, 780, 781, 782, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 838, 839, 840, 841, 843, 844, 845, 849, 850, 857, 858, 860, 866, 867, 868, 869, 870, 872, 873, 874, 881, 882, 885, 886, 888, 889, 890, 893, 895, 896, 898, 899, 901, 902, 903, 904, 911, 913, 914, 916, 918, 919, 928, 930, 935, 943, 944, 946, 950, 952, 955, 957, 958, 959, 970, 971, 976, 977, 979, 981, 982, 984, 985, 987, 991, 992, 993, 995, 996, 997, 1007, 1011, 1012, 1014, 1015, 1016, 1023, 1025, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 71, 73, 75, 86, 117, 132, 134, 135, 138, 140, 148, 149, 152, 164, 167, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 229, 230, 231, 232, 236, 238, 241, 243, 257, 264, 269, 270, 274, 275, 279, 300, 304, 305, 308, 310, 313, 314, 315, 316, 317, 319, 326, 347, 358, 362, 364, 365, 375, 376, 378, 382, 384, 385, 389, 390, 394, 404, 410, 432, 459, 531, 533, 536, 537, 539, 540, 542, 561, 562, 563, 564, 591, 625, 626, 628, 629, 632, 634, 635, 636, 637, 694, 695, 781, 804, 812, 814, 815, 816, 824, 825, 826, 827, 851, 868, 872, 893, 894, 897, 900, 925, 973, 977, 981, 982, 987, 989, 991, 995, 1011, 1012, 1014, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "ridgecv": [4, 75, 132, 149, 170, 238, 390, 410, 562, 637, 666, 669, 977, 1022, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "onehotencod": [4, 71, 117, 122, 132, 170, 171, 200, 218, 231, 239, 241, 243, 309, 314, 316, 319, 370, 390, 404, 410, 460, 461, 560, 575, 576, 856, 860, 861, 864, 867, 874, 971, 991, 1023, 1026, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "one_hot_encod": [4, 122], "handle_unknown": [4, 71, 117, 122, 132, 171, 172, 231, 239, 241, 243, 309, 314, 317, 866, 867, 991, 1026, 1030, 1034, 1035], "ignor": [4, 6, 8, 17, 44, 49, 55, 62, 71, 112, 114, 117, 122, 129, 132, 171, 188, 192, 200, 209, 215, 231, 236, 241, 243, 252, 298, 299, 308, 309, 314, 317, 338, 339, 348, 353, 376, 378, 380, 382, 390, 393, 403, 404, 410, 411, 421, 422, 425, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 454, 455, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 482, 497, 502, 503, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 573, 575, 576, 577, 582, 583, 584, 585, 588, 596, 597, 604, 605, 621, 622, 623, 624, 626, 627, 629, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 701, 707, 708, 719, 722, 723, 731, 748, 749, 756, 762, 767, 771, 776, 777, 780, 781, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 850, 851, 852, 853, 856, 857, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 885, 886, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 927, 956, 977, 978, 981, 983, 987, 991, 996, 1012, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "sparse_output": [4, 122, 243, 309, 317, 560, 860, 864, 866, 872, 877, 991, 1037, 1038], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 56, 60, 65, 75, 82, 86, 95, 97, 98, 100, 101, 102, 104, 105, 112, 114, 115, 121, 125, 128, 129, 131, 132, 133, 149, 152, 155, 157, 158, 159, 160, 161, 164, 165, 170, 179, 180, 181, 182, 184, 185, 186, 188, 189, 194, 195, 197, 198, 200, 201, 202, 204, 205, 209, 212, 213, 218, 221, 222, 225, 234, 235, 242, 246, 261, 262, 263, 264, 265, 268, 269, 271, 273, 274, 279, 281, 284, 286, 289, 291, 297, 299, 303, 304, 305, 306, 308, 310, 314, 316, 317, 324, 326, 331, 332, 335, 336, 338, 339, 342, 343, 344, 347, 362, 371, 378, 382, 388, 405, 406, 408, 410, 412, 413, 415, 440, 465, 466, 472, 521, 525, 527, 529, 530, 531, 532, 533, 534, 536, 537, 539, 540, 541, 542, 554, 589, 590, 592, 605, 607, 609, 610, 617, 625, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 681, 716, 741, 828, 829, 830, 832, 850, 851, 889, 901, 902, 903, 904, 970, 977, 981, 983, 985, 989, 994, 995, 996, 997, 1011, 1014, 1016, 1019, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1034, 1035, 1036, 1037, 1038], "logspac": [4, 12, 73, 78, 103, 138, 139, 149, 153, 158, 170, 193, 204, 205, 233, 235, 250, 262, 274, 276, 285, 297, 305, 308, 334, 342, 812, 976, 977, 1011, 1012, 1014], "naive_linear_pipelin": 4, "142": [4, 58, 410], "014": [4, 269, 348, 382], "184": [4, 200, 300, 382, 1014], "020": [4, 348, 989], "three": [4, 7, 26, 40, 41, 46, 55, 58, 78, 90, 91, 112, 117, 119, 122, 124, 133, 134, 135, 146, 149, 160, 170, 184, 192, 197, 200, 202, 209, 211, 235, 236, 246, 249, 309, 310, 314, 363, 369, 373, 380, 393, 400, 403, 407, 408, 409, 411, 445, 456, 492, 703, 932, 974, 976, 977, 978, 981, 984, 991, 995, 996, 1000, 1007, 1015, 1022], "higher": [4, 57, 80, 98, 103, 112, 115, 117, 118, 125, 128, 152, 154, 159, 160, 170, 171, 172, 176, 200, 201, 204, 218, 225, 226, 252, 255, 259, 261, 264, 275, 286, 308, 334, 338, 347, 348, 349, 358, 362, 371, 374, 378, 400, 403, 405, 410, 412, 413, 414, 438, 442, 443, 465, 472, 503, 526, 533, 537, 542, 547, 548, 551, 552, 553, 554, 555, 556, 558, 559, 560, 567, 582, 585, 601, 602, 613, 621, 625, 629, 631, 640, 641, 646, 647, 654, 655, 656, 657, 670, 672, 673, 698, 717, 721, 745, 778, 788, 790, 793, 794, 796, 804, 811, 812, 817, 820, 839, 842, 868, 885, 886, 887, 893, 894, 895, 896, 897, 898, 899, 906, 973, 977, 978, 980, 981, 984, 988, 991, 995, 996, 1014, 1016, 1023, 1028, 1030, 1037], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 56, 58, 74, 75, 90, 95, 97, 98, 105, 130, 145, 146, 149, 152, 154, 156, 157, 164, 165, 171, 176, 188, 189, 204, 221, 222, 223, 225, 226, 233, 234, 235, 239, 252, 258, 264, 284, 289, 300, 304, 308, 319, 323, 338, 340, 347, 349, 358, 371, 373, 375, 376, 378, 380, 381, 388, 390, 397, 400, 403, 404, 407, 408, 410, 411, 413, 414, 415, 416, 428, 431, 435, 437, 438, 439, 440, 441, 443, 444, 453, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 487, 488, 489, 495, 513, 525, 527, 528, 529, 531, 532, 533, 534, 535, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 570, 575, 576, 578, 582, 584, 585, 588, 601, 602, 604, 605, 608, 624, 626, 629, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 686, 690, 695, 721, 756, 762, 790, 791, 792, 793, 794, 797, 799, 804, 808, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 839, 840, 843, 844, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 869, 870, 871, 872, 873, 882, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 911, 913, 914, 918, 919, 940, 952, 955, 974, 975, 977, 978, 980, 981, 984, 987, 992, 993, 994, 995, 998, 1001, 1005, 1007, 1016, 1025, 1026, 1028, 1030, 1032, 1034, 1036, 1038], "mere": [4, 261, 390, 820, 995], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 58, 75, 95, 98, 112, 114, 121, 124, 125, 130, 141, 149, 154, 156, 157, 158, 165, 170, 182, 188, 189, 195, 202, 203, 206, 214, 222, 233, 234, 237, 279, 287, 288, 294, 297, 299, 303, 305, 306, 308, 327, 333, 340, 343, 385, 403, 406, 408, 476, 477, 478, 479, 506, 528, 529, 532, 534, 535, 543, 544, 557, 621, 625, 626, 648, 649, 650, 651, 676, 677, 698, 734, 750, 773, 793, 794, 842, 850, 851, 863, 872, 879, 930, 946, 977, 981, 984, 991, 1028, 1031, 1033, 1034, 1037], "properli": [4, 25, 55, 129, 157, 256, 313, 364, 374, 376, 380, 384, 409, 893, 894, 895, 896, 897, 898, 899, 970, 1025, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "automat": [4, 8, 12, 46, 63, 65, 71, 103, 138, 148, 179, 203, 246, 247, 259, 262, 303, 310, 314, 318, 326, 336, 338, 363, 365, 371, 374, 376, 378, 380, 384, 390, 393, 399, 403, 404, 405, 408, 410, 411, 412, 427, 444, 446, 450, 456, 458, 459, 461, 490, 493, 509, 535, 543, 545, 551, 555, 558, 577, 582, 585, 588, 596, 637, 639, 640, 641, 646, 647, 652, 653, 654, 655, 656, 657, 660, 661, 662, 666, 668, 669, 670, 672, 675, 678, 681, 682, 685, 689, 792, 807, 810, 819, 829, 850, 851, 854, 855, 857, 866, 867, 874, 885, 886, 893, 894, 895, 898, 901, 903, 907, 919, 952, 955, 970, 972, 975, 980, 985, 991, 995, 997, 1001, 1002, 1011, 1022, 1025, 1026, 1027, 1033, 1036, 1037, 1038], "term": [4, 13, 14, 25, 32, 58, 100, 115, 118, 122, 125, 157, 169, 184, 188, 189, 200, 202, 204, 214, 217, 218, 239, 259, 263, 281, 297, 316, 338, 342, 347, 349, 364, 365, 376, 378, 380, 388, 397, 401, 402, 403, 405, 407, 408, 410, 437, 441, 443, 446, 453, 456, 518, 529, 532, 534, 538, 541, 543, 582, 583, 584, 585, 598, 601, 602, 626, 627, 634, 636, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 669, 670, 672, 674, 681, 689, 850, 851, 868, 872, 875, 893, 894, 895, 896, 897, 898, 899, 970, 972, 975, 976, 977, 978, 981, 982, 983, 985, 986, 991, 995, 996, 1007, 1016, 1030, 1036, 1037, 1038], "raw": [4, 12, 14, 37, 81, 97, 132, 157, 170, 176, 300, 310, 324, 349, 362, 371, 384, 390, 401, 402, 403, 405, 408, 411, 463, 468, 495, 496, 497, 553, 554, 555, 557, 576, 582, 583, 584, 585, 628, 671, 684, 688, 699, 779, 839, 897, 978, 981, 985, 987, 988, 991, 994, 1013, 1015, 1023, 1027, 1030, 1033], "recogn": [4, 29, 35, 86, 120, 167, 201, 316, 382, 394, 403, 411, 496, 691, 707, 819, 898, 981, 1007], "increas": [4, 7, 14, 26, 37, 43, 55, 57, 58, 61, 75, 98, 112, 113, 115, 118, 121, 129, 145, 149, 152, 156, 157, 158, 161, 170, 171, 176, 180, 182, 191, 200, 201, 202, 204, 218, 226, 233, 247, 248, 261, 262, 263, 268, 274, 297, 304, 305, 308, 315, 323, 334, 342, 348, 349, 352, 362, 363, 364, 375, 384, 385, 401, 403, 405, 408, 410, 411, 414, 434, 438, 440, 446, 457, 465, 466, 472, 526, 530, 547, 548, 553, 554, 555, 556, 561, 562, 582, 585, 621, 629, 630, 631, 639, 644, 645, 648, 649, 650, 652, 653, 660, 662, 670, 671, 672, 676, 677, 679, 680, 686, 700, 701, 706, 775, 782, 793, 794, 822, 841, 843, 844, 845, 848, 850, 851, 867, 893, 930, 970, 972, 976, 977, 978, 980, 981, 984, 991, 995, 996, 997, 1005, 1022, 1024, 1027, 1031, 1033, 1034, 1037], "strong": [4, 167, 169, 170, 178, 193, 197, 204, 206, 219, 235, 310, 342, 402, 408, 410, 518, 643, 666, 974, 975, 977, 978, 980, 988, 996, 1014], "similar": [4, 5, 7, 12, 17, 20, 25, 26, 37, 49, 51, 57, 60, 75, 86, 95, 99, 112, 125, 148, 152, 159, 169, 170, 171, 172, 184, 200, 202, 214, 221, 223, 224, 225, 229, 235, 236, 252, 258, 261, 264, 267, 268, 269, 279, 281, 303, 316, 333, 338, 342, 348, 349, 358, 362, 368, 370, 372, 374, 375, 376, 378, 381, 382, 385, 388, 390, 397, 400, 401, 403, 406, 407, 408, 410, 411, 412, 413, 414, 434, 435, 437, 438, 439, 444, 446, 448, 449, 497, 502, 503, 530, 576, 583, 584, 585, 604, 671, 686, 689, 697, 699, 709, 713, 718, 721, 722, 724, 727, 731, 733, 748, 753, 754, 779, 783, 784, 787, 788, 789, 815, 820, 865, 886, 889, 893, 894, 895, 896, 914, 970, 973, 974, 976, 977, 978, 980, 982, 984, 985, 987, 988, 991, 993, 994, 995, 996, 997, 1001, 1002, 1007, 1015, 1018, 1022, 1026, 1027, 1028, 1030, 1034, 1035], "magnitud": [4, 105, 114, 153, 165, 170, 217, 239, 266, 303, 308, 316, 362, 371, 382, 403, 410, 413, 607, 646, 698, 873, 977, 981, 985, 991, 995, 997, 1024, 1031], "discret": [4, 46, 105, 110, 112, 136, 151, 162, 167, 171, 200, 218, 302, 306, 311, 364, 368, 371, 372, 380, 389, 390, 403, 408, 410, 411, 413, 432, 433, 442, 446, 454, 455, 456, 486, 508, 509, 514, 516, 547, 553, 565, 582, 583, 586, 589, 590, 593, 594, 601, 602, 604, 605, 606, 610, 611, 612, 651, 652, 735, 787, 790, 801, 819, 828, 829, 832, 854, 858, 866, 867, 870, 873, 882, 893, 898, 901, 902, 944, 970, 977, 978, 979, 981, 982, 984, 997, 1001, 1007, 1018, 1024, 1027, 1035, 1036, 1037], "manner": [4, 75, 95, 146, 171, 176, 248, 317, 318, 363, 376, 382, 403, 408, 410, 411, 703, 833, 834, 970, 981, 997, 1025, 1032], "uniqu": [4, 16, 24, 30, 42, 47, 48, 57, 58, 63, 67, 119, 120, 126, 127, 170, 172, 184, 215, 218, 248, 270, 290, 309, 310, 319, 325, 347, 348, 349, 370, 378, 385, 390, 403, 404, 407, 410, 411, 434, 444, 448, 450, 458, 461, 490, 543, 544, 545, 547, 548, 551, 552, 553, 554, 555, 556, 558, 559, 560, 604, 627, 628, 629, 660, 662, 670, 691, 703, 747, 775, 790, 792, 804, 816, 821, 822, 825, 831, 840, 845, 850, 864, 866, 867, 874, 877, 893, 895, 901, 902, 903, 904, 918, 930, 944, 945, 977, 982, 991, 1005, 1014, 1030, 1033, 1034, 1036, 1037, 1038], "decid": [4, 11, 57, 60, 71, 252, 258, 261, 268, 371, 376, 391, 411, 413, 444, 451, 553, 554, 605, 629, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 665, 675, 678, 788, 835, 836, 837, 839, 841, 843, 844, 845, 856, 980, 987, 1005, 1035, 1038], "therebi": [4, 170, 407, 410, 973, 1032], "assumpt": [4, 9, 25, 27, 36, 68, 78, 79, 98, 157, 167, 169, 200, 229, 303, 382, 388, 389, 392, 401, 402, 403, 405, 407, 408, 411, 413, 441, 445, 447, 482, 497, 506, 526, 528, 535, 644, 648, 789, 790, 793, 794, 804, 830, 885, 886, 975, 977, 981, 982, 983, 984, 986, 987, 988, 991, 994, 997, 1029, 1035], "impli": [4, 152, 347, 348, 349, 408, 410, 413, 468, 567, 576, 604, 605, 616, 728, 917, 977, 978, 1016, 1033], "give": [4, 12, 13, 24, 25, 39, 44, 49, 60, 62, 64, 70, 71, 75, 97, 124, 152, 157, 161, 164, 170, 171, 189, 191, 197, 200, 201, 202, 229, 252, 258, 263, 270, 283, 287, 290, 300, 316, 317, 326, 362, 364, 371, 373, 375, 376, 378, 382, 384, 388, 389, 390, 391, 397, 400, 401, 402, 403, 404, 405, 408, 410, 411, 413, 415, 428, 440, 441, 443, 445, 453, 466, 490, 493, 497, 527, 532, 543, 544, 545, 546, 551, 552, 558, 559, 560, 587, 588, 591, 601, 602, 632, 641, 655, 659, 670, 714, 723, 729, 732, 785, 790, 793, 794, 804, 814, 815, 816, 818, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 870, 871, 873, 874, 882, 977, 981, 984, 985, 986, 988, 989, 991, 995, 996, 997, 1001, 1005, 1007, 1009, 1014, 1015, 1016, 1022, 1026, 1029, 1030, 1032, 1033, 1034, 1036, 1038], "lot": [4, 82, 170, 204, 371, 376, 377, 378, 384, 408, 410, 793, 794, 885, 886, 970, 993, 995, 996, 1001, 1002, 1005, 1015, 1016, 1022, 1027, 1029, 1030, 1031, 1032, 1034], "addit": [4, 5, 7, 12, 13, 14, 66, 71, 82, 90, 95, 98, 112, 116, 118, 119, 122, 123, 148, 157, 158, 159, 165, 170, 171, 179, 184, 189, 201, 202, 204, 225, 240, 263, 270, 275, 279, 303, 314, 315, 324, 338, 349, 354, 358, 362, 363, 368, 369, 370, 371, 372, 374, 375, 376, 378, 381, 382, 384, 388, 389, 391, 393, 397, 402, 403, 405, 407, 408, 411, 412, 413, 414, 427, 435, 436, 438, 439, 440, 444, 451, 463, 468, 490, 497, 526, 528, 530, 531, 533, 535, 536, 537, 543, 547, 548, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 576, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 605, 606, 613, 622, 624, 625, 629, 632, 633, 634, 635, 636, 637, 638, 639, 664, 681, 682, 686, 692, 693, 696, 735, 751, 752, 781, 783, 788, 789, 796, 812, 822, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 875, 885, 886, 893, 894, 924, 930, 970, 975, 977, 981, 982, 984, 985, 988, 991, 993, 994, 995, 996, 997, 1001, 1007, 1018, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "level": [4, 9, 11, 12, 16, 27, 41, 53, 95, 117, 121, 141, 149, 151, 156, 159, 162, 167, 170, 171, 211, 212, 213, 214, 215, 218, 229, 233, 234, 250, 261, 264, 270, 271, 287, 294, 332, 333, 335, 336, 338, 340, 342, 348, 356, 362, 371, 373, 374, 376, 382, 390, 392, 393, 394, 401, 408, 411, 413, 417, 448, 462, 487, 488, 490, 497, 515, 525, 530, 531, 541, 555, 556, 561, 562, 605, 609, 616, 617, 619, 660, 661, 662, 670, 671, 672, 681, 684, 686, 688, 694, 696, 710, 716, 721, 778, 814, 815, 816, 818, 821, 822, 849, 850, 851, 891, 906, 970, 977, 981, 982, 984, 989, 995, 997, 1001, 1002, 1016, 1025, 1033, 1036, 1037, 1038], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 107, 232, 235, 244, 262, 277, 324, 328], "011": [4, 48, 269, 281, 382], "131": [4, 13, 56, 275, 277, 382, 981, 1023], "rate": [4, 111, 112, 116, 122, 144, 171, 200, 207, 218, 233, 239, 258, 261, 268, 270, 271, 298, 299, 300, 364, 376, 403, 404, 408, 412, 440, 460, 530, 547, 548, 553, 554, 555, 556, 586, 589, 590, 592, 593, 594, 600, 638, 639, 662, 670, 671, 672, 686, 692, 696, 720, 775, 782, 849, 850, 851, 887, 970, 977, 978, 981, 984, 985, 995, 997, 1005, 1026, 1030, 1031], "better": [4, 5, 9, 19, 20, 24, 31, 50, 55, 74, 75, 78, 79, 80, 81, 86, 90, 95, 98, 115, 118, 124, 125, 132, 144, 156, 157, 158, 160, 164, 172, 180, 184, 186, 189, 200, 201, 202, 208, 215, 217, 218, 225, 234, 235, 236, 239, 251, 255, 261, 263, 264, 267, 270, 271, 300, 307, 308, 317, 318, 334, 342, 347, 348, 349, 352, 358, 362, 371, 375, 376, 377, 378, 380, 381, 382, 384, 390, 392, 397, 401, 403, 405, 407, 408, 409, 410, 411, 413, 443, 444, 532, 534, 541, 553, 554, 555, 556, 601, 602, 624, 665, 671, 686, 703, 718, 727, 732, 735, 756, 789, 818, 828, 829, 830, 831, 832, 833, 834, 839, 850, 851, 870, 871, 874, 882, 885, 886, 893, 894, 970, 971, 973, 974, 975, 977, 978, 980, 981, 983, 984, 985, 989, 991, 994, 995, 997, 1002, 1004, 1005, 1009, 1011, 1016, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "confirm": [4, 86, 115, 122, 125, 172, 200, 202, 264, 267, 270, 308, 349, 380, 970, 991, 1030], "progress": [4, 7, 8, 95, 135, 149, 165, 193, 286, 317, 373, 376, 380, 381, 391, 399, 403, 553, 554, 686, 822, 824, 827, 842, 850, 851, 1005, 1014, 1016, 1022, 1024, 1031, 1036], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 60, 62, 80, 81, 82, 85, 92, 98, 101, 125, 130, 138, 157, 164, 170, 171, 172, 189, 200, 201, 202, 205, 208, 218, 225, 229, 235, 236, 239, 246, 263, 264, 267, 268, 270, 271, 276, 281, 299, 303, 316, 322, 325, 334, 338, 344, 347, 349, 358, 362, 371, 375, 376, 378, 381, 382, 384, 388, 389, 390, 397, 401, 403, 405, 407, 408, 409, 410, 411, 412, 413, 436, 441, 446, 456, 465, 466, 472, 494, 498, 504, 551, 552, 555, 556, 558, 559, 561, 562, 583, 584, 616, 644, 645, 648, 649, 650, 658, 676, 677, 679, 685, 686, 689, 699, 736, 739, 783, 788, 790, 798, 800, 804, 807, 810, 833, 834, 858, 862, 863, 864, 873, 885, 886, 895, 898, 901, 902, 903, 904, 930, 970, 973, 974, 976, 977, 978, 979, 980, 981, 984, 985, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1014, 1015, 1022, 1027, 1028, 1030, 1033, 1035, 1037, 1038], "new": [4, 7, 8, 10, 50, 56, 58, 60, 70, 71, 90, 103, 111, 112, 114, 116, 117, 118, 125, 131, 132, 146, 149, 152, 158, 165, 172, 173, 200, 206, 214, 229, 260, 263, 268, 285, 287, 309, 314, 317, 323, 326, 333, 338, 358, 363, 364, 370, 371, 373, 374, 375, 378, 379, 380, 382, 384, 385, 389, 390, 391, 393, 401, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 494, 495, 496, 498, 499, 502, 503, 504, 506, 517, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 695, 696, 698, 702, 707, 708, 712, 715, 716, 717, 718, 720, 721, 722, 723, 724, 727, 732, 733, 734, 736, 739, 746, 747, 750, 754, 759, 760, 762, 771, 775, 776, 777, 778, 780, 781, 782, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 803, 804, 808, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 879, 881, 882, 883, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 911, 913, 914, 916, 924, 925, 929, 930, 937, 938, 939, 940, 941, 944, 947, 949, 951, 956, 962, 968, 970, 971, 973, 977, 981, 982, 984, 985, 986, 987, 991, 993, 994, 995, 996, 1002, 1005, 1007, 1008, 1011, 1014, 1016, 1020, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 371, 376, 978, 1000], "1440": 4, "caus": [4, 25, 27, 125, 153, 170, 198, 200, 204, 205, 218, 310, 338, 349, 358, 374, 381, 401, 403, 408, 409, 411, 413, 437, 441, 443, 453, 503, 526, 576, 583, 604, 605, 828, 829, 830, 832, 857, 866, 868, 871, 872, 913, 914, 970, 971, 977, 981, 989, 991, 994, 1002, 1007, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "signific": [4, 55, 118, 125, 145, 167, 204, 218, 254, 261, 277, 279, 281, 347, 358, 370, 371, 388, 403, 406, 407, 410, 498, 526, 528, 543, 544, 621, 652, 653, 660, 662, 670, 671, 672, 809, 818, 893, 895, 896, 897, 898, 899, 980, 981, 984, 1022, 1024, 1025, 1026, 1030], "overfit": [4, 117, 125, 167, 171, 172, 173, 179, 204, 229, 248, 254, 256, 262, 266, 276, 277, 297, 304, 305, 307, 308, 309, 310, 334, 342, 352, 354, 355, 371, 390, 401, 407, 410, 431, 482, 483, 561, 562, 651, 790, 793, 794, 804, 815, 816, 850, 851, 853, 868, 872, 976, 985, 987, 989, 991, 997, 1005, 1014, 1025], "avoid": [4, 7, 12, 44, 57, 62, 72, 117, 118, 170, 171, 202, 204, 209, 218, 224, 236, 239, 256, 262, 266, 289, 291, 292, 307, 308, 330, 331, 348, 363, 374, 376, 377, 378, 380, 381, 382, 390, 391, 393, 397, 401, 403, 405, 407, 410, 411, 414, 434, 436, 438, 446, 456, 462, 487, 488, 489, 493, 502, 503, 528, 533, 537, 540, 579, 580, 628, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 683, 685, 687, 689, 706, 783, 790, 791, 795, 801, 804, 814, 815, 816, 853, 856, 862, 863, 865, 870, 871, 872, 873, 876, 878, 879, 880, 882, 883, 884, 886, 891, 930, 975, 978, 980, 981, 984, 985, 987, 989, 991, 996, 997, 1002, 1016, 1018, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "kbinsdiscret": [4, 53, 167, 200, 218, 302, 305, 310, 311, 318, 506, 651, 856, 872, 902, 991, 1030, 1034, 1035, 1036, 1038], "re": [4, 8, 13, 26, 56, 70, 71, 112, 122, 155, 169, 218, 236, 247, 251, 264, 266, 270, 314, 347, 349, 363, 376, 377, 380, 384, 389, 391, 394, 401, 407, 411, 463, 464, 465, 466, 467, 468, 469, 470, 549, 550, 555, 556, 557, 640, 646, 654, 656, 792, 807, 810, 901, 902, 903, 904, 977, 982, 984, 991, 996, 1002, 1005, 1016, 1022, 1026, 1027, 1029, 1031], "fine": [4, 37, 121, 149, 204, 216, 252, 259, 338, 354, 355, 373, 380, 390, 411, 440, 930, 949, 984, 987, 996, 1002, 1032], "grain": [4, 31, 37, 234, 252, 305, 382, 411, 440, 949, 1002], "still": [4, 32, 44, 53, 55, 57, 62, 82, 90, 99, 120, 122, 125, 132, 152, 158, 169, 170, 172, 173, 179, 184, 200, 202, 218, 234, 264, 270, 303, 315, 316, 319, 347, 348, 358, 364, 370, 375, 376, 378, 380, 381, 382, 384, 388, 390, 403, 407, 410, 411, 414, 434, 438, 448, 468, 490, 621, 626, 629, 631, 711, 749, 771, 774, 783, 784, 793, 794, 807, 810, 871, 873, 893, 911, 970, 971, 975, 977, 980, 984, 987, 989, 996, 997, 1000, 1002, 1005, 1022, 1024, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "express": [4, 7, 12, 112, 118, 152, 157, 170, 261, 262, 309, 315, 331, 338, 349, 370, 371, 376, 377, 382, 403, 408, 409, 411, 444, 450, 451, 582, 583, 585, 710, 790, 796, 804, 812, 814, 815, 816, 817, 820, 840, 977, 981, 985, 991, 992, 997, 1030], "advantag": [4, 5, 39, 55, 57, 95, 100, 200, 201, 229, 247, 262, 317, 358, 390, 401, 407, 408, 411, 413, 435, 439, 454, 528, 583, 643, 668, 669, 756, 821, 822, 823, 853, 854, 893, 894, 895, 896, 897, 898, 899, 970, 973, 976, 977, 978, 981, 982, 984, 985, 991, 995, 996, 997, 1025], "final": [4, 26, 40, 42, 55, 70, 71, 80, 82, 86, 91, 100, 111, 112, 113, 115, 117, 122, 123, 126, 132, 135, 146, 157, 165, 169, 171, 173, 176, 179, 184, 188, 189, 197, 200, 202, 217, 218, 222, 229, 243, 250, 259, 267, 281, 309, 310, 313, 314, 334, 338, 362, 364, 374, 376, 377, 380, 389, 390, 400, 401, 403, 404, 407, 410, 411, 431, 436, 441, 442, 446, 453, 456, 458, 530, 549, 550, 561, 562, 564, 621, 641, 647, 653, 673, 684, 688, 713, 790, 821, 822, 853, 854, 890, 893, 970, 971, 977, 978, 981, 984, 987, 988, 991, 994, 1005, 1014, 1027, 1030, 1031, 1032, 1033, 1035], "observ": [4, 5, 7, 9, 11, 13, 16, 20, 24, 27, 37, 40, 43, 53, 62, 71, 78, 80, 81, 82, 96, 97, 100, 103, 111, 112, 115, 116, 118, 119, 125, 128, 131, 140, 141, 149, 152, 155, 157, 158, 159, 161, 170, 171, 172, 179, 180, 195, 196, 198, 200, 201, 202, 204, 214, 218, 225, 226, 232, 233, 239, 257, 261, 263, 264, 268, 281, 284, 287, 294, 308, 319, 325, 333, 334, 338, 339, 347, 348, 349, 354, 355, 371, 373, 390, 393, 401, 403, 404, 405, 406, 407, 408, 409, 412, 413, 435, 437, 439, 440, 441, 443, 453, 454, 463, 464, 465, 466, 467, 468, 469, 470, 518, 526, 545, 546, 557, 604, 605, 640, 646, 651, 695, 710, 712, 751, 811, 831, 839, 872, 874, 977, 980, 981, 985, 986, 987, 988, 991, 994, 995, 996, 997, 1004, 1008, 1010, 1011, 1013, 1023, 1035, 1036, 1037, 1038], "complet": [4, 37, 38, 39, 44, 49, 52, 58, 62, 86, 130, 144, 146, 149, 167, 172, 173, 206, 228, 229, 236, 239, 244, 259, 308, 310, 313, 348, 358, 371, 376, 380, 381, 384, 388, 404, 407, 408, 410, 411, 435, 439, 443, 446, 456, 457, 458, 461, 489, 530, 531, 532, 533, 538, 540, 552, 563, 564, 575, 581, 582, 583, 585, 621, 622, 623, 624, 639, 643, 651, 665, 667, 698, 699, 709, 710, 711, 724, 729, 730, 750, 779, 786, 821, 824, 827, 836, 852, 853, 854, 855, 916, 966, 970, 975, 977, 981, 982, 984, 996, 997, 1007, 1016, 1022, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "induct": [4, 36, 68, 125, 167, 390, 403, 410, 417, 435, 506, 558, 621, 625, 888, 889, 942, 965, 977, 994, 1024], "bia": [4, 27, 78, 110, 119, 120, 125, 136, 167, 170, 172, 179, 180, 182, 266, 297, 338, 342, 358, 371, 378, 390, 401, 405, 409, 410, 413, 518, 550, 553, 554, 601, 602, 608, 636, 642, 643, 652, 653, 663, 664, 674, 850, 851, 866, 868, 872, 878, 879, 881, 882, 883, 884, 902, 976, 977, 980, 981, 985, 986, 989, 995, 1014], "preserv": [4, 48, 100, 225, 233, 256, 378, 379, 402, 407, 408, 411, 575, 582, 583, 585, 640, 646, 690, 767, 771, 808, 809, 810, 877, 913, 914, 971, 977, 978, 991, 993, 1011, 1022, 1025, 1026, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "smooth": [4, 46, 47, 54, 149, 157, 193, 201, 216, 309, 334, 373, 391, 403, 409, 413, 442, 443, 531, 532, 533, 540, 551, 552, 553, 554, 558, 559, 560, 584, 585, 613, 616, 670, 828, 829, 830, 832, 870, 874, 882, 901, 902, 903, 904, 977, 983, 991, 995, 996, 997, 1016], "local": [4, 20, 39, 57, 61, 95, 98, 118, 129, 149, 157, 158, 167, 171, 201, 220, 223, 225, 227, 229, 239, 282, 295, 354, 355, 363, 373, 374, 376, 380, 382, 384, 393, 403, 408, 410, 411, 413, 441, 446, 456, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 496, 532, 534, 538, 541, 543, 553, 554, 557, 560, 604, 605, 682, 683, 684, 685, 686, 687, 689, 690, 751, 752, 836, 839, 842, 844, 854, 863, 886, 889, 897, 947, 949, 979, 980, 984, 985, 997, 1015, 1017, 1018, 1026, 1030, 1034, 1037], "attempt": [4, 54, 171, 196, 206, 256, 347, 362, 375, 390, 403, 415, 440, 444, 451, 462, 625, 682, 683, 687, 808, 835, 836, 837, 839, 841, 843, 844, 845, 871, 873, 891, 913, 914, 977, 978, 984, 997, 1007, 1029, 1034], "each": [4, 7, 8, 10, 11, 12, 14, 17, 20, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 55, 58, 60, 61, 70, 71, 73, 74, 75, 85, 86, 89, 90, 91, 92, 95, 96, 100, 103, 104, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 128, 130, 131, 132, 133, 134, 135, 145, 147, 149, 154, 156, 161, 164, 165, 169, 170, 171, 173, 176, 179, 186, 187, 189, 194, 198, 200, 201, 202, 204, 205, 208, 215, 218, 222, 229, 230, 233, 234, 235, 236, 237, 239, 240, 241, 243, 246, 249, 251, 255, 256, 257, 259, 261, 262, 264, 266, 267, 270, 271, 279, 281, 284, 286, 290, 292, 294, 297, 298, 300, 303, 304, 305, 306, 308, 309, 310, 313, 315, 316, 317, 319, 322, 323, 324, 327, 334, 338, 340, 342, 348, 349, 352, 353, 356, 358, 362, 363, 364, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 390, 394, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 420, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 513, 516, 517, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 701, 702, 704, 707, 713, 718, 721, 722, 723, 731, 732, 738, 739, 741, 743, 744, 746, 747, 751, 752, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 769, 771, 772, 773, 774, 776, 777, 778, 780, 781, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 878, 879, 880, 882, 883, 884, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 919, 924, 925, 930, 932, 933, 937, 949, 957, 958, 959, 962, 971, 973, 975, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 1005, 1007, 1011, 1013, 1014, 1015, 1016, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "sine": [4, 152, 157, 158, 167, 194, 206, 245, 253, 354, 372, 609, 788, 789, 980, 997], "cosin": [4, 40, 275, 281, 286, 368, 371, 390, 403, 408, 409, 435, 439, 444, 451, 529, 584, 585, 614, 690, 753, 754, 755, 758, 763, 764, 767, 771, 772, 773, 833, 834, 838, 865, 984, 997, 1018, 1032], "match": [4, 20, 37, 45, 95, 98, 102, 118, 167, 176, 178, 200, 219, 223, 232, 239, 338, 349, 371, 374, 378, 380, 403, 408, 410, 411, 424, 443, 458, 460, 502, 503, 509, 520, 525, 531, 536, 542, 545, 561, 562, 566, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 652, 658, 659, 679, 680, 693, 697, 698, 699, 707, 709, 713, 727, 771, 772, 773, 779, 833, 834, 838, 842, 856, 857, 858, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 893, 900, 906, 917, 949, 978, 980, 981, 983, 984, 1003, 1007, 1016, 1018, 1022, 1028, 1029, 1030, 1032, 1034, 1035, 1038], "togeth": [4, 12, 51, 60, 71, 121, 132, 152, 158, 170, 181, 222, 225, 239, 257, 309, 317, 337, 353, 358, 378, 380, 388, 389, 390, 397, 403, 410, 411, 418, 445, 447, 561, 562, 683, 709, 790, 804, 853, 854, 867, 977, 978, 982, 988, 991, 997, 998, 1005, 1008, 1010, 1028], "equival": [4, 14, 55, 57, 122, 128, 148, 152, 157, 170, 184, 218, 251, 270, 281, 308, 338, 349, 358, 362, 374, 382, 385, 389, 390, 403, 404, 405, 406, 407, 408, 410, 412, 413, 435, 437, 438, 439, 440, 441, 443, 444, 451, 463, 468, 503, 528, 535, 552, 555, 556, 557, 559, 582, 585, 607, 610, 613, 615, 618, 640, 641, 642, 646, 648, 652, 653, 660, 661, 662, 663, 666, 670, 671, 674, 677, 681, 682, 687, 702, 703, 716, 727, 734, 740, 741, 742, 754, 763, 772, 773, 788, 789, 793, 794, 798, 800, 824, 827, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 850, 856, 862, 863, 865, 868, 869, 870, 871, 873, 881, 883, 884, 917, 928, 967, 970, 975, 977, 978, 979, 981, 987, 991, 995, 996, 997, 1030, 1031, 1032, 1033, 1035, 1036], "importantli": [4, 13, 96, 171, 176, 303, 403], "jump": [4, 201, 303, 373, 376, 411, 872], "functiontransform": [4, 70, 117, 200, 218, 326, 459, 991, 1027, 1028, 1030, 1035, 1036, 1037], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 56, 61, 70, 75, 92, 101, 103, 105, 109, 112, 115, 117, 124, 125, 128, 132, 149, 155, 158, 160, 165, 173, 179, 180, 188, 189, 192, 200, 201, 208, 209, 210, 218, 236, 239, 242, 243, 249, 251, 256, 257, 258, 259, 260, 261, 262, 264, 265, 268, 275, 281, 286, 291, 294, 300, 303, 305, 308, 313, 330, 334, 347, 349, 352, 356, 362, 369, 370, 371, 376, 377, 378, 382, 383, 385, 388, 390, 401, 402, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 936, 937, 940, 941, 942, 943, 944, 945, 947, 948, 950, 951, 952, 953, 954, 955, 956, 962, 965, 966, 967, 968, 969, 971, 981, 984, 988, 989, 996, 997, 1002, 1007, 1012, 1014, 1016, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "lambda": [4, 7, 8, 10, 19, 56, 73, 124, 139, 180, 218, 261, 262, 307, 326, 399, 403, 408, 410, 411, 638, 639, 640, 641, 857, 869, 977, 991, 1011, 1030, 1036], "sin": [4, 13, 19, 39, 96, 113, 124, 125, 129, 131, 144, 152, 158, 159, 161, 179, 180, 184, 194, 201, 206, 223, 235, 252, 293, 304, 314, 341, 354, 355, 413, 510, 609, 693, 757, 1015], "pi": [4, 13, 34, 39, 40, 96, 105, 129, 131, 144, 152, 180, 184, 188, 194, 201, 223, 246, 247, 248, 251, 252, 275, 294, 314, 355, 393, 409, 413, 510, 511, 512, 609, 636, 975, 976, 977, 983, 1015], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 129, 131, 157, 167, 170, 201, 223, 261, 275, 317, 355, 380, 409, 411, 443, 445, 447, 482, 505, 585, 693, 713, 757, 786, 976, 991, 1005, 1017, 1018], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 57, 62, 69, 76, 86, 98, 100, 112, 125, 127, 129, 148, 152, 153, 157, 159, 167, 168, 170, 171, 173, 174, 184, 200, 201, 202, 204, 205, 206, 220, 225, 227, 239, 243, 247, 251, 261, 262, 263, 266, 269, 270, 300, 302, 304, 311, 314, 321, 328, 334, 338, 339, 342, 343, 344, 347, 348, 349, 358, 363, 376, 378, 381, 388, 390, 401, 403, 404, 408, 409, 410, 411, 413, 414, 431, 437, 438, 440, 441, 443, 444, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 484, 490, 494, 508, 518, 519, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 583, 584, 585, 588, 600, 603, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 684, 685, 686, 695, 697, 746, 778, 788, 790, 791, 792, 793, 794, 795, 797, 799, 801, 804, 808, 809, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 839, 840, 843, 844, 850, 851, 853, 856, 857, 858, 859, 860, 862, 863, 865, 869, 870, 871, 872, 873, 874, 878, 879, 880, 881, 882, 883, 884, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 913, 914, 930, 947, 955, 970, 975, 977, 978, 980, 981, 982, 988, 991, 994, 996, 997, 1012, 1014, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "expans": [4, 164, 315, 444, 868, 1031], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 119, 125, 130, 152, 157, 159, 171, 190, 202, 217, 297, 305, 342, 358, 362, 369, 379, 391, 403, 405, 412, 652, 653, 893, 894, 900, 975, 1014, 1028], "beyond": [4, 27, 201, 202, 362, 364, 375, 376, 388, 401, 410, 898, 978, 982, 991, 996, 1002, 1030], "pd": [4, 12, 25, 71, 72, 73, 112, 118, 119, 125, 129, 157, 164, 169, 170, 171, 172, 173, 179, 184, 189, 200, 204, 208, 218, 240, 243, 251, 259, 261, 262, 264, 272, 273, 308, 309, 310, 316, 317, 342, 347, 348, 381, 390, 404, 458, 460, 621, 622, 623, 624, 626, 771, 911, 913, 914, 970, 971, 988, 991, 1033, 1035, 1036, 1037], "hour_df": 4, "datafram": [4, 25, 70, 71, 72, 73, 112, 118, 122, 125, 129, 157, 164, 169, 170, 171, 172, 179, 184, 189, 204, 208, 218, 240, 243, 251, 259, 261, 262, 264, 272, 273, 308, 309, 310, 316, 317, 318, 342, 347, 348, 370, 371, 376, 378, 381, 390, 404, 427, 436, 437, 439, 441, 443, 458, 460, 461, 462, 476, 477, 478, 479, 483, 484, 485, 486, 490, 494, 495, 496, 498, 499, 504, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 560, 561, 562, 563, 564, 575, 576, 577, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 682, 683, 686, 790, 793, 794, 804, 819, 837, 842, 845, 849, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 891, 909, 936, 952, 955, 970, 971, 1002, 1016, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "arang": [4, 11, 13, 16, 40, 58, 60, 65, 73, 79, 80, 103, 106, 111, 121, 122, 123, 124, 126, 127, 130, 134, 145, 152, 154, 159, 160, 164, 165, 173, 184, 200, 203, 205, 209, 224, 232, 234, 256, 261, 264, 269, 272, 279, 281, 294, 297, 305, 316, 322, 323, 325, 327, 334, 341, 347, 349, 354, 355, 356, 358, 388, 400, 407, 411, 459, 538, 819, 868, 872, 976, 977, 985, 991, 995, 1012], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 58, 72, 80, 85, 95, 98, 105, 115, 120, 121, 130, 141, 147, 152, 154, 155, 156, 157, 158, 159, 161, 179, 191, 197, 213, 214, 216, 217, 222, 224, 226, 229, 234, 238, 250, 259, 285, 287, 294, 297, 299, 300, 304, 305, 306, 310, 313, 316, 317, 319, 327, 333, 334, 339, 340, 343, 344, 388, 400, 408, 410, 411, 439, 459, 578, 625, 819, 868, 872, 977, 991, 997, 1012, 1015, 1027], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 58, 62, 90, 96, 99, 106, 130, 176, 191, 216, 218, 221, 222, 223, 224, 225, 226, 232, 233, 237, 243, 281, 285, 298, 303, 304, 308, 309, 310, 313, 316, 318, 319, 334, 347, 348, 349, 358, 368, 371, 378, 381, 382, 390, 399, 404, 408, 411, 412, 419, 427, 436, 437, 439, 441, 443, 458, 460, 462, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 682, 683, 684, 685, 686, 837, 842, 845, 849, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 891, 971, 973, 977, 982, 984, 991, 992, 993, 1007, 1012, 1015, 1016, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1036, 1038], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 61, 62, 68, 94, 107, 130, 167, 194, 201, 206, 221, 223, 226, 229, 232, 233, 331, 334, 356, 370, 372, 376, 378, 385, 390, 403, 404, 408, 411, 413, 435, 446, 456, 458, 461, 482, 484, 485, 486, 487, 488, 494, 495, 496, 498, 504, 508, 527, 535, 543, 578, 580, 629, 637, 651, 666, 685, 731, 772, 814, 818, 822, 860, 909, 913, 914, 929, 944, 967, 968, 975, 977, 978, 981, 988, 992, 997, 1007, 1013, 1022, 1026, 1029, 1030, 1031, 1034, 1036], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 56, 57, 58, 59, 60, 62, 67, 80, 86, 91, 92, 97, 99, 100, 101, 102, 104, 113, 114, 118, 121, 128, 130, 131, 133, 141, 144, 152, 153, 154, 156, 158, 159, 160, 161, 169, 170, 176, 180, 183, 190, 192, 196, 197, 198, 201, 202, 203, 209, 212, 213, 214, 217, 221, 222, 223, 224, 225, 226, 229, 234, 235, 237, 246, 247, 248, 249, 250, 251, 252, 256, 262, 264, 275, 281, 284, 287, 288, 289, 290, 291, 292, 293, 297, 303, 305, 306, 308, 317, 324, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 347, 353, 354, 355, 405, 625, 695, 949, 975, 977, 1014], "color": [4, 7, 8, 9, 10, 11, 12, 16, 20, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 78, 79, 80, 81, 82, 86, 90, 91, 92, 95, 96, 97, 99, 102, 103, 104, 105, 111, 112, 113, 118, 121, 122, 123, 124, 127, 128, 129, 130, 132, 134, 138, 141, 152, 154, 155, 156, 157, 158, 159, 160, 161, 165, 167, 170, 172, 173, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 214, 217, 218, 222, 223, 224, 226, 229, 233, 234, 235, 237, 240, 246, 247, 248, 249, 250, 251, 252, 256, 260, 262, 264, 265, 266, 267, 268, 270, 271, 272, 274, 279, 283, 286, 287, 288, 289, 292, 293, 294, 297, 303, 304, 305, 307, 308, 309, 314, 324, 325, 327, 332, 333, 334, 335, 336, 338, 340, 341, 342, 343, 353, 354, 370, 371, 373, 384, 403, 410, 411, 441, 487, 488, 500, 577, 578, 772, 955, 995, 997, 1027, 1032, 1034], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 116, 124, 127, 130, 139, 152, 167, 176, 200, 221, 223, 228, 236, 239, 244, 262, 265, 270, 289, 292, 294, 302, 303, 311, 326, 334, 338, 340, 348, 349, 370, 377, 388, 390, 394, 401, 402, 403, 404, 407, 408, 410, 411, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 490, 492, 496, 503, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 755, 758, 788, 789, 790, 793, 794, 801, 802, 804, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 881, 882, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 935, 939, 970, 973, 978, 981, 983, 993, 996, 997, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "space": [4, 8, 10, 19, 31, 46, 48, 53, 57, 58, 60, 61, 63, 65, 70, 71, 74, 86, 95, 97, 104, 106, 117, 121, 125, 130, 146, 149, 152, 158, 176, 184, 201, 221, 222, 223, 225, 233, 234, 235, 239, 240, 247, 252, 269, 272, 273, 281, 290, 291, 305, 315, 338, 347, 348, 349, 356, 358, 362, 368, 371, 372, 373, 376, 383, 388, 389, 390, 400, 402, 403, 406, 408, 409, 410, 411, 413, 437, 441, 442, 443, 446, 456, 458, 459, 460, 461, 476, 477, 478, 492, 526, 528, 529, 532, 533, 534, 535, 537, 538, 543, 567, 576, 582, 583, 585, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 626, 627, 632, 634, 635, 636, 637, 682, 683, 684, 686, 687, 688, 690, 693, 790, 793, 794, 796, 804, 812, 823, 833, 834, 841, 842, 843, 844, 853, 858, 859, 865, 870, 885, 886, 887, 906, 934, 973, 974, 975, 976, 977, 979, 981, 982, 984, 985, 986, 987, 991, 992, 993, 994, 995, 996, 997, 1001, 1002, 1007, 1014, 1016, 1017, 1018, 1022, 1023, 1025, 1030, 1031, 1032, 1036, 1037, 1038], "akin": [4, 201, 390], "sort": [4, 8, 10, 12, 19, 20, 24, 60, 70, 109, 115, 122, 125, 131, 149, 179, 184, 200, 201, 218, 238, 261, 262, 265, 275, 293, 341, 347, 354, 355, 376, 380, 384, 385, 390, 407, 410, 411, 413, 528, 535, 549, 560, 575, 604, 611, 691, 706, 712, 722, 723, 731, 747, 776, 777, 780, 782, 790, 816, 828, 829, 830, 831, 832, 833, 834, 841, 843, 844, 845, 848, 858, 864, 866, 867, 870, 872, 874, 882, 895, 898, 930, 935, 977, 984, 987, 991, 1005, 1016, 1022, 1026, 1032, 1033, 1034, 1036, 1037], "analog": [4, 19, 127, 382, 410, 981, 982, 996, 1031], "clock": 4, "25th": [4, 239, 871], "back": [4, 100, 241, 363, 376, 378, 391, 397, 404, 411, 428, 437, 440, 441, 453, 476, 477, 478, 502, 503, 527, 528, 529, 532, 534, 535, 538, 575, 624, 652, 653, 660, 662, 670, 671, 672, 721, 858, 860, 861, 862, 866, 867, 868, 870, 871, 873, 885, 886, 893, 977, 981, 985, 1002, 1007, 1016, 1025, 1030, 1032, 1033, 1036], "natur": [4, 31, 118, 125, 159, 170, 171, 176, 184, 200, 201, 217, 218, 225, 239, 246, 252, 270, 347, 376, 378, 390, 408, 410, 411, 414, 438, 444, 451, 545, 584, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 686, 698, 734, 748, 750, 835, 836, 837, 839, 841, 843, 844, 845, 872, 928, 977, 978, 980, 981, 984, 986, 991, 995, 1001, 1004, 1022, 1030], "sp": [4, 170, 971, 1015], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 56, 57, 59, 60, 61, 65, 71, 72, 74, 86, 90, 91, 92, 100, 101, 102, 112, 114, 115, 121, 122, 128, 130, 131, 133, 134, 139, 141, 147, 149, 153, 154, 155, 156, 160, 176, 183, 185, 190, 191, 192, 193, 195, 197, 198, 207, 209, 211, 212, 213, 214, 216, 217, 221, 222, 223, 225, 226, 234, 235, 237, 241, 247, 249, 250, 251, 252, 255, 256, 258, 259, 260, 261, 264, 266, 270, 272, 281, 284, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 300, 303, 304, 305, 308, 313, 314, 315, 316, 317, 318, 319, 324, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 347, 353, 354, 355, 362, 363, 370, 371, 373, 374, 376, 377, 378, 379, 381, 384, 385, 388, 393, 394, 400, 401, 403, 404, 405, 406, 407, 408, 410, 412, 416, 431, 436, 437, 440, 441, 443, 453, 462, 469, 517, 522, 528, 532, 534, 535, 541, 543, 544, 584, 601, 602, 604, 625, 633, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 666, 667, 673, 679, 680, 682, 683, 686, 687, 702, 708, 709, 712, 724, 728, 734, 735, 751, 752, 790, 804, 812, 818, 828, 829, 830, 831, 832, 833, 834, 840, 842, 849, 864, 866, 867, 868, 872, 888, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 908, 913, 914, 944, 970, 973, 974, 976, 977, 978, 979, 981, 983, 984, 986, 988, 991, 993, 995, 996, 997, 1001, 1005, 1007, 1011, 1012, 1014, 1015, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1038], "colorbar": [4, 11, 30, 40, 95, 106, 120, 128, 147, 153, 155, 156, 158, 171, 221, 233, 250, 272, 303, 334, 691, 1034], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 80, 98, 316, 528, 970, 981, 991], "166": [4, 300, 382, 981, 1022], "simpl": [4, 16, 27, 55, 71, 75, 78, 85, 86, 95, 118, 123, 159, 167, 171, 184, 201, 217, 242, 262, 282, 295, 317, 330, 347, 349, 353, 358, 374, 376, 378, 379, 380, 381, 383, 388, 389, 390, 391, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 417, 424, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 456, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 508, 516, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 779, 781, 788, 789, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 937, 973, 975, 976, 977, 978, 980, 981, 984, 991, 993, 995, 997, 1002, 1005, 1007, 1016, 1019, 1022], "wors": [4, 86, 112, 153, 171, 206, 261, 269, 308, 358, 401, 403, 413, 426, 459, 476, 477, 478, 546, 548, 550, 552, 554, 556, 559, 562, 564, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 663, 664, 666, 667, 672, 673, 674, 699, 715, 716, 717, 721, 778, 826, 827, 836, 844, 851, 894, 896, 899, 902, 904, 981, 991, 1031], "further": [4, 25, 42, 71, 78, 86, 95, 115, 121, 123, 148, 152, 157, 170, 172, 179, 184, 221, 226, 236, 258, 261, 262, 268, 318, 334, 348, 356, 362, 376, 388, 390, 402, 403, 405, 408, 410, 411, 413, 446, 456, 509, 526, 529, 576, 608, 616, 622, 652, 653, 660, 662, 670, 671, 672, 685, 689, 730, 767, 771, 774, 783, 784, 829, 835, 836, 843, 844, 871, 873, 893, 895, 898, 930, 980, 981, 983, 984, 985, 987, 991, 995, 996, 1014, 1016, 1031, 1035], "analyz": [4, 7, 17, 184, 263, 270, 318, 347, 349, 381, 382, 403, 411, 497, 582, 583, 585, 781, 978, 981, 988, 989, 997, 1016, 1022, 1031], "reason": [4, 8, 12, 42, 53, 70, 125, 149, 170, 171, 176, 200, 201, 208, 218, 229, 233, 234, 236, 239, 258, 261, 262, 267, 281, 304, 308, 348, 349, 358, 362, 363, 364, 371, 375, 376, 378, 380, 384, 388, 389, 390, 391, 403, 404, 405, 408, 410, 411, 502, 526, 568, 632, 640, 646, 648, 666, 681, 686, 756, 790, 804, 837, 842, 849, 868, 890, 970, 971, 976, 977, 978, 981, 983, 984, 985, 987, 991, 995, 996, 1005, 1016, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "disappoint": 4, "outcom": [4, 118, 170, 390, 410, 563, 652, 703, 735, 785, 821, 888, 889, 890, 895, 898, 977, 981, 997, 1004, 1016, 1026, 1030, 1032], "altern": [4, 26, 71, 86, 119, 120, 126, 132, 172, 184, 200, 218, 230, 249, 252, 270, 313, 338, 347, 348, 349, 358, 371, 379, 380, 382, 388, 390, 391, 393, 398, 400, 401, 403, 404, 405, 407, 408, 410, 411, 413, 435, 436, 439, 440, 441, 446, 452, 457, 493, 532, 534, 535, 541, 547, 548, 551, 552, 553, 554, 558, 559, 560, 576, 582, 583, 585, 611, 614, 637, 686, 700, 702, 764, 767, 771, 774, 792, 822, 857, 863, 866, 879, 886, 888, 901, 902, 903, 904, 948, 949, 975, 977, 978, 980, 981, 984, 985, 989, 991, 993, 994, 996, 997, 1002, 1011, 1016, 1018, 1027, 1029, 1035, 1036], "larger": [4, 7, 27, 37, 39, 42, 47, 55, 80, 82, 92, 105, 115, 126, 153, 158, 159, 165, 170, 171, 176, 180, 184, 215, 216, 217, 226, 233, 235, 246, 252, 262, 264, 270, 271, 281, 283, 297, 298, 300, 303, 334, 338, 348, 349, 369, 371, 376, 382, 388, 390, 400, 401, 403, 404, 405, 407, 408, 410, 411, 413, 434, 437, 443, 444, 446, 448, 450, 509, 521, 535, 538, 555, 556, 557, 561, 562, 576, 583, 637, 646, 666, 667, 668, 669, 673, 681, 686, 698, 713, 729, 788, 838, 839, 870, 872, 873, 874, 882, 887, 929, 930, 952, 955, 973, 974, 977, 978, 980, 981, 984, 985, 989, 991, 995, 996, 1014, 1016, 1026, 1027, 1030, 1031, 1032, 1035, 1036], "periodic_spline_transform": 4, "n_spline": [4, 872], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 53, 54, 55, 56, 62, 97, 100, 105, 116, 121, 122, 124, 127, 141, 149, 153, 159, 160, 173, 179, 200, 201, 208, 211, 218, 221, 235, 236, 237, 239, 255, 261, 262, 273, 286, 288, 292, 306, 307, 310, 315, 316, 323, 326, 332, 334, 335, 338, 339, 341, 347, 348, 371, 373, 376, 378, 383, 385, 390, 394, 403, 407, 410, 413, 414, 415, 419, 420, 421, 422, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 497, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 701, 702, 703, 705, 706, 707, 708, 710, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 727, 728, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 882, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 910, 912, 913, 914, 916, 917, 918, 919, 922, 924, 929, 930, 933, 934, 935, 936, 940, 941, 944, 947, 949, 950, 952, 955, 956, 962, 965, 966, 968, 970, 977, 981, 991, 994, 997, 1007, 1011, 1016, 1018, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "degre": [4, 16, 34, 97, 114, 157, 164, 169, 171, 176, 179, 184, 188, 189, 201, 204, 235, 241, 246, 247, 248, 251, 252, 261, 275, 300, 315, 316, 331, 338, 341, 408, 412, 440, 446, 492, 529, 535, 633, 634, 637, 650, 768, 788, 790, 839, 868, 872, 895, 896, 897, 898, 899, 973, 974, 976, 977, 978, 979, 981, 982, 984, 987, 988, 991, 994, 996, 1014, 1025, 1031, 1035, 1036], "n_knot": [4, 201, 316, 872, 991, 1035], "include_bia": [4, 179, 275, 868, 872, 1036], "knot": [4, 201, 316, 872, 991, 1035], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 55, 80, 81, 96, 105, 113, 123, 125, 152, 153, 155, 156, 157, 158, 159, 161, 171, 179, 180, 182, 184, 190, 194, 200, 201, 202, 206, 210, 211, 212, 213, 214, 218, 226, 229, 232, 233, 235, 237, 250, 261, 263, 264, 268, 269, 270, 271, 275, 286, 287, 293, 294, 304, 306, 317, 318, 333, 334, 337, 339, 340, 342, 343, 344, 625, 626, 796, 817, 833, 834, 1015], "again": [4, 20, 67, 72, 125, 156, 158, 160, 170, 225, 262, 347, 358, 380, 385, 390, 391, 403, 404, 405, 410, 411, 466, 561, 562, 628, 641, 645, 647, 649, 655, 657, 659, 686, 970, 977, 981, 995, 1019, 1022, 1030], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 55, 58, 60, 61, 66, 70, 74, 75, 80, 95, 96, 98, 101, 113, 118, 119, 120, 121, 122, 125, 126, 127, 130, 131, 141, 145, 147, 153, 154, 156, 158, 159, 164, 165, 167, 171, 172, 188, 189, 200, 202, 207, 209, 212, 213, 214, 215, 216, 220, 222, 224, 227, 229, 232, 233, 234, 235, 236, 238, 239, 246, 248, 250, 251, 252, 259, 261, 263, 264, 267, 268, 270, 271, 281, 286, 287, 291, 294, 297, 299, 305, 306, 313, 315, 318, 319, 324, 325, 327, 331, 333, 334, 337, 338, 339, 340, 343, 344, 347, 348, 356, 362, 369, 370, 371, 376, 378, 390, 400, 401, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 421, 422, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 915, 918, 919, 924, 928, 930, 932, 935, 943, 945, 950, 952, 956, 957, 958, 959, 960, 961, 962, 971, 976, 977, 981, 982, 983, 984, 985, 987, 991, 992, 993, 994, 995, 996, 997, 1012, 1013, 1015, 1016, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1036, 1038], "concat": [4, 164, 169, 189, 218, 866], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 58, 80, 82, 89, 95, 98, 102, 106, 114, 120, 121, 141, 147, 155, 156, 171, 179, 183, 184, 191, 192, 209, 212, 213, 214, 216, 222, 223, 224, 233, 234, 238, 255, 256, 281, 285, 287, 289, 290, 292, 294, 297, 299, 300, 303, 305, 322, 323, 327, 330, 331, 332, 333, 334, 335, 336, 339, 340, 343, 344, 353, 691, 1012, 1013], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 60, 61, 67, 80, 82, 89, 95, 98, 102, 114, 120, 121, 141, 147, 155, 156, 171, 183, 192, 209, 212, 213, 214, 216, 222, 223, 224, 230, 233, 234, 238, 243, 255, 256, 281, 284, 285, 287, 291, 294, 297, 299, 300, 303, 305, 315, 318, 322, 323, 327, 330, 331, 332, 333, 334, 335, 336, 340, 343, 344, 353, 373, 404, 691, 906, 981, 991, 997, 1012, 1013], "tab20b": 4, "stai": [4, 26, 37, 105, 170, 348, 375, 376, 380, 390, 391, 986, 1028], "midnight": 4, "fewer": [4, 13, 26, 55, 112, 121, 123, 200, 362, 377, 403, 412, 413, 442, 455, 547, 588, 690, 823, 934, 977, 982, 984, 1027, 1028, 1029], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 55, 62, 78, 85, 86, 104, 112, 118, 119, 126, 132, 144, 145, 146, 148, 149, 157, 165, 169, 170, 171, 172, 173, 176, 184, 200, 201, 218, 236, 240, 246, 252, 258, 259, 264, 268, 269, 271, 290, 303, 309, 310, 313, 316, 319, 323, 334, 338, 347, 348, 349, 358, 362, 363, 364, 371, 372, 374, 376, 378, 380, 381, 382, 384, 388, 390, 391, 393, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 437, 438, 440, 444, 450, 451, 454, 462, 490, 497, 515, 518, 526, 528, 533, 537, 543, 545, 555, 556, 560, 561, 582, 583, 585, 587, 598, 605, 621, 624, 643, 652, 666, 668, 670, 672, 681, 682, 686, 689, 718, 721, 739, 751, 752, 756, 778, 785, 788, 789, 793, 794, 809, 821, 822, 835, 836, 837, 839, 841, 842, 843, 844, 845, 868, 870, 878, 879, 881, 882, 883, 884, 891, 929, 930, 932, 944, 949, 970, 971, 975, 976, 977, 978, 979, 980, 981, 982, 984, 987, 988, 989, 994, 995, 996, 997, 1000, 1001, 1002, 1005, 1012, 1014, 1016, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 149, 171, 373], "132": [4, 8, 13, 56, 410], "013": [4, 269, 348], "successfulli": [4, 13, 307, 375, 380, 403, 411, 995], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 72, 78, 115, 123, 125, 127, 130, 146, 170, 179, 180, 184, 198, 204, 205, 208, 231, 233, 236, 239, 262, 268, 290, 305, 308, 309, 318, 348, 349, 358, 368, 370, 373, 376, 382, 388, 390, 401, 402, 403, 405, 407, 408, 410, 411, 412, 414, 438, 439, 444, 451, 454, 487, 528, 538, 543, 549, 550, 551, 552, 557, 558, 559, 567, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 604, 621, 637, 646, 666, 667, 668, 669, 681, 686, 689, 774, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 820, 862, 863, 870, 882, 885, 886, 893, 894, 901, 902, 903, 904, 970, 973, 975, 976, 977, 978, 981, 984, 993, 994, 996, 998, 1007, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1036, 1038], "choic": [4, 7, 40, 46, 55, 65, 70, 78, 103, 152, 153, 159, 164, 189, 201, 239, 255, 259, 261, 264, 286, 310, 315, 347, 348, 358, 362, 374, 378, 381, 388, 393, 403, 405, 407, 409, 410, 412, 413, 446, 456, 465, 466, 467, 468, 469, 470, 472, 532, 534, 535, 541, 553, 632, 641, 642, 650, 652, 653, 655, 663, 674, 686, 699, 822, 835, 836, 841, 843, 844, 870, 873, 882, 884, 893, 894, 917, 970, 975, 977, 978, 979, 980, 981, 982, 987, 989, 994, 995, 996, 997, 1029, 1032, 1033, 1037, 1038], "arbitrari": [4, 55, 86, 95, 96, 97, 117, 159, 179, 200, 217, 218, 259, 303, 307, 309, 315, 347, 356, 363, 376, 388, 390, 404, 407, 408, 410, 411, 415, 440, 444, 449, 451, 459, 526, 527, 553, 554, 575, 633, 642, 663, 674, 682, 782, 791, 792, 797, 799, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 857, 859, 872, 970, 972, 973, 977, 978, 981, 984, 991, 1002, 1016, 1022, 1023, 1026, 1028, 1029, 1030, 1032, 1036, 1038], "held": [4, 8, 71, 103, 126, 172, 208, 248, 264, 269, 279, 410, 553, 554, 555, 556, 695, 790, 793, 794, 804, 850, 851, 863, 970, 971, 980, 989, 1016], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 55, 58, 60, 64, 67, 80, 81, 85, 90, 91, 92, 94, 98, 100, 101, 107, 112, 114, 118, 121, 122, 130, 149, 154, 159, 160, 167, 170, 171, 172, 179, 183, 189, 192, 194, 196, 198, 200, 201, 202, 204, 206, 209, 212, 213, 217, 218, 221, 222, 223, 224, 225, 229, 232, 234, 248, 252, 255, 258, 262, 263, 268, 270, 271, 279, 281, 284, 285, 286, 287, 288, 289, 290, 292, 294, 297, 304, 305, 307, 309, 322, 323, 327, 330, 333, 334, 335, 336, 338, 339, 343, 344, 347, 348, 349, 353, 358, 362, 363, 364, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 384, 388, 390, 391, 402, 403, 408, 409, 410, 411, 414, 415, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 454, 455, 463, 466, 468, 492, 498, 506, 508, 509, 513, 516, 519, 524, 527, 529, 535, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 604, 605, 622, 625, 626, 627, 631, 632, 633, 638, 639, 645, 649, 651, 664, 665, 667, 669, 670, 672, 673, 676, 677, 682, 683, 684, 685, 686, 687, 688, 695, 700, 701, 704, 707, 711, 716, 718, 724, 729, 730, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 757, 772, 773, 788, 789, 790, 804, 814, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 850, 851, 858, 863, 872, 887, 888, 889, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 911, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 991, 993, 994, 996, 997, 1001, 1002, 1011, 1014, 1015, 1016, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 117, 303], "insight": [4, 7, 170, 171, 201, 202, 218, 299, 303, 347, 356, 401, 790, 793, 794, 804, 816, 988, 997, 1005], "last_hour": 4, "slice": [4, 17, 121, 209, 223, 226, 234, 289, 292, 316, 317, 330, 371, 377, 378, 385, 404, 458, 461, 487, 488, 502, 540, 633, 767, 771, 774, 909, 933, 934, 952, 1034, 1036], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 57, 60, 67, 75, 95, 98, 106, 112, 121, 122, 129, 132, 161, 170, 171, 173, 194, 199, 215, 216, 221, 222, 223, 238, 249, 257, 300, 303, 305, 313, 315, 322, 323, 327, 341, 342, 353], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 73, 75, 78, 79, 80, 81, 85, 86, 91, 92, 97, 99, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 139, 145, 152, 153, 157, 158, 159, 160, 161, 164, 167, 170, 173, 176, 179, 180, 182, 183, 184, 188, 189, 190, 194, 200, 201, 202, 203, 206, 207, 208, 209, 210, 215, 217, 218, 222, 223, 224, 229, 234, 235, 237, 239, 240, 248, 255, 256, 259, 260, 262, 263, 264, 265, 267, 270, 271, 272, 273, 274, 275, 279, 286, 288, 290, 293, 298, 300, 303, 304, 308, 313, 314, 317, 321, 325, 326, 327, 328, 338, 341, 342, 347, 348, 352, 353, 354, 355, 364, 368, 369, 370, 375, 376, 378, 381, 385, 390, 391, 400, 401, 402, 413, 414, 420, 421, 425, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 456, 459, 463, 481, 482, 483, 487, 488, 489, 490, 496, 497, 502, 503, 506, 508, 509, 513, 516, 517, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 563, 564, 586, 587, 588, 589, 590, 592, 593, 594, 598, 599, 600, 603, 604, 625, 652, 653, 660, 661, 662, 667, 668, 669, 670, 671, 672, 691, 692, 694, 696, 697, 698, 699, 701, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 718, 719, 720, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 747, 748, 749, 750, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 840, 842, 843, 850, 851, 853, 857, 860, 861, 864, 866, 867, 877, 888, 889, 890, 893, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 913, 918, 919, 944, 945, 952, 970, 977, 978, 982, 983, 984, 985, 987, 988, 991, 995, 996, 997, 1001, 1003, 1007, 1012, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "actual": [4, 27, 46, 60, 75, 86, 118, 149, 176, 189, 200, 204, 208, 248, 257, 264, 349, 358, 362, 364, 373, 374, 376, 378, 381, 382, 388, 389, 390, 401, 403, 408, 411, 412, 428, 503, 509, 510, 521, 529, 532, 534, 541, 556, 557, 638, 639, 642, 652, 653, 660, 661, 662, 663, 664, 666, 668, 670, 671, 672, 674, 681, 685, 689, 695, 698, 703, 709, 715, 716, 717, 778, 788, 793, 794, 809, 810, 839, 870, 893, 899, 921, 922, 923, 956, 973, 980, 981, 984, 988, 989, 1029, 1030, 1036, 1037, 1038], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 56, 80, 81, 92, 95, 121, 144, 152, 153, 157, 158, 161, 165, 170, 171, 179, 188, 189, 190, 192, 196, 200, 201, 202, 206, 209, 212, 213, 218, 229, 239, 246, 249, 286, 297, 298, 300, 327, 344, 353, 354, 355, 376, 393, 396, 403, 410, 413, 549, 550, 625, 987, 988, 997, 1001, 1007], "One": [4, 9, 12, 24, 30, 49, 55, 91, 100, 103, 120, 122, 125, 128, 167, 170, 173, 178, 204, 215, 219, 229, 240, 251, 261, 268, 271, 290, 304, 329, 331, 345, 348, 362, 373, 376, 389, 390, 403, 406, 408, 409, 410, 411, 414, 438, 443, 466, 468, 472, 506, 560, 625, 633, 652, 660, 662, 667, 669, 670, 671, 781, 797, 798, 821, 822, 823, 854, 855, 866, 897, 944, 971, 973, 977, 978, 979, 980, 981, 982, 984, 985, 988, 989, 991, 996, 1003, 1018, 1026, 1028, 1035, 1037], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 61, 72, 73, 75, 78, 79, 80, 81, 85, 86, 90, 97, 99, 103, 104, 105, 111, 112, 113, 114, 115, 116, 118, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 145, 152, 153, 157, 158, 159, 160, 161, 170, 171, 176, 179, 180, 182, 185, 188, 189, 190, 194, 200, 201, 202, 203, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 224, 232, 233, 234, 235, 237, 240, 248, 256, 258, 260, 261, 263, 264, 265, 266, 268, 270, 271, 273, 274, 275, 284, 286, 287, 288, 293, 298, 304, 308, 314, 317, 324, 333, 336, 338, 341, 347, 352, 353, 354, 355, 694, 1012], "draw": [4, 7, 16, 60, 161, 170, 196, 240, 263, 268, 334, 383, 406, 408, 409, 410, 549, 550, 551, 552, 557, 558, 559, 560, 605, 628, 695, 796, 812, 905, 907, 980, 1001, 1010, 1035, 1036], "conclus": [4, 100, 170, 172, 200, 202, 261, 263, 358, 410, 1010], "abov": [4, 25, 26, 37, 44, 66, 70, 114, 117, 118, 123, 125, 135, 148, 149, 170, 171, 186, 200, 202, 206, 211, 233, 236, 237, 261, 267, 286, 305, 308, 309, 314, 316, 348, 349, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 378, 380, 382, 388, 390, 391, 403, 404, 405, 407, 408, 409, 411, 413, 435, 439, 458, 461, 483, 489, 490, 491, 517, 584, 628, 698, 748, 790, 794, 802, 804, 814, 856, 857, 870, 876, 882, 890, 944, 970, 971, 973, 975, 977, 978, 981, 984, 986, 988, 991, 995, 996, 997, 1002, 1007, 1008, 1014, 1015, 1016, 1028], "problemat": [4, 257, 404, 971, 1030], "captur": [4, 9, 12, 37, 39, 86, 125, 129, 144, 157, 170, 179, 184, 200, 204, 252, 314, 334, 338, 384, 403, 410, 411, 412, 565, 582, 583, 585, 839, 948, 981, 986, 994, 998, 1014, 1034], "big": [4, 44, 60, 62, 205, 222, 239, 252, 363, 376, 382, 391, 405, 411, 415, 532, 555, 556, 558, 559, 796, 817, 828, 829, 830, 831, 832, 1002, 1005, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "goe": [4, 37, 117, 356, 376, 410, 465, 466, 472, 551, 552, 558, 559, 560, 901, 902, 903, 904, 991, 995], "artifact": [4, 13, 46, 47, 303, 364, 380], "discontinu": [4, 388], "fail": [4, 54, 66, 96, 103, 160, 161, 179, 184, 204, 236, 261, 313, 363, 374, 376, 378, 379, 384, 391, 393, 406, 407, 434, 466, 468, 670, 671, 672, 850, 851, 924, 970, 978, 1022, 1023, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "intra": [4, 582, 585, 783, 784], "variat": [4, 12, 37, 129, 149, 157, 158, 167, 170, 205, 245, 247, 252, 253, 258, 279, 314, 334, 373, 407, 408, 437, 441, 453, 530, 637, 666, 668, 669, 788, 789, 808, 809, 811, 970, 981, 991, 994, 997, 1001, 1012, 1014, 1017, 1018, 1025, 1027, 1028], "harmon": [4, 37, 268, 348, 403, 529, 535, 722, 723, 729, 776, 786, 981], "phase": [4, 184, 194, 362, 621, 973, 978, 984, 1005, 1030, 1032], "potenti": [4, 55, 78, 165, 169, 171, 179, 287, 288, 297, 319, 338, 349, 362, 363, 390, 393, 394, 403, 407, 410, 411, 462, 476, 477, 478, 479, 490, 518, 543, 551, 552, 555, 556, 558, 559, 567, 600, 605, 628, 756, 883, 884, 891, 901, 902, 903, 904, 987, 995, 997, 1001, 1016, 1025, 1032, 1033, 1036], "fix": [4, 8, 20, 25, 34, 46, 71, 105, 117, 118, 121, 152, 153, 157, 160, 170, 184, 202, 218, 239, 252, 264, 297, 313, 314, 315, 316, 317, 318, 319, 348, 362, 363, 370, 372, 374, 375, 376, 378, 379, 384, 388, 390, 391, 394, 403, 404, 407, 408, 410, 411, 413, 446, 456, 466, 498, 506, 525, 531, 534, 536, 542, 543, 553, 554, 558, 559, 582, 585, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 624, 647, 657, 664, 678, 681, 685, 689, 701, 778, 788, 804, 811, 835, 836, 838, 841, 843, 844, 860, 863, 877, 901, 902, 930, 948, 970, 977, 980, 981, 984, 991, 1002, 1004, 1016, 1020, 1021, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "two": [4, 7, 9, 11, 14, 20, 24, 26, 30, 34, 37, 39, 40, 43, 55, 60, 64, 70, 71, 75, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 104, 110, 112, 113, 120, 121, 122, 125, 128, 129, 130, 133, 136, 146, 149, 152, 153, 154, 155, 158, 159, 164, 165, 167, 170, 171, 172, 179, 183, 184, 188, 189, 190, 191, 196, 200, 201, 202, 208, 209, 212, 214, 217, 218, 223, 225, 226, 229, 234, 236, 237, 239, 246, 247, 248, 250, 251, 252, 256, 258, 262, 268, 284, 286, 287, 289, 290, 292, 294, 303, 305, 308, 313, 314, 316, 317, 324, 330, 331, 333, 334, 335, 336, 338, 343, 347, 348, 349, 353, 358, 369, 370, 371, 372, 373, 374, 376, 378, 380, 382, 383, 384, 388, 390, 391, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 435, 436, 437, 438, 439, 441, 444, 445, 446, 447, 451, 453, 458, 463, 464, 465, 466, 467, 468, 469, 470, 482, 484, 485, 486, 487, 488, 490, 492, 494, 495, 496, 497, 498, 499, 501, 504, 508, 513, 516, 530, 532, 534, 538, 541, 543, 544, 547, 554, 564, 575, 578, 584, 585, 586, 589, 590, 592, 593, 594, 596, 597, 600, 601, 602, 604, 605, 614, 615, 618, 622, 625, 626, 633, 637, 639, 664, 665, 667, 686, 693, 697, 698, 699, 706, 709, 710, 713, 715, 716, 717, 724, 725, 728, 729, 731, 734, 736, 747, 748, 750, 756, 757, 764, 767, 770, 771, 772, 773, 774, 778, 779, 785, 786, 787, 788, 822, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 850, 851, 857, 858, 865, 866, 867, 868, 887, 888, 889, 893, 894, 901, 903, 904, 944, 960, 961, 967, 970, 971, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 1007, 1011, 1014, 1015, 1016, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "onc": [4, 8, 50, 146, 149, 152, 222, 236, 239, 259, 262, 281, 309, 313, 317, 347, 349, 356, 358, 362, 364, 370, 371, 376, 380, 381, 382, 383, 384, 389, 390, 391, 403, 404, 406, 407, 408, 410, 411, 412, 413, 443, 445, 447, 466, 502, 503, 532, 538, 545, 553, 554, 584, 585, 591, 605, 613, 621, 641, 645, 647, 649, 655, 657, 659, 660, 661, 662, 670, 671, 672, 691, 706, 710, 712, 729, 774, 791, 795, 798, 808, 828, 829, 830, 831, 832, 905, 977, 978, 984, 991, 995, 996, 997, 1007, 1016, 1019, 1022, 1030, 1032, 1033, 1034, 1035], "specif": [4, 11, 12, 20, 27, 44, 55, 62, 65, 70, 72, 118, 132, 157, 160, 170, 171, 176, 204, 218, 256, 261, 303, 313, 314, 318, 338, 347, 348, 349, 358, 362, 363, 371, 376, 379, 381, 382, 384, 388, 390, 393, 399, 402, 403, 404, 407, 408, 410, 411, 412, 413, 490, 497, 528, 545, 551, 558, 561, 562, 563, 564, 568, 582, 585, 587, 591, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 619, 634, 637, 640, 641, 646, 652, 666, 681, 691, 693, 706, 707, 739, 790, 791, 792, 797, 798, 799, 804, 816, 829, 922, 924, 925, 944, 957, 958, 959, 975, 977, 978, 980, 981, 983, 984, 986, 988, 991, 995, 997, 998, 999, 1000, 1016, 1018, 1022, 1026, 1030, 1031, 1032, 1033, 1036, 1037], "furthermor": [4, 37, 118, 158, 171, 172, 239, 240, 242, 281, 347, 348, 362, 364, 383, 403, 408, 410, 411, 556, 584, 600, 613, 698, 729, 739, 748, 750, 786, 893, 977, 989, 1025, 1029], "enforc": [4, 12, 53, 95, 157, 194, 290, 362, 376, 405, 408, 410, 502, 521, 525, 531, 533, 536, 537, 539, 540, 542, 555, 556, 872, 913, 914, 971, 978, 1024, 1030, 1032, 1034, 1038], "behav": [4, 12, 48, 52, 57, 204, 256, 303, 315, 334, 358, 376, 382, 388, 389, 403, 407, 873, 977, 991, 996, 998, 1002, 1016, 1022, 1029, 1031, 1035, 1036], "similarli": [4, 12, 37, 55, 92, 128, 171, 173, 184, 189, 200, 230, 239, 261, 297, 303, 319, 334, 358, 363, 372, 374, 378, 381, 390, 400, 406, 407, 411, 976, 978, 979, 981, 988, 995, 996, 998, 1007, 1011, 1030, 1036, 1038], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 56, 58, 115, 146, 149, 165, 171, 172, 183, 184, 231, 236, 239, 257, 259, 270, 272, 273, 292, 313, 327, 330, 331, 337, 338, 347, 348, 349, 361, 362, 363, 370, 371, 373, 374, 375, 376, 378, 380, 381, 382, 384, 385, 388, 390, 393, 394, 400, 401, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 417, 427, 428, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 456, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 482, 485, 486, 489, 490, 491, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 604, 605, 614, 621, 622, 623, 624, 626, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 701, 714, 722, 723, 731, 764, 767, 771, 772, 773, 774, 776, 777, 780, 781, 782, 783, 784, 788, 789, 790, 792, 793, 794, 795, 796, 797, 799, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 882, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 913, 914, 916, 924, 925, 929, 930, 937, 938, 939, 940, 949, 950, 951, 952, 955, 965, 966, 970, 971, 977, 978, 981, 983, 984, 987, 989, 991, 995, 996, 997, 1002, 1004, 1007, 1014, 1015, 1016, 1018, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "shorter": [4, 158, 249, 388, 403, 408, 444, 451, 557, 691, 983, 987, 1016, 1033], "necessarili": [4, 31, 72, 98, 170, 200, 208, 218, 234, 235, 247, 305, 347, 348, 370, 380, 401, 403, 410, 621, 841, 843, 844, 845, 975, 978, 980, 981], "59": [4, 42, 98, 176, 184, 218, 300, 315, 320, 339, 373, 382, 404, 504, 981, 1022], "37": [4, 184, 264, 322, 356, 371, 410, 518, 710, 873, 991, 1022], "creat": [4, 5, 8, 11, 16, 20, 21, 26, 27, 30, 32, 37, 39, 41, 43, 44, 46, 49, 52, 58, 60, 62, 71, 72, 80, 86, 90, 97, 100, 114, 117, 121, 122, 125, 128, 131, 147, 148, 152, 154, 157, 158, 159, 161, 165, 169, 171, 179, 181, 183, 186, 196, 201, 202, 212, 213, 223, 234, 236, 239, 240, 242, 251, 256, 257, 259, 261, 271, 279, 289, 291, 292, 305, 307, 308, 313, 316, 317, 327, 330, 331, 335, 336, 339, 342, 343, 344, 349, 352, 354, 355, 358, 363, 371, 372, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 389, 390, 393, 401, 403, 404, 407, 409, 410, 411, 413, 432, 445, 447, 459, 460, 493, 509, 510, 511, 512, 540, 547, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 582, 583, 585, 591, 622, 624, 625, 626, 627, 691, 692, 694, 695, 696, 775, 782, 790, 792, 796, 800, 804, 808, 812, 814, 815, 823, 854, 866, 895, 898, 901, 902, 903, 904, 908, 911, 933, 934, 940, 949, 954, 966, 971, 977, 980, 981, 982, 984, 988, 991, 992, 993, 995, 996, 997, 1001, 1002, 1005, 1012, 1014, 1015, 1019, 1022, 1023, 1025, 1028, 1032, 1035, 1036, 1037, 1038], "turn": [4, 32, 78, 164, 165, 170, 184, 215, 216, 234, 261, 285, 349, 362, 364, 371, 388, 390, 391, 402, 403, 404, 406, 408, 411, 412, 413, 575, 576, 583, 601, 602, 822, 826, 895, 898, 916, 971, 975, 983, 986, 991, 1005, 1016, 1027, 1029, 1030, 1035], "downstream": [4, 80, 310, 349, 411, 525, 528, 531, 535, 536, 600, 866, 991, 1032], "freedom": [4, 97, 157, 188, 189, 191, 261, 535, 650, 788, 977, 1025], "underfit": [4, 125, 152, 167, 172, 204, 254, 276, 277, 297, 309, 342, 410, 651, 790, 793, 794, 804, 815, 816, 853, 868, 976, 977], "approxim": [4, 5, 27, 33, 46, 53, 80, 99, 100, 105, 116, 124, 125, 149, 153, 170, 177, 180, 196, 200, 201, 214, 218, 228, 229, 232, 235, 244, 252, 261, 266, 275, 282, 290, 295, 303, 305, 306, 308, 313, 316, 347, 349, 354, 355, 358, 365, 368, 373, 385, 388, 390, 400, 401, 404, 406, 407, 408, 410, 413, 415, 416, 417, 427, 443, 463, 464, 467, 468, 469, 470, 476, 477, 478, 485, 490, 496, 515, 518, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 553, 554, 576, 583, 604, 605, 613, 632, 633, 634, 635, 636, 651, 652, 653, 666, 668, 670, 671, 673, 681, 686, 751, 752, 757, 788, 791, 808, 814, 818, 819, 833, 834, 837, 841, 843, 844, 845, 849, 853, 854, 859, 863, 865, 866, 870, 882, 893, 898, 899, 929, 930, 955, 974, 975, 976, 977, 978, 980, 984, 985, 986, 987, 988, 989, 993, 995, 996, 997, 1001, 1002, 1016, 1018, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "especi": [4, 8, 55, 56, 122, 125, 170, 200, 236, 309, 318, 348, 358, 363, 370, 376, 384, 388, 390, 401, 403, 411, 437, 443, 495, 532, 551, 552, 553, 554, 558, 559, 560, 640, 641, 642, 644, 646, 647, 648, 652, 653, 654, 655, 656, 657, 663, 674, 689, 699, 739, 828, 829, 830, 831, 832, 901, 902, 903, 904, 977, 983, 984, 989, 991, 1005, 1025, 1030, 1034, 1035, 1036], "sharp": [4, 171, 988, 991], "rush": [4, 376], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 80, 95, 127, 152, 159, 170, 171, 204, 215, 218, 261, 268, 272, 317, 347, 348, 358, 375, 401, 403, 405, 408, 410, 411, 412, 431, 437, 441, 445, 447, 453, 525, 532, 534, 536, 537, 539, 540, 541, 601, 602, 628, 793, 794, 833, 834, 929, 930, 973, 978, 981, 997, 1036], "tend": [4, 12, 27, 37, 39, 43, 52, 55, 57, 149, 170, 171, 189, 200, 205, 218, 246, 249, 258, 262, 279, 300, 338, 349, 362, 364, 376, 378, 390, 401, 403, 405, 408, 410, 412, 431, 442, 647, 839, 870, 882, 930, 977, 978, 984, 997, 1016], "under": [4, 7, 11, 24, 25, 27, 41, 67, 78, 79, 103, 122, 125, 171, 200, 229, 239, 261, 268, 270, 271, 304, 319, 365, 370, 376, 378, 380, 382, 384, 390, 393, 397, 401, 403, 405, 407, 408, 411, 412, 440, 445, 447, 464, 465, 466, 467, 468, 469, 470, 526, 533, 535, 537, 648, 649, 650, 696, 700, 701, 702, 709, 735, 747, 781, 782, 788, 789, 838, 937, 977, 978, 979, 981, 984, 991, 995, 996, 997, 1001, 1002, 1016, 1022, 1024, 1025, 1027, 1030, 1034], "These": [4, 5, 7, 27, 51, 95, 97, 101, 117, 121, 167, 171, 189, 200, 201, 202, 230, 268, 279, 281, 285, 300, 303, 310, 312, 317, 323, 325, 358, 362, 363, 369, 372, 373, 376, 378, 380, 383, 385, 388, 390, 393, 397, 400, 401, 402, 403, 406, 408, 410, 411, 412, 413, 436, 440, 442, 492, 502, 503, 509, 532, 561, 562, 596, 597, 662, 670, 671, 693, 700, 726, 749, 771, 785, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 838, 839, 858, 970, 972, 975, 977, 978, 981, 982, 992, 994, 996, 1001, 1007, 1011, 1016, 1022, 1028, 1030, 1031, 1032, 1035], "systemat": [4, 261, 378, 706, 721, 981, 1037], "reveal": [4, 170, 172, 347, 382, 400, 978, 1038], "form": [4, 9, 19, 32, 42, 60, 67, 95, 135, 159, 160, 170, 235, 236, 252, 261, 322, 358, 370, 373, 376, 378, 380, 390, 391, 400, 402, 403, 406, 407, 408, 409, 410, 411, 413, 415, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 453, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 693, 788, 789, 790, 793, 794, 795, 798, 800, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 919, 938, 941, 970, 972, 974, 975, 977, 978, 981, 982, 985, 986, 987, 991, 996, 1001, 1007, 1014, 1028, 1032, 1034], "explain": [4, 5, 12, 56, 73, 85, 86, 104, 125, 152, 157, 158, 171, 172, 200, 218, 229, 236, 252, 271, 274, 309, 347, 348, 363, 374, 376, 380, 397, 399, 406, 408, 413, 487, 515, 518, 528, 535, 538, 543, 619, 642, 650, 663, 674, 715, 716, 717, 721, 778, 977, 984, 997, 1000, 1001, 1012, 1014, 1015, 1033, 1035, 1036], "lack": [4, 338, 376, 378, 388, 407, 818, 908, 996, 1036], "deriv": [4, 19, 105, 106, 124, 157, 160, 172, 188, 189, 193, 201, 363, 371, 378, 405, 407, 409, 410, 411, 413, 415, 435, 439, 440, 459, 527, 600, 611, 616, 642, 663, 670, 674, 850, 851, 866, 872, 893, 894, 975, 977, 978, 981, 985, 987, 996, 1022, 1023, 1024, 1029, 1030, 1031, 1037], "address": [4, 48, 204, 347, 371, 376, 403, 411, 651, 977, 978, 983, 984, 985, 986, 987, 991, 1005, 1014, 1030], "section": [4, 37, 95, 100, 115, 132, 138, 139, 140, 141, 157, 161, 169, 170, 171, 173, 179, 184, 188, 189, 202, 225, 230, 236, 239, 241, 259, 261, 264, 270, 308, 309, 310, 315, 347, 348, 349, 358, 369, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 391, 394, 397, 401, 402, 404, 406, 407, 408, 410, 411, 412, 413, 433, 437, 453, 528, 608, 613, 616, 631, 639, 781, 789, 895, 898, 970, 975, 977, 981, 982, 984, 985, 987, 988, 995, 996, 998, 1000, 1014, 1016, 1022, 1024, 1025, 1026, 1029], "margin": [4, 12, 25, 27, 153, 154, 156, 157, 158, 167, 170, 171, 178, 219, 239, 261, 303, 309, 329, 332, 334, 336, 338, 345, 373, 401, 402, 408, 410, 413, 506, 604, 605, 625, 639, 670, 728, 822, 870, 882, 895, 898, 977, 981, 983, 987, 988, 991, 995, 996, 1014, 1029, 1031], "construct": [4, 11, 70, 72, 112, 114, 116, 120, 132, 149, 218, 230, 236, 241, 243, 279, 294, 304, 306, 314, 317, 370, 373, 378, 385, 390, 403, 404, 407, 408, 410, 411, 414, 428, 435, 436, 438, 439, 444, 446, 451, 457, 459, 461, 513, 529, 535, 538, 549, 550, 575, 581, 633, 682, 684, 685, 804, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 852, 853, 854, 855, 857, 898, 912, 914, 929, 930, 940, 944, 970, 971, 973, 977, 978, 981, 982, 984, 991, 994, 996, 997, 1002, 1007, 1011, 1027, 1029, 1030, 1033, 1036], "polynomialfeatur": [4, 179, 200, 201, 206, 241, 275, 315, 338, 872, 977, 991, 1026, 1030, 1031, 1032, 1035, 1036, 1038], "coars": [4, 121, 382, 442, 455], "too": [4, 7, 12, 17, 44, 50, 55, 57, 62, 70, 74, 82, 99, 125, 164, 172, 184, 201, 204, 222, 233, 239, 247, 255, 259, 268, 276, 299, 309, 334, 347, 354, 355, 362, 373, 376, 382, 384, 388, 390, 403, 405, 407, 410, 411, 412, 415, 431, 443, 532, 582, 585, 673, 686, 701, 828, 829, 830, 831, 832, 858, 871, 873, 976, 978, 980, 981, 983, 984, 988, 1014, 1023, 1026, 1029, 1030, 1031, 1032, 1034], "mani": [4, 7, 10, 19, 55, 56, 74, 78, 82, 112, 118, 119, 120, 121, 123, 126, 145, 149, 172, 200, 221, 233, 247, 255, 261, 268, 269, 273, 281, 303, 308, 309, 313, 314, 315, 316, 317, 319, 347, 358, 362, 364, 371, 373, 375, 376, 389, 390, 391, 393, 394, 400, 401, 403, 404, 405, 408, 410, 411, 412, 413, 415, 497, 547, 548, 551, 552, 553, 554, 558, 559, 560, 582, 585, 600, 603, 621, 633, 644, 648, 652, 653, 660, 662, 670, 671, 672, 686, 689, 767, 771, 790, 794, 804, 850, 851, 866, 871, 873, 893, 901, 902, 903, 904, 970, 971, 973, 977, 978, 980, 981, 982, 983, 984, 987, 988, 989, 991, 994, 996, 998, 1000, 1001, 1002, 1005, 1014, 1016, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1036, 1037, 1038], "featureunion": [4, 74, 368, 390, 402, 458, 623, 855, 971, 1002, 1005, 1018, 1023, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "hour_workday_interact": 4, "interaction_onli": [4, 868, 977, 991], "combin": [4, 12, 20, 25, 27, 61, 70, 71, 73, 74, 90, 95, 104, 105, 110, 123, 127, 136, 152, 158, 165, 167, 170, 184, 200, 204, 217, 218, 225, 229, 234, 261, 262, 270, 272, 273, 290, 298, 309, 315, 316, 318, 337, 338, 349, 353, 362, 368, 372, 373, 376, 381, 389, 390, 400, 401, 403, 404, 407, 408, 409, 410, 411, 412, 413, 415, 416, 439, 458, 460, 461, 467, 469, 470, 473, 474, 475, 483, 490, 502, 503, 509, 515, 518, 520, 525, 531, 532, 534, 536, 541, 543, 554, 556, 559, 561, 562, 604, 608, 610, 615, 618, 624, 628, 637, 640, 641, 646, 647, 652, 653, 654, 655, 656, 657, 660, 662, 666, 667, 668, 669, 670, 672, 673, 675, 678, 695, 723, 781, 790, 793, 794, 801, 802, 814, 816, 820, 852, 853, 854, 858, 866, 867, 868, 873, 893, 955, 970, 973, 974, 977, 981, 982, 984, 987, 991, 994, 995, 997, 998, 1005, 1012, 1014, 1016, 1022, 1027, 1030, 1033, 1034, 1035, 1037, 1038], "ones": [4, 11, 34, 43, 55, 71, 81, 128, 152, 176, 184, 204, 205, 229, 232, 236, 261, 269, 272, 288, 307, 323, 344, 362, 363, 376, 384, 390, 403, 405, 407, 410, 444, 526, 560, 575, 604, 605, 638, 639, 652, 653, 664, 670, 697, 787, 792, 797, 808, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 868, 872, 935, 977, 981, 986, 987, 991, 996, 1014, 1022, 1030, 1031, 1032], "previou": [4, 43, 53, 71, 95, 115, 122, 125, 132, 152, 157, 158, 169, 170, 171, 184, 186, 201, 233, 235, 236, 261, 264, 268, 303, 308, 317, 347, 348, 349, 358, 362, 371, 376, 378, 381, 382, 384, 388, 390, 391, 393, 403, 410, 411, 462, 540, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 624, 640, 642, 646, 647, 652, 654, 656, 660, 661, 662, 663, 670, 671, 672, 674, 701, 809, 824, 827, 842, 850, 851, 890, 907, 977, 981, 985, 991, 1002, 1007, 1016, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "nice": [4, 67, 201, 236, 303, 362, 408, 1016], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 146, 150, 316, 320, 382], "104": [4, 24, 357], "highlight": [4, 80, 92, 152, 153, 158, 218, 307, 320, 347, 349, 365, 376, 380, 381, 384, 388, 413, 437, 440, 441, 458, 461, 484, 485, 490, 495, 496, 498, 506, 509, 515, 518, 532, 555, 556, 558, 559, 561, 593, 596, 622, 624, 626, 628, 634, 640, 642, 646, 652, 663, 674, 682, 695, 696, 711, 741, 781, 786, 790, 793, 794, 796, 804, 812, 815, 819, 835, 837, 854, 858, 863, 866, 867, 868, 872, 873, 874, 890, 891, 893, 898, 901, 902, 925, 978, 981, 989, 991, 996, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "anoth": [4, 37, 95, 100, 112, 127, 149, 152, 160, 165, 170, 189, 204, 208, 226, 229, 236, 240, 247, 261, 263, 264, 267, 271, 291, 347, 349, 352, 358, 362, 364, 370, 371, 374, 376, 378, 382, 388, 390, 394, 397, 400, 403, 407, 408, 410, 411, 412, 414, 436, 438, 446, 449, 456, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 502, 532, 534, 541, 667, 670, 686, 703, 713, 796, 812, 852, 853, 874, 970, 971, 976, 977, 978, 981, 982, 984, 987, 991, 995, 996, 1007, 1014, 1015, 1016, 1031, 1032], "either": [4, 10, 30, 71, 118, 121, 122, 170, 188, 190, 230, 239, 256, 265, 270, 286, 342, 347, 356, 362, 363, 368, 371, 374, 376, 377, 378, 382, 390, 394, 397, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 436, 441, 446, 481, 490, 506, 518, 527, 528, 530, 538, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 576, 577, 578, 582, 583, 584, 585, 587, 588, 591, 596, 601, 602, 604, 605, 616, 621, 624, 626, 627, 644, 648, 650, 658, 670, 672, 676, 677, 684, 691, 692, 696, 700, 701, 705, 706, 714, 717, 719, 720, 721, 728, 732, 733, 735, 745, 749, 762, 767, 771, 775, 778, 781, 782, 785, 790, 793, 794, 796, 804, 812, 813, 814, 815, 816, 817, 818, 820, 823, 883, 884, 890, 893, 894, 901, 902, 903, 904, 908, 938, 942, 970, 977, 981, 982, 983, 984, 985, 986, 989, 991, 995, 996, 1007, 1015, 1016, 1022, 1025, 1031, 1032, 1033, 1036], "after": [4, 17, 20, 21, 26, 46, 53, 55, 70, 71, 75, 81, 97, 112, 123, 130, 132, 135, 145, 149, 157, 159, 161, 164, 170, 176, 193, 200, 239, 240, 243, 249, 261, 270, 281, 289, 291, 303, 304, 307, 308, 347, 348, 364, 371, 373, 375, 376, 378, 380, 382, 383, 384, 388, 390, 397, 399, 400, 401, 403, 404, 407, 408, 411, 412, 415, 436, 441, 444, 445, 446, 447, 450, 456, 509, 526, 530, 547, 548, 553, 554, 555, 556, 591, 621, 624, 652, 653, 660, 661, 662, 667, 669, 670, 671, 672, 686, 706, 719, 749, 785, 788, 789, 793, 794, 842, 849, 853, 866, 872, 893, 898, 899, 970, 971, 975, 977, 981, 985, 986, 991, 993, 995, 996, 997, 1002, 1007, 1014, 1016, 1022, 1025, 1029, 1030, 1033, 1034, 1037], "quadrat": [4, 29, 35, 157, 161, 167, 214, 263, 316, 402, 434, 452, 455, 543, 544, 617, 642, 652, 653, 663, 670, 674, 710, 898, 899, 977, 978, 981, 984, 987, 991, 995, 996, 1003, 1018, 1023], "tractabl": [4, 407, 628, 1001, 1035], "nystr\u00f6m": 4, "latter": [4, 14, 251, 261, 270, 271, 289, 308, 342, 364, 373, 390, 407, 410, 411, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 735, 788, 789, 790, 793, 794, 799, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 948, 984, 1031], "kernel_approxim": [4, 164, 167, 175, 176, 214, 229, 234, 315, 365, 671, 751, 752, 859, 973, 1007, 1023, 1029], "nystroem": [4, 164, 214, 229, 234, 368, 634, 635, 636, 671, 859, 898, 899, 1018, 1023, 1029, 1032, 1034, 1035, 1036], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 141, 176, 261, 331, 338, 341, 446, 529, 614, 758, 767, 790, 868, 895, 896, 897, 898, 899, 977, 991, 1014], "n_compon": [4, 5, 6, 12, 14, 44, 52, 57, 58, 59, 70, 73, 74, 85, 86, 90, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 130, 176, 199, 221, 222, 223, 224, 225, 226, 229, 233, 234, 237, 241, 246, 247, 248, 249, 250, 251, 252, 260, 285, 290, 300, 308, 315, 317, 348, 378, 381, 382, 390, 406, 408, 415, 445, 446, 456, 458, 476, 477, 478, 479, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 633, 634, 635, 636, 682, 683, 684, 685, 686, 687, 688, 689, 690, 788, 789, 842, 849, 852, 885, 886, 887, 930, 973, 975, 978, 980, 984, 1012, 1015, 1023, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036], "300": [4, 20, 21, 34, 38, 50, 58, 98, 112, 113, 114, 118, 165, 190, 226, 229, 233, 250, 264, 291, 306, 315, 322, 340, 342, 378, 437, 441, 442, 453, 455, 633, 638, 639, 673, 684, 686, 688, 850, 977, 1032], "053": [4, 149, 187, 219, 223, 348, 373, 382], "002": [4, 12, 149, 348, 373], "076": [4, 120, 881], "004": [4, 119], "almost": [4, 118, 123, 124, 202, 208, 236, 239, 275, 308, 325, 358, 369, 371, 380, 382, 388, 389, 390, 394, 403, 407, 408, 464, 465, 466, 467, 469, 470, 471, 788, 970, 976, 977, 980, 981, 996, 1015, 1016, 1030, 1035], "rival": [4, 890, 994], "intermedi": [4, 7, 52, 55, 117, 125, 239, 334, 411, 553, 554, 613, 853, 981, 1034], "compound": [4, 218, 411, 604, 606, 674, 717, 745, 977, 1016], "one_hot_poly_pipelin": 4, "082": [4, 92, 93], "006": [4, 269, 348, 382], "111": [4, 7, 8, 16, 67, 90, 101, 102, 111, 197, 215, 225, 261, 281, 845, 1025], "competit": [4, 125, 347, 410, 638, 984], "low": [4, 11, 12, 37, 50, 81, 86, 97, 99, 103, 112, 115, 128, 149, 172, 193, 195, 200, 202, 204, 214, 221, 223, 229, 233, 239, 246, 247, 249, 252, 255, 261, 263, 267, 268, 276, 287, 288, 299, 307, 309, 310, 319, 325, 333, 334, 347, 356, 372, 373, 376, 381, 384, 390, 393, 400, 401, 402, 407, 408, 411, 436, 438, 443, 462, 515, 518, 529, 576, 583, 597, 673, 686, 690, 699, 719, 735, 782, 838, 867, 874, 891, 930, 946, 949, 970, 973, 976, 977, 978, 980, 981, 984, 986, 987, 988, 989, 991, 993, 996, 997, 1003, 1018, 1023, 1026, 1027, 1028, 1030, 1031, 1036, 1037], "rank": [4, 17, 25, 80, 99, 103, 119, 147, 172, 173, 218, 259, 261, 269, 372, 398, 400, 401, 405, 406, 408, 410, 411, 502, 503, 515, 518, 543, 544, 587, 588, 600, 642, 651, 663, 674, 690, 714, 719, 720, 732, 733, 749, 785, 793, 794, 930, 970, 972, 973, 978, 989, 991, 1005, 1018, 1023, 1028, 1031, 1032, 1036, 1037], "fact": [4, 11, 19, 25, 81, 86, 112, 125, 172, 233, 243, 347, 370, 383, 388, 390, 406, 408, 409, 410, 411, 643, 662, 664, 698, 975, 977, 984, 991, 995, 996, 1002, 1005, 1036], "smoother": [4, 5, 125, 171, 299, 409], "allow": [4, 20, 56, 58, 74, 75, 90, 99, 100, 115, 116, 130, 152, 157, 159, 161, 194, 200, 204, 218, 222, 230, 233, 240, 242, 243, 246, 261, 279, 313, 314, 315, 316, 318, 338, 339, 347, 356, 358, 362, 370, 374, 376, 377, 378, 380, 383, 385, 390, 391, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 431, 435, 437, 438, 439, 440, 441, 443, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 490, 517, 518, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 587, 588, 591, 597, 604, 605, 609, 621, 622, 624, 628, 629, 632, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 684, 686, 693, 755, 758, 767, 771, 774, 783, 784, 788, 789, 790, 791, 792, 793, 794, 797, 799, 801, 804, 808, 811, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 839, 840, 843, 844, 848, 850, 851, 853, 855, 856, 858, 859, 860, 865, 872, 873, 877, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 911, 913, 914, 924, 925, 945, 949, 970, 971, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 991, 993, 994, 995, 996, 997, 1001, 1002, 1005, 1007, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 55, 57, 65, 73, 80, 81, 95, 97, 99, 100, 106, 123, 132, 152, 156, 158, 160, 171, 184, 188, 189, 202, 208, 221, 223, 225, 226, 232, 239, 251, 260, 261, 262, 272, 284, 289, 290, 291, 308, 313, 319, 336, 337, 338, 342, 347, 348, 352, 363, 373, 374, 376, 377, 378, 381, 382, 385, 388, 389, 390, 391, 400, 403, 405, 406, 408, 410, 411, 412, 414, 435, 438, 439, 440, 444, 445, 446, 447, 456, 525, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 552, 559, 576, 583, 604, 605, 641, 644, 647, 648, 649, 650, 652, 653, 665, 682, 701, 722, 723, 731, 775, 776, 777, 780, 781, 785, 790, 804, 835, 836, 837, 839, 841, 843, 844, 845, 866, 867, 872, 885, 886, 887, 901, 902, 904, 910, 929, 930, 932, 970, 971, 973, 976, 977, 978, 980, 981, 982, 985, 987, 991, 995, 996, 997, 1000, 1002, 1005, 1007, 1009, 1011, 1012, 1014, 1015, 1016, 1022, 1029, 1030, 1031, 1032, 1034, 1036, 1037], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 55, 57, 59, 66, 70, 71, 72, 75, 95, 98, 100, 109, 111, 117, 118, 122, 124, 125, 126, 127, 145, 152, 155, 156, 157, 158, 159, 160, 165, 167, 169, 170, 171, 173, 178, 179, 182, 184, 187, 198, 200, 201, 206, 208, 213, 214, 216, 218, 219, 221, 230, 232, 235, 236, 239, 240, 242, 243, 251, 259, 261, 262, 263, 264, 269, 270, 275, 281, 297, 303, 313, 314, 316, 317, 319, 327, 331, 332, 333, 334, 335, 336, 338, 340, 342, 344, 347, 348, 353, 358, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 388, 389, 390, 393, 397, 401, 403, 404, 405, 406, 408, 409, 411, 412, 414, 415, 431, 434, 437, 438, 439, 441, 442, 444, 446, 448, 451, 452, 453, 454, 455, 458, 459, 462, 463, 465, 466, 468, 472, 482, 483, 485, 486, 489, 491, 497, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 566, 569, 575, 576, 582, 583, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 598, 601, 602, 603, 604, 605, 609, 611, 613, 614, 616, 617, 621, 622, 625, 626, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 696, 697, 698, 700, 705, 706, 710, 713, 715, 716, 717, 721, 725, 727, 728, 731, 733, 734, 735, 743, 748, 750, 754, 755, 756, 758, 761, 764, 767, 771, 772, 773, 774, 775, 776, 778, 782, 783, 784, 785, 787, 788, 789, 790, 792, 793, 794, 795, 796, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 862, 863, 865, 869, 870, 871, 872, 873, 874, 877, 879, 882, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 911, 920, 922, 923, 924, 929, 930, 940, 941, 947, 948, 949, 951, 952, 955, 956, 965, 970, 971, 972, 974, 976, 978, 979, 982, 984, 985, 986, 987, 988, 989, 991, 994, 995, 997, 1001, 1002, 1003, 1007, 1010, 1011, 1012, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "abl": [4, 5, 9, 24, 47, 55, 61, 82, 86, 99, 100, 129, 158, 170, 173, 184, 189, 200, 216, 218, 225, 267, 272, 334, 358, 362, 363, 364, 370, 374, 376, 378, 380, 381, 388, 403, 405, 407, 411, 479, 497, 528, 818, 865, 970, 971, 977, 980, 981, 982, 987, 991, 994, 997, 998, 1002, 1007, 1015, 1016, 1028, 1029, 1033], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 176, 184, 283, 342, 349, 362, 399, 405, 411, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 800, 833, 834, 901, 902, 903, 904, 970, 981, 984, 997, 1005, 1010, 1014, 1025, 1026], "depth": [4, 111, 117, 122, 126, 128, 133, 352, 354, 355, 356, 362, 374, 376, 380, 389, 410, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 833, 834, 838, 901, 902, 903, 904, 905, 907, 935, 986, 987, 997, 1024, 1025, 1033], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 70, 71, 72, 73, 112, 118, 119, 123, 124, 130, 145, 146, 148, 153, 173, 176, 200, 204, 208, 215, 216, 248, 259, 260, 261, 262, 263, 265, 267, 276, 283, 289, 290, 291, 300, 305, 308, 319, 322, 323, 325, 334, 337, 338, 342, 358, 362, 378, 389, 390, 402, 403, 407, 410, 411, 412, 420, 431, 443, 463, 465, 466, 472, 526, 528, 535, 543, 544, 545, 547, 549, 551, 552, 553, 555, 558, 559, 561, 563, 604, 628, 652, 653, 660, 662, 665, 668, 669, 670, 686, 691, 697, 702, 707, 712, 727, 731, 736, 747, 756, 780, 785, 787, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 835, 840, 842, 843, 850, 888, 889, 893, 895, 898, 901, 903, 929, 930, 970, 975, 976, 977, 978, 982, 984, 985, 989, 993, 995, 997, 1011, 1016, 1030, 1031], "On": [4, 12, 17, 26, 67, 71, 72, 85, 86, 100, 111, 112, 115, 117, 119, 120, 125, 128, 129, 132, 135, 144, 146, 156, 157, 170, 171, 172, 181, 188, 189, 202, 204, 230, 231, 232, 233, 235, 236, 239, 240, 241, 242, 243, 246, 248, 251, 256, 257, 258, 259, 261, 262, 263, 264, 266, 268, 273, 300, 303, 305, 307, 308, 309, 314, 315, 317, 318, 324, 334, 342, 356, 362, 374, 377, 378, 380, 388, 390, 397, 401, 403, 407, 408, 410, 412, 413, 637, 650, 685, 728, 754, 858, 874, 970, 974, 977, 980, 981, 983, 987, 994, 996, 1011, 1014], "contrari": [4, 13, 170, 222, 226, 239, 246, 264, 303, 347, 370, 403, 490, 538, 600, 807, 874, 977, 983, 987], "significantli": [4, 24, 25, 37, 78, 79, 112, 118, 123, 125, 149, 170, 171, 172, 200, 204, 208, 216, 218, 261, 281, 314, 315, 348, 349, 358, 363, 380, 403, 408, 410, 411, 416, 463, 468, 473, 474, 532, 534, 541, 552, 559, 640, 641, 646, 647, 654, 655, 656, 657, 678, 686, 833, 834, 973, 977, 978, 984, 989, 996, 1022, 1024, 1025, 1029, 1030, 1035, 1036, 1037], "over": [4, 7, 8, 9, 16, 20, 24, 26, 27, 31, 37, 50, 55, 56, 72, 74, 95, 115, 118, 128, 144, 148, 152, 160, 164, 169, 171, 182, 194, 200, 208, 218, 229, 239, 261, 262, 264, 266, 268, 269, 270, 273, 286, 294, 297, 298, 305, 316, 317, 319, 322, 347, 348, 362, 363, 364, 371, 372, 375, 376, 377, 378, 382, 389, 390, 399, 401, 402, 403, 404, 407, 408, 409, 410, 411, 415, 440, 443, 458, 466, 503, 527, 528, 530, 531, 532, 533, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 575, 576, 582, 583, 585, 588, 596, 626, 627, 628, 638, 639, 640, 641, 646, 647, 652, 654, 655, 656, 657, 659, 660, 661, 662, 670, 671, 672, 679, 680, 691, 710, 712, 732, 756, 781, 784, 788, 790, 793, 794, 796, 801, 802, 804, 812, 814, 815, 816, 817, 818, 820, 849, 850, 851, 852, 868, 872, 893, 910, 919, 949, 970, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 995, 996, 997, 1001, 1002, 1005, 1012, 1015, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "compet": 4, "access": [4, 49, 78, 239, 247, 252, 347, 356, 362, 363, 376, 377, 378, 384, 388, 390, 391, 403, 405, 406, 410, 411, 413, 444, 451, 458, 530, 561, 562, 563, 564, 611, 851, 852, 853, 908, 970, 977, 980, 981, 987, 988, 989, 995, 996, 1002, 1005, 1007, 1015, 1016, 1022, 1024, 1028, 1029, 1030, 1031, 1034, 1036, 1037, 1038], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 55, 57, 58, 67, 70, 90, 99, 101, 102, 117, 118, 122, 126, 128, 132, 149, 171, 184, 189, 197, 200, 218, 221, 223, 230, 233, 236, 239, 243, 262, 270, 272, 281, 283, 303, 308, 315, 316, 347, 348, 349, 370, 373, 374, 376, 378, 380, 382, 384, 388, 390, 391, 393, 394, 399, 402, 403, 404, 405, 407, 408, 410, 411, 412, 414, 420, 431, 432, 433, 438, 440, 444, 446, 451, 456, 458, 461, 463, 476, 477, 478, 490, 502, 515, 518, 529, 535, 543, 544, 545, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 573, 574, 575, 604, 605, 613, 621, 626, 627, 628, 637, 652, 653, 660, 662, 665, 668, 669, 670, 671, 672, 680, 683, 685, 686, 687, 689, 693, 717, 722, 723, 735, 740, 742, 745, 756, 777, 780, 790, 793, 794, 797, 799, 804, 816, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 845, 850, 853, 854, 855, 857, 867, 868, 869, 873, 881, 885, 886, 888, 889, 893, 894, 895, 898, 901, 902, 903, 904, 941, 947, 967, 970, 975, 976, 977, 978, 981, 982, 983, 984, 985, 987, 988, 991, 995, 996, 997, 1002, 1007, 1014, 1016, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "geograph": [4, 11, 294, 371, 492], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 75, 132, 170, 257, 318, 981, 1037], "nrow": [4, 5, 32, 57, 66, 73, 95, 161, 171, 200, 202, 208, 218, 221, 222, 225, 239, 263, 264, 281, 305, 307, 308, 318, 323, 341, 342, 1012], "ncol": [4, 5, 32, 53, 57, 66, 95, 100, 106, 171, 200, 201, 202, 208, 218, 221, 222, 232, 239, 257, 263, 264, 272, 281, 284, 298, 304, 305, 307, 308, 318, 341, 342, 348], "sharex": [4, 7, 14, 73, 92, 100, 133, 161, 171, 202, 263, 286, 325, 1012], "sharei": [4, 75, 92, 100, 106, 133, 161, 171, 200, 202, 208, 263, 272, 286, 304, 309, 341, 342, 348], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 75, 132, 170, 257, 318, 695], "residual_vs_predict": [4, 75, 257, 318, 695], "axis_idx": 4, "kind": [4, 9, 12, 24, 25, 75, 104, 118, 132, 144, 170, 171, 251, 255, 257, 270, 310, 315, 318, 331, 334, 347, 363, 364, 369, 371, 376, 378, 382, 388, 389, 401, 403, 406, 407, 408, 410, 411, 412, 482, 483, 497, 502, 503, 515, 518, 582, 626, 627, 695, 922, 977, 983, 988, 997, 1025, 1034, 1036, 1037, 1038], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 55, 59, 60, 61, 62, 70, 79, 81, 82, 86, 96, 98, 105, 111, 115, 118, 123, 124, 126, 127, 138, 154, 156, 161, 173, 180, 182, 191, 200, 222, 223, 226, 229, 234, 238, 239, 246, 247, 248, 249, 251, 252, 256, 263, 264, 270, 271, 286, 290, 291, 293, 300, 305, 306, 322, 323, 325, 327, 332, 334, 341, 342, 347, 353, 371, 553, 554, 558, 559, 774, 791, 792, 795, 797, 798, 799, 800, 803, 805, 806, 807, 808, 809, 810, 811], "pred": [4, 7, 11, 32, 343, 347, 371, 642, 663, 674, 691, 696, 700, 712, 722, 723, 731, 776, 777, 780, 781, 981], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 55, 63, 64, 65, 75, 86, 92, 95, 96, 99, 104, 105, 106, 114, 116, 132, 133, 158, 164, 167, 170, 171, 172, 185, 191, 192, 200, 208, 209, 221, 233, 239, 247, 251, 252, 259, 263, 264, 265, 268, 270, 281, 284, 286, 289, 297, 298, 299, 305, 307, 308, 309, 326, 331, 342, 343, 353, 374, 410, 817, 991, 1016], "disp": [4, 32, 114, 128, 129, 255, 264, 276, 284, 308, 314, 331, 336, 432, 625, 691, 694, 695, 842], "from_predict": [4, 32, 75, 132, 170, 239, 257, 268, 270, 316, 322, 347, 383, 432, 625, 692, 712, 720, 775, 777, 780, 781, 782, 981, 1019, 1035, 1036, 1037, 1038], "y_true": [4, 19, 32, 59, 75, 112, 132, 155, 200, 210, 218, 239, 249, 325, 376, 426, 432, 433, 459, 476, 477, 478, 546, 548, 550, 551, 552, 554, 556, 558, 559, 562, 564, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 691, 692, 694, 695, 696, 697, 701, 702, 703, 706, 707, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 775, 776, 777, 778, 780, 781, 782, 785, 787, 826, 827, 836, 844, 851, 894, 896, 899, 902, 904, 981, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1037], "y_pred": [4, 6, 7, 25, 30, 32, 34, 44, 57, 62, 70, 75, 111, 112, 125, 126, 132, 146, 170, 200, 202, 207, 210, 215, 217, 218, 229, 230, 239, 257, 259, 264, 288, 292, 300, 308, 325, 326, 358, 376, 383, 390, 410, 426, 433, 459, 476, 477, 478, 543, 546, 548, 550, 551, 552, 554, 556, 558, 559, 561, 562, 564, 605, 625, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 691, 692, 694, 695, 696, 697, 702, 706, 707, 712, 715, 716, 717, 721, 722, 723, 727, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 776, 777, 778, 780, 781, 787, 790, 793, 794, 804, 814, 824, 826, 827, 836, 844, 851, 853, 893, 894, 895, 896, 897, 898, 899, 902, 904, 981, 983, 1012, 1028, 1029, 1031, 1033, 1037, 1038], "scatter_kwarg": [4, 75, 132, 170, 695], "set_xtick": [4, 8, 10, 16, 31, 34, 43, 60, 64, 106, 130, 134, 171, 173, 191, 216, 234, 246, 272, 273, 279, 297, 299, 305, 306, 331], "num": [4, 12, 71, 149, 152, 157, 158, 159, 171, 172, 202, 268, 269, 317, 319, 626], "set_ytick": [4, 16, 31, 34, 43, 60, 64, 106, 130, 164, 165, 173, 191, 216, 246, 272, 297, 299, 305, 306, 331, 349], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 72, 75, 79, 80, 81, 85, 90, 97, 99, 103, 104, 105, 111, 112, 114, 115, 116, 123, 124, 125, 126, 127, 129, 132, 134, 135, 139, 145, 152, 153, 159, 161, 170, 171, 182, 185, 190, 194, 200, 201, 202, 203, 206, 207, 210, 213, 214, 217, 218, 224, 232, 233, 234, 235, 237, 239, 248, 249, 256, 259, 260, 261, 264, 265, 268, 271, 274, 275, 284, 286, 287, 298, 304, 307, 308, 314, 317, 324, 333, 336, 338, 341, 342, 347, 353, 355, 804, 870, 882], "upper": [4, 7, 9, 24, 72, 75, 79, 80, 81, 111, 114, 115, 116, 124, 125, 126, 127, 132, 134, 145, 156, 158, 161, 170, 194, 200, 206, 207, 210, 214, 217, 218, 233, 237, 238, 260, 261, 262, 286, 287, 298, 308, 325, 333, 336, 338, 341, 403, 409, 457, 582, 583, 585, 589, 607, 608, 609, 611, 613, 614, 616, 617, 619, 626, 627, 629, 631, 644, 648, 671, 728, 866, 867, 895, 896, 897, 917, 980, 981, 984, 991, 995, 996, 997, 1030], "bbox_to_anchor": [4, 37, 161, 266, 341], "set_aspect": [4, 155, 211, 248, 343], "equal": [4, 11, 12, 26, 37, 39, 53, 60, 80, 86, 112, 125, 155, 170, 201, 202, 211, 217, 240, 248, 251, 255, 259, 261, 270, 291, 305, 309, 334, 336, 343, 348, 371, 372, 376, 378, 390, 400, 401, 403, 407, 408, 410, 411, 416, 431, 434, 435, 436, 437, 439, 441, 443, 448, 453, 454, 457, 463, 468, 473, 474, 497, 506, 509, 513, 526, 527, 528, 533, 535, 537, 538, 543, 544, 545, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 582, 587, 588, 591, 593, 594, 601, 602, 619, 622, 623, 626, 627, 628, 629, 631, 635, 636, 639, 643, 652, 653, 665, 693, 697, 712, 714, 722, 761, 776, 780, 781, 785, 787, 790, 791, 793, 794, 803, 804, 808, 814, 821, 825, 826, 833, 834, 835, 836, 841, 842, 843, 844, 845, 850, 851, 856, 857, 858, 865, 868, 871, 872, 873, 874, 876, 883, 890, 893, 894, 900, 901, 902, 903, 904, 919, 930, 956, 962, 975, 977, 981, 982, 984, 985, 987, 991, 995, 996, 997, 1015, 1016, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "adjust": [4, 9, 36, 38, 49, 58, 68, 78, 112, 125, 167, 204, 229, 234, 242, 262, 313, 326, 342, 348, 383, 403, 404, 408, 410, 411, 518, 547, 548, 551, 553, 555, 556, 558, 652, 653, 660, 662, 668, 669, 670, 698, 699, 702, 708, 709, 748, 750, 779, 786, 828, 829, 831, 832, 863, 885, 886, 893, 894, 895, 898, 901, 903, 919, 980, 981, 985, 991, 1014, 1019, 1022, 1028, 1038], "box": [4, 10, 30, 55, 171, 172, 222, 303, 307, 383, 408, 410, 506, 549, 550, 869, 881, 905, 907, 981, 982, 988, 991, 997, 1001, 1007, 1030, 1038], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 160, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 352, 353, 354, 355, 356, 363, 364, 376, 382, 388, 389, 393, 394, 400, 401, 405, 407, 408, 409, 410, 412, 413, 432, 496, 553, 587, 588, 625, 626, 691, 692, 694, 695, 696, 707, 796, 812, 835, 853, 905, 906, 907, 970, 975, 976, 978, 980, 981, 983, 984, 985, 987, 988, 991, 995, 996, 1002, 1011, 1012, 1016, 1024, 1026, 1027, 1029, 1031, 1032, 1033, 1034, 1036, 1038], "seem": [4, 9, 46, 55, 125, 171, 200, 225, 229, 262, 298, 307, 342, 347, 348, 375, 376, 381, 407, 495, 977, 981], "regim": [4, 390, 893, 894, 980], "overal": [4, 43, 48, 112, 115, 118, 132, 157, 218, 258, 281, 308, 309, 348, 362, 375, 376, 382, 400, 401, 410, 441, 443, 458, 465, 466, 472, 543, 874, 978, 981, 997, 1005, 1032], "closer": [4, 27, 37, 98, 100, 131, 149, 152, 171, 179, 204, 338, 349, 401, 403, 408, 443, 547, 622, 706, 835, 836, 841, 843, 844, 845, 996, 1029], "diagon": [4, 25, 40, 82, 85, 218, 239, 248, 251, 252, 255, 334, 400, 403, 405, 413, 447, 465, 466, 472, 475, 505, 507, 521, 526, 544, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 644, 645, 648, 649, 650, 676, 677, 695, 709, 783, 788, 789, 837, 845, 975, 977, 980, 981, 984, 991, 1028, 1030, 1031, 1032], "obtain": [4, 7, 9, 12, 20, 27, 48, 55, 57, 58, 71, 74, 75, 100, 103, 112, 122, 125, 126, 130, 138, 149, 154, 156, 170, 171, 184, 200, 202, 204, 214, 225, 239, 246, 247, 248, 257, 261, 262, 263, 267, 270, 284, 308, 316, 332, 338, 348, 349, 356, 358, 371, 373, 388, 390, 397, 401, 403, 405, 406, 408, 410, 411, 412, 413, 431, 436, 463, 490, 526, 527, 549, 550, 551, 552, 553, 554, 557, 558, 559, 587, 600, 608, 639, 653, 655, 660, 662, 666, 668, 670, 671, 681, 702, 706, 719, 732, 749, 784, 796, 812, 818, 821, 822, 825, 839, 850, 870, 882, 895, 898, 901, 902, 930, 971, 973, 975, 977, 978, 980, 981, 982, 984, 985, 987, 988, 991, 995, 996, 1028, 1030, 1033, 1035, 1036, 1037, 1038], "slightli": [4, 25, 64, 82, 115, 118, 122, 125, 128, 132, 149, 152, 153, 154, 172, 179, 200, 218, 224, 226, 236, 239, 269, 281, 313, 331, 349, 375, 376, 388, 401, 403, 410, 411, 413, 415, 440, 582, 583, 585, 632, 652, 793, 794, 893, 895, 898, 929, 930, 970, 977, 991, 995, 996, 1031, 1035, 1036, 1038], "cost": [4, 39, 98, 118, 152, 167, 176, 221, 234, 263, 270, 313, 334, 348, 349, 351, 357, 376, 382, 384, 388, 403, 410, 472, 494, 531, 532, 533, 540, 551, 552, 553, 554, 558, 559, 596, 604, 613, 621, 640, 641, 646, 647, 654, 655, 656, 657, 662, 666, 668, 670, 672, 681, 682, 686, 819, 893, 894, 895, 898, 901, 902, 903, 904, 930, 973, 977, 978, 981, 984, 994, 995, 996, 1003, 1018, 1028, 1031, 1032], "durat": [4, 8, 200, 218, 239, 283, 349, 363, 947, 948, 977], "regressor": [4, 75, 86, 126, 131, 132, 135, 152, 157, 165, 167, 170, 178, 180, 182, 184, 200, 203, 217, 218, 219, 236, 314, 315, 362, 376, 378, 388, 390, 401, 404, 413, 426, 430, 459, 476, 477, 478, 479, 518, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 559, 560, 561, 562, 563, 564, 599, 600, 603, 605, 626, 627, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 661, 663, 664, 666, 667, 672, 673, 695, 821, 822, 825, 826, 827, 836, 844, 849, 850, 851, 854, 860, 868, 873, 874, 894, 896, 899, 901, 902, 903, 904, 907, 922, 924, 970, 971, 977, 981, 982, 984, 989, 995, 1001, 1003, 1011, 1018, 1022, 1023, 1027, 1028, 1029, 1031, 1032, 1035, 1036, 1037], "mlpregressor": [4, 171, 240, 364, 849, 850, 985, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "hidden": [4, 171, 299, 300, 376, 384, 400, 408, 849, 850, 851, 985, 986, 1001, 1022, 1033], "layer": [4, 167, 216, 240, 296, 299, 300, 301, 362, 384, 410, 508, 509, 516, 561, 819, 849, 850, 851, 854, 873, 986, 1003, 1018, 1028], "cyclic": [4, 640, 641, 646, 647, 654, 655, 656, 657, 1034], "within": [4, 20, 60, 117, 119, 120, 131, 146, 148, 149, 196, 201, 202, 212, 218, 240, 259, 260, 264, 274, 303, 304, 315, 332, 335, 338, 342, 349, 358, 362, 371, 376, 380, 385, 388, 390, 391, 400, 401, 403, 404, 407, 409, 410, 414, 438, 442, 455, 457, 458, 460, 463, 468, 509, 543, 561, 562, 563, 564, 587, 588, 626, 686, 690, 693, 704, 718, 774, 788, 789, 795, 796, 808, 809, 817, 818, 833, 834, 835, 836, 841, 843, 844, 845, 852, 853, 854, 866, 874, 878, 879, 881, 882, 883, 884, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 975, 977, 978, 984, 987, 991, 994, 996, 997, 1002, 1005, 1007, 1011, 1014, 1016, 1024, 1025, 1029, 1030, 1035, 1036, 1038], "finer": [4, 37, 283, 334, 363, 403, 407, 970, 984, 1032], "resolut": [4, 11, 17, 105, 171, 293, 294, 334, 391, 401, 1007, 1032], "taken": [4, 7, 31, 42, 53, 55, 127, 149, 157, 170, 233, 234, 249, 267, 305, 371, 373, 375, 376, 380, 390, 397, 402, 403, 407, 411, 415, 434, 527, 577, 578, 640, 641, 644, 646, 647, 648, 652, 653, 654, 655, 656, 657, 671, 673, 675, 678, 689, 866, 867, 887, 890, 896, 897, 940, 981, 983, 991, 993, 1028, 1031, 1034, 1035], "everi": [4, 95, 164, 198, 201, 222, 235, 247, 252, 270, 316, 358, 371, 374, 376, 378, 380, 384, 390, 403, 405, 407, 408, 411, 434, 448, 502, 525, 530, 533, 539, 551, 553, 554, 558, 584, 585, 597, 640, 641, 643, 646, 647, 653, 654, 655, 656, 657, 658, 659, 660, 662, 666, 667, 668, 669, 670, 679, 680, 681, 686, 690, 747, 764, 772, 773, 803, 842, 901, 903, 905, 907, 919, 974, 976, 981, 982, 983, 991, 997, 1005, 1011, 1022, 1026, 1028, 1031, 1035], "offer": [4, 118, 378, 384, 388, 389, 393, 407, 408, 410, 411, 970, 971, 982, 985, 997, 1001, 1002, 1005, 1028], "view": [4, 16, 30, 42, 46, 78, 97, 171, 197, 241, 362, 364, 376, 403, 411, 530, 639, 651, 833, 834, 908, 977, 978], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 55, 57, 61, 78, 79, 80, 81, 82, 91, 96, 97, 98, 105, 113, 114, 125, 128, 162, 165, 179, 184, 190, 229, 233, 248, 249, 253, 286, 294, 307, 331, 338, 365, 368, 372, 378, 381, 390, 403, 405, 408, 409, 415, 446, 463, 464, 465, 466, 467, 468, 469, 470, 490, 498, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 524, 526, 538, 543, 544, 557, 604, 605, 607, 608, 609, 611, 612, 613, 616, 617, 619, 621, 637, 638, 666, 671, 674, 697, 717, 734, 745, 769, 788, 789, 790, 804, 828, 829, 830, 831, 832, 833, 834, 838, 869, 873, 881, 885, 886, 887, 975, 977, 978, 979, 987, 1003, 1005, 1015, 1017, 1018, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1032, 1034, 1036], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 57, 58, 60, 61, 62, 64, 65, 66, 71, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 101, 102, 103, 110, 113, 115, 117, 119, 120, 121, 124, 125, 127, 128, 129, 132, 135, 136, 141, 144, 145, 148, 152, 153, 156, 158, 159, 161, 164, 165, 167, 168, 169, 174, 179, 180, 181, 182, 184, 189, 190, 194, 195, 198, 199, 200, 201, 202, 203, 206, 207, 209, 213, 214, 217, 218, 221, 222, 224, 225, 226, 228, 229, 234, 235, 236, 238, 239, 244, 246, 247, 249, 250, 251, 252, 254, 256, 258, 261, 262, 264, 266, 268, 270, 271, 272, 273, 275, 277, 279, 281, 286, 287, 288, 293, 297, 304, 306, 307, 310, 314, 315, 317, 319, 322, 323, 326, 327, 333, 334, 336, 337, 339, 340, 341, 344, 347, 348, 354, 355, 362, 363, 365, 368, 372, 379, 381, 388, 389, 390, 394, 398, 401, 403, 411, 412, 428, 434, 437, 441, 443, 445, 446, 447, 448, 452, 453, 454, 456, 458, 463, 464, 465, 466, 467, 468, 469, 470, 482, 483, 484, 485, 486, 489, 490, 491, 496, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 529, 530, 532, 533, 534, 535, 538, 541, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 567, 576, 577, 578, 583, 601, 602, 604, 605, 621, 624, 626, 628, 633, 634, 635, 636, 637, 640, 641, 643, 644, 646, 647, 648, 652, 654, 655, 656, 657, 664, 665, 666, 670, 671, 672, 673, 683, 684, 685, 686, 687, 688, 689, 695, 698, 699, 702, 724, 736, 774, 784, 788, 789, 790, 792, 793, 794, 795, 802, 804, 805, 806, 807, 808, 809, 810, 811, 818, 819, 824, 826, 827, 828, 829, 830, 832, 833, 834, 838, 842, 849, 850, 851, 853, 856, 858, 867, 870, 874, 882, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 916, 929, 930, 952, 955, 971, 973, 976, 978, 980, 981, 985, 986, 987, 989, 991, 996, 997, 1001, 1002, 1003, 1007, 1011, 1012, 1014, 1015, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "constant": [4, 105, 115, 155, 159, 165, 170, 188, 201, 202, 204, 218, 231, 236, 241, 264, 293, 298, 300, 304, 306, 314, 342, 344, 358, 368, 378, 385, 390, 400, 410, 413, 426, 440, 459, 476, 477, 478, 505, 507, 528, 532, 534, 541, 543, 544, 545, 546, 548, 550, 552, 554, 556, 559, 562, 564, 584, 600, 603, 605, 607, 621, 624, 626, 627, 629, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 670, 671, 672, 673, 674, 681, 683, 687, 689, 715, 716, 717, 721, 768, 770, 778, 826, 827, 836, 844, 850, 851, 858, 869, 872, 881, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 975, 977, 978, 981, 983, 984, 991, 995, 997, 1018, 1025, 1030, 1032, 1034, 1035, 1036, 1038], "varianc": [4, 5, 27, 44, 55, 57, 62, 73, 78, 80, 85, 86, 90, 95, 96, 97, 100, 103, 104, 106, 110, 127, 136, 159, 167, 170, 178, 180, 184, 189, 200, 202, 205, 218, 219, 251, 258, 261, 264, 270, 271, 274, 290, 297, 303, 308, 348, 358, 368, 372, 385, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 415, 435, 439, 443, 457, 515, 518, 526, 527, 528, 535, 538, 543, 544, 549, 550, 552, 553, 554, 559, 597, 601, 602, 605, 619, 637, 638, 639, 646, 650, 651, 654, 656, 666, 667, 668, 669, 670, 681, 704, 721, 778, 788, 789, 831, 842, 857, 863, 869, 871, 873, 879, 881, 883, 884, 902, 904, 956, 957, 958, 962, 975, 976, 977, 979, 984, 985, 986, 993, 995, 996, 997, 998, 1003, 1012, 1014, 1015, 1018, 1022, 1030, 1032, 1033, 1034, 1035, 1036, 1037], "poisson": [4, 167, 178, 219, 237, 372, 410, 458, 459, 490, 517, 546, 552, 556, 559, 642, 663, 666, 674, 700, 717, 738, 742, 743, 745, 819, 853, 854, 857, 858, 866, 867, 868, 873, 902, 904, 934, 977, 997, 1032, 1033, 1034, 1035, 1036, 1038], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 133, 141, 176, 214, 229, 234, 235, 259, 261, 263, 266, 272, 276, 315, 322, 323, 325, 327, 331, 333, 334, 337, 338, 340, 341, 344, 406, 408, 413, 446, 529, 556, 613, 614, 633, 634, 635, 637, 638, 639, 642, 674, 679, 685, 717, 740, 745, 752, 759, 768, 769, 770, 788, 801, 804, 888, 889, 890, 895, 896, 897, 898, 899, 970, 973, 976, 977, 979, 994, 996, 1007, 1011, 1012, 1014, 1022, 1023, 1025, 1026, 1027, 1029, 1030, 1032, 1033, 1036, 1037, 1038], "achiev": [4, 12, 17, 19, 27, 31, 98, 112, 121, 123, 130, 160, 176, 200, 208, 258, 261, 268, 308, 325, 334, 337, 338, 342, 347, 358, 362, 364, 370, 371, 373, 378, 382, 388, 390, 400, 401, 403, 407, 408, 410, 411, 547, 552, 559, 634, 643, 670, 672, 701, 733, 756, 793, 794, 829, 873, 970, 971, 973, 977, 981, 991, 994, 996, 1004, 1016, 1035], "gridsearchcv": [4, 54, 69, 71, 73, 74, 76, 78, 103, 118, 167, 235, 241, 251, 254, 259, 260, 261, 262, 266, 269, 272, 277, 283, 285, 300, 305, 315, 319, 334, 338, 358, 363, 378, 388, 390, 394, 404, 407, 413, 496, 514, 534, 535, 569, 593, 601, 647, 697, 735, 801, 804, 853, 863, 893, 901, 949, 970, 977, 981, 985, 995, 996, 1001, 1002, 1011, 1012, 1016, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037], "tweedieregressor": [4, 314, 317, 642, 663, 977, 1033, 1036, 1037], "power": [4, 7, 17, 118, 123, 169, 201, 218, 252, 264, 269, 285, 303, 304, 307, 322, 331, 362, 363, 389, 401, 403, 406, 409, 410, 411, 414, 438, 476, 477, 478, 526, 529, 535, 538, 624, 674, 688, 717, 740, 742, 745, 835, 836, 843, 844, 846, 847, 868, 869, 870, 881, 882, 929, 930, 977, 978, 981, 989, 991, 995, 996, 1005, 1025, 1028, 1030, 1032, 1033, 1035], "param_grid": [4, 6, 71, 72, 73, 74, 118, 125, 235, 241, 251, 259, 260, 261, 265, 266, 269, 272, 283, 305, 334, 390, 394, 404, 410, 735, 790, 793, 801, 802, 949, 970, 981, 1011, 1012], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 353, 354, 355, 356, 357, 363, 370, 371, 373, 382, 390, 400, 403, 409, 411, 414, 426, 438, 459, 476, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 495, 496, 498, 499, 504, 506, 508, 509, 513, 516, 517, 530, 531, 538, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 562, 564, 577, 578, 584, 588, 590, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 670, 671, 672, 673, 691, 698, 699, 707, 722, 723, 724, 727, 731, 732, 750, 762, 776, 777, 780, 785, 786, 787, 790, 804, 814, 815, 816, 826, 827, 828, 829, 836, 838, 844, 851, 868, 872, 894, 896, 899, 901, 902, 903, 904, 930, 970, 977, 978, 981, 982, 983, 984, 991, 995, 996, 997, 1012, 1016, 1023, 1028, 1030, 1038], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 363, 376, 377, 378, 379, 380, 382, 388, 390, 393, 411, 1002, 1004, 1016], "17": [4, 15, 19, 39, 52, 74, 80, 153, 170, 199, 218, 219, 233, 262, 264, 297, 307, 347, 349, 371, 374, 381, 393, 395, 396, 403, 407, 438, 455, 481, 491, 494, 517, 525, 530, 534, 541, 543, 544, 549, 553, 554, 563, 564, 591, 622, 643, 651, 652, 653, 660, 663, 666, 668, 681, 686, 722, 723, 733, 754, 759, 777, 780, 782, 808, 831, 842, 857, 862, 863, 871, 873, 879, 895, 898, 901, 902, 903, 904, 970, 971, 982, 984, 991, 999, 1020, 1022, 1023, 1024, 1025, 1028, 1031, 1036], "648": [4, 15], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 371, 378, 380, 382, 390, 400, 403, 407, 408, 410, 411, 413, 458, 461, 482, 484, 485, 486, 488, 490, 494, 496, 498, 504, 547, 577, 582, 583, 584, 585, 615, 618, 625, 626, 693, 706, 710, 751, 752, 756, 757, 759, 760, 767, 768, 769, 770, 771, 774, 790, 793, 794, 804, 817, 823, 824, 827, 830, 841, 843, 844, 845, 850, 851, 970, 971, 975, 976, 977, 978, 981, 982, 983, 984, 985, 988, 991, 992, 997, 1007, 1013, 1015, 1037], "plot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 363, 374, 376, 377, 380, 382, 384, 390, 393, 411, 414, 434, 438, 448, 455, 492, 524, 638, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 868, 872, 874, 925, 981, 1001, 1014, 1016, 1022, 1024, 1028, 1032, 1036], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 377, 404, 462, 891, 997, 1001, 1002, 1033, 1036], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 371, 376, 378, 390, 393, 396, 1012, 1022, 1026, 1029], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 376, 380, 390, 393, 396, 1016, 1022, 1029], "kernelpca": [5, 404, 408, 527, 528, 535, 538, 682, 684, 686, 859, 991, 1023, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "take": [5, 8, 20, 30, 46, 53, 55, 57, 66, 75, 80, 92, 95, 112, 121, 152, 154, 157, 161, 170, 176, 183, 204, 208, 209, 225, 236, 248, 249, 256, 262, 266, 270, 271, 279, 281, 284, 287, 288, 289, 291, 292, 303, 317, 325, 330, 331, 334, 344, 348, 349, 353, 362, 363, 364, 370, 371, 376, 378, 381, 382, 383, 384, 388, 390, 391, 401, 403, 404, 406, 407, 408, 410, 411, 412, 413, 415, 431, 437, 440, 441, 443, 444, 446, 451, 452, 453, 455, 457, 463, 513, 527, 532, 533, 534, 540, 541, 575, 586, 589, 590, 592, 593, 594, 604, 605, 610, 614, 615, 618, 626, 637, 643, 665, 667, 668, 669, 670, 673, 685, 686, 693, 699, 701, 703, 713, 722, 723, 731, 735, 736, 749, 764, 767, 771, 772, 773, 774, 776, 777, 780, 781, 790, 791, 795, 796, 804, 808, 817, 835, 836, 837, 839, 841, 842, 843, 844, 845, 857, 867, 888, 889, 893, 894, 895, 896, 897, 898, 899, 917, 951, 970, 973, 977, 978, 980, 981, 982, 984, 986, 987, 988, 991, 996, 997, 1005, 1007, 1011, 1013, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "exact": [5, 7, 82, 100, 118, 157, 204, 234, 281, 358, 362, 363, 370, 376, 378, 385, 388, 389, 390, 403, 410, 412, 428, 476, 477, 478, 482, 490, 528, 529, 535, 555, 556, 632, 636, 640, 686, 790, 804, 814, 815, 816, 895, 898, 970, 973, 977, 978, 987, 991, 995, 996, 1029, 1030, 1032], "usp": 5, "digit": [5, 29, 35, 36, 51, 68, 72, 88, 93, 137, 142, 147, 149, 167, 191, 207, 216, 220, 225, 227, 233, 234, 259, 260, 263, 285, 290, 296, 298, 299, 301, 319, 321, 328, 369, 376, 382, 403, 409, 410, 412, 435, 439, 441, 496, 535, 538, 543, 560, 652, 682, 683, 684, 685, 686, 691, 698, 699, 707, 711, 712, 730, 784, 786, 815, 819, 835, 842, 849, 853, 854, 863, 873, 879, 886, 889, 898, 905, 906, 907, 970, 976, 978, 981, 984, 986, 994, 1007, 1011, 1014, 1015, 1018, 1026], "reproduc": [5, 12, 60, 112, 170, 176, 188, 270, 300, 363, 365, 375, 376, 378, 379, 384, 388, 390, 397, 403, 407, 408, 411, 415, 434, 448, 454, 463, 468, 482, 485, 486, 489, 491, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 545, 547, 548, 549, 550, 553, 554, 555, 556, 557, 601, 602, 604, 605, 628, 633, 634, 635, 636, 640, 641, 644, 646, 647, 648, 654, 655, 656, 657, 660, 661, 662, 665, 670, 672, 673, 683, 684, 686, 687, 688, 784, 788, 789, 792, 793, 794, 795, 796, 802, 804, 805, 806, 807, 808, 809, 810, 817, 818, 819, 823, 824, 827, 838, 842, 849, 850, 851, 858, 870, 874, 882, 885, 886, 893, 894, 895, 898, 929, 930, 952, 955, 973, 1001, 1004, 1022, 1030, 1035, 1036], "sect": 5, "bak\u0131r": [5, 408, 529], "g\u00f6khan": [5, 408, 529], "h": [5, 6, 48, 58, 95, 96, 111, 112, 113, 130, 149, 154, 170, 248, 286, 289, 297, 305, 317, 327, 330, 349, 373, 382, 401, 403, 405, 408, 409, 410, 411, 414, 438, 513, 526, 529, 532, 534, 541, 547, 561, 562, 576, 584, 601, 602, 683, 687, 698, 702, 750, 828, 832, 833, 834, 839, 849, 864, 873, 973, 975, 977, 978, 979, 981, 983, 985, 986, 995, 997, 1012, 1028, 1033, 1037, 1038], "jason": [5, 408, 529, 889, 1028, 1030, 1034, 1037], "weston": [5, 408, 529, 587, 588, 889], "bernhard": [5, 408, 529, 824, 859, 889, 982, 987, 996, 1028], "sch\u00f6lkopf": [5, 408, 529, 859, 987, 991, 996], "pre": [5, 71, 122, 170, 189, 303, 349, 365, 374, 376, 390, 393, 405, 407, 408, 410, 411, 412, 414, 415, 437, 438, 441, 453, 527, 529, 684, 706, 756, 856, 898, 981, 986, 991, 996, 997, 1001, 1002, 1018, 1025, 1030, 1036], "advanc": [5, 167, 228, 230, 244, 261, 364, 403, 408, 483, 495, 529, 626, 633, 776, 788, 842, 851, 854, 873, 902, 973, 981, 984, 991, 1005, 1019, 1024], "neural": [5, 6, 31, 261, 299, 365, 388, 390, 397, 407, 408, 410, 415, 527, 529, 532, 534, 541, 561, 562, 633, 639, 690, 734, 788, 842, 849, 850, 851, 859, 973, 977, 978, 979, 981, 984, 987, 991, 995, 997, 1001, 1003, 1005, 1012, 1017, 1018, 1022, 1034], "system": [5, 100, 184, 261, 268, 358, 362, 363, 364, 371, 373, 376, 377, 378, 379, 384, 388, 393, 403, 408, 410, 414, 438, 465, 466, 472, 529, 533, 537, 544, 633, 639, 644, 645, 648, 649, 650, 676, 677, 719, 749, 762, 788, 842, 888, 889, 949, 977, 981, 984, 993, 1001, 1002, 1005, 1016, 1022, 1030, 1031], "2004": [5, 149, 261, 371, 373, 403, 405, 408, 467, 529, 601, 602, 683, 687, 699, 736, 776, 889, 975, 977, 978, 983, 996, 1014], "449": [5, 147, 150, 408, 529], "456": [5, 408, 529], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 56, 57, 61, 65, 66, 67, 70, 71, 72, 74, 75, 82, 95, 97, 99, 100, 101, 103, 106, 109, 111, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 179, 180, 182, 184, 185, 187, 188, 189, 191, 192, 193, 194, 200, 201, 202, 204, 205, 207, 208, 215, 216, 217, 218, 221, 222, 223, 224, 226, 229, 232, 234, 235, 237, 239, 246, 248, 249, 260, 262, 264, 265, 267, 274, 279, 281, 283, 286, 293, 294, 297, 300, 303, 304, 306, 307, 308, 322, 323, 324, 325, 327, 342, 347, 348, 349, 370, 376, 380, 384, 388, 390, 391, 407, 445, 528, 860, 973, 999, 1001, 1025], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 57, 75, 82, 118, 158, 179, 184, 185, 187, 191, 193, 194, 205, 222, 223, 229, 232, 239, 262, 264, 267, 274, 293, 308, 342, 347, 348, 349, 525, 531, 652, 658, 679, 680, 751, 752, 979, 981], "licenc": [5, 370], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 216, 217, 218, 222, 223, 224, 226, 229, 232, 234, 235, 237, 239, 246, 248, 262, 265, 267, 274, 279, 281, 283, 289, 290, 291, 293, 294, 297, 300, 303, 304, 305, 306, 307, 308, 322, 323, 324, 325, 327, 338, 339, 342, 343, 347, 348, 349, 382], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 216, 217, 218, 222, 223, 229, 234, 235, 237, 239, 246, 248, 262, 267, 274, 279, 281, 283, 289, 290, 291, 293, 294, 297, 303, 304, 305, 306, 307, 308, 338, 339, 342, 343, 347, 348, 349], "normal": [5, 12, 17, 19, 20, 26, 29, 34, 35, 37, 40, 44, 46, 57, 61, 62, 66, 73, 75, 78, 79, 80, 85, 86, 96, 101, 112, 113, 115, 118, 124, 125, 128, 129, 144, 155, 158, 159, 165, 167, 169, 170, 178, 179, 180, 181, 182, 184, 190, 193, 195, 198, 202, 203, 204, 206, 214, 219, 224, 239, 246, 251, 252, 255, 258, 261, 267, 286, 287, 302, 304, 308, 311, 314, 317, 325, 334, 348, 349, 358, 365, 368, 371, 372, 373, 376, 381, 385, 389, 390, 400, 401, 403, 404, 406, 409, 410, 411, 415, 434, 443, 445, 446, 447, 456, 458, 459, 469, 476, 477, 478, 483, 490, 506, 509, 513, 520, 521, 527, 530, 535, 536, 538, 542, 543, 546, 547, 548, 551, 552, 553, 554, 556, 557, 558, 559, 560, 573, 574, 576, 582, 583, 584, 585, 605, 619, 621, 633, 644, 645, 648, 649, 650, 652, 653, 658, 659, 663, 666, 670, 674, 681, 685, 689, 691, 697, 698, 700, 712, 717, 719, 727, 729, 734, 738, 742, 743, 745, 748, 749, 750, 754, 763, 785, 786, 787, 793, 794, 819, 821, 830, 832, 838, 839, 842, 853, 854, 857, 858, 861, 863, 866, 867, 868, 869, 870, 871, 873, 878, 879, 881, 882, 883, 884, 888, 889, 901, 902, 903, 904, 929, 930, 934, 957, 958, 963, 964, 970, 975, 977, 978, 979, 980, 983, 987, 992, 994, 996, 997, 1012, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "pixel": [5, 6, 13, 20, 32, 47, 48, 53, 95, 110, 136, 147, 167, 176, 233, 259, 299, 300, 373, 403, 408, 410, 411, 412, 487, 488, 489, 558, 579, 580, 601, 602, 628, 984, 986, 997, 1012, 1015], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 71, 75, 86, 100, 111, 112, 117, 119, 123, 124, 125, 126, 127, 128, 131, 145, 146, 169, 170, 172, 173, 176, 184, 195, 200, 207, 208, 215, 216, 218, 230, 239, 242, 243, 255, 258, 259, 264, 268, 270, 274, 279, 284, 289, 290, 297, 299, 300, 305, 307, 308, 310, 313, 314, 315, 326, 352, 356, 358, 381, 389, 404, 407, 410, 431, 432, 552, 554, 561, 562, 691, 692, 694, 696, 790, 821, 824, 842, 850, 851, 853, 903, 904, 970, 971, 981, 983, 984, 989, 991, 996, 1012, 1019, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1035], "data_id": [5, 122, 157, 170, 200, 218, 230, 309, 370, 490], "41082": 5, "return_x_i": [5, 7, 14, 58, 70, 71, 72, 73, 95, 118, 122, 123, 135, 138, 139, 140, 145, 164, 165, 172, 173, 176, 185, 187, 188, 189, 191, 196, 197, 207, 215, 216, 230, 238, 239, 242, 243, 257, 260, 263, 268, 269, 276, 279, 283, 290, 298, 299, 300, 308, 313, 315, 317, 318, 319, 325, 337, 349, 352, 369, 381, 382, 389, 397, 403, 404, 407, 410, 412, 440, 482, 483, 484, 485, 486, 488, 489, 490, 491, 494, 495, 496, 498, 499, 504, 526, 527, 528, 529, 552, 555, 556, 561, 562, 586, 589, 590, 592, 593, 594, 596, 604, 613, 614, 616, 617, 632, 633, 652, 653, 662, 667, 668, 669, 682, 683, 684, 685, 695, 781, 793, 794, 796, 821, 826, 837, 842, 845, 902, 903, 904, 971, 976, 981, 982, 983, 984, 991, 1007, 1011, 1012, 1014, 1015, 1019, 1028, 1030, 1032, 1035], "idea": [5, 53, 80, 81, 118, 149, 157, 170, 201, 221, 286, 334, 352, 362, 363, 376, 381, 382, 405, 406, 407, 408, 409, 410, 412, 601, 602, 977, 978, 981, 984, 987, 1000, 1005, 1016], "noisi": [5, 33, 49, 55, 62, 96, 112, 145, 152, 158, 184, 199, 202, 224, 232, 252, 262, 268, 270, 271, 308, 354, 355, 358, 403, 411, 413, 414, 438, 440, 444, 515, 518, 930, 976, 978, 984, 996, 1001], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 57, 61, 66, 71, 72, 75, 79, 80, 95, 97, 98, 105, 113, 118, 128, 131, 134, 153, 157, 160, 161, 170, 171, 173, 176, 179, 180, 182, 184, 186, 190, 191, 192, 194, 199, 200, 201, 202, 204, 209, 210, 211, 213, 215, 216, 218, 223, 224, 226, 232, 233, 234, 235, 236, 240, 246, 248, 252, 256, 257, 259, 261, 264, 266, 271, 272, 275, 286, 287, 288, 300, 304, 305, 307, 309, 310, 316, 326, 327, 332, 333, 335, 336, 337, 341, 342, 344, 347, 348, 352, 355, 356, 362, 364, 371, 373, 376, 378, 381, 382, 394, 400, 403, 404, 407, 408, 409, 410, 411, 431, 435, 439, 443, 465, 466, 472, 484, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 522, 524, 528, 530, 533, 538, 539, 540, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 604, 625, 626, 627, 633, 634, 635, 636, 640, 641, 642, 643, 646, 647, 652, 653, 654, 655, 656, 657, 659, 661, 663, 665, 674, 675, 678, 682, 683, 684, 685, 687, 739, 788, 789, 792, 817, 818, 823, 828, 829, 830, 832, 833, 834, 838, 850, 851, 869, 871, 874, 883, 970, 971, 974, 978, 981, 982, 988, 991, 993, 1007, 1011, 1015, 1016, 1030, 1031, 1032, 1035, 1036], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 55, 61, 62, 67, 75, 86, 95, 96, 98, 100, 103, 113, 115, 125, 129, 130, 151, 152, 157, 162, 167, 179, 181, 182, 184, 189, 190, 195, 198, 199, 202, 203, 204, 205, 217, 224, 226, 229, 231, 232, 235, 261, 269, 274, 275, 293, 297, 298, 305, 310, 314, 341, 354, 355, 358, 372, 378, 381, 401, 403, 408, 410, 412, 413, 414, 438, 440, 446, 505, 507, 508, 509, 510, 511, 512, 516, 518, 519, 524, 526, 528, 535, 601, 602, 605, 607, 608, 609, 610, 611, 615, 616, 618, 619, 638, 639, 643, 644, 645, 647, 648, 649, 650, 657, 658, 659, 665, 673, 686, 870, 882, 888, 974, 976, 977, 978, 981, 984, 994, 1014, 1015, 1023, 1028, 1033, 1035, 1036], "approach": [5, 8, 58, 63, 66, 99, 149, 152, 164, 170, 173, 182, 188, 200, 202, 208, 218, 221, 309, 338, 347, 348, 349, 364, 375, 376, 382, 385, 390, 393, 397, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 431, 437, 440, 442, 446, 456, 514, 526, 576, 583, 605, 629, 652, 653, 668, 669, 822, 838, 930, 970, 971, 977, 978, 981, 982, 984, 985, 991, 995, 996, 1000, 1001, 1005, 1009, 1014, 1015, 1026, 1038], "copi": [5, 12, 17, 44, 62, 75, 98, 115, 149, 164, 165, 170, 171, 172, 186, 193, 206, 216, 218, 222, 281, 322, 323, 325, 327, 348, 353, 363, 373, 376, 378, 380, 381, 382, 388, 390, 428, 431, 434, 436, 437, 438, 440, 441, 443, 448, 453, 476, 477, 478, 479, 494, 496, 504, 526, 527, 528, 529, 535, 542, 547, 548, 553, 555, 556, 566, 584, 591, 601, 602, 604, 605, 622, 624, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 665, 666, 668, 673, 675, 678, 679, 680, 725, 762, 783, 790, 804, 833, 834, 848, 856, 859, 862, 863, 864, 865, 869, 870, 871, 873, 876, 878, 879, 880, 881, 882, 883, 884, 888, 889, 893, 895, 896, 897, 898, 899, 908, 911, 913, 914, 940, 952, 954, 955, 991, 996, 997, 1002, 1008, 1011, 1016, 1022, 1025, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "add": [5, 12, 16, 17, 20, 25, 26, 27, 32, 33, 40, 44, 54, 75, 80, 81, 86, 96, 121, 124, 145, 149, 152, 157, 158, 159, 164, 165, 182, 189, 195, 201, 203, 204, 215, 224, 229, 233, 235, 236, 268, 270, 271, 281, 293, 305, 307, 313, 315, 316, 337, 338, 341, 342, 348, 362, 374, 375, 376, 377, 378, 380, 382, 384, 390, 393, 399, 401, 407, 410, 411, 412, 509, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 596, 621, 622, 624, 626, 652, 653, 688, 691, 811, 833, 834, 890, 920, 949, 970, 971, 980, 987, 991, 994, 995, 1002, 1014, 1015, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "corrupt": [5, 103, 184, 206, 217, 388, 849, 977, 989], "uncorrupt": 5, "base": [5, 12, 14, 17, 20, 25, 26, 27, 49, 56, 57, 58, 67, 70, 71, 75, 80, 90, 95, 96, 109, 111, 112, 113, 118, 124, 125, 126, 130, 132, 135, 143, 146, 150, 152, 157, 158, 160, 171, 172, 173, 178, 189, 200, 201, 208, 217, 218, 219, 221, 229, 236, 237, 239, 258, 259, 264, 281, 294, 300, 303, 304, 306, 308, 315, 317, 327, 332, 338, 348, 352, 362, 363, 365, 370, 371, 372, 373, 374, 377, 378, 379, 384, 390, 391, 392, 401, 404, 408, 409, 411, 413, 414, 415, 431, 438, 440, 441, 442, 443, 444, 446, 450, 451, 455, 457, 458, 459, 460, 461, 481, 494, 495, 502, 503, 526, 527, 529, 530, 531, 532, 533, 535, 540, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 572, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 601, 602, 604, 605, 610, 611, 612, 615, 618, 626, 627, 629, 630, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 658, 663, 665, 666, 667, 668, 669, 674, 676, 677, 679, 680, 681, 684, 686, 698, 711, 719, 728, 729, 730, 732, 734, 748, 749, 750, 778, 781, 786, 790, 792, 793, 794, 796, 797, 799, 804, 808, 809, 810, 811, 817, 819, 823, 824, 827, 835, 836, 837, 839, 841, 843, 844, 845, 850, 851, 854, 855, 858, 865, 866, 868, 872, 873, 874, 882, 885, 886, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 916, 924, 949, 950, 970, 972, 973, 975, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 991, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1005, 1011, 1016, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033], "solv": [5, 6, 66, 152, 189, 234, 261, 375, 376, 377, 378, 381, 388, 403, 405, 407, 408, 413, 441, 447, 456, 472, 525, 531, 532, 533, 537, 539, 540, 541, 542, 629, 631, 640, 646, 648, 649, 658, 659, 664, 666, 668, 671, 679, 680, 681, 823, 893, 894, 897, 930, 972, 975, 977, 978, 981, 982, 995, 996, 997, 1000, 1001, 1005, 1009, 1012, 1016, 1028, 1032, 1035], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 111, 112, 115, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 180, 184, 195, 197, 198, 201, 207, 208, 214, 215, 216, 218, 230, 238, 242, 243, 248, 250, 255, 258, 259, 264, 268, 270, 274, 279, 284, 287, 289, 290, 297, 299, 300, 305, 307, 308, 310, 313, 314, 315, 325, 326, 333, 347, 352, 356, 358, 362, 370, 378, 381, 389, 404, 407, 410, 431, 432, 503, 552, 553, 554, 561, 562, 691, 692, 694, 696, 819, 821, 824, 842, 850, 851, 853, 867, 903, 904, 971, 981, 983, 984, 985, 987, 989, 991, 995, 996, 1011, 1012, 1019], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 111, 112, 115, 117, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 157, 160, 169, 170, 171, 172, 173, 176, 180, 184, 190, 195, 197, 198, 206, 207, 208, 214, 215, 216, 218, 230, 232, 238, 242, 243, 248, 255, 258, 259, 264, 268, 270, 274, 275, 279, 284, 287, 289, 290, 297, 299, 300, 305, 307, 308, 310, 313, 314, 315, 325, 326, 333, 347, 352, 354, 355, 356, 358, 362, 370, 378, 381, 389, 404, 407, 410, 432, 464, 465, 466, 467, 468, 469, 470, 503, 552, 553, 554, 561, 562, 691, 692, 694, 696, 819, 821, 824, 842, 850, 851, 853, 867, 903, 904, 971, 981, 983, 984, 985, 987, 991, 995, 996, 997, 1011, 1012, 1014, 1019, 1022], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 111, 112, 115, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 180, 184, 195, 197, 198, 201, 207, 208, 215, 216, 230, 238, 242, 243, 248, 255, 258, 259, 264, 268, 270, 274, 279, 284, 289, 290, 297, 299, 300, 305, 308, 310, 313, 314, 315, 322, 323, 325, 326, 327, 347, 352, 356, 358, 362, 370, 378, 381, 389, 404, 407, 410, 431, 432, 552, 553, 554, 561, 562, 691, 692, 694, 696, 819, 821, 824, 842, 850, 851, 853, 903, 904, 971, 981, 983, 984, 989, 991, 996, 1011, 1012, 1019], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 111, 112, 115, 117, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 160, 169, 170, 171, 172, 173, 176, 184, 195, 197, 200, 206, 207, 208, 215, 216, 218, 230, 238, 242, 243, 248, 255, 258, 259, 264, 268, 270, 274, 279, 284, 289, 290, 297, 299, 300, 305, 308, 310, 313, 314, 315, 325, 326, 347, 352, 356, 358, 370, 381, 389, 404, 407, 410, 432, 552, 553, 554, 561, 562, 691, 692, 694, 696, 819, 821, 824, 842, 850, 851, 853, 903, 904, 981, 983, 984, 991, 996, 1011, 1012, 1019, 1022], "stratifi": [5, 100, 119, 128, 145, 172, 215, 230, 239, 243, 256, 261, 264, 270, 284, 289, 290, 313, 378, 390, 545, 553, 561, 562, 596, 653, 660, 662, 670, 790, 793, 794, 796, 804, 805, 806, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 827, 842, 850, 952, 981, 984, 1011, 1027, 1028, 1029, 1031, 1032, 1035], "train_siz": [5, 7, 10, 112, 131, 153, 176, 216, 235, 239, 263, 274, 315, 318, 342, 792, 796, 807, 810, 817, 819, 976, 1011, 1022, 1023, 1028, 1029], "1_000": [5, 48, 72, 100, 152, 157, 159, 171, 233, 258, 342, 695, 812], "rng": [5, 20, 21, 31, 37, 44, 50, 62, 81, 86, 95, 97, 103, 113, 125, 128, 129, 131, 152, 153, 156, 158, 159, 161, 164, 165, 169, 172, 179, 180, 181, 182, 184, 189, 194, 201, 202, 207, 214, 229, 235, 236, 238, 246, 256, 264, 267, 272, 273, 297, 307, 310, 314, 315, 317, 319, 322, 323, 327, 337, 354, 355, 358, 363, 378, 381, 394, 464, 468, 469, 470, 637, 643, 664, 666, 672, 802, 828, 829, 830, 832, 833, 834, 838, 841, 843, 844, 845, 870, 882, 885, 886, 888, 889, 890, 899, 1007], "randomst": [5, 13, 20, 21, 24, 31, 37, 44, 50, 61, 62, 81, 82, 86, 95, 97, 103, 113, 124, 125, 128, 129, 131, 145, 152, 153, 156, 158, 159, 161, 164, 165, 169, 172, 179, 180, 181, 182, 184, 189, 194, 201, 202, 207, 214, 224, 229, 235, 236, 246, 249, 256, 264, 267, 268, 270, 271, 272, 273, 297, 304, 306, 307, 310, 314, 315, 317, 319, 322, 323, 327, 337, 354, 355, 378, 381, 385, 390, 394, 408, 415, 434, 437, 441, 443, 445, 446, 447, 448, 452, 453, 454, 456, 463, 464, 468, 469, 470, 482, 485, 486, 489, 491, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 577, 578, 601, 602, 604, 605, 621, 626, 628, 633, 634, 635, 636, 637, 640, 641, 643, 644, 646, 647, 648, 652, 653, 654, 655, 656, 657, 660, 661, 662, 664, 665, 666, 668, 670, 671, 672, 673, 681, 683, 684, 685, 686, 687, 688, 689, 695, 774, 784, 788, 789, 792, 793, 794, 795, 796, 802, 804, 805, 806, 807, 808, 809, 810, 817, 818, 819, 823, 824, 827, 828, 829, 830, 832, 833, 834, 838, 842, 849, 850, 851, 858, 870, 874, 882, 885, 886, 888, 889, 890, 893, 894, 895, 898, 899, 901, 902, 903, 904, 916, 929, 930, 950, 952, 955, 991, 1007, 1018], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 218, 272, 369, 378, 379, 389, 390, 407, 462, 569, 891, 1011, 1012, 1022, 1029, 1030, 1031, 1035], "qualit": [5, 6, 53, 55, 61, 118, 125, 200, 318, 371, 403, 433, 695, 1012, 1037], "assess": [5, 37, 60, 112, 123, 125, 170, 200, 218, 239, 257, 258, 260, 264, 401, 410, 695, 736, 980, 981, 987, 1002, 1037], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 55, 70, 78, 82, 86, 91, 100, 113, 115, 122, 124, 125, 157, 159, 170, 171, 180, 186, 190, 191, 201, 204, 206, 215, 217, 218, 248, 261, 268, 273, 283, 294, 298, 300, 303, 305, 307, 315, 322, 327, 334, 339, 342, 347, 348, 364, 369, 371, 373, 376, 379, 385, 390, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 416, 435, 437, 439, 440, 441, 443, 452, 453, 457, 469, 490, 492, 532, 534, 541, 549, 550, 551, 555, 556, 558, 576, 583, 584, 596, 601, 602, 644, 648, 649, 650, 652, 653, 673, 676, 677, 739, 793, 794, 808, 818, 821, 850, 851, 858, 886, 895, 898, 930, 970, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 993, 994, 997, 1002, 1005, 1014, 1015, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "img": [5, 50, 66, 500, 580], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 58, 80, 105, 113, 115, 121, 125, 130, 131, 132, 141, 152, 154, 156, 157, 158, 159, 170, 179, 190, 191, 193, 200, 213, 214, 222, 226, 229, 233, 235, 239, 243, 248, 250, 264, 268, 270, 281, 286, 287, 293, 294, 297, 298, 299, 300, 305, 306, 317, 327, 333, 334, 339, 340, 341, 343, 344, 347, 354, 355, 459, 487, 488, 489, 625, 712, 968, 981, 1038], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 58, 82, 89, 95, 98, 106, 154, 155, 156, 160, 173, 191, 216, 222, 238, 272, 285, 300, 322, 323, 334, 340, 343, 370, 626, 691, 1012, 1013, 1036], "grei": [5, 34, 271, 303, 342, 371], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 78, 82, 85, 95, 118, 204, 222, 234, 238, 255, 260, 262, 263, 303, 323, 327, 334, 344, 347, 371, 376, 378, 403, 405, 412, 436, 547, 548, 553, 554, 582, 585, 628, 650, 686, 709, 788, 789, 790, 793, 794, 804, 816, 934, 980, 986, 996, 1002, 1022, 1026, 1027, 1029], "fontsiz": [5, 8, 10, 14, 34, 50, 60, 91, 98, 121, 144, 155, 156, 158, 161, 171, 180, 190, 199, 211, 222, 223, 249, 256, 265, 266, 267, 272, 273, 300, 307, 341, 907], "mse": [5, 7, 78, 79, 125, 126, 164, 165, 200, 202, 204, 206, 275, 641, 647, 743, 981, 997, 1033, 1035], "quantit": [5, 6, 25, 61, 125, 135, 149, 257, 275, 373, 1012], "nmse": [5, 275], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 62, 64, 67, 85, 92, 98, 105, 125, 131, 132, 144, 170, 171, 176, 180, 189, 191, 196, 200, 215, 216, 217, 218, 229, 233, 239, 260, 264, 265, 267, 269, 270, 271, 289, 290, 297, 305, 308, 317, 334, 347, 348, 358, 404, 407, 410, 817], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 57, 74, 75, 86, 90, 95, 100, 104, 111, 115, 117, 130, 132, 135, 138, 139, 141, 144, 147, 149, 156, 158, 164, 165, 168, 169, 171, 174, 176, 182, 184, 186, 188, 189, 190, 195, 197, 198, 201, 202, 204, 208, 212, 214, 216, 217, 218, 219, 220, 223, 225, 227, 232, 235, 237, 238, 241, 255, 257, 258, 259, 261, 264, 266, 267, 268, 269, 270, 271, 275, 286, 289, 290, 300, 303, 304, 305, 310, 315, 316, 329, 331, 334, 335, 336, 339, 342, 343, 345, 347, 354, 355, 363, 365, 368, 372, 373, 374, 378, 379, 381, 390, 392, 403, 406, 407, 408, 409, 410, 411, 412, 413, 415, 436, 449, 459, 461, 469, 476, 477, 478, 490, 495, 496, 506, 509, 515, 518, 526, 527, 528, 529, 530, 533, 535, 537, 538, 542, 543, 544, 548, 560, 576, 583, 587, 588, 600, 603, 608, 614, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 687, 695, 701, 710, 743, 746, 758, 760, 767, 778, 790, 801, 805, 816, 819, 833, 834, 838, 842, 849, 850, 851, 854, 858, 859, 860, 863, 866, 868, 870, 871, 872, 873, 882, 886, 893, 894, 895, 896, 897, 898, 899, 970, 972, 973, 974, 976, 981, 984, 985, 986, 987, 988, 989, 995, 996, 1001, 1003, 1005, 1007, 1010, 1011, 1016, 1017, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036], "radial": [5, 100, 152, 157, 159, 334, 338, 368, 446, 616, 685, 979, 996, 1018], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 133, 141, 152, 153, 154, 156, 157, 158, 159, 161, 167, 214, 228, 229, 235, 244, 259, 261, 263, 266, 276, 327, 329, 331, 340, 341, 345, 368, 404, 408, 410, 446, 496, 498, 529, 535, 604, 605, 606, 607, 610, 613, 614, 615, 617, 618, 633, 634, 635, 636, 637, 670, 685, 758, 767, 769, 790, 801, 804, 810, 853, 873, 888, 889, 893, 895, 896, 897, 898, 899, 970, 973, 974, 976, 978, 981, 987, 991, 994, 1007, 1012, 1018, 1028, 1033], "decomposit": [5, 6, 14, 17, 58, 70, 72, 73, 74, 86, 87, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 130, 136, 221, 222, 224, 234, 237, 241, 260, 285, 290, 308, 317, 348, 364, 365, 369, 382, 385, 390, 400, 401, 404, 410, 443, 445, 446, 447, 456, 476, 477, 478, 489, 543, 550, 605, 644, 645, 646, 647, 648, 649, 650, 657, 658, 659, 666, 667, 668, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 788, 789, 842, 849, 852, 855, 871, 902, 929, 930, 977, 978, 981, 998, 1001, 1003, 1010, 1012, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "kernel_pca": [5, 100, 404], "400": [5, 26, 50, 95, 111, 127, 131, 152, 165, 186, 206, 226, 273, 298, 348, 371, 408, 489, 1016], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 149, 152, 155, 157, 158, 159, 160, 161, 164, 170, 180, 193, 200, 201, 207, 214, 218, 224, 229, 235, 240, 246, 249, 252, 259, 269, 272, 299, 310, 316, 319, 326, 332, 334, 342, 347, 382, 415, 437, 441, 446, 453, 456, 465, 466, 472, 476, 477, 478, 525, 526, 527, 530, 531, 532, 533, 534, 536, 537, 539, 540, 541, 553, 554, 555, 556, 586, 591, 605, 607, 608, 609, 613, 614, 616, 617, 619, 621, 632, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 683, 684, 685, 686, 687, 688, 689, 721, 734, 778, 788, 789, 804, 828, 829, 830, 831, 832, 833, 834, 842, 850, 851, 858, 888, 889, 893, 894, 895, 896, 897, 898, 899, 967, 970, 981, 985, 989, 991, 995, 1012, 1016, 1030, 1035, 1036, 1037], "fit_inverse_transform": [5, 100, 529, 1031], "5e": [5, 95, 185, 589, 590, 592], "inde": [5, 7, 25, 39, 40, 53, 55, 58, 82, 86, 100, 112, 115, 148, 149, 152, 170, 172, 179, 184, 188, 189, 200, 202, 263, 264, 268, 270, 281, 303, 308, 342, 348, 358, 362, 375, 381, 389, 390, 391, 403, 405, 410, 561, 562, 977, 991, 995, 1036], "least": [5, 14, 80, 81, 84, 87, 98, 123, 126, 149, 160, 167, 178, 179, 184, 193, 200, 202, 204, 205, 208, 217, 218, 219, 233, 239, 261, 279, 308, 315, 316, 334, 348, 349, 362, 369, 371, 373, 375, 376, 380, 382, 384, 388, 390, 391, 394, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 438, 442, 444, 450, 451, 452, 455, 468, 476, 477, 478, 479, 488, 510, 525, 531, 533, 535, 536, 537, 539, 540, 541, 542, 543, 551, 552, 553, 554, 556, 558, 559, 560, 587, 596, 629, 637, 640, 642, 644, 645, 646, 647, 648, 649, 650, 651, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 674, 676, 677, 678, 679, 680, 681, 686, 691, 706, 710, 712, 778, 791, 795, 796, 802, 804, 805, 806, 808, 809, 811, 814, 817, 818, 819, 850, 851, 854, 865, 873, 898, 901, 902, 903, 904, 922, 944, 971, 974, 978, 981, 984, 993, 995, 996, 997, 1002, 1003, 1005, 1014, 1018, 1022, 1024, 1025, 1028, 1029, 1033], "hope": [5, 218, 390, 402, 1031], "remov": [5, 9, 14, 16, 17, 34, 54, 55, 70, 75, 80, 149, 164, 165, 170, 173, 179, 214, 262, 287, 303, 310, 313, 314, 315, 333, 336, 347, 348, 352, 358, 368, 371, 375, 376, 377, 380, 381, 385, 390, 403, 404, 407, 410, 411, 413, 414, 431, 436, 438, 441, 443, 444, 451, 453, 472, 482, 483, 520, 528, 529, 531, 533, 535, 540, 547, 548, 549, 550, 561, 562, 563, 564, 573, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 605, 624, 627, 632, 638, 639, 644, 645, 648, 649, 650, 652, 658, 659, 734, 761, 771, 772, 773, 796, 812, 817, 840, 852, 853, 857, 858, 866, 870, 871, 873, 882, 896, 897, 899, 908, 924, 925, 927, 971, 978, 984, 997, 1003, 1008, 1018, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "think": [5, 37, 171, 347, 348, 376, 409, 980, 1002, 1004, 1005, 1007], "happen": [5, 117, 188, 303, 309, 348, 358, 362, 363, 374, 375, 376, 380, 381, 382, 388, 390, 391, 393, 403, 405, 407, 410, 431, 509, 566, 652, 778, 871, 873, 893, 977, 981, 982, 996, 1002, 1016, 1030, 1034, 1035, 1037, 1038], "ridg": [5, 10, 13, 54, 75, 132, 149, 151, 162, 164, 167, 170, 171, 178, 179, 184, 200, 201, 219, 228, 238, 244, 347, 362, 365, 388, 408, 410, 413, 518, 529, 533, 537, 605, 609, 616, 619, 637, 638, 639, 641, 643, 651, 655, 667, 668, 669, 672, 681, 695, 743, 790, 796, 804, 826, 899, 981, 989, 991, 995, 996, 1003, 1014, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1035, 1036, 1037, 1038], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 146, 236, 285, 348, 394, 408, 411, 439, 459, 476, 477, 478, 527, 528, 529, 532, 533, 534, 535, 537, 538, 575, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 624, 790, 793, 794, 804, 853, 857, 858, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 873, 885, 886, 991, 992, 993, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 33, 58, 79, 86, 90, 95, 97, 103, 111, 112, 115, 118, 121, 125, 128, 152, 154, 156, 158, 160, 171, 172, 184, 185, 186, 190, 200, 201, 202, 203, 213, 221, 225, 232, 233, 238, 248, 252, 260, 261, 263, 264, 268, 269, 271, 274, 284, 285, 287, 288, 305, 308, 317, 325, 334, 340, 347, 348, 349, 353, 371, 376, 401, 402, 403, 406, 407, 408, 409, 410, 411, 414, 438, 442, 458, 461, 492, 503, 526, 528, 535, 538, 547, 553, 554, 555, 556, 557, 582, 583, 585, 597, 605, 607, 608, 609, 611, 613, 614, 616, 617, 619, 626, 627, 629, 631, 671, 673, 706, 710, 718, 721, 727, 732, 788, 789, 839, 841, 843, 844, 845, 847, 874, 893, 894, 895, 896, 897, 900, 917, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 993, 995, 996, 997, 1014, 1024, 1025, 1030, 1037], "analysi": [5, 7, 9, 25, 29, 35, 36, 57, 63, 68, 90, 94, 96, 97, 99, 100, 102, 104, 107, 122, 167, 170, 189, 222, 245, 253, 258, 261, 262, 266, 282, 295, 303, 308, 342, 348, 365, 368, 371, 373, 376, 378, 391, 400, 403, 405, 410, 411, 415, 433, 441, 442, 467, 469, 470, 476, 477, 479, 496, 498, 506, 509, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 549, 550, 625, 632, 682, 684, 685, 686, 687, 704, 713, 718, 719, 749, 781, 782, 783, 784, 788, 790, 815, 819, 835, 842, 853, 854, 859, 869, 873, 881, 929, 930, 971, 977, 978, 980, 981, 991, 1000, 1001, 1003, 1005, 1008, 1017, 1018, 1022, 1023, 1024, 1026, 1031], "favor": [5, 82, 118, 246, 252, 388, 405, 410, 627, 723, 798, 800, 852, 970, 989, 1024, 1026, 1028, 1029, 1031, 1034, 1035, 1036, 1037, 1038], "background": [5, 11, 47, 66, 128, 300, 305, 371, 376, 384, 403, 487, 488, 978, 986, 995, 1032], "342": [5, 15], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 71, 72, 73, 74, 75, 80, 81, 82, 86, 93, 94, 98, 99, 100, 102, 106, 107, 110, 111, 113, 114, 115, 116, 117, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 142, 145, 146, 147, 148, 149, 151, 160, 162, 164, 165, 172, 173, 176, 178, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 196, 197, 199, 203, 204, 207, 208, 212, 213, 214, 215, 216, 217, 219, 223, 225, 226, 228, 230, 233, 235, 237, 238, 242, 243, 244, 246, 248, 249, 250, 252, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 276, 279, 281, 283, 284, 285, 289, 290, 291, 292, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 328, 329, 330, 332, 334, 335, 336, 337, 342, 343, 344, 345, 348, 349, 351, 352, 354, 355, 356, 357, 358, 363, 364, 365, 378, 379, 380, 382, 389, 390, 392, 393, 397, 399, 400, 401, 403, 404, 407, 408, 409, 410, 411, 412, 418, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 453, 463, 464, 467, 468, 469, 470, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 540, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 577, 578, 582, 583, 584, 586, 587, 588, 589, 590, 592, 593, 594, 596, 597, 604, 605, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 622, 625, 626, 627, 628, 629, 632, 633, 634, 637, 639, 640, 641, 643, 645, 646, 647, 649, 651, 652, 653, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 673, 682, 683, 684, 685, 686, 691, 692, 694, 695, 696, 697, 698, 702, 722, 748, 750, 780, 781, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 857, 858, 866, 867, 871, 873, 875, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 913, 914, 918, 919, 970, 971, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 1001, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1015, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "excerpt": [6, 993, 1012], "wild": [6, 369, 487, 488, 502, 503, 1012, 1018, 1022], "aka": [6, 297, 347, 388, 411, 446, 530, 532, 534, 538, 541, 575, 576, 609, 616, 645, 646, 648, 649, 650, 652, 653, 656, 660, 661, 662, 664, 670, 671, 672, 734, 860, 864, 866, 977, 985, 995, 1007, 1012, 1024, 1036], "lfw": [6, 371, 487, 488, 1012, 1022], "vi": [6, 8, 371, 693, 1012, 1030, 1033], "www": [6, 71, 176, 200, 216, 218, 230, 279, 299, 370, 371, 376, 384, 393, 403, 407, 436, 443, 481, 502, 503, 525, 528, 531, 535, 638, 652, 658, 665, 679, 680, 842, 849, 901, 902, 977, 994, 1012], "umass": [6, 19, 371, 1012], "edu": [6, 8, 11, 17, 46, 123, 149, 159, 176, 182, 221, 249, 260, 286, 294, 307, 347, 370, 371, 373, 403, 443, 481, 494, 496, 502, 503, 504, 528, 635, 638, 643, 652, 660, 661, 670, 673, 676, 677, 828, 830, 831, 832, 842, 849, 886, 888, 901, 902, 977, 979, 1012], "funnel": [6, 487, 488, 1012], "tgz": [6, 1012], "233mb": [6, 1012], "stat": [6, 8, 10, 70, 80, 101, 149, 152, 173, 258, 261, 269, 273, 286, 315, 322, 323, 373, 385, 389, 405, 468, 586, 589, 590, 592, 593, 594, 598, 599, 600, 603, 676, 677, 794, 802, 804, 901, 902, 932, 970, 977, 991, 1012, 1029, 1031, 1035], "loguniform": [6, 152, 269, 970, 1012, 1032], "fetch_lfw_peopl": [6, 371, 1012, 1037], "confusionmatrixdisplai": [6, 32, 255, 316, 322, 347, 625, 712, 981, 1012, 1032, 1033, 1035, 1036, 1037], "classification_report": [6, 32, 70, 146, 259, 300, 322, 323, 981, 1012, 1016, 1024, 1026, 1030, 1031, 1032, 1034, 1038], "randomizedsearchcv": [6, 71, 152, 262, 269, 315, 358, 389, 569, 970, 981, 995, 1001, 1012, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037], "standardscal": [6, 10, 31, 44, 49, 55, 58, 62, 71, 73, 86, 106, 132, 149, 170, 179, 188, 189, 191, 200, 216, 218, 230, 231, 239, 240, 241, 243, 258, 268, 284, 289, 290, 297, 305, 308, 313, 314, 316, 317, 318, 334, 337, 358, 364, 376, 378, 381, 385, 389, 404, 407, 424, 460, 461, 561, 644, 645, 648, 649, 650, 658, 659, 670, 672, 853, 854, 857, 870, 884, 893, 894, 895, 896, 898, 899, 971, 978, 985, 991, 995, 996, 998, 1012, 1024, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "svc": [6, 16, 25, 27, 30, 31, 32, 70, 74, 133, 139, 141, 147, 167, 176, 234, 237, 241, 255, 259, 261, 263, 266, 267, 268, 271, 272, 276, 305, 313, 315, 325, 327, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 343, 344, 345, 347, 362, 378, 382, 390, 397, 401, 404, 407, 410, 462, 509, 549, 691, 692, 694, 696, 790, 807, 820, 822, 853, 890, 891, 893, 895, 969, 970, 976, 979, 981, 982, 991, 1007, 1011, 1012, 1014, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "disk": [6, 13, 371, 374, 376, 381, 390, 397, 1012], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 61, 62, 64, 70, 72, 81, 85, 92, 96, 97, 124, 126, 128, 131, 134, 139, 146, 149, 153, 154, 155, 160, 170, 179, 181, 184, 193, 194, 197, 200, 201, 207, 217, 222, 223, 229, 233, 236, 239, 240, 243, 246, 247, 248, 250, 251, 256, 257, 259, 261, 262, 265, 266, 270, 279, 294, 306, 313, 316, 317, 319, 323, 330, 337, 338, 347, 355, 358, 362, 363, 369, 370, 371, 376, 377, 378, 379, 381, 382, 384, 386, 388, 389, 390, 397, 400, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 509, 518, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 575, 576, 577, 578, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 915, 918, 919, 927, 928, 929, 930, 931, 932, 934, 935, 936, 943, 944, 945, 952, 953, 954, 955, 956, 957, 958, 959, 967, 968, 971, 976, 977, 979, 981, 982, 984, 985, 987, 988, 991, 992, 993, 995, 996, 997, 1000, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "lfw_peopl": [6, 371, 1012], "min_faces_per_person": [6, 371, 488, 1012], "resiz": [6, 46, 47, 240, 371, 487, 488, 1012], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 70, 75, 78, 79, 80, 81, 82, 86, 92, 95, 96, 100, 103, 111, 112, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 140, 141, 148, 149, 161, 164, 165, 169, 179, 181, 182, 184, 186, 188, 190, 192, 194, 195, 199, 200, 201, 203, 204, 208, 212, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 233, 234, 236, 239, 247, 249, 250, 251, 252, 258, 259, 261, 264, 265, 268, 270, 271, 272, 273, 274, 275, 281, 291, 305, 306, 307, 310, 314, 315, 317, 319, 324, 332, 335, 336, 342, 347, 348, 358, 369, 373, 376, 378, 381, 385, 388, 389, 390, 394, 403, 405, 406, 407, 408, 410, 414, 415, 416, 418, 420, 421, 422, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 495, 498, 502, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 763, 764, 765, 766, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 918, 919, 930, 932, 934, 943, 950, 952, 955, 956, 957, 958, 959, 960, 961, 962, 970, 973, 977, 981, 982, 984, 985, 991, 992, 993, 995, 996, 997, 1007, 1012, 1013, 1014, 1015, 1016, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 58, 64, 102, 105, 149, 164, 199, 204, 217, 236, 237, 246, 247, 248, 251, 252, 272, 300, 316, 317, 338, 339, 342, 349, 358, 371, 373, 382, 397, 403, 404, 408, 410, 411, 415, 420, 426, 431, 459, 463, 466, 468, 476, 477, 478, 517, 532, 534, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 582, 583, 585, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 687, 693, 718, 719, 749, 790, 804, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 840, 843, 844, 850, 851, 886, 888, 889, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 927, 932, 977, 981, 985, 986, 991, 993, 995, 996, 1012, 1016, 1032, 1036, 1037, 1038], "info": [6, 42, 71, 95, 170, 171, 236, 259, 373, 375, 380, 390, 411, 937, 947, 1012], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 58, 60, 61, 78, 79, 80, 81, 82, 91, 92, 95, 103, 112, 114, 116, 118, 119, 146, 148, 149, 164, 165, 176, 179, 182, 184, 186, 194, 195, 199, 203, 204, 215, 217, 222, 229, 233, 234, 236, 246, 251, 258, 264, 268, 270, 271, 273, 274, 291, 297, 305, 313, 314, 315, 317, 319, 342, 347, 348, 349, 358, 362, 369, 370, 376, 378, 381, 388, 389, 390, 394, 403, 405, 406, 408, 410, 411, 414, 415, 416, 418, 420, 421, 422, 425, 426, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 484, 485, 486, 488, 495, 498, 502, 503, 506, 509, 510, 513, 515, 517, 518, 520, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 694, 695, 696, 704, 718, 751, 752, 753, 754, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 930, 956, 957, 958, 959, 960, 961, 962, 973, 977, 982, 984, 985, 991, 995, 996, 997, 1007, 1012, 1013, 1015, 1016, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "id": [6, 19, 218, 294, 356, 370, 371, 376, 384, 405, 407, 411, 488, 489, 490, 905, 907, 925, 1012, 1016, 1030, 1031, 1034], "person": [6, 264, 371, 375, 407, 411, 487, 488, 489, 991, 1012, 1030], "target_nam": [6, 19, 52, 90, 99, 104, 169, 209, 222, 248, 255, 262, 270, 271, 284, 309, 326, 347, 353, 369, 371, 482, 483, 485, 486, 487, 488, 490, 491, 494, 496, 497, 498, 499, 504, 707, 981, 997, 1007, 1012, 1016, 1032], "n_class": [6, 30, 37, 91, 92, 112, 114, 119, 121, 146, 148, 215, 222, 234, 237, 248, 268, 269, 270, 290, 291, 313, 353, 356, 358, 376, 378, 390, 410, 431, 482, 483, 496, 509, 513, 517, 543, 544, 545, 547, 549, 551, 553, 555, 558, 561, 563, 587, 588, 598, 604, 628, 633, 652, 653, 660, 661, 662, 668, 669, 670, 671, 691, 701, 710, 712, 728, 731, 734, 747, 781, 785, 790, 793, 794, 804, 814, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 835, 840, 842, 843, 850, 853, 860, 861, 864, 867, 877, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 903, 905, 906, 918, 919, 977, 981, 982, 985, 992, 995, 996, 1004, 1012, 1027, 1028, 1029, 1031, 1032, 1033], "1288": [6, 371], "1850": [6, 371], "scaler": [6, 71, 73, 167, 216, 234, 241, 243, 284, 289, 302, 308, 311, 318, 334, 337, 358, 381, 404, 407, 484, 652, 653, 666, 668, 681, 853, 862, 863, 865, 869, 870, 871, 873, 878, 879, 880, 881, 882, 883, 884, 985, 991, 995, 1012, 1022, 1027, 1030, 1035], "unlabel": [6, 237, 315, 322, 323, 324, 326, 327, 390, 402, 403, 888, 889, 890, 980, 1007, 1010, 1012, 1014, 1034], "unsupervis": [6, 12, 37, 49, 72, 73, 86, 95, 117, 130, 229, 237, 287, 288, 333, 347, 348, 358, 365, 368, 371, 378, 389, 390, 402, 403, 406, 408, 409, 410, 411, 427, 436, 439, 526, 528, 530, 531, 533, 536, 537, 543, 557, 560, 561, 563, 564, 576, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 622, 624, 628, 629, 632, 633, 634, 635, 636, 671, 735, 790, 793, 794, 796, 804, 812, 817, 820, 835, 836, 839, 841, 842, 843, 844, 849, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 885, 886, 890, 897, 978, 981, 987, 994, 1003, 1007, 1008, 1010, 1012, 1018, 1022, 1025, 1035], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 55, 57, 58, 62, 69, 71, 73, 74, 76, 85, 86, 92, 95, 103, 112, 117, 130, 140, 141, 149, 152, 154, 155, 159, 167, 184, 196, 201, 217, 220, 222, 223, 225, 227, 229, 233, 234, 237, 247, 248, 282, 285, 295, 305, 331, 338, 347, 358, 362, 368, 371, 372, 373, 376, 385, 390, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 439, 441, 443, 459, 463, 467, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 495, 496, 498, 499, 504, 509, 513, 526, 528, 529, 532, 533, 534, 535, 538, 541, 543, 557, 560, 567, 593, 601, 625, 634, 635, 636, 646, 682, 683, 684, 685, 686, 687, 688, 690, 693, 704, 718, 788, 789, 790, 819, 833, 834, 835, 838, 841, 842, 849, 853, 854, 857, 863, 868, 873, 885, 886, 887, 893, 897, 930, 967, 972, 973, 976, 977, 982, 983, 987, 993, 994, 995, 996, 997, 1003, 1005, 1007, 1008, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1034, 1037, 1038], "reduct": [6, 19, 54, 57, 69, 73, 76, 86, 95, 115, 130, 167, 220, 222, 223, 227, 233, 237, 282, 295, 317, 331, 358, 362, 368, 402, 403, 404, 406, 408, 410, 412, 462, 476, 477, 478, 479, 496, 524, 526, 528, 529, 532, 533, 534, 535, 538, 541, 543, 547, 548, 551, 552, 553, 554, 558, 559, 560, 593, 601, 652, 653, 682, 683, 684, 685, 686, 687, 774, 790, 819, 835, 842, 849, 853, 854, 863, 873, 891, 893, 901, 902, 903, 904, 973, 978, 993, 997, 1002, 1003, 1005, 1012, 1018, 1023, 1024, 1025, 1028, 1036, 1037, 1038], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 62, 64, 71, 91, 97, 109, 117, 118, 121, 132, 135, 170, 200, 202, 211, 215, 229, 239, 240, 246, 248, 249, 252, 258, 262, 270, 271, 286, 303, 305, 309, 314, 322, 323, 334, 338, 347, 358, 374, 376, 382, 388, 400, 401, 403, 408, 409, 410, 481, 581, 582, 585, 593, 719, 749, 785, 905, 907, 970, 973, 977, 979, 989, 1005, 1012, 1015, 1016, 1036], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 58, 62, 64, 98, 184, 186, 215, 216, 217, 223, 226, 229, 233, 235, 262, 347, 348, 349, 670, 671, 672, 1012], "svd_solver": [6, 95, 103, 408, 529, 535, 1012, 1028], "whiten": [6, 95, 96, 97, 285, 408, 415, 527, 528, 535, 871, 873, 1012, 1026, 1028, 1036, 1037], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 146, 149, 157, 170, 171, 176, 179, 184, 186, 204, 217, 235, 236, 251, 259, 262, 265, 270, 281, 306, 315, 347, 348, 349, 358, 363, 370, 374, 376, 378, 380, 383, 384, 385, 388, 390, 394, 403, 405, 407, 408, 410, 435, 436, 439, 444, 446, 466, 476, 477, 478, 479, 483, 529, 555, 556, 576, 600, 622, 624, 626, 628, 637, 638, 639, 653, 734, 788, 789, 790, 804, 809, 810, 857, 871, 966, 970, 971, 974, 977, 978, 981, 983, 984, 985, 991, 994, 995, 996, 997, 1002, 1007, 1011, 1012, 1014, 1016, 1022, 1024, 1029, 1032, 1034, 1038], "components_": [6, 14, 58, 86, 95, 97, 98, 101, 106, 233, 234, 300, 308, 317, 390, 404, 408, 438, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 633, 842, 849, 885, 886, 993, 1012, 1026, 1028, 1034, 1037], "project": [6, 8, 11, 13, 17, 45, 58, 67, 90, 94, 95, 97, 99, 101, 102, 107, 167, 171, 197, 221, 222, 223, 225, 228, 234, 237, 244, 285, 290, 294, 331, 348, 362, 365, 368, 370, 374, 375, 381, 382, 385, 390, 391, 393, 400, 406, 408, 409, 415, 434, 440, 445, 446, 456, 468, 476, 477, 478, 479, 483, 496, 498, 525, 527, 528, 529, 531, 533, 535, 536, 537, 538, 542, 543, 567, 576, 583, 635, 636, 643, 666, 668, 682, 685, 689, 690, 823, 842, 870, 885, 886, 887, 929, 930, 975, 977, 978, 979, 982, 984, 985, 987, 994, 997, 999, 1004, 1005, 1007, 1012, 1015, 1018, 1022, 1023, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "orthonorm": [6, 385, 929, 1012], "x_train_pca": [6, 1012], "x_test_pca": [6, 100, 1012], "966": 6, "666": [6, 155, 326, 835, 971], "031": [6, 149, 348, 373], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 56, 70, 71, 72, 73, 100, 111, 112, 113, 114, 116, 119, 120, 121, 124, 130, 133, 134, 145, 146, 148, 167, 172, 173, 176, 178, 190, 191, 192, 198, 207, 209, 212, 215, 219, 229, 234, 236, 242, 255, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 276, 278, 280, 283, 289, 290, 292, 297, 300, 305, 315, 316, 321, 322, 323, 325, 326, 328, 329, 330, 333, 335, 336, 337, 338, 343, 344, 345, 349, 371, 373, 376, 378, 381, 388, 390, 403, 404, 407, 411, 412, 413, 420, 429, 431, 432, 433, 482, 483, 490, 498, 506, 508, 509, 516, 525, 530, 531, 536, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 587, 588, 596, 600, 604, 616, 623, 625, 626, 627, 643, 652, 653, 660, 662, 665, 666, 667, 668, 669, 670, 691, 692, 694, 696, 697, 701, 702, 703, 706, 707, 712, 714, 719, 720, 722, 723, 727, 728, 731, 732, 733, 734, 735, 736, 747, 749, 775, 776, 777, 780, 781, 782, 785, 787, 790, 793, 794, 796, 804, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 840, 841, 843, 844, 849, 850, 851, 853, 854, 860, 873, 874, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 922, 924, 970, 971, 973, 976, 977, 978, 981, 982, 983, 986, 989, 991, 994, 995, 996, 997, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1011, 1012, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "1e3": [6, 7, 10, 152, 158, 164, 235, 272, 319, 970, 1012], "1e5": [6, 157, 181, 183, 190, 272, 607, 608, 609, 613, 614, 616, 617, 619, 882, 887, 993, 1012, 1014], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 58, 63, 71, 101, 102, 116, 124, 127, 128, 133, 138, 141, 145, 146, 148, 154, 156, 173, 190, 192, 193, 197, 198, 204, 207, 209, 212, 213, 214, 216, 224, 230, 231, 234, 237, 243, 250, 258, 262, 266, 267, 269, 272, 273, 284, 287, 288, 289, 292, 297, 305, 308, 313, 314, 315, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 347, 352, 353, 356, 362, 371, 389, 390, 397, 404, 407, 410, 412, 432, 543, 544, 547, 549, 551, 553, 555, 557, 558, 561, 587, 588, 591, 626, 628, 632, 633, 634, 635, 636, 638, 639, 642, 646, 652, 653, 654, 655, 656, 660, 662, 663, 666, 667, 668, 669, 670, 671, 674, 691, 692, 694, 696, 781, 790, 793, 794, 804, 821, 822, 823, 825, 828, 829, 830, 831, 832, 839, 840, 850, 893, 895, 897, 898, 901, 905, 907, 971, 973, 977, 981, 982, 984, 985, 987, 988, 995, 996, 997, 1007, 1011, 1012, 1016], "class_weight": [6, 336, 390, 551, 555, 558, 652, 653, 660, 662, 668, 669, 670, 671, 893, 895, 896, 897, 898, 899, 900, 901, 903, 970, 995, 996, 1012, 1022, 1023, 1025, 1026, 1027, 1028, 1030, 1036, 1037], "n_iter": [6, 17, 71, 152, 179, 208, 221, 222, 226, 262, 269, 281, 300, 336, 378, 382, 389, 415, 448, 472, 526, 527, 531, 533, 538, 539, 540, 541, 638, 639, 640, 641, 646, 647, 654, 655, 656, 657, 675, 676, 677, 678, 679, 680, 681, 686, 688, 793, 794, 802, 804, 849, 851, 929, 930, 970, 995, 1012, 1023, 1028, 1029, 1030, 1034, 1036, 1037, 1038], "found": [6, 19, 20, 21, 106, 119, 148, 152, 156, 158, 160, 204, 237, 259, 262, 263, 264, 308, 313, 316, 318, 319, 334, 349, 362, 364, 370, 373, 375, 376, 378, 388, 390, 391, 400, 403, 406, 407, 408, 410, 411, 413, 428, 435, 438, 439, 453, 466, 551, 552, 553, 554, 558, 559, 582, 584, 604, 605, 622, 630, 641, 645, 647, 649, 655, 657, 659, 665, 666, 668, 670, 672, 681, 682, 706, 713, 790, 793, 794, 804, 830, 835, 836, 842, 864, 866, 867, 901, 902, 903, 904, 908, 965, 969, 970, 973, 977, 978, 980, 982, 983, 984, 985, 991, 995, 996, 997, 1002, 1004, 1007, 1012, 1016, 1022, 1025, 1026, 1029, 1030, 1032, 1036], "grid": [6, 8, 10, 11, 20, 25, 26, 27, 42, 54, 61, 71, 72, 74, 78, 82, 121, 123, 130, 156, 167, 169, 170, 171, 189, 218, 226, 234, 235, 236, 240, 246, 251, 254, 258, 260, 262, 265, 266, 277, 279, 283, 285, 286, 294, 300, 305, 306, 308, 331, 334, 340, 347, 378, 383, 388, 390, 398, 404, 407, 409, 410, 411, 442, 455, 458, 466, 492, 496, 509, 516, 625, 626, 627, 641, 644, 647, 648, 650, 653, 655, 657, 670, 707, 721, 735, 778, 781, 790, 793, 794, 801, 804, 806, 819, 820, 853, 898, 974, 976, 981, 984, 988, 1002, 1007, 1008, 1010, 1012, 1014, 1018, 1022, 1025, 1026, 1027, 1029, 1030, 1036, 1038], "search": [6, 46, 54, 71, 72, 73, 74, 125, 146, 149, 152, 167, 218, 235, 236, 251, 254, 262, 265, 266, 273, 277, 281, 283, 285, 300, 305, 318, 334, 347, 358, 365, 373, 374, 376, 378, 388, 390, 398, 403, 404, 407, 410, 411, 412, 414, 437, 442, 444, 446, 451, 452, 455, 458, 465, 466, 472, 496, 509, 516, 551, 552, 553, 554, 558, 559, 560, 573, 593, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 622, 647, 670, 682, 683, 686, 687, 707, 721, 778, 781, 790, 793, 794, 801, 802, 804, 806, 819, 820, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 853, 898, 901, 902, 903, 904, 935, 969, 974, 976, 978, 981, 984, 985, 995, 997, 1001, 1002, 1007, 1008, 1010, 1012, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1034, 1036, 1037], "best_estimator_": [6, 54, 73, 74, 78, 103, 235, 251, 262, 265, 285, 790, 793, 794, 804, 970, 1011, 1012, 1029], "892": 6, "76823": 6, "03433306457": 6, "0034189458230957995": 6, "from_estim": [6, 25, 27, 31, 56, 114, 117, 128, 129, 133, 171, 183, 192, 209, 235, 240, 242, 255, 258, 263, 264, 268, 271, 276, 284, 289, 292, 308, 313, 314, 315, 316, 318, 319, 330, 331, 332, 335, 336, 338, 353, 383, 401, 627, 712, 720, 775, 777, 780, 781, 782, 976, 981, 988, 1012, 1019, 1035, 1036, 1037, 1038], "display_label": [6, 255, 691, 1012, 1034], "xticks_rot": [6, 691, 1012], "vertic": [6, 17, 60, 124, 173, 189, 233, 234, 265, 279, 303, 306, 339, 341, 390, 400, 403, 408, 509, 691, 774, 1012], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 55, 65, 73, 75, 86, 95, 96, 106, 112, 114, 119, 121, 126, 130, 132, 134, 154, 156, 161, 164, 169, 170, 172, 173, 179, 180, 184, 190, 198, 200, 208, 211, 215, 218, 221, 234, 239, 256, 257, 273, 279, 281, 283, 293, 304, 305, 306, 307, 308, 313, 317, 332, 348, 352, 353, 1012], "038": [6, 465, 466, 850], "precis": [6, 25, 32, 70, 75, 82, 95, 146, 158, 159, 167, 176, 230, 254, 255, 259, 277, 300, 303, 322, 323, 376, 378, 390, 400, 401, 402, 403, 405, 408, 410, 437, 463, 464, 465, 466, 467, 468, 469, 470, 472, 498, 517, 526, 528, 535, 538, 638, 639, 640, 642, 644, 645, 646, 648, 649, 650, 663, 666, 668, 674, 676, 677, 681, 693, 694, 700, 701, 702, 707, 720, 722, 723, 724, 732, 756, 775, 776, 777, 780, 781, 788, 789, 819, 822, 833, 834, 839, 854, 873, 877, 893, 898, 905, 907, 930, 975, 977, 984, 985, 996, 1012, 1016, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "recal": [6, 25, 32, 70, 100, 146, 167, 230, 254, 259, 277, 300, 322, 323, 376, 390, 403, 498, 598, 694, 700, 701, 702, 706, 707, 720, 722, 723, 724, 775, 776, 777, 780, 781, 819, 822, 854, 873, 877, 893, 977, 997, 1012, 1016, 1025, 1026, 1029, 1031, 1032, 1034, 1035, 1036, 1038], "f1": [6, 25, 32, 70, 146, 259, 300, 322, 323, 326, 407, 707, 722, 723, 731, 776, 981, 982, 1012, 1016, 1026, 1038], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 70, 72, 110, 116, 123, 131, 136, 145, 146, 171, 201, 210, 211, 212, 218, 234, 235, 236, 242, 255, 259, 266, 268, 281, 300, 303, 307, 317, 322, 323, 326, 327, 330, 331, 334, 335, 337, 338, 339, 342, 345, 362, 363, 364, 365, 370, 374, 376, 378, 380, 381, 382, 383, 385, 386, 389, 390, 391, 394, 403, 407, 408, 411, 413, 431, 434, 444, 446, 447, 458, 460, 461, 463, 468, 481, 490, 506, 532, 534, 535, 538, 541, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 607, 608, 609, 611, 613, 614, 616, 617, 619, 621, 625, 626, 627, 637, 639, 651, 652, 653, 664, 665, 666, 668, 669, 670, 671, 672, 681, 684, 688, 693, 701, 707, 722, 723, 731, 736, 761, 771, 772, 773, 776, 777, 780, 781, 790, 793, 794, 796, 804, 816, 817, 825, 826, 831, 833, 834, 837, 839, 840, 845, 853, 854, 858, 864, 866, 867, 869, 873, 881, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 919, 924, 925, 969, 970, 971, 973, 974, 975, 977, 980, 981, 982, 983, 984, 985, 987, 988, 991, 992, 995, 999, 1001, 1002, 1003, 1005, 1007, 1010, 1012, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "ariel": [6, 371, 1022, 1028], "sharon": [6, 371], "69": [6, 8, 191, 308, 323, 403, 465, 466, 601, 602, 749, 981, 991, 1014], "colin": [6, 371, 1028], "powel": [6, 371], "87": [6, 32, 70, 98, 161, 223, 259, 300, 323, 591, 661, 781, 790, 869, 881, 981, 1016], "donald": [6, 371, 403, 718, 971], "rumsfeld": [6, 371], "63": [6, 300, 353, 373, 410, 551, 552, 559, 560, 693, 719, 790, 804, 903, 904, 981], "georg": [6, 371, 403, 1028, 1034, 1035, 1036, 1037], "bush": [6, 371], "95": [6, 8, 14, 19, 30, 32, 44, 52, 57, 67, 91, 101, 102, 121, 125, 159, 170, 179, 200, 202, 207, 218, 248, 249, 252, 261, 262, 286, 294, 300, 305, 309, 317, 323, 334, 358, 410, 521, 626, 627, 630, 641, 655, 741, 890, 977, 981, 982, 994, 1016, 1025], "91": [6, 32, 51, 157, 300, 322, 323, 410, 976, 1012, 1016], "146": [6, 9, 410], "gerhard": [6, 371], "schroeder": [6, 371], "hugo": [6, 371, 1028, 1033, 1034, 1035, 1036], "chavez": [6, 371], "90": [6, 10, 14, 32, 74, 105, 106, 124, 125, 126, 146, 157, 173, 180, 191, 197, 199, 202, 207, 218, 246, 270, 272, 300, 305, 309, 319, 322, 323, 358, 362, 376, 382, 407, 557, 774, 790, 817, 822, 874, 976, 981, 1012, 1016, 1037, 1038], "toni": [6, 371, 557, 873, 987, 1035, 1036], "blair": [6, 371], "93": [6, 32, 149, 200, 243, 259, 300, 323, 347, 373, 781, 790, 817, 901, 976, 981, 1012, 1016], "83": [6, 30, 34, 39, 70, 300, 322, 373, 378, 701, 779, 976, 981, 1012, 1016, 1025], "322": [6, 91, 465, 466], "macro": [6, 32, 70, 146, 259, 300, 313, 322, 323, 371, 407, 701, 707, 722, 723, 731, 776, 777, 780, 781, 981, 1016, 1022, 1030, 1038], "avg": [6, 32, 70, 146, 259, 300, 322, 323, 563, 698, 707, 981, 1012, 1016, 1038], "weight": [6, 13, 14, 19, 24, 32, 54, 70, 106, 125, 133, 134, 145, 146, 157, 165, 167, 170, 178, 184, 189, 191, 200, 204, 205, 214, 215, 216, 218, 219, 241, 246, 259, 264, 268, 270, 284, 293, 296, 297, 300, 301, 308, 310, 313, 316, 322, 323, 329, 336, 338, 342, 345, 347, 348, 349, 356, 358, 372, 373, 385, 388, 390, 403, 405, 406, 408, 409, 412, 414, 420, 426, 431, 434, 437, 438, 440, 441, 443, 447, 453, 454, 457, 458, 459, 461, 463, 468, 476, 477, 478, 490, 509, 518, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 580, 583, 584, 585, 587, 591, 596, 597, 604, 605, 622, 626, 627, 628, 629, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 683, 687, 691, 692, 694, 696, 697, 701, 702, 703, 706, 707, 710, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 727, 728, 729, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752, 762, 775, 776, 777, 778, 780, 781, 782, 785, 786, 787, 788, 789, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 849, 850, 851, 852, 855, 858, 872, 873, 874, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 918, 919, 932, 956, 962, 971, 972, 977, 978, 980, 981, 983, 984, 985, 986, 988, 991, 994, 995, 996, 997, 1002, 1007, 1014, 1016, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "85": [6, 16, 17, 32, 50, 55, 70, 98, 146, 215, 218, 272, 300, 323, 358, 410, 433, 494, 549, 550, 591, 646, 652, 738, 746, 781, 790, 817, 981, 982, 1012, 1022], "plot_galleri": [6, 95, 1012], "n_row": [6, 19, 95, 400, 418, 445, 447, 505, 507, 1012], "n_col": [6, 19, 95, 238, 418, 445, 447, 505, 507, 626, 1012], "portrait": [6, 408, 1012], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 58, 59, 61, 62, 63, 64, 65, 67, 78, 82, 85, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 111, 112, 113, 114, 115, 123, 124, 125, 126, 127, 130, 131, 135, 138, 139, 141, 144, 145, 148, 153, 154, 155, 156, 159, 160, 165, 170, 171, 172, 173, 179, 184, 185, 190, 193, 194, 197, 199, 201, 202, 206, 211, 214, 215, 216, 217, 223, 224, 225, 229, 233, 234, 235, 237, 238, 240, 246, 248, 249, 252, 255, 260, 265, 266, 275, 286, 290, 291, 294, 297, 300, 303, 305, 306, 310, 313, 315, 322, 323, 324, 332, 334, 339, 353, 354, 355, 376, 403, 409, 410, 411, 413, 432, 625, 626, 691, 692, 694, 695, 696, 796, 812, 907, 970, 974, 977, 980, 981, 984, 985, 988, 995, 996, 997, 1012, 1014, 1015, 1035], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 62, 64, 80, 82, 91, 92, 97, 98, 105, 114, 115, 132, 170, 199, 200, 215, 218, 229, 237, 246, 248, 249, 252, 256, 272, 274, 286, 294, 297, 300, 305, 315, 323, 331, 334, 1012], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 62, 64, 91, 92, 123, 130, 135, 200, 211, 229, 246, 248, 249, 252, 258, 261, 272, 286, 303, 323, 325, 334, 376, 401, 403, 409, 581, 905, 975, 977, 981, 1002, 1012, 1015], "left": [6, 7, 12, 13, 14, 16, 24, 33, 39, 42, 44, 45, 51, 55, 62, 64, 72, 75, 81, 82, 91, 92, 97, 98, 112, 115, 117, 118, 119, 122, 125, 132, 134, 155, 161, 165, 170, 173, 185, 193, 200, 201, 202, 204, 211, 213, 214, 217, 218, 229, 233, 237, 239, 240, 246, 248, 249, 252, 257, 258, 259, 260, 262, 270, 271, 273, 284, 286, 287, 294, 297, 300, 303, 317, 319, 323, 333, 334, 338, 356, 376, 378, 380, 400, 403, 406, 407, 409, 410, 411, 413, 440, 466, 476, 477, 478, 479, 487, 492, 543, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 581, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 629, 633, 637, 645, 649, 788, 789, 790, 793, 794, 797, 804, 866, 873, 901, 902, 903, 904, 905, 917, 930, 952, 955, 970, 973, 975, 977, 979, 981, 983, 988, 993, 995, 997, 1011, 1012, 1014, 1015, 1029, 1031, 1036], "01": [6, 8, 10, 13, 16, 22, 35, 40, 44, 51, 52, 62, 68, 76, 83, 95, 97, 98, 115, 123, 124, 126, 129, 130, 136, 149, 157, 161, 162, 170, 171, 174, 181, 184, 191, 207, 212, 213, 218, 219, 221, 222, 227, 229, 233, 234, 235, 239, 240, 244, 248, 252, 255, 260, 261, 262, 266, 268, 269, 277, 286, 295, 298, 301, 303, 311, 314, 320, 336, 345, 347, 354, 355, 357, 371, 373, 381, 403, 412, 443, 465, 509, 526, 533, 537, 589, 590, 592, 636, 640, 648, 652, 672, 690, 709, 790, 804, 887, 950, 977, 981, 985, 991, 993, 995, 1012, 1016], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 60, 62, 64, 79, 80, 82, 90, 91, 92, 97, 98, 100, 103, 105, 111, 112, 114, 115, 116, 125, 126, 127, 134, 145, 152, 155, 165, 173, 190, 201, 202, 203, 204, 206, 207, 210, 211, 229, 232, 233, 236, 246, 248, 249, 251, 252, 256, 257, 261, 264, 268, 271, 272, 274, 286, 294, 297, 300, 303, 305, 308, 319, 323, 334, 336, 338, 342, 344, 347, 353, 356, 358, 365, 376, 388, 391, 400, 403, 406, 408, 409, 410, 413, 458, 476, 477, 478, 479, 528, 535, 538, 551, 552, 553, 554, 555, 556, 558, 559, 560, 581, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 629, 670, 672, 858, 901, 902, 903, 904, 905, 917, 930, 970, 973, 975, 977, 979, 981, 983, 984, 988, 993, 995, 996, 997, 1001, 1002, 1005, 1008, 1012, 1014, 1015, 1024, 1030, 1036, 1038], "99": [6, 25, 32, 44, 51, 62, 95, 214, 215, 218, 229, 233, 239, 246, 248, 259, 262, 300, 303, 323, 363, 369, 373, 380, 407, 410, 411, 486, 641, 655, 665, 781, 840, 950, 976, 981, 991, 995, 1012, 1018, 1024], "hspace": [6, 13, 14, 44, 45, 62, 95, 218, 229, 246, 248, 249, 252, 286, 315, 323, 331, 1012], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 127, 149, 198, 200, 218, 233, 237, 238, 268, 299, 373, 408, 487, 488, 496, 515, 1012, 1015, 1033], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 98, 123, 126, 139, 145, 154, 155, 156, 160, 183, 190, 196, 213, 229, 237, 247, 248, 249, 252, 256, 275, 285, 294, 300, 322, 334, 339, 340, 347, 1012], "portion": [6, 8, 81, 149, 270, 362, 371, 373, 376, 382, 390, 781, 814, 831, 970, 980, 984, 1012, 1016], "pred_nam": [6, 1012], "rsplit": [6, 17, 262, 1012], "true_nam": [6, 1012], "ntrue": [6, 322, 323, 1012], "prediction_titl": [6, 1012], "signif": [6, 1012], "eigenface_titl": [6, 1012], "convolut": [6, 160, 1012], "network": [6, 239, 299, 362, 363, 364, 365, 370, 371, 388, 390, 391, 397, 403, 408, 410, 415, 490, 527, 529, 561, 562, 690, 734, 850, 851, 977, 979, 981, 995, 997, 1001, 1003, 1012, 1017, 1018, 1022, 1036], "famili": [6, 362, 364, 390, 403, 406, 408, 411, 412, 586, 589, 590, 592, 593, 594, 600, 850, 851, 869, 881, 977, 991, 995, 1012, 1014, 1026, 1036], "outsid": [6, 9, 19, 121, 201, 202, 232, 243, 388, 411, 440, 629, 872, 987, 1012, 1030], "scope": [6, 19, 362, 364, 376, 388, 411, 1001, 1002, 1012], "scikit": [6, 8, 9, 10, 12, 16, 17, 31, 32, 34, 50, 53, 70, 80, 109, 114, 117, 118, 132, 146, 149, 156, 158, 160, 161, 165, 167, 170, 171, 173, 179, 188, 189, 192, 209, 214, 218, 228, 239, 242, 247, 254, 258, 277, 281, 286, 287, 288, 306, 312, 320, 333, 336, 338, 339, 347, 348, 352, 353, 358, 363, 364, 365, 368, 370, 371, 372, 373, 375, 376, 379, 382, 383, 384, 385, 389, 390, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 417, 418, 420, 421, 422, 425, 426, 427, 432, 437, 440, 441, 444, 451, 453, 458, 459, 461, 462, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 506, 509, 515, 518, 532, 555, 556, 558, 559, 561, 570, 575, 576, 577, 579, 580, 583, 593, 596, 605, 620, 622, 624, 626, 628, 632, 634, 640, 642, 646, 652, 663, 674, 682, 694, 695, 696, 711, 741, 771, 772, 773, 781, 786, 790, 791, 792, 793, 794, 795, 796, 804, 807, 808, 809, 810, 811, 812, 815, 819, 821, 822, 835, 837, 854, 856, 858, 860, 863, 865, 866, 867, 868, 872, 873, 874, 877, 890, 891, 893, 898, 901, 902, 924, 925, 947, 948, 949, 970, 971, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 991, 994, 995, 996, 997, 1000, 1004, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "librari": [6, 261, 316, 318, 354, 358, 368, 370, 371, 374, 375, 376, 377, 382, 388, 389, 390, 393, 399, 652, 893, 894, 895, 896, 898, 899, 949, 977, 981, 996, 997, 1001, 1002, 1005, 1012, 1016, 1020, 1025, 1029, 1030, 1031, 1032, 1033, 1035], "reader": [6, 42, 316, 364, 376, 1012], "pytorch": [6, 388, 1001, 1002, 1012, 1038], "tensorflow": [6, 388, 1001, 1012], "implement": [6, 7, 13, 16, 17, 46, 56, 81, 95, 118, 165, 173, 176, 184, 185, 189, 214, 218, 221, 229, 235, 236, 259, 261, 270, 281, 283, 286, 306, 313, 314, 315, 316, 317, 319, 347, 349, 362, 363, 364, 370, 371, 373, 374, 376, 377, 378, 381, 382, 384, 385, 390, 393, 394, 397, 399, 400, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 431, 436, 437, 438, 440, 441, 442, 443, 444, 469, 487, 490, 502, 526, 527, 528, 529, 530, 532, 535, 536, 537, 547, 548, 549, 551, 552, 555, 556, 557, 561, 566, 576, 582, 583, 585, 587, 591, 595, 604, 605, 626, 627, 634, 635, 639, 640, 647, 651, 652, 653, 657, 658, 662, 665, 666, 668, 669, 670, 671, 672, 678, 679, 680, 681, 682, 685, 686, 689, 701, 705, 714, 728, 731, 771, 775, 781, 782, 788, 790, 793, 794, 796, 804, 808, 809, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 835, 836, 838, 841, 843, 844, 849, 850, 851, 853, 875, 883, 884, 890, 893, 894, 895, 896, 897, 898, 899, 929, 930, 941, 946, 949, 950, 952, 970, 971, 973, 975, 977, 978, 979, 980, 982, 983, 985, 986, 987, 991, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1007, 1012, 1013, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "29": [6, 15, 50, 68, 81, 92, 153, 157, 191, 200, 204, 217, 219, 239, 318, 323, 373, 374, 393, 395, 396, 410, 553, 554, 684, 688, 774, 788, 845, 977, 978, 995], "604": [6, 15, 103, 535], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 55, 61, 68, 70, 72, 112, 116, 126, 146, 160, 167, 173, 201, 236, 242, 243, 248, 252, 254, 264, 267, 270, 275, 277, 283, 286, 293, 302, 305, 307, 310, 311, 315, 321, 323, 324, 327, 328, 332, 338, 347, 348, 349, 358, 364, 371, 372, 376, 381, 388, 394, 399, 403, 407, 410, 441, 496, 506, 514, 691, 697, 707, 735, 789, 790, 858, 889, 901, 970, 971, 975, 981, 982, 983, 984, 991, 994, 997, 1000], "diabet": [7, 126, 135, 137, 142, 149, 165, 167, 187, 188, 189, 196, 197, 257, 369, 410, 495, 646, 647, 790, 795, 814, 815, 816, 989, 1007, 1011, 1018], "regress": [7, 10, 13, 25, 27, 30, 54, 69, 71, 76, 80, 81, 84, 87, 98, 110, 115, 117, 118, 123, 131, 136, 149, 151, 162, 164, 165, 167, 169, 170, 171, 178, 182, 184, 186, 190, 194, 195, 197, 201, 203, 204, 205, 216, 219, 228, 230, 238, 239, 243, 244, 257, 274, 275, 279, 282, 295, 300, 304, 308, 315, 316, 317, 318, 329, 345, 347, 351, 357, 363, 364, 365, 368, 369, 371, 373, 376, 378, 381, 384, 385, 388, 389, 390, 398, 401, 405, 406, 407, 408, 412, 426, 431, 458, 459, 468, 478, 483, 484, 486, 490, 495, 496, 498, 499, 506, 510, 511, 512, 518, 522, 525, 529, 531, 533, 535, 536, 537, 539, 540, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 564, 565, 586, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 600, 603, 604, 605, 608, 609, 616, 617, 619, 625, 626, 627, 628, 629, 631, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 695, 700, 715, 716, 717, 721, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 778, 790, 793, 794, 796, 804, 812, 816, 817, 819, 820, 824, 826, 827, 835, 836, 841, 843, 844, 850, 851, 853, 854, 857, 858, 860, 866, 867, 868, 870, 873, 874, 877, 882, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 907, 913, 916, 918, 934, 970, 971, 973, 976, 978, 988, 989, 991, 992, 1001, 1002, 1003, 1004, 1005, 1007, 1010, 1013, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "patient": [7, 135, 149, 165, 373, 384, 407, 977, 1014], "diseas": [7, 135, 149, 165, 264, 373, 706, 981, 1014], "newsgroup": [7, 14, 19, 233, 262, 326, 348, 349, 369, 400, 411, 482, 483, 1008, 1018], "post": [7, 14, 19, 70, 167, 317, 347, 348, 349, 351, 357, 362, 371, 375, 376, 380, 381, 389, 403, 442, 482, 483, 494, 706, 819, 901, 981, 997, 1005, 1016, 1033], "written": [7, 29, 35, 89, 167, 207, 316, 363, 373, 376, 377, 378, 382, 384, 388, 390, 404, 409, 481, 496, 502, 691, 707, 819, 898, 905, 975, 977, 981, 985, 986, 995, 1000, 1007, 1008, 1013, 1016, 1031], "about": [7, 11, 29, 44, 53, 57, 62, 70, 86, 89, 121, 146, 161, 167, 169, 170, 173, 204, 217, 229, 236, 258, 259, 261, 263, 268, 286, 308, 313, 315, 316, 317, 318, 319, 323, 347, 349, 356, 358, 362, 363, 365, 369, 371, 375, 376, 380, 381, 382, 389, 390, 391, 397, 407, 408, 411, 413, 432, 486, 488, 489, 490, 491, 494, 495, 496, 498, 499, 504, 509, 555, 556, 587, 588, 601, 602, 608, 627, 634, 670, 672, 736, 790, 796, 804, 812, 822, 914, 971, 977, 978, 980, 982, 984, 987, 988, 991, 992, 994, 996, 997, 999, 1001, 1005, 1007, 1008, 1014, 1016, 1027, 1028, 1038], "sgdclassifi": [7, 8, 207, 208, 209, 210, 211, 212, 213, 234, 269, 326, 336, 347, 358, 362, 364, 382, 390, 401, 402, 411, 632, 634, 635, 636, 640, 652, 660, 662, 893, 898, 973, 977, 982, 995, 996, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038], "stochast": [7, 58, 124, 127, 167, 176, 178, 219, 223, 225, 229, 234, 289, 290, 296, 301, 316, 403, 408, 410, 456, 482, 490, 496, 497, 498, 508, 516, 530, 538, 553, 554, 565, 598, 621, 633, 652, 653, 662, 666, 668, 670, 671, 672, 673, 681, 682, 683, 684, 686, 819, 842, 849, 850, 851, 854, 863, 897, 929, 930, 955, 970, 984, 985, 987, 1003, 1017, 1018, 1022, 1023, 1026, 1027, 1029, 1031, 1033], "gradient": [7, 46, 66, 110, 117, 129, 132, 135, 136, 157, 158, 167, 178, 219, 229, 234, 303, 309, 390, 402, 403, 413, 446, 456, 460, 461, 482, 484, 490, 495, 497, 498, 509, 514, 547, 548, 553, 554, 555, 556, 558, 559, 565, 580, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 628, 629, 633, 642, 643, 652, 653, 662, 663, 666, 668, 670, 671, 672, 674, 681, 686, 688, 689, 734, 735, 741, 743, 790, 793, 794, 795, 816, 819, 849, 850, 851, 854, 866, 867, 897, 955, 978, 981, 984, 985, 986, 987, 1001, 1003, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1035, 1037], "descent": [7, 13, 167, 178, 185, 219, 229, 234, 316, 408, 410, 465, 466, 472, 482, 490, 497, 525, 531, 532, 533, 534, 536, 537, 539, 540, 541, 542, 565, 633, 640, 641, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 662, 666, 668, 670, 671, 672, 675, 676, 677, 678, 681, 688, 819, 850, 851, 854, 893, 897, 955, 978, 985, 987, 996, 1003, 1014, 1018, 1022, 1025, 1026, 1027, 1029, 1031, 1033, 1035, 1036, 1037], "nusvr": [7, 362, 899, 996, 1024, 1030, 1032, 1033, 1034, 1036, 1037], "nu": [7, 9, 11, 161, 214, 229, 333, 362, 410, 413, 613, 671, 895, 896, 897, 987, 995, 996, 1033, 1037], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 68, 72, 89, 95, 97, 145, 152, 160, 181, 187, 204, 205, 212, 216, 234, 235, 242, 259, 261, 262, 266, 287, 300, 303, 327, 330, 331, 333, 334, 335, 337, 338, 339, 342, 344, 345, 348, 362, 364, 365, 371, 381, 382, 385, 388, 390, 400, 401, 403, 405, 406, 407, 408, 410, 413, 414, 415, 431, 437, 438, 439, 441, 443, 444, 445, 447, 458, 459, 461, 462, 476, 477, 478, 479, 481, 483, 491, 503, 506, 515, 518, 525, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 543, 544, 545, 546, 561, 562, 563, 564, 575, 576, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 616, 617, 619, 625, 632, 634, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 666, 667, 668, 669, 670, 671, 672, 680, 681, 682, 683, 685, 686, 687, 689, 693, 713, 728, 756, 761, 762, 763, 764, 766, 767, 768, 770, 771, 790, 793, 794, 804, 817, 820, 821, 822, 828, 829, 830, 831, 832, 835, 836, 837, 839, 840, 841, 843, 844, 845, 850, 851, 858, 860, 865, 873, 877, 880, 891, 893, 894, 895, 896, 897, 898, 899, 900, 913, 927, 929, 930, 944, 950, 970, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 991, 995, 997, 1003, 1007, 1010, 1013, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1033, 1035], "gradientboostingregressor": [7, 125, 126, 132, 135, 362, 381, 388, 548, 556, 626, 627, 977, 981, 982, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "forward": [7, 112, 149, 236, 315, 362, 376, 394, 412, 502, 503, 533, 537, 547, 553, 554, 579, 580, 596, 679, 680, 857, 977, 1002, 1034], "wise": [7, 26, 48, 160, 201, 229, 271, 303, 348, 362, 390, 401, 403, 407, 408, 412, 452, 525, 528, 531, 535, 539, 540, 543, 544, 547, 549, 550, 553, 554, 586, 589, 590, 592, 593, 594, 600, 634, 646, 694, 747, 821, 870, 883, 884, 887, 954, 956, 957, 958, 959, 962, 973, 975, 981, 982, 995, 1002, 1022, 1027, 1030, 1031, 1032], "fashion": [7, 117, 123, 208, 270, 363, 390, 400, 401, 403, 408, 410, 547, 551, 552, 553, 554, 558, 559, 560, 596, 621, 819, 842, 857, 860, 866, 877, 901, 902, 903, 904, 952, 971, 977, 981, 991, 1031], "notic": [7, 25, 26, 53, 57, 80, 115, 117, 118, 125, 148, 179, 184, 229, 242, 258, 259, 261, 262, 264, 270, 271, 281, 308, 338, 347, 348, 349, 358, 381, 391, 407, 490, 535, 557, 970, 980, 981, 987, 1016, 1019, 1035], "faster": [7, 19, 39, 64, 73, 95, 117, 118, 122, 125, 149, 171, 176, 186, 200, 202, 215, 216, 218, 235, 281, 283, 299, 314, 316, 317, 347, 348, 349, 362, 370, 376, 384, 385, 390, 402, 403, 408, 412, 413, 415, 437, 441, 443, 445, 446, 447, 456, 502, 525, 526, 527, 530, 531, 532, 533, 534, 536, 537, 539, 540, 541, 542, 547, 553, 554, 555, 556, 637, 640, 641, 646, 647, 652, 653, 654, 655, 656, 657, 666, 668, 678, 681, 685, 689, 719, 749, 771, 772, 773, 833, 834, 838, 850, 851, 868, 870, 872, 882, 886, 930, 950, 970, 974, 977, 982, 984, 985, 988, 993, 995, 996, 997, 1001, 1004, 1012, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "10_000": [7, 25, 75, 117, 125, 169, 176, 233, 264, 281, 553, 554, 558, 559, 870], "vari": [7, 34, 44, 46, 55, 62, 75, 118, 119, 121, 148, 167, 170, 171, 189, 191, 194, 198, 226, 234, 239, 251, 257, 261, 264, 296, 301, 303, 308, 319, 321, 328, 334, 337, 358, 362, 364, 371, 390, 435, 439, 440, 494, 502, 508, 509, 516, 553, 554, 558, 559, 640, 641, 644, 645, 646, 647, 648, 649, 654, 655, 656, 657, 675, 678, 697, 756, 809, 812, 817, 819, 820, 850, 854, 858, 873, 890, 898, 901, 902, 955, 973, 976, 977, 981, 984, 985, 994, 997, 1005, 1029, 1030, 1038], "relev": [7, 9, 19, 77, 83, 147, 149, 167, 179, 194, 261, 262, 268, 358, 362, 364, 371, 373, 375, 376, 378, 380, 381, 382, 390, 391, 394, 405, 406, 412, 413, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 532, 535, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 584, 585, 588, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 719, 733, 749, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 871, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 981, 982, 987, 998, 1002, 1025, 1030, 1034, 1036], "select": [7, 9, 36, 44, 55, 57, 62, 68, 69, 71, 74, 76, 82, 92, 94, 107, 112, 114, 120, 122, 125, 132, 139, 146, 150, 157, 159, 170, 171, 173, 176, 178, 180, 184, 204, 208, 215, 218, 219, 222, 229, 233, 235, 239, 245, 246, 253, 259, 260, 261, 262, 266, 285, 303, 308, 309, 315, 319, 322, 323, 326, 329, 334, 342, 345, 347, 348, 349, 358, 362, 363, 365, 371, 373, 374, 376, 378, 384, 389, 390, 400, 403, 404, 405, 408, 410, 411, 413, 437, 439, 440, 441, 443, 445, 447, 452, 453, 454, 458, 460, 461, 466, 467, 470, 482, 483, 486, 487, 490, 491, 494, 495, 496, 498, 506, 509, 526, 528, 529, 534, 535, 538, 543, 545, 552, 553, 554, 557, 559, 575, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 621, 625, 626, 639, 640, 641, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 665, 667, 670, 672, 676, 677, 685, 686, 691, 706, 710, 712, 747, 781, 783, 784, 788, 789, 790, 793, 794, 795, 796, 804, 815, 816, 817, 819, 821, 835, 836, 837, 839, 841, 843, 844, 845, 853, 854, 858, 863, 869, 873, 890, 893, 894, 898, 901, 902, 903, 904, 909, 950, 951, 975, 976, 978, 980, 981, 982, 984, 985, 987, 991, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "ham": [7, 444, 451, 575, 693, 697, 703, 727, 734, 771, 772, 773, 787, 984], "loss": [7, 24, 25, 26, 27, 118, 123, 124, 125, 126, 127, 152, 153, 167, 178, 182, 190, 193, 202, 204, 205, 207, 208, 212, 218, 219, 235, 269, 298, 299, 308, 316, 326, 331, 332, 336, 338, 342, 347, 388, 390, 401, 402, 408, 413, 458, 459, 490, 502, 503, 526, 532, 533, 534, 537, 541, 546, 547, 548, 552, 553, 554, 555, 556, 559, 637, 640, 643, 652, 653, 660, 661, 662, 663, 664, 665, 666, 670, 671, 672, 673, 697, 700, 703, 716, 727, 728, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 787, 790, 793, 794, 804, 815, 816, 819, 850, 851, 853, 854, 857, 858, 866, 867, 868, 873, 893, 894, 899, 900, 902, 904, 930, 934, 974, 977, 985, 989, 994, 995, 996, 997, 1016, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "eustach": [7, 8, 10, 1005, 1024, 1025], "diemert": [7, 8, 10, 1005, 1024, 1025], "maria": [7, 126, 132, 149, 165, 403, 1033, 1034, 1035, 1036, 1037], "telenczuk": [7, 126, 132, 149, 165, 1031, 1034, 1035, 1037], "github": [7, 8, 12, 26, 71, 72, 111, 117, 119, 120, 126, 128, 129, 132, 135, 146, 157, 165, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 281, 300, 309, 314, 315, 317, 318, 324, 356, 370, 374, 375, 379, 380, 381, 382, 384, 388, 390, 391, 393, 397, 399, 446, 456, 502, 530, 685, 686, 689, 984, 1000, 1001, 1004, 1005, 1016, 1027, 1032], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 50, 57, 65, 70, 71, 109, 111, 112, 113, 114, 115, 116, 117, 123, 124, 126, 127, 131, 132, 152, 155, 157, 159, 161, 165, 180, 200, 202, 207, 217, 218, 222, 224, 226, 232, 246, 248, 249, 262, 265, 281, 303, 304, 307, 308, 347, 348, 370, 371, 374, 376, 380, 381, 382, 384, 388, 393, 403, 436, 446, 456, 502, 528, 530, 535, 665, 685, 689, 699, 984, 999, 1004, 1027, 1029, 1032], "maikia": [7, 126, 132, 165, 1030, 1031, 1033, 1034], "lemaitre58": [7, 132, 152, 157, 159, 161, 222, 303], "gmail": [7, 11, 14, 16, 24, 42, 48, 57, 65, 70, 71, 109, 111, 112, 113, 114, 115, 116, 117, 123, 124, 126, 127, 131, 132, 152, 155, 157, 159, 161, 180, 200, 202, 217, 218, 222, 224, 232, 246, 248, 249, 262, 265, 303, 308, 347, 348], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 216, 217, 218, 222, 223, 224, 226, 229, 232, 234, 235, 237, 239, 246, 248, 262, 265, 267, 274, 279, 281, 283, 289, 290, 291, 293, 294, 297, 300, 303, 304, 305, 306, 307, 308, 322, 323, 324, 325, 327, 338, 339, 342, 343, 347, 348, 349, 370, 390, 397, 997, 1005], "hamming_loss": [7, 697, 787, 981, 1024, 1028, 1031], "mean_squared_error": [7, 125, 126, 196, 200, 202, 204, 206, 218, 358, 410, 735, 745, 981, 1023, 1025, 1032, 1033], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 57, 59, 60, 64, 65, 71, 78, 79, 80, 92, 96, 101, 102, 115, 121, 141, 144, 172, 190, 195, 198, 203, 206, 209, 213, 217, 224, 247, 249, 250, 251, 252, 264, 267, 275, 286, 287, 288, 293, 339, 340, 344, 348, 358, 363, 378, 385, 388, 390, 403, 407, 408, 437, 441, 442, 444, 446, 451, 453, 454, 455, 456, 465, 466, 467, 530, 538, 547, 548, 549, 550, 553, 554, 621, 640, 641, 646, 647, 654, 655, 656, 657, 671, 683, 685, 687, 689, 788, 789, 794, 824, 827, 842, 896, 916, 929, 930, 946, 950, 970, 971, 976, 978, 1014, 1026, 1027, 1031, 1032, 1038], "fetch_20newsgroups_vector": [7, 215, 233, 371, 1022, 1032, 1034], "spars": [7, 12, 13, 17, 39, 40, 54, 55, 57, 77, 83, 94, 107, 117, 130, 167, 178, 195, 199, 216, 219, 233, 235, 262, 281, 314, 318, 346, 349, 350, 356, 362, 368, 370, 371, 372, 376, 378, 379, 380, 381, 388, 389, 390, 402, 403, 404, 410, 411, 413, 414, 418, 425, 432, 434, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 451, 453, 454, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 481, 482, 483, 490, 491, 497, 502, 517, 518, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 575, 576, 579, 580, 582, 583, 584, 585, 587, 588, 597, 598, 599, 600, 601, 602, 603, 623, 624, 625, 627, 632, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 706, 707, 708, 722, 723, 724, 727, 731, 732, 733, 747, 748, 753, 754, 756, 757, 759, 760, 761, 763, 765, 766, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 783, 784, 787, 790, 793, 794, 804, 811, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 909, 911, 912, 913, 914, 919, 927, 930, 931, 934, 935, 936, 944, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 967, 971, 974, 977, 978, 979, 981, 982, 984, 994, 996, 997, 1002, 1003, 1014, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "generate_data": [7, 33], "load_diabet": [7, 126, 135, 138, 149, 165, 185, 187, 188, 189, 196, 197, 240, 257, 318, 410, 552, 556, 562, 667, 695, 814, 815, 816, 902, 904, 989, 1011, 1014, 1028, 1033, 1036], "elif": [7, 8, 16, 34, 180, 202, 237, 248, 286, 869], "subset": [7, 19, 20, 26, 27, 32, 70, 71, 80, 81, 119, 121, 122, 138, 146, 149, 171, 173, 189, 201, 215, 216, 217, 218, 232, 234, 238, 239, 259, 262, 264, 270, 271, 273, 308, 309, 315, 322, 326, 347, 348, 349, 358, 371, 376, 384, 388, 390, 400, 401, 403, 404, 407, 410, 411, 413, 420, 431, 443, 458, 460, 461, 463, 482, 483, 486, 487, 491, 502, 543, 544, 545, 547, 549, 550, 551, 553, 555, 556, 557, 558, 561, 563, 596, 604, 623, 633, 634, 635, 636, 645, 649, 652, 660, 662, 665, 668, 669, 670, 671, 672, 673, 691, 697, 698, 707, 710, 712, 724, 727, 748, 750, 784, 787, 792, 817, 819, 821, 822, 823, 824, 828, 829, 830, 831, 832, 835, 840, 843, 850, 859, 888, 889, 893, 895, 898, 901, 903, 909, 950, 970, 977, 981, 982, 992, 994, 996, 997, 1016, 1025, 1030, 1031, 1033, 1035], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 59, 80, 109, 110, 112, 116, 133, 136, 165, 167, 173, 196, 204, 205, 217, 234, 236, 260, 261, 267, 271, 275, 279, 332, 338, 339, 358, 362, 383, 390, 400, 401, 403, 407, 408, 410, 414, 432, 435, 437, 438, 439, 440, 442, 444, 445, 447, 449, 450, 465, 466, 472, 475, 530, 541, 547, 558, 563, 591, 605, 614, 626, 627, 628, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 669, 673, 675, 678, 682, 684, 686, 688, 701, 710, 722, 723, 728, 729, 731, 737, 747, 757, 762, 764, 765, 766, 767, 771, 774, 776, 777, 780, 781, 782, 783, 784, 786, 797, 799, 814, 818, 831, 833, 834, 871, 872, 873, 879, 883, 893, 894, 919, 932, 973, 975, 977, 978, 979, 981, 983, 984, 985, 989, 991, 994, 996, 1011, 1014, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "given": [7, 10, 11, 27, 37, 49, 58, 60, 78, 85, 96, 100, 118, 128, 130, 132, 152, 159, 170, 171, 184, 200, 201, 204, 218, 222, 229, 233, 234, 236, 238, 239, 240, 257, 261, 262, 263, 264, 270, 284, 287, 288, 289, 305, 309, 316, 347, 348, 349, 355, 362, 364, 371, 375, 376, 378, 380, 382, 384, 385, 388, 390, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 420, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 450, 452, 453, 454, 455, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 475, 476, 477, 478, 481, 490, 495, 497, 499, 517, 527, 528, 530, 532, 533, 534, 537, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 583, 584, 585, 587, 588, 595, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 625, 626, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 681, 682, 684, 685, 691, 692, 693, 694, 695, 696, 698, 699, 700, 706, 708, 711, 712, 714, 717, 719, 720, 727, 729, 730, 733, 745, 748, 749, 751, 752, 757, 767, 771, 774, 775, 777, 780, 781, 782, 785, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 802, 804, 808, 812, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 879, 880, 882, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 908, 917, 918, 919, 940, 965, 969, 970, 973, 975, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 991, 994, 995, 996, 997, 1005, 1007, 1011, 1012, 1014, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "round": [7, 9, 25, 85, 118, 164, 165, 207, 218, 261, 267, 305, 307, 347, 390, 444, 450, 451, 558, 559, 587, 588, 591, 621, 686, 707, 792, 802, 858, 890, 905, 907, 971, 985, 997, 1024, 1026, 1028, 1030, 1031, 1033, 1035, 1036, 1038], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 80, 116, 128, 135, 149, 157, 165, 173, 188, 193, 214, 224, 232, 264, 268, 287, 333, 336, 348, 349, 362, 371, 373, 380, 393, 407, 408, 410, 411, 440, 458, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 563, 564, 575, 577, 578, 582, 583, 584, 585, 626, 792, 796, 797, 799, 812, 939, 952, 955, 970, 976, 977, 981, 987, 992, 1002, 1005, 1011, 1016, 1024, 1034], "chang": [7, 16, 25, 26, 95, 99, 100, 115, 118, 126, 153, 164, 169, 170, 171, 173, 201, 202, 204, 205, 240, 241, 256, 261, 268, 271, 307, 313, 314, 315, 316, 317, 318, 319, 323, 334, 338, 349, 356, 358, 362, 363, 364, 371, 378, 379, 380, 381, 384, 388, 390, 394, 403, 407, 410, 411, 413, 415, 428, 431, 434, 437, 438, 441, 443, 446, 448, 453, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 487, 488, 490, 498, 502, 503, 506, 507, 508, 516, 520, 525, 527, 528, 529, 530, 531, 532, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 582, 583, 584, 585, 587, 588, 591, 596, 604, 605, 607, 608, 609, 611, 613, 614, 616, 617, 619, 621, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 684, 686, 694, 698, 701, 706, 710, 711, 722, 723, 729, 730, 734, 748, 749, 750, 771, 777, 778, 780, 786, 788, 789, 790, 791, 792, 793, 794, 795, 797, 799, 804, 808, 809, 811, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 843, 844, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 865, 866, 872, 873, 881, 882, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 911, 913, 914, 925, 930, 940, 947, 948, 949, 951, 970, 971, 972, 980, 981, 982, 984, 991, 994, 995, 996, 997, 999, 1002, 1007, 1014, 1016, 1020, 1021], "affect": [7, 25, 80, 159, 169, 170, 204, 225, 239, 240, 264, 271, 308, 319, 358, 362, 363, 364, 372, 390, 392, 401, 403, 406, 407, 409, 411, 414, 416, 438, 444, 451, 467, 469, 473, 543, 544, 563, 693, 706, 781, 790, 793, 794, 795, 804, 808, 809, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 873, 874, 884, 898, 980, 984, 996, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 380, 401, 407, 828, 983, 1036], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 61, 71, 103, 115, 116, 118, 123, 125, 139, 165, 173, 193, 204, 205, 207, 208, 215, 218, 234, 235, 261, 264, 270, 271, 274, 279, 297, 298, 309, 325, 334, 337, 347, 348, 349, 352, 356, 382, 390, 404, 411, 652, 653, 893, 894, 900, 920, 991, 1011], "start_tim": [7, 10, 19, 119, 120, 132, 152, 189, 222], "elapsed_tim": [7, 39, 67, 119, 120, 132, 217], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 60, 61, 65, 66, 67, 71, 98, 102, 141, 160, 170, 186, 190, 224, 260, 261, 265, 269, 342, 349, 362, 370, 371, 376, 385, 390, 403, 404, 411, 412, 414, 415, 416, 420, 422, 426, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 486, 487, 488, 490, 492, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 577, 578, 582, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 604, 605, 607, 608, 609, 610, 611, 613, 614, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 752, 759, 762, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 796, 804, 807, 810, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 856, 859, 860, 866, 867, 869, 871, 873, 874, 875, 876, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 911, 913, 914, 917, 927, 928, 944, 956, 962, 967, 971, 981, 982, 984, 985, 991, 996, 997, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 115, 124, 126, 215, 216, 218, 308], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 68, 94, 107, 129, 167, 199, 236, 348, 349, 369, 370, 371, 378, 388, 390, 403, 411, 443, 458, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 501, 504, 520, 525, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 561, 562, 563, 564, 575, 576, 578, 581, 582, 583, 626, 627, 628, 658, 679, 680, 695, 707, 790, 793, 794, 801, 802, 804, 816, 852, 857, 866, 901, 902, 903, 904, 908, 918, 938, 941, 970, 977, 981, 996, 1007, 1016, 1017, 1018, 1022, 1030, 1033, 1034, 1035, 1036, 1037], "necessari": [7, 13, 116, 184, 200, 205, 246, 261, 262, 268, 283, 338, 354, 362, 371, 374, 375, 376, 377, 378, 379, 380, 384, 388, 403, 405, 410, 446, 456, 482, 483, 485, 486, 487, 488, 489, 491, 528, 638, 639, 640, 646, 650, 651, 654, 655, 656, 657, 658, 659, 665, 667, 669, 670, 685, 689, 786, 856, 865, 876, 880, 886, 970, 973, 977, 980, 983, 991, 997, 1016, 1022, 1030], "defin": [7, 9, 12, 53, 55, 57, 66, 70, 71, 73, 86, 95, 100, 109, 111, 112, 113, 132, 149, 152, 159, 160, 161, 171, 172, 173, 179, 201, 208, 217, 218, 229, 233, 236, 240, 242, 246, 251, 261, 262, 264, 268, 270, 271, 272, 273, 281, 303, 314, 334, 338, 342, 347, 348, 362, 372, 375, 376, 377, 378, 382, 383, 385, 388, 389, 390, 397, 398, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 413, 419, 424, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 453, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 483, 513, 514, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 621, 622, 623, 624, 626, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 690, 691, 693, 702, 704, 710, 715, 716, 717, 718, 721, 724, 731, 734, 738, 739, 741, 743, 744, 746, 747, 750, 753, 759, 774, 778, 783, 784, 788, 789, 790, 793, 794, 796, 804, 812, 816, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 880, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 917, 919, 922, 928, 939, 941, 965, 970, 971, 977, 978, 979, 980, 982, 983, 984, 986, 987, 988, 989, 991, 993, 995, 996, 997, 1002, 1012, 1015, 1018, 1019, 1024, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1038], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 69, 70, 76, 81, 90, 105, 121, 124, 157, 167, 169, 170, 171, 176, 184, 200, 202, 236, 243, 245, 248, 251, 253, 256, 267, 268, 270, 271, 338, 347, 349, 356, 358, 363, 365, 369, 370, 371, 373, 374, 376, 377, 379, 380, 381, 382, 388, 389, 393, 397, 399, 400, 404, 411, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 490, 502, 503, 509, 561, 566, 575, 576, 579, 580, 582, 583, 585, 594, 598, 611, 621, 623, 624, 632, 650, 652, 666, 668, 673, 681, 683, 686, 687, 693, 695, 701, 708, 710, 722, 723, 731, 734, 776, 777, 780, 781, 788, 789, 790, 796, 804, 812, 817, 819, 820, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 853, 854, 855, 858, 860, 866, 867, 873, 874, 891, 895, 896, 897, 898, 899, 909, 911, 913, 914, 917, 921, 922, 944, 945, 952, 955, 968, 971, 973, 978, 980, 981, 982, 983, 984, 985, 991, 993, 997, 1004, 1005, 1009, 1014, 1015, 1016, 1022, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 85, 145, 146, 149, 169, 170, 179, 182, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 199, 203, 204, 205, 209, 215, 216, 237, 243, 274, 310, 317, 332, 339, 343, 347, 358, 371, 378, 390, 406, 412, 459, 476, 477, 478, 543, 587, 588, 591, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 893, 894, 895, 896, 897, 898, 899, 965, 975, 977, 995, 996, 1014, 1022, 1024, 1027, 1029, 1034, 1036], "toarrai": [7, 326, 356, 404, 411, 560, 576, 582, 584, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 866, 883, 884, 952, 955, 971, 984, 991], "count_nonzero": [7, 10, 362], "configur": [7, 10, 71, 72, 171, 241, 243, 310, 347, 361, 374, 376, 378, 382, 384, 388, 390, 393, 394, 399, 404, 411, 412, 427, 436, 437, 439, 441, 443, 446, 456, 458, 462, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 560, 561, 562, 563, 564, 575, 576, 577, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 620, 621, 622, 623, 624, 626, 629, 632, 633, 634, 635, 636, 682, 683, 684, 685, 686, 688, 689, 781, 837, 842, 845, 849, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 891, 947, 948, 949, 978, 981, 991, 996, 1001, 1016, 1018, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038], "penalti": [7, 10, 30, 82, 167, 178, 179, 184, 189, 193, 200, 204, 215, 216, 219, 231, 269, 297, 316, 326, 339, 347, 362, 384, 388, 402, 405, 408, 412, 465, 466, 467, 468, 469, 470, 472, 496, 525, 531, 532, 533, 534, 536, 537, 541, 542, 591, 637, 640, 641, 642, 643, 646, 647, 648, 651, 652, 653, 654, 655, 656, 662, 663, 664, 666, 670, 672, 674, 675, 681, 804, 873, 893, 894, 896, 898, 899, 900, 970, 977, 980, 985, 991, 995, 996, 1014, 1016, 1024, 1027, 1029, 1031, 1032, 1034, 1035, 1037, 1038], "elasticnet": [7, 10, 181, 191, 269, 274, 362, 382, 388, 408, 641, 646, 651, 652, 653, 654, 655, 656, 657, 662, 670, 672, 675, 977, 995, 1022, 1023, 1026, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1036], "001": [7, 13, 32, 44, 62, 149, 152, 170, 184, 209, 229, 239, 246, 259, 261, 263, 325, 348, 373, 382, 407, 530, 531, 533, 540, 621, 638, 639, 640, 641, 646, 647, 654, 655, 656, 657, 660, 661, 662, 670, 671, 672, 673, 675, 678, 683, 684, 687, 688, 788, 789, 850, 851, 888, 889, 895, 896, 897, 898, 899, 970, 1007, 1016], "modified_hub": [7, 670, 995], "fit_intercept": [7, 179, 180, 186, 205, 214, 229, 269, 310, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 893, 894, 900, 977, 995, 1026, 1030, 1031, 1032, 1034, 1035, 1036], "tol": [7, 10, 17, 73, 95, 123, 149, 164, 180, 191, 193, 207, 208, 214, 216, 229, 240, 247, 249, 300, 316, 342, 347, 378, 382, 410, 415, 437, 441, 443, 446, 453, 456, 465, 466, 472, 476, 477, 478, 525, 526, 527, 529, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 553, 554, 555, 556, 596, 621, 632, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 666, 668, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 685, 687, 689, 788, 789, 804, 842, 850, 851, 888, 889, 893, 894, 895, 896, 897, 898, 899, 967, 977, 995, 996, 1012, 1016, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "n_iter_no_chang": [7, 118, 123, 208, 316, 347, 381, 390, 410, 553, 554, 555, 556, 660, 661, 662, 670, 671, 672, 850, 851, 995, 1030, 1033], "l1_ratio": [7, 10, 14, 184, 185, 191, 269, 274, 362, 388, 408, 532, 534, 541, 640, 641, 646, 652, 653, 654, 655, 656, 657, 662, 670, 672, 675, 977, 995, 1023, 1025, 1027, 1034, 1036], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 58, 60, 78, 79, 82, 95, 98, 146, 167, 168, 169, 174, 178, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 202, 203, 215, 218, 219, 243, 299, 310, 315, 316, 317, 338, 342, 347, 348, 349, 362, 372, 376, 378, 390, 392, 402, 405, 406, 408, 412, 413, 416, 426, 446, 459, 461, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 490, 518, 520, 521, 525, 529, 531, 533, 536, 537, 542, 546, 548, 550, 552, 554, 556, 559, 562, 564, 576, 583, 587, 591, 603, 605, 608, 621, 629, 630, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 695, 697, 710, 713, 722, 727, 731, 736, 743, 746, 768, 770, 778, 779, 783, 784, 787, 805, 816, 819, 826, 827, 836, 844, 851, 854, 866, 873, 893, 894, 895, 896, 897, 898, 899, 902, 904, 972, 975, 977, 995, 996, 1014, 1022, 1026, 1027, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "misclassif": [7, 112, 338, 787, 995, 996, 997, 1023], "ratio": [7, 53, 66, 73, 104, 167, 233, 235, 249, 254, 277, 362, 376, 403, 405, 407, 410, 444, 450, 487, 488, 509, 535, 543, 544, 545, 625, 652, 704, 706, 710, 718, 723, 729, 732, 775, 776, 777, 780, 786, 816, 819, 839, 886, 950, 975, 987, 997, 1012, 1037], "sparsifi": [7, 184, 362, 652, 653, 660, 662, 670, 671, 672, 893, 965, 1024], "05": [7, 8, 14, 15, 24, 26, 30, 35, 37, 44, 52, 60, 62, 64, 65, 67, 75, 85, 91, 100, 115, 118, 123, 125, 130, 136, 145, 149, 157, 160, 161, 166, 170, 180, 181, 199, 202, 214, 225, 226, 229, 239, 246, 248, 249, 252, 261, 262, 268, 270, 271, 272, 277, 286, 289, 294, 303, 305, 311, 313, 317, 323, 325, 339, 350, 373, 412, 444, 450, 525, 586, 589, 590, 592, 607, 608, 609, 613, 614, 616, 617, 619, 626, 627, 643, 684, 688, 749, 790, 842, 893, 894, 977, 985, 991], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 55, 60, 61, 62, 63, 64, 65, 70, 72, 98, 101, 105, 106, 109, 115, 118, 121, 122, 123, 140, 141, 147, 148, 152, 160, 165, 171, 173, 199, 200, 218, 224, 229, 232, 233, 234, 236, 238, 239, 246, 248, 249, 256, 259, 261, 262, 269, 270, 272, 275, 279, 281, 288, 290, 291, 297, 304, 305, 306, 309, 319, 322, 323, 326, 334, 341, 344, 347, 348, 349, 356, 388, 390, 413, 431, 439, 444, 450, 458, 501, 509, 544, 563, 564, 576, 591, 626, 627, 775, 790, 804, 815, 819, 821, 824, 888, 889, 1014, 1015, 1016, 1031, 1034], "support_vectors_": [7, 10, 16, 335, 338, 339, 895, 896, 897, 898, 899, 996], "squared_error": [7, 105, 125, 126, 316, 410, 552, 553, 554, 556, 559, 665, 670, 672, 687, 902, 904, 995, 997, 1035, 1038], "learning_r": [7, 111, 112, 124, 125, 126, 127, 226, 281, 298, 300, 314, 316, 410, 547, 548, 553, 554, 555, 556, 662, 670, 671, 672, 686, 849, 850, 851, 978, 988, 995, 1023, 1031, 1035], "max_depth": [7, 31, 111, 113, 114, 117, 121, 124, 125, 126, 127, 130, 131, 133, 164, 222, 258, 273, 315, 316, 352, 354, 355, 356, 389, 390, 410, 547, 548, 551, 552, 553, 554, 555, 556, 558, 559, 560, 793, 794, 817, 901, 902, 903, 904, 905, 906, 907, 970, 988, 997, 1031, 1033], "n_estim": [7, 10, 26, 31, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 130, 131, 134, 164, 173, 222, 238, 242, 248, 258, 273, 305, 313, 315, 362, 389, 390, 410, 412, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 626, 793, 794, 970, 987, 988, 1019, 1030, 1038], "n_tree": 7, "loop": [7, 8, 115, 125, 170, 256, 266, 347, 356, 362, 376, 377, 382, 403, 407, 412, 640, 641, 646, 647, 653, 654, 655, 656, 657, 970, 994, 995, 1011, 1025, 1026, 1029, 1034, 1035, 1038], "previous": [7, 53, 57, 71, 112, 158, 170, 259, 268, 317, 371, 384, 388, 393, 403, 408, 411, 434, 437, 448, 518, 528, 535, 643, 652, 653, 660, 662, 670, 671, 672, 893, 949, 977, 991, 1001, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "subsequ": [7, 32, 58, 75, 98, 112, 146, 188, 202, 263, 266, 281, 283, 334, 358, 376, 378, 382, 390, 403, 404, 410, 413, 431, 490, 502, 547, 548, 553, 555, 556, 660, 662, 670, 793, 794, 821, 822, 825, 828, 829, 830, 831, 832, 850, 868, 872, 971, 980, 982, 1031, 1032, 1036, 1038], "relax": [7, 403, 411, 447, 994, 1029], "sgd": [7, 8, 167, 178, 207, 214, 219, 229, 269, 298, 299, 316, 347, 358, 364, 498, 506, 625, 643, 660, 661, 662, 665, 670, 671, 672, 673, 850, 851, 970, 985, 1003, 1018, 1022, 1025, 1026, 1027, 1029, 1033, 1035], "svr": [7, 10, 167, 228, 244, 313, 329, 345, 362, 550, 561, 562, 587, 588, 637, 672, 790, 796, 894, 896, 898, 974, 1014, 1022, 1024, 1026, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037], "optim": [7, 13, 27, 53, 54, 57, 60, 72, 78, 79, 95, 111, 124, 126, 148, 149, 152, 153, 156, 157, 158, 159, 160, 184, 188, 189, 193, 208, 216, 235, 239, 259, 266, 269, 274, 279, 285, 300, 303, 308, 317, 325, 336, 342, 347, 348, 349, 358, 362, 365, 370, 373, 376, 378, 379, 388, 390, 393, 398, 400, 403, 405, 407, 408, 410, 412, 413, 414, 438, 442, 443, 444, 446, 451, 455, 456, 466, 467, 473, 525, 528, 529, 531, 533, 537, 551, 552, 553, 554, 568, 604, 605, 613, 614, 629, 632, 634, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 678, 681, 684, 686, 688, 689, 695, 716, 723, 790, 804, 835, 836, 837, 839, 841, 842, 843, 844, 845, 850, 851, 869, 881, 885, 886, 893, 894, 895, 896, 897, 898, 899, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 986, 995, 996, 997, 1001, 1005, 1011, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1038], "few": [7, 14, 19, 39, 46, 52, 99, 122, 155, 158, 159, 189, 198, 200, 202, 218, 235, 236, 246, 263, 264, 268, 299, 303, 307, 313, 314, 315, 316, 317, 318, 319, 322, 342, 349, 362, 371, 372, 373, 376, 378, 389, 391, 394, 397, 400, 401, 403, 407, 408, 410, 412, 413, 431, 443, 555, 556, 582, 585, 649, 686, 689, 886, 930, 949, 977, 978, 980, 981, 984, 985, 994, 996, 997, 1005, 1007, 1014, 1015, 1016, 1028, 1038], "drawn": [7, 52, 80, 115, 148, 152, 161, 169, 240, 268, 285, 347, 372, 403, 409, 410, 413, 415, 463, 464, 465, 466, 467, 468, 469, 470, 509, 517, 527, 549, 550, 557, 605, 621, 626, 635, 829, 885, 886, 903, 904, 977, 991, 993, 1025], "boost": [7, 110, 111, 112, 113, 117, 129, 132, 135, 136, 167, 309, 382, 390, 402, 412, 442, 460, 461, 484, 490, 495, 498, 509, 514, 547, 548, 553, 554, 555, 556, 558, 559, 626, 627, 628, 629, 734, 735, 741, 743, 790, 793, 794, 795, 816, 819, 854, 866, 867, 977, 981, 1001, 1003, 1018, 1022, 1023, 1025, 1027, 1028, 1029, 1031, 1035], "detriment": [7, 148, 363, 412, 977], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 57, 60, 65, 67, 73, 75, 80, 92, 122, 165, 173, 200, 230, 232, 240, 246, 264, 272, 304, 308, 309, 325, 347, 348, 1012], "add_subplot": [7, 16, 25, 27, 42, 45, 64, 67, 90, 101, 102, 111, 171, 197, 215, 223, 225, 322, 323, 383], "line1": [7, 12, 224], "tab": [7, 53, 112, 129, 132, 152, 157, 159, 188, 189, 314, 404, 1029], "blue": [7, 20, 21, 26, 34, 92, 95, 112, 115, 119, 127, 129, 132, 134, 147, 157, 159, 176, 180, 188, 189, 196, 198, 224, 233, 255, 256, 261, 298, 308, 314, 324, 373, 403, 408], "set_xlabel": [7, 10, 45, 53, 60, 72, 73, 75, 90, 92, 100, 111, 161, 164, 165, 169, 171, 172, 173, 176, 189, 195, 197, 198, 200, 202, 215, 216, 234, 261, 263, 267, 272, 273, 276, 286, 303, 304, 308, 325, 348, 349, 352], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 60, 65, 72, 73, 75, 80, 90, 92, 100, 106, 111, 112, 119, 161, 171, 176, 189, 191, 195, 197, 198, 200, 202, 204, 215, 234, 246, 261, 263, 267, 272, 273, 279, 286, 303, 304, 308, 313, 325, 342, 348, 352, 1012], "spine": [7, 14, 211, 303], "set_color": [7, 211], "get_color": 7, "yaxi": [7, 10, 45, 60, 90, 101, 102, 118, 197, 221, 223, 226, 246, 281, 286, 347], "tick_param": [7, 14, 135, 246, 261, 307, 325], "ax2": [7, 57, 60, 65, 67, 80, 92, 122, 165, 173, 200, 230, 240, 246, 264, 272, 291, 304, 308, 309, 325, 347], "frameon": [7, 206], "line2": [7, 12, 224, 343], "orang": [7, 53, 92, 96, 97, 103, 112, 127, 129, 159, 165, 188, 189, 210, 237, 249, 292, 314, 355, 982], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 25, 61, 164, 200, 202, 236, 239, 243, 256, 263, 305, 326, 347, 348, 349, 383, 388, 866], "prediction_perform": 7, "4948": 7, "2675": 7, "054108": 7, "1847": 7, "3264": 7, "038893": 7, "997": [7, 40, 149], "3383": 7, "030957": 7, "802": [7, 95, 107, 149, 373], "3582": 7, "028343": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000127": 7, "5289": 7, "8022": [7, 390, 467, 1031], "000182": 7, "5193": 7, "8353": 7, "000303": 7, "124": [7, 410, 1024], "5131": [7, 1027], "3279": 7, "000471": 7, "178": [7, 373, 382, 504, 837], "5149": 7, "0779": 7, "000638": 7, "4066": 7, "4812": 7, "000115": 7, "3551": 7, "1723": 7, "000123": 7, "3445": 7, "2171": 7, "000142": 7, "3433": 7, "0358": 7, "000161": 7, "3456": 7, "0602": 7, "000180": 7, "deduc": 7, "guarante": [7, 8, 80, 81, 170, 208, 233, 279, 281, 303, 348, 358, 364, 370, 384, 385, 403, 407, 408, 411, 440, 530, 639, 652, 653, 662, 666, 668, 670, 672, 681, 688, 807, 810, 833, 834, 871, 873, 886, 887, 900, 973, 977, 978, 980, 984, 989, 993, 997, 1015, 1032], "aspect": [7, 58, 86, 95, 156, 171, 221, 229, 290, 340, 362, 363, 364, 376, 390, 391, 403, 652, 653, 997, 1005], "435": [7, 15, 348], "plot_model_complexity_influ": [7, 15], "doesn": [8, 200, 236, 247, 299, 334, 384, 390, 393, 394, 403, 411, 412, 416, 428, 469, 626, 627, 660, 662, 670, 710, 817, 820, 825, 835, 836, 850, 862, 863, 980, 981, 997, 1026], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 58, 70, 72, 78, 79, 80, 82, 85, 92, 96, 97, 101, 103, 105, 106, 111, 112, 115, 116, 123, 124, 125, 126, 127, 131, 132, 149, 153, 155, 156, 157, 160, 161, 167, 170, 171, 172, 173, 179, 181, 184, 187, 194, 197, 198, 199, 200, 201, 218, 220, 222, 223, 224, 225, 227, 236, 237, 247, 250, 252, 260, 261, 281, 293, 294, 299, 313, 316, 317, 319, 322, 323, 325, 330, 331, 334, 335, 339, 347, 348, 349, 355, 356, 358, 362, 363, 370, 371, 373, 376, 378, 380, 382, 384, 388, 389, 390, 393, 394, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 416, 420, 426, 428, 431, 441, 442, 444, 450, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 489, 490, 507, 508, 509, 513, 514, 519, 524, 526, 528, 535, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 584, 585, 588, 601, 602, 604, 605, 621, 622, 624, 625, 626, 627, 629, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 690, 698, 704, 710, 711, 719, 729, 730, 748, 749, 750, 760, 781, 782, 785, 786, 790, 793, 794, 804, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 840, 843, 844, 849, 850, 851, 859, 862, 863, 864, 866, 867, 873, 874, 886, 888, 889, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 930, 945, 970, 975, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 995, 996, 997, 1004, 1007, 1014, 1015, 1016, 1017, 1018, 1023, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "memori": [8, 54, 71, 72, 99, 123, 170, 171, 283, 309, 313, 315, 317, 318, 347, 348, 349, 363, 364, 370, 376, 379, 385, 390, 404, 407, 408, 411, 414, 415, 435, 436, 437, 438, 439, 440, 441, 443, 444, 448, 451, 453, 462, 467, 473, 490, 497, 502, 527, 528, 529, 532, 549, 550, 551, 552, 557, 558, 559, 575, 576, 582, 583, 585, 640, 641, 642, 646, 647, 652, 653, 654, 655, 656, 657, 660, 662, 663, 670, 671, 672, 673, 674, 675, 678, 771, 772, 773, 774, 790, 796, 804, 812, 814, 815, 816, 817, 820, 821, 822, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 853, 854, 871, 873, 883, 884, 886, 891, 893, 894, 901, 902, 903, 904, 914, 950, 966, 977, 983, 984, 991, 993, 994, 996, 997, 1002, 1005, 1007, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "onlin": [8, 14, 36, 68, 95, 98, 167, 178, 214, 219, 364, 371, 375, 381, 390, 403, 408, 411, 413, 436, 440, 441, 443, 489, 496, 525, 530, 531, 532, 533, 539, 540, 576, 578, 652, 660, 661, 662, 670, 672, 819, 828, 829, 830, 831, 832, 835, 836, 841, 843, 844, 862, 863, 873, 893, 894, 973, 977, 985, 987, 1000, 1003, 1005, 1014, 1018, 1022, 1026, 1027, 1029, 1037], "partial_fit": [8, 50, 95, 236, 317, 364, 378, 390, 403, 408, 436, 443, 528, 530, 531, 532, 583, 591, 652, 653, 660, 661, 662, 670, 671, 672, 821, 822, 825, 826, 828, 829, 830, 831, 832, 849, 850, 851, 862, 863, 873, 893, 977, 983, 985, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1036, 1037, 1038], "fed": [8, 132, 358, 371, 411, 970, 986, 991, 1033], "batch": [8, 11, 64, 95, 99, 294, 317, 364, 385, 390, 411, 434, 436, 441, 443, 445, 447, 525, 527, 528, 530, 531, 532, 533, 534, 536, 537, 539, 540, 658, 679, 680, 795, 808, 809, 828, 829, 830, 831, 832, 850, 851, 862, 863, 873, 886, 933, 947, 985, 986, 995, 1022, 1026, 1027, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "remain": [8, 25, 27, 71, 112, 119, 124, 126, 148, 170, 200, 204, 216, 246, 259, 263, 267, 270, 400, 403, 404, 405, 407, 411, 440, 458, 461, 509, 510, 515, 522, 528, 564, 604, 605, 756, 762, 792, 793, 794, 795, 798, 800, 828, 829, 830, 832, 934, 970, 971, 980, 981, 985, 991, 997, 1002, 1024, 1030, 1036], "hashingvector": [8, 349, 364, 411, 483, 582, 584, 1023, 1029, 1030, 1031, 1032, 1035], "where": [8, 11, 12, 13, 16, 17, 19, 20, 24, 25, 26, 32, 53, 55, 57, 80, 86, 92, 95, 98, 101, 105, 106, 111, 112, 114, 116, 118, 122, 123, 125, 129, 146, 149, 152, 158, 161, 165, 170, 179, 184, 192, 201, 204, 209, 210, 211, 213, 217, 218, 221, 223, 224, 229, 230, 233, 236, 237, 239, 241, 252, 257, 258, 261, 263, 267, 268, 270, 272, 273, 300, 303, 305, 306, 307, 308, 309, 310, 313, 315, 316, 323, 324, 332, 338, 342, 343, 344, 347, 352, 353, 358, 362, 363, 364, 370, 372, 373, 375, 376, 378, 380, 382, 383, 384, 388, 389, 390, 391, 393, 397, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 426, 431, 438, 441, 442, 446, 455, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 490, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 576, 577, 578, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 603, 604, 605, 607, 609, 613, 616, 617, 619, 621, 622, 623, 624, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 682, 685, 686, 687, 690, 701, 706, 710, 718, 722, 723, 724, 732, 735, 748, 756, 761, 762, 763, 766, 774, 775, 776, 777, 780, 783, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 836, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 863, 866, 868, 869, 872, 873, 879, 881, 887, 888, 889, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 921, 922, 923, 924, 930, 938, 966, 970, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 1002, 1004, 1007, 1008, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "word": [8, 14, 19, 70, 152, 233, 237, 334, 348, 349, 362, 371, 372, 376, 378, 381, 390, 400, 403, 405, 406, 407, 408, 447, 505, 517, 528, 530, 535, 582, 583, 585, 690, 822, 832, 890, 975, 979, 983, 986, 991, 994, 995, 1005, 1014, 1015, 1022, 1030], "federicov": 8, "itertool": [8, 42, 44, 62, 133, 171, 185, 247, 252, 261, 268, 270, 410], "sy": [8, 12, 16, 19, 208, 233, 281, 326, 349, 371, 388, 611], "tarfil": 8, "hashlib": 8, "sha256": [8, 1037], "htmlparser": 8, "pathlib": [8, 1037, 1038], "path": [8, 16, 17, 167, 178, 185, 189, 219, 352, 370, 374, 376, 380, 384, 385, 390, 435, 439, 444, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 502, 503, 542, 551, 552, 557, 558, 559, 560, 587, 588, 591, 640, 641, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 675, 676, 677, 678, 679, 680, 682, 853, 854, 900, 901, 902, 903, 904, 935, 970, 977, 978, 987, 1002, 1022, 1023, 1026, 1028, 1029, 1031, 1032, 1034, 1035, 1037, 1038], "urllib": [8, 17], "request": [8, 17, 46, 200, 218, 236, 316, 363, 370, 374, 375, 379, 390, 391, 394, 397, 408, 411, 412, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 575, 576, 582, 584, 585, 588, 604, 605, 626, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 693, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 937, 938, 940, 981, 984, 1016, 1028, 1029, 1030], "urlretriev": 8, "rcparam": [8, 229, 234, 310], "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 66, 70, 98, 167, 262, 326, 346, 347, 348, 349, 364, 365, 371, 403, 404, 411, 458, 538, 866, 979, 1015, 1016, 1022, 1023, 1024, 1025, 1028, 1029], "passiveaggressiveclassifi": [8, 207, 362, 364, 977, 982, 1023, 1026, 1027, 1029, 1030, 1033, 1035], "perceptron": [8, 167, 207, 210, 216, 240, 296, 301, 364, 388, 411, 508, 509, 516, 660, 670, 819, 849, 850, 851, 854, 873, 979, 982, 986, 995, 1003, 1018, 1026, 1028, 1029, 1030, 1034], "naive_bay": [8, 24, 25, 27, 31, 130, 134, 262, 263, 347, 358, 364, 365, 371, 410, 431, 563, 854, 975, 982, 983, 1016, 1023, 1024, 1026, 1027, 1028, 1029], "multinomialnb": [8, 364, 371, 411, 828, 829, 830, 831, 983, 1016, 1024, 1026, 1029, 1030, 1034, 1035, 1037], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 71, 109, 128, 155, 158, 160, 170, 171, 200, 204, 218, 222, 230, 236, 259, 303, 356, 358, 363, 371, 374, 375, 376, 378, 380, 381, 382, 390, 394, 403, 404, 405, 407, 408, 410, 412, 415, 434, 436, 445, 447, 448, 453, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 481, 482, 485, 486, 490, 491, 497, 502, 503, 508, 516, 521, 525, 526, 531, 532, 533, 534, 536, 539, 540, 542, 546, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 575, 582, 583, 584, 585, 591, 596, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 623, 625, 626, 627, 629, 630, 631, 632, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 684, 688, 689, 691, 692, 694, 696, 698, 706, 735, 754, 760, 767, 771, 775, 782, 790, 793, 794, 795, 796, 804, 808, 809, 812, 813, 816, 817, 819, 822, 824, 827, 828, 829, 830, 832, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 850, 851, 857, 874, 880, 893, 894, 895, 896, 897, 898, 899, 905, 907, 911, 913, 914, 915, 917, 929, 930, 954, 965, 969, 970, 971, 976, 977, 981, 986, 987, 993, 995, 996, 1005, 1029, 1030, 1031], "builder": [8, 10, 342, 380], "__file__": [8, 10, 1035], "global": [8, 10, 42, 57, 95, 200, 221, 222, 243, 270, 299, 314, 358, 362, 363, 382, 388, 390, 403, 413, 436, 446, 456, 462, 584, 620, 626, 682, 685, 686, 689, 701, 722, 723, 731, 776, 777, 780, 781, 808, 874, 889, 891, 949, 951, 970, 978, 981, 987, 991, 997, 1005, 1030, 1037], "21578": [8, 1035], "uci": [8, 149, 308, 370, 373, 494, 496, 498, 504], "ml": [8, 149, 370, 373, 381, 494, 496, 504, 977, 979, 1001, 1002, 1005], "uncompress": [8, 502, 503, 1016], "reuterspars": 8, "util": [8, 10, 11, 48, 55, 56, 61, 89, 109, 112, 132, 200, 202, 208, 216, 223, 232, 236, 238, 249, 267, 269, 281, 305, 313, 325, 334, 338, 347, 363, 365, 370, 371, 374, 376, 377, 378, 379, 388, 389, 390, 399, 403, 404, 407, 408, 411, 431, 437, 438, 441, 443, 447, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 575, 576, 582, 584, 585, 588, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 790, 791, 792, 793, 794, 797, 799, 804, 808, 813, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 976, 979, 981, 982, 991, 992, 1001, 1005, 1008, 1018, 1022, 1023, 1025, 1026, 1028, 1029], "pars": [8, 17, 362, 370, 371, 377, 502], "sgml": [8, 362], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 50, 68, 76, 83, 87, 93, 107, 136, 142, 150, 162, 166, 174, 177, 219, 227, 244, 253, 277, 280, 295, 301, 311, 320, 328, 345, 347, 348, 350, 357, 362, 364, 370, 371, 373, 374, 376, 380, 381, 382, 384, 388, 397, 404, 408, 481, 487, 488, 490, 497, 502, 503, 528, 573, 574, 582, 583, 585, 905, 984, 997, 1004, 1008, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038], "yield": [8, 9, 25, 45, 55, 78, 79, 80, 81, 123, 125, 184, 195, 200, 215, 218, 266, 279, 297, 303, 331, 336, 347, 348, 358, 362, 364, 370, 381, 390, 400, 403, 405, 407, 408, 410, 411, 412, 431, 443, 462, 466, 502, 503, 531, 532, 533, 535, 540, 547, 548, 553, 554, 555, 556, 561, 562, 588, 596, 641, 645, 646, 647, 649, 655, 657, 659, 667, 669, 680, 719, 774, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 817, 818, 820, 824, 827, 885, 886, 924, 931, 933, 934, 939, 973, 975, 977, 978, 981, 996, 997, 1011, 1027, 1028, 1030, 1033, 1035], "__init__": [8, 16, 56, 109, 160, 236, 281, 334, 376, 378, 380, 381, 382, 383, 390, 411, 417, 942, 1023, 1028, 1030, 1035, 1036, 1037, 1038], "self": [8, 16, 19, 25, 27, 56, 109, 160, 167, 236, 281, 321, 327, 328, 334, 347, 370, 376, 377, 378, 381, 382, 383, 384, 403, 411, 413, 417, 420, 426, 427, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 494, 502, 503, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 697, 788, 789, 790, 791, 792, 793, 794, 797, 799, 804, 808, 809, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 941, 942, 947, 955, 984, 1002, 1003, 1005, 1018, 1024, 1029, 1036], "latin": [8, 411], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 71, 229, 324, 370, 375, 379, 380, 384, 388, 390, 399, 411, 490, 821, 1002, 1004, 1027, 1031, 1032, 1033, 1036, 1037, 1038], "attr": [8, 56], "start_": 8, "getattr": [8, 303, 378, 390, 1038], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 70, 149, 240, 318, 373], "topic_d": 8, "fd": 8, "chunk": [8, 50, 362, 363, 403, 408, 414, 438, 443, 462, 532, 771, 774, 821, 822, 828, 829, 830, 831, 832, 891, 983, 1029, 1030, 1031, 1032, 1033], "feed": [8, 86, 201, 349, 371, 381, 388, 403, 411, 866, 982], "decod": [8, 294, 371, 390, 497, 563, 582, 583, 585, 1022, 1023], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 60, 66, 78, 79, 82, 100, 115, 122, 125, 128, 132, 152, 153, 156, 157, 158, 159, 160, 170, 172, 184, 204, 206, 222, 229, 235, 239, 246, 252, 261, 262, 287, 288, 303, 313, 334, 338, 339, 348, 358, 371, 376, 378, 384, 388, 390, 391, 401, 402, 403, 406, 407, 410, 413, 444, 449, 466, 502, 503, 526, 557, 622, 637, 641, 655, 666, 668, 681, 699, 739, 788, 808, 809, 828, 829, 830, 832, 839, 914, 970, 974, 975, 977, 978, 980, 981, 982, 984, 987, 988, 991, 996, 1005, 1014, 1025, 1029, 1030, 1031], "handle_data": 8, "start_reut": 8, "attribut": [8, 9, 25, 32, 49, 71, 80, 104, 109, 112, 119, 120, 123, 145, 149, 200, 208, 214, 236, 251, 259, 260, 265, 273, 287, 290, 294, 316, 333, 336, 338, 349, 356, 364, 365, 369, 370, 371, 373, 376, 379, 383, 388, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 418, 419, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 501, 504, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 691, 692, 694, 695, 696, 729, 786, 788, 789, 790, 793, 794, 796, 804, 812, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 908, 942, 965, 975, 977, 982, 984, 985, 987, 991, 994, 995, 996, 997, 1005, 1007, 1013, 1016, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "end_reut": 8, "sub": [8, 37, 48, 53, 55, 57, 60, 70, 105, 236, 238, 246, 315, 322, 323, 331, 334, 343, 371, 376, 378, 382, 390, 404, 410, 411, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 530, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 584, 585, 588, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 939, 977, 981, 995, 1016, 1032, 1036, 1038], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 72, 82, 95, 98, 112, 115, 118, 121, 123, 124, 126, 127, 149, 161, 164, 167, 179, 180, 208, 215, 248, 249, 254, 256, 272, 277, 297, 299, 300, 305, 315, 323, 325, 326, 334, 376, 378, 382, 384, 385, 389, 390, 398, 403, 406, 408, 410, 412, 415, 431, 434, 435, 437, 439, 441, 442, 443, 446, 448, 453, 455, 456, 457, 465, 466, 472, 476, 477, 478, 509, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 553, 554, 555, 556, 558, 561, 562, 575, 576, 582, 583, 585, 587, 588, 596, 604, 621, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 824, 827, 842, 849, 850, 851, 852, 853, 857, 864, 866, 868, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 908, 929, 930, 936, 939, 947, 971, 977, 978, 980, 981, 984, 985, 986, 994, 995, 996, 997, 1002, 1005, 1011, 1015, 1016, 1018, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "archiv": [8, 370, 371, 373, 374, 397, 403, 436, 494, 496, 504, 751, 752, 979, 996, 1016], "exist": [8, 9, 17, 19, 53, 218, 261, 299, 303, 338, 370, 375, 378, 379, 382, 388, 390, 391, 393, 397, 403, 407, 408, 410, 411, 418, 428, 431, 437, 438, 441, 443, 445, 447, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 493, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 579, 582, 583, 584, 585, 588, 591, 597, 604, 605, 626, 627, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 692, 694, 696, 755, 758, 762, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 866, 867, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 965, 973, 978, 980, 981, 985, 987, 988, 991, 1005, 1015, 1022, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "str": [8, 10, 16, 58, 60, 104, 106, 121, 218, 239, 261, 273, 281, 291, 332, 347, 370, 371, 385, 411, 414, 415, 419, 424, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 575, 576, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 611, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 686, 690, 691, 692, 693, 694, 696, 701, 703, 705, 707, 720, 722, 723, 725, 726, 731, 764, 767, 771, 772, 773, 774, 775, 776, 777, 780, 782, 783, 784, 790, 791, 792, 793, 794, 796, 797, 799, 801, 802, 804, 808, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 912, 913, 914, 917, 920, 922, 926, 937, 938, 941, 944, 965, 966, 969, 1037], "kei": [8, 9, 10, 17, 19, 42, 118, 122, 132, 164, 169, 218, 236, 239, 242, 262, 264, 265, 314, 315, 316, 317, 318, 319, 364, 369, 378, 381, 382, 383, 388, 390, 391, 393, 394, 403, 404, 407, 413, 458, 466, 555, 556, 561, 562, 563, 564, 582, 585, 588, 611, 620, 626, 627, 628, 653, 790, 793, 794, 802, 804, 816, 852, 853, 908, 918, 946, 1002, 1016, 1019, 1028, 1034, 1035, 1037, 1038], "download_url": 8, "ic": [8, 315, 370, 373, 392, 494, 496, 504, 626, 627, 1018, 1034, 1035], "databas": [8, 149, 308, 362, 364, 371, 373, 403, 408, 410, 411, 414, 436, 438, 504, 549, 550, 886, 993], "reuters21578": 8, "mld": 8, "tar": [8, 380], "gz": [8, 380, 393, 502, 503], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 56, 62, 82, 99, 115, 121, 125, 160, 170, 171, 189, 202, 218, 222, 229, 233, 235, 236, 237, 238, 239, 261, 262, 265, 272, 281, 286, 294, 297, 298, 305, 347, 348, 356, 376, 380, 382, 410, 411, 413, 415, 431, 443, 502, 514, 527, 563, 619, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 664, 666, 667, 668, 670, 673, 675, 676, 677, 678, 697, 703, 761, 781, 785, 787, 793, 794, 819, 857, 866, 869, 872, 880, 893, 894, 908, 943, 945, 947, 968, 997], "mkdir": [8, 382, 384], "parent": [8, 169, 236, 376, 380, 390, 403, 436, 457, 1022], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 136, 142, 150, 162, 166, 174, 177, 219, 227, 233, 244, 253, 277, 280, 295, 301, 311, 320, 328, 345, 347, 349, 350, 357, 371, 382, 895, 896, 897, 898, 899, 996], "1e6": [8, 10, 193, 233, 347, 349, 362, 530, 887, 981, 993], "current_sz_mb": 8, "stdout": [8, 95, 208, 822, 842, 850, 851], "write": [8, 17, 165, 236, 347, 362, 363, 370, 374, 375, 379, 380, 381, 382, 384, 385, 388, 390, 404, 408, 411, 992, 1002, 1016, 1023, 1035], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 326, 371, 382, 397, 482, 494, 497, 498, 501, 582, 583, 585, 1016, 1022, 1027, 1030, 1031], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 233, 261, 270, 363, 379, 1002], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 223, 370, 371, 374, 375, 376, 380, 382, 388, 389, 391, 397, 404, 411, 481, 490, 502, 503, 971, 1001, 1005, 1010, 1025, 1029, 1030, 1032, 1038], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 411, 497, 582, 583, 585, 1024], "alternate_sign": [8, 411, 576, 583, 1029], "data_stream": 8, "binari": [8, 13, 25, 27, 111, 116, 118, 128, 130, 146, 160, 170, 176, 191, 193, 200, 208, 222, 230, 239, 242, 258, 259, 264, 270, 276, 279, 285, 334, 338, 340, 356, 358, 370, 371, 372, 378, 380, 381, 390, 393, 397, 400, 401, 402, 403, 410, 411, 413, 431, 432, 433, 446, 481, 494, 502, 503, 514, 517, 543, 544, 547, 549, 553, 555, 556, 560, 561, 562, 575, 582, 583, 585, 587, 588, 596, 604, 621, 622, 623, 624, 626, 627, 652, 653, 660, 662, 667, 668, 669, 670, 694, 697, 701, 702, 703, 706, 707, 709, 712, 714, 720, 722, 723, 727, 728, 731, 732, 733, 734, 735, 736, 775, 776, 777, 780, 781, 782, 785, 787, 790, 791, 793, 794, 795, 796, 804, 808, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 828, 839, 849, 860, 864, 866, 874, 877, 893, 895, 898, 944, 971, 982, 983, 984, 985, 986, 988, 989, 991, 992, 993, 995, 996, 997, 1004, 1007, 1019, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1036, 1037], "acq": 8, "chosen": [8, 20, 46, 73, 132, 153, 170, 171, 189, 201, 217, 237, 255, 256, 258, 264, 348, 358, 362, 388, 403, 405, 406, 410, 413, 434, 440, 443, 445, 447, 448, 454, 490, 517, 529, 551, 552, 553, 554, 558, 559, 641, 647, 650, 652, 653, 655, 657, 665, 670, 671, 672, 673, 674, 684, 688, 785, 788, 789, 790, 793, 794, 804, 823, 842, 893, 894, 901, 902, 903, 904, 930, 970, 973, 975, 977, 978, 980, 982, 987, 988, 995, 1011, 1012, 1014, 1015, 1030, 1038], "evenli": [8, 39, 52, 125, 173, 204, 256, 411, 934, 1016], "care": [8, 55, 126, 338, 362, 364, 380, 382, 388, 390, 391, 403, 405, 411, 431, 454, 463, 634, 652, 653, 660, 662, 670, 671, 672, 689, 893, 978, 996, 1005, 1038], "all_class": 8, "positive_class": [8, 706], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 72, 73, 95, 98, 117, 118, 134, 138, 140, 161, 164, 165, 170, 171, 179, 186, 192, 193, 207, 208, 209, 212, 213, 215, 221, 222, 223, 224, 240, 241, 246, 247, 248, 249, 252, 274, 291, 297, 298, 299, 309, 315, 316, 317, 322, 323, 331, 347, 348, 382, 390, 410, 415, 434, 437, 441, 442, 443, 448, 453, 455, 465, 466, 472, 476, 477, 478, 525, 526, 527, 529, 530, 531, 532, 533, 534, 537, 539, 540, 541, 542, 555, 556, 621, 632, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 666, 668, 670, 671, 672, 673, 674, 676, 677, 681, 682, 683, 684, 687, 688, 788, 789, 804, 842, 850, 851, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 971, 973, 977, 984, 985, 994, 995, 1012, 1016, 1023, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038], "nb": [8, 103, 130, 358, 830, 983], "multinomi": [8, 30, 167, 178, 215, 219, 237, 256, 270, 371, 372, 376, 408, 410, 490, 506, 517, 545, 547, 553, 555, 563, 625, 652, 653, 734, 819, 827, 828, 829, 830, 831, 832, 873, 916, 981, 982, 997, 1003, 1016, 1018, 1022, 1026, 1028, 1029, 1030, 1035, 1036], "passiv": [8, 207, 660, 661, 1003, 1018, 1023], "aggress": [8, 207, 660, 661, 793, 794, 1003, 1018, 1023], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 403, 408, 443, 528, 670, 849, 850, 851, 1001, 1022], "tupl": [8, 48, 49, 55, 105, 171, 218, 369, 370, 371, 378, 390, 407, 415, 428, 445, 447, 458, 461, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 498, 499, 502, 504, 505, 506, 507, 508, 516, 527, 540, 555, 556, 561, 562, 563, 564, 576, 577, 578, 581, 582, 583, 585, 621, 626, 627, 628, 706, 713, 774, 776, 788, 790, 804, 816, 833, 834, 852, 853, 863, 864, 868, 871, 879, 883, 895, 896, 897, 898, 899, 908, 914, 915, 917, 921, 922, 923, 924, 939, 948, 965, 988, 1028, 1029, 1033, 1034, 1035], "x_text": 8, "befor": [8, 12, 25, 42, 70, 72, 75, 86, 132, 145, 159, 161, 163, 166, 167, 170, 171, 173, 181, 184, 188, 189, 193, 236, 261, 268, 283, 284, 304, 307, 308, 310, 316, 337, 358, 362, 363, 371, 374, 376, 378, 379, 381, 382, 384, 385, 388, 390, 391, 392, 397, 401, 403, 404, 405, 407, 408, 412, 415, 416, 437, 441, 442, 443, 453, 455, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 484, 495, 528, 531, 532, 533, 534, 535, 538, 540, 541, 555, 556, 559, 561, 563, 564, 571, 582, 583, 585, 605, 621, 622, 624, 639, 644, 645, 648, 649, 650, 658, 659, 660, 661, 662, 665, 670, 672, 681, 686, 688, 788, 789, 795, 796, 808, 809, 811, 815, 817, 819, 833, 834, 841, 842, 843, 844, 845, 848, 853, 854, 857, 860, 867, 871, 872, 873, 874, 878, 879, 881, 882, 883, 884, 890, 901, 902, 930, 965, 971, 977, 978, 981, 987, 991, 995, 996, 997, 1002, 1016, 1022, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "exclud": [8, 19, 169, 303, 376, 380, 390, 440, 458, 460, 722, 723, 731, 776, 777, 780, 803, 811, 868, 956, 981, 984, 1031, 1038], "invalid": [8, 200, 390, 440, 572, 665, 706, 767, 977, 981, 1028, 1030, 1032, 1033, 1035, 1036, 1038], "assign": [8, 17, 20, 37, 46, 49, 57, 58, 60, 112, 117, 128, 130, 145, 154, 213, 218, 229, 234, 237, 297, 305, 310, 327, 342, 348, 371, 376, 378, 390, 400, 407, 408, 410, 411, 412, 413, 434, 435, 436, 437, 439, 440, 441, 442, 443, 446, 448, 450, 453, 454, 455, 456, 509, 530, 555, 556, 587, 588, 601, 602, 604, 652, 653, 660, 661, 662, 670, 671, 672, 698, 699, 709, 710, 711, 714, 724, 732, 736, 748, 750, 779, 784, 785, 786, 790, 793, 794, 796, 799, 804, 812, 814, 815, 816, 817, 820, 837, 843, 845, 846, 847, 860, 888, 889, 893, 894, 895, 896, 897, 898, 899, 975, 980, 981, 982, 983, 984, 985, 986, 991, 994, 1005, 1007, 1016, 1022, 1027, 1029, 1030], "format": [8, 11, 12, 19, 21, 48, 54, 58, 61, 70, 80, 95, 105, 115, 121, 124, 126, 138, 144, 145, 176, 180, 186, 191, 200, 218, 256, 266, 268, 269, 272, 275, 285, 286, 289, 290, 307, 313, 341, 352, 356, 362, 369, 375, 376, 378, 379, 384, 385, 389, 390, 404, 407, 410, 411, 427, 436, 437, 439, 441, 443, 444, 446, 453, 458, 462, 476, 477, 478, 479, 481, 483, 490, 491, 492, 502, 503, 504, 517, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 545, 551, 552, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 640, 646, 652, 653, 654, 656, 660, 662, 670, 671, 672, 682, 683, 686, 691, 707, 714, 732, 733, 744, 761, 783, 822, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 880, 885, 886, 891, 893, 905, 913, 914, 935, 943, 947, 952, 955, 957, 958, 959, 960, 961, 962, 971, 981, 984, 989, 991, 992, 995, 997, 1001, 1007, 1008, 1018, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1037], "islic": [8, 44, 62], "asarrai": [8, 17, 200, 218, 300, 324, 347, 348, 378, 390, 399, 579, 580, 719, 749, 841, 843, 844, 845, 991, 996], "int": [8, 10, 13, 16, 17, 19, 37, 44, 62, 81, 115, 124, 128, 140, 141, 153, 154, 155, 161, 165, 169, 181, 191, 193, 200, 218, 226, 229, 235, 239, 246, 256, 259, 260, 261, 281, 286, 288, 294, 310, 323, 349, 371, 376, 378, 388, 390, 401, 404, 407, 411, 414, 415, 418, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 482, 485, 486, 488, 489, 490, 491, 496, 497, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 601, 602, 604, 605, 611, 621, 622, 623, 624, 625, 626, 627, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 701, 703, 707, 719, 720, 722, 723, 724, 727, 731, 749, 750, 762, 767, 771, 772, 773, 774, 775, 776, 777, 780, 782, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 882, 883, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 909, 913, 914, 916, 917, 929, 930, 932, 933, 934, 935, 946, 950, 952, 955, 960, 961, 977, 988, 1022, 1028, 1032, 1033], "iter_minibatch": 8, "minibatch_s": [8, 364], "statist": [8, 81, 111, 112, 115, 116, 127, 138, 139, 140, 141, 144, 148, 149, 167, 169, 170, 171, 172, 184, 188, 204, 254, 258, 260, 263, 270, 277, 303, 309, 315, 358, 365, 369, 371, 373, 376, 382, 390, 401, 403, 404, 405, 407, 408, 410, 412, 428, 463, 468, 487, 488, 510, 511, 512, 514, 516, 535, 540, 553, 554, 556, 598, 599, 600, 603, 621, 624, 628, 629, 638, 643, 650, 684, 688, 690, 704, 710, 715, 716, 717, 724, 736, 781, 790, 806, 823, 850, 851, 869, 870, 871, 873, 878, 881, 882, 884, 898, 901, 902, 956, 970, 971, 975, 977, 978, 980, 981, 982, 983, 988, 991, 995, 996, 997, 998, 999, 1000, 1008, 1014, 1015, 1027, 1030, 1033, 1034, 1036, 1037], "test_stat": 8, "n_test": [8, 10, 33, 115, 261, 1022, 1025], "n_test_po": 8, "hold": [8, 16, 26, 27, 200, 204, 262, 356, 369, 376, 377, 378, 390, 401, 403, 407, 410, 411, 413, 497, 555, 556, 583, 626, 627, 628, 729, 790, 793, 794, 804, 829, 860, 861, 866, 867, 874, 877, 971, 975, 981, 985, 995, 996, 997, 1004, 1007, 1016, 1030, 1034], "n_test_docu": 8, "tick": [8, 43, 60, 155, 240, 272, 626, 817], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 61, 81, 92, 98, 105, 124, 125, 145, 149, 160, 170, 181, 187, 196, 200, 204, 215, 218, 222, 224, 239, 270, 281, 288, 291, 317, 326, 338, 339, 342, 347, 348, 349, 356, 373, 382, 390, 400, 401, 402, 403, 405, 406, 408, 409, 410, 411, 413, 426, 436, 437, 441, 443, 453, 458, 459, 476, 477, 478, 509, 514, 517, 525, 528, 530, 531, 535, 538, 539, 540, 543, 544, 546, 548, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 562, 563, 564, 584, 585, 605, 607, 617, 619, 629, 635, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 666, 667, 670, 671, 672, 673, 675, 678, 684, 688, 690, 693, 703, 704, 713, 719, 734, 749, 751, 752, 756, 781, 821, 822, 826, 827, 836, 840, 844, 851, 852, 872, 873, 893, 894, 896, 899, 901, 902, 903, 904, 932, 956, 962, 967, 977, 981, 982, 983, 984, 996, 997, 1014, 1025, 1026, 1028, 1030, 1031, 1033, 1038], "cls_name": [8, 10], "string": [8, 71, 121, 160, 218, 231, 265, 316, 349, 362, 370, 371, 376, 377, 378, 382, 390, 397, 404, 407, 410, 411, 412, 414, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 483, 484, 490, 499, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 575, 576, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 611, 614, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 693, 703, 705, 713, 725, 755, 758, 764, 767, 771, 772, 773, 774, 783, 784, 788, 789, 790, 793, 794, 796, 804, 812, 816, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 911, 913, 914, 921, 922, 923, 945, 949, 965, 966, 970, 971, 981, 994, 996, 1007, 1014, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "n_train": [8, 10, 33, 115, 261, 1022, 1025], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 55, 181, 264, 362, 400, 405, 412, 502, 503, 543, 591, 621, 624, 638, 866, 870, 882, 971, 977, 1030, 1034], "mini": [8, 64, 95, 317, 364, 390, 411, 434, 436, 441, 443, 445, 447, 525, 527, 530, 531, 532, 533, 534, 536, 537, 539, 540, 985, 986, 1022, 1033, 1035], "smaller": [8, 24, 40, 46, 55, 82, 112, 149, 157, 158, 164, 185, 189, 191, 204, 233, 287, 288, 297, 303, 334, 342, 348, 376, 400, 402, 403, 405, 407, 408, 410, 412, 433, 434, 440, 444, 448, 450, 508, 528, 529, 551, 552, 553, 554, 558, 559, 587, 604, 613, 627, 640, 641, 643, 644, 646, 647, 648, 650, 652, 653, 654, 655, 656, 657, 666, 668, 676, 677, 686, 703, 788, 793, 794, 839, 842, 866, 867, 885, 886, 893, 901, 902, 903, 904, 930, 975, 977, 978, 980, 981, 982, 984, 985, 987, 991, 993, 995, 996, 997, 1002, 1016, 1030, 1035], "bigger": [8, 40, 60, 213, 261, 300, 338, 344, 348, 361, 363, 411, 432, 433, 502, 532, 839, 1011, 1018], "overhead": [8, 281, 363, 364, 376, 382, 385, 388, 390, 410, 435, 439, 443, 528, 693, 825, 826, 828, 829, 830, 831, 832, 833, 834, 949, 983, 984, 1025, 1030, 1031, 1034], "partial": [8, 12, 50, 84, 87, 129, 167, 168, 174, 218, 228, 244, 315, 318, 373, 390, 392, 405, 406, 408, 410, 413, 458, 476, 477, 478, 479, 490, 495, 528, 530, 535, 556, 583, 626, 627, 651, 781, 819, 821, 822, 849, 850, 851, 854, 866, 867, 870, 873, 902, 978, 985, 995, 1016, 1018, 1019, 1023, 1030, 1031, 1035], "stream": [8, 403, 408, 411, 456, 583, 862, 863, 873, 973, 1001, 1030, 1033], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 55, 75, 116, 118, 122, 125, 132, 170, 198, 202, 208, 222, 235, 236, 238, 248, 258, 264, 317, 323, 348, 369, 376, 377, 378, 385, 404, 458, 520, 555, 556, 582, 583, 585, 626, 802, 866, 888, 889, 908, 909, 935, 973, 994, 1002, 1007], "updat": [8, 16, 44, 62, 112, 118, 127, 234, 313, 349, 374, 375, 376, 380, 384, 390, 403, 408, 410, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 908, 956, 977, 984, 985, 986, 995, 1004, 1005, 1023, 1029, 1030, 1031, 1033, 1035, 1037, 1038], "accumul": [8, 50, 119, 120, 189, 380, 382, 403, 411, 981, 1023, 1030], "acc_histori": 8, "run_histori": 8, "scikit_learn_data": [8, 50, 371, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], "878": [8, 83], "962": 8, "915": 8, "43": [8, 149, 159, 197, 233, 261, 281, 373, 381, 790, 804, 874], "2262": 8, "855": 8, "2252": 8, "877": [8, 259], "2204": 8, "933": [8, 74, 407], "2193": 8, "3911": 8, "517": [8, 269, 277, 353, 357, 446, 456, 1014], "938": [8, 196, 778, 981, 1011], "3083": 8, "936": [8, 431, 981], "3079": 8, "885": [8, 149, 373], "3057": 8, "941": 8, "3053": [8, 463, 468], "6821": 8, "891": 8, "952": [8, 49, 122, 136], "3248": 8, "3246": 8, "900": [8, 50, 74, 75], "3232": 8, "953": [8, 49], "3229": 8, "9759": 8, "1276": 8, "949": 8, "3312": 8, "3310": 8, "909": 8, "3300": 8, "958": 8, "3298": 8, "11680": 8, "1499": 8, "944": [8, 1011], "3171": 8, "956": [8, 1011], "3170": 8, "3162": 8, "950": [8, 251, 253], "3161": 8, "14625": 8, "1865": 8, "965": [8, 981], "55": [8, 170, 176, 195, 200, 218, 223, 323, 381, 403, 407, 485, 591, 790, 796, 804, 817, 981, 1022], "3217": 8, "903": 8, "3215": 8, "924": [8, 73], "3209": 8, "957": [8, 721, 981], "3208": 8, "17360": [8, 1033], "2179": 8, "3257": 8, "3256": 8, "932": 8, "3251": 8, "3250": 8, "curv": [8, 11, 23, 28, 37, 75, 78, 115, 117, 118, 124, 167, 178, 179, 190, 200, 218, 219, 221, 223, 226, 228, 230, 239, 240, 244, 245, 253, 254, 261, 271, 277, 298, 313, 338, 354, 383, 398, 402, 407, 409, 431, 432, 433, 496, 504, 509, 515, 519, 558, 626, 639, 652, 692, 694, 696, 700, 701, 702, 703, 720, 722, 734, 735, 775, 777, 780, 781, 782, 788, 789, 796, 807, 812, 817, 819, 820, 831, 854, 873, 893, 898, 977, 978, 980, 981, 987, 997, 1003, 1005, 1018, 1019, 1024, 1025, 1028, 1032, 1034, 1035, 1036, 1037, 1038], "evolut": [8, 10, 273, 362, 364, 540], "cours": [8, 9, 176, 362, 376, 378, 408, 411, 412, 971, 976, 977, 1005], "valid": [8, 13, 26, 54, 55, 56, 71, 74, 78, 82, 103, 109, 116, 118, 121, 122, 123, 124, 125, 137, 142, 143, 147, 149, 150, 160, 167, 170, 172, 178, 184, 188, 200, 202, 208, 218, 219, 236, 238, 248, 251, 254, 258, 261, 262, 263, 265, 267, 269, 270, 275, 277, 285, 300, 304, 309, 313, 315, 325, 334, 342, 352, 363, 371, 376, 379, 388, 389, 390, 394, 397, 398, 401, 403, 404, 405, 408, 409, 410, 411, 412, 419, 431, 436, 437, 439, 440, 441, 443, 444, 451, 457, 458, 462, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 487, 495, 496, 498, 509, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 569, 571, 576, 577, 583, 587, 588, 591, 596, 626, 628, 632, 633, 634, 635, 636, 637, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 686, 693, 695, 696, 700, 707, 721, 755, 758, 767, 771, 772, 773, 778, 783, 784, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 827, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 859, 865, 873, 885, 886, 888, 889, 891, 893, 895, 898, 900, 901, 902, 903, 904, 913, 914, 917, 924, 936, 941, 971, 980, 981, 982, 985, 989, 991, 993, 995, 996, 997, 1001, 1002, 1005, 1007, 1010, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "consumpt": [8, 362, 528, 551, 552, 558, 559, 790, 804, 814, 815, 816, 901, 902, 903, 904, 947, 1007, 1022, 1024, 1028, 1030, 1031, 1036], "queue": [8, 984, 1025], "up": [8, 11, 37, 44, 46, 47, 48, 52, 55, 57, 62, 70, 80, 81, 89, 92, 109, 117, 165, 171, 179, 184, 193, 201, 216, 217, 248, 263, 266, 281, 294, 300, 304, 309, 317, 323, 331, 338, 342, 347, 349, 364, 370, 371, 376, 380, 382, 383, 384, 385, 388, 390, 391, 401, 403, 408, 410, 411, 437, 441, 442, 443, 444, 446, 450, 453, 454, 455, 502, 503, 530, 543, 544, 551, 552, 553, 554, 555, 556, 558, 559, 560, 604, 621, 626, 627, 633, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 658, 675, 676, 677, 678, 686, 699, 762, 788, 789, 792, 793, 794, 796, 817, 867, 868, 871, 883, 901, 902, 903, 904, 907, 930, 933, 934, 970, 977, 978, 981, 984, 991, 995, 996, 1002, 1004, 1005, 1015, 1016, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "amount": [8, 12, 45, 53, 66, 78, 81, 95, 99, 113, 115, 158, 170, 184, 204, 218, 234, 315, 322, 325, 327, 334, 342, 349, 362, 363, 364, 388, 402, 403, 405, 408, 410, 411, 412, 437, 448, 463, 532, 533, 535, 537, 557, 590, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 659, 675, 678, 686, 793, 794, 833, 834, 839, 874, 889, 890, 903, 904, 976, 977, 980, 983, 985, 991, 993, 994, 995, 996, 1014, 1015, 1035], "learner": [8, 111, 113, 123, 132, 364, 551, 552, 553, 554, 558, 559, 560, 576, 583, 624, 835, 836, 841, 843, 844, 983, 986, 997, 1001, 1002, 1016, 1038], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 62, 86, 155, 205, 209, 211, 229, 242, 265, 289, 291, 304, 330, 332, 335, 336, 988, 1019], "set_ylim": [8, 10, 16, 31, 42, 60, 72, 92, 111, 117, 129, 130, 161, 171, 180, 198, 200, 201, 234, 246, 265, 268, 276, 279, 286, 297, 303, 305, 306, 308, 314, 325, 343], "runtim": [8, 10, 58, 112, 186, 215, 217, 234, 300, 305, 363, 378, 379, 388, 390, 402, 403, 410, 444, 557, 673, 804, 893, 894, 895, 896, 897, 898, 899, 995, 996, 1025, 1029, 1030, 1036, 1037], "gcf": [8, 988], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 72, 118, 119, 122, 123, 126, 134, 145, 149, 160, 164, 171, 179, 246, 251, 260, 262, 266, 279, 308, 309, 317, 318, 348, 378, 406, 575, 626, 642, 663, 674, 981, 988, 995, 997, 1028, 1029, 1030, 1031], "width": [8, 10, 16, 45, 53, 80, 90, 97, 98, 104, 105, 106, 115, 121, 122, 125, 134, 145, 154, 160, 183, 243, 246, 260, 284, 303, 305, 306, 309, 315, 318, 331, 373, 404, 432, 433, 446, 458, 487, 488, 500, 515, 580, 858, 906, 991, 995, 997, 1013, 1014, 1030], "set_xticklabel": [8, 10, 80, 106, 134, 155, 171, 173, 272, 273, 279], "ymax": [8, 10, 11, 78, 187, 189, 192, 193, 201, 209, 261, 294], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 55, 57, 60, 64, 65, 72, 75, 80, 90, 92, 100, 106, 112, 117, 119, 128, 130, 132, 133, 161, 164, 165, 169, 170, 171, 172, 173, 179, 180, 189, 191, 198, 200, 201, 202, 208, 221, 222, 225, 226, 232, 234, 235, 239, 240, 246, 255, 256, 257, 258, 261, 263, 264, 268, 272, 273, 276, 279, 281, 284, 285, 286, 291, 297, 298, 303, 304, 305, 306, 307, 308, 313, 317, 322, 323, 331, 338, 342, 343, 344, 347, 352], "autolabel": [8, 123], "attach": [8, 123, 347, 428, 838, 1023, 1033], "rect": [8, 52, 123, 179], "height": [8, 14, 53, 98, 122, 149, 303, 309, 347, 409, 440, 487, 488, 500, 580], "get_height": [8, 123], "get_x": [8, 123], "get_width": [8, 123], "va": [8, 123, 272, 289, 291, 341], "setp": [8, 10, 272, 275], "rotat": [8, 40, 94, 97, 100, 107, 124, 134, 167, 173, 224, 272, 273, 279, 334, 341, 406, 408, 413, 415, 498, 526, 535, 544, 608, 691, 873, 905, 977, 1033, 1034], "read": [8, 17, 95, 221, 268, 313, 314, 315, 317, 319, 362, 370, 374, 377, 378, 379, 380, 381, 383, 384, 388, 389, 390, 403, 414, 415, 416, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 849, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 926, 970, 977, 981, 982, 1001, 1005, 1016, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "feat": [8, 10, 380, 411], "extr": 8, "hash": [8, 110, 136, 167, 348, 349, 362, 364, 368, 376, 379, 388, 410, 508, 538, 551, 560, 575, 576, 583, 634, 828, 946, 973, 1016, 1018, 1023, 1026, 1029], "vect": [8, 70, 262, 326, 411, 1016], "559": [8, 15, 176, 177, 610], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 56, 57, 70, 71, 74, 75, 78, 80, 86, 92, 97, 101, 111, 112, 115, 120, 123, 127, 129, 131, 132, 144, 149, 151, 152, 153, 154, 157, 158, 159, 160, 162, 167, 169, 171, 172, 176, 189, 196, 197, 200, 202, 204, 208, 214, 217, 218, 221, 222, 224, 226, 229, 231, 232, 234, 235, 236, 238, 261, 268, 273, 274, 282, 295, 308, 312, 313, 315, 325, 334, 335, 339, 340, 342, 343, 348, 349, 355, 358, 362, 373, 376, 381, 384, 389, 406, 408, 410, 411, 509, 604, 605, 607, 608, 609, 613, 616, 617, 842, 970, 977, 981, 984, 987, 993, 994, 995, 996, 1005, 1007], "robust": [9, 61, 63, 77, 83, 125, 149, 165, 167, 170, 171, 178, 202, 204, 217, 219, 229, 239, 303, 319, 364, 373, 378, 384, 403, 410, 411, 440, 442, 463, 464, 467, 468, 469, 470, 518, 528, 553, 554, 643, 651, 664, 665, 672, 673, 743, 823, 854, 868, 870, 871, 882, 888, 928, 981, 985, 987, 991, 994, 995, 1001, 1003, 1005, 1017, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1038], "covari": [9, 12, 29, 33, 35, 79, 83, 85, 103, 106, 128, 152, 159, 229, 245, 247, 250, 251, 252, 253, 365, 385, 390, 403, 406, 408, 413, 476, 477, 478, 479, 498, 509, 513, 521, 526, 528, 535, 540, 542, 543, 544, 557, 604, 605, 607, 616, 617, 638, 639, 644, 648, 650, 676, 677, 680, 683, 687, 788, 789, 790, 809, 980, 987, 991, 1003, 1017, 1018, 1022, 1024, 1025, 1026, 1027, 1029, 1031], "wine": [9, 242, 308, 309, 369, 504, 1018], "tool": [9, 11, 170, 236, 259, 264, 358, 369, 370, 371, 374, 376, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 392, 393, 397, 402, 403, 404, 405, 481, 686, 695, 970, 976, 977, 981, 987, 991, 996, 998, 1001, 1002, 1005, 1007, 1016, 1029, 1032, 1035, 1036, 1037], "purpos": [9, 12, 16, 37, 86, 164, 214, 215, 216, 221, 223, 237, 249, 251, 257, 258, 334, 335, 342, 347, 348, 358, 371, 376, 378, 389, 390, 391, 393, 396, 400, 403, 404, 408, 410, 411, 412, 413, 540, 632, 815, 816, 853, 978, 981, 982, 984, 987, 999, 1001, 1007, 1034, 1036], "awar": [9, 14, 111, 146, 161, 331, 347, 374, 376, 378, 388, 391, 407, 411, 561, 562, 642, 648, 649, 650, 652, 653, 663, 674, 839, 868, 987, 991, 997, 1019, 1022, 1023, 1036], "thing": [9, 222, 256, 347, 363, 364, 371, 375, 376, 378, 388, 391, 403, 405, 411, 553, 554, 977, 991, 1005, 1028], "trivial": [9, 202, 352, 376, 403, 808, 895, 898, 978, 1002, 1022], "dimens": [9, 12, 14, 37, 40, 53, 82, 85, 90, 95, 149, 154, 156, 158, 160, 171, 183, 184, 198, 223, 225, 229, 233, 234, 240, 247, 248, 285, 286, 290, 306, 338, 347, 348, 349, 371, 373, 377, 390, 402, 403, 408, 409, 413, 415, 436, 437, 439, 441, 442, 443, 446, 458, 459, 476, 477, 478, 487, 488, 509, 518, 519, 523, 524, 527, 535, 543, 576, 577, 578, 579, 581, 583, 591, 605, 613, 616, 635, 638, 653, 684, 685, 686, 688, 689, 693, 757, 814, 833, 834, 838, 852, 885, 886, 887, 895, 896, 897, 898, 899, 913, 914, 915, 944, 952, 955, 971, 973, 975, 977, 978, 979, 982, 984, 985, 987, 993, 996, 1007, 1014, 1015, 1029, 1031, 1032, 1034], "below": [9, 25, 26, 27, 32, 55, 60, 70, 75, 80, 89, 90, 95, 109, 116, 119, 120, 125, 144, 169, 171, 183, 196, 197, 200, 202, 216, 217, 222, 226, 231, 236, 239, 241, 243, 256, 259, 264, 266, 267, 268, 303, 307, 313, 314, 315, 316, 317, 318, 319, 339, 347, 356, 358, 363, 369, 370, 374, 376, 378, 380, 381, 385, 390, 391, 393, 403, 405, 406, 407, 408, 410, 411, 412, 413, 440, 442, 465, 466, 472, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 504, 525, 531, 536, 542, 576, 589, 590, 591, 592, 593, 594, 627, 640, 646, 652, 653, 661, 667, 669, 686, 693, 699, 736, 756, 788, 789, 790, 801, 804, 822, 853, 856, 866, 867, 870, 876, 882, 970, 971, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 987, 988, 989, 991, 995, 996, 997, 998, 1001, 1009, 1016, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "main": [9, 16, 32, 62, 86, 99, 122, 167, 229, 270, 312, 342, 347, 362, 363, 364, 369, 374, 376, 378, 380, 382, 384, 388, 389, 390, 392, 393, 401, 402, 403, 408, 410, 411, 413, 497, 519, 524, 543, 544, 619, 707, 823, 893, 894, 970, 978, 980, 981, 988, 993, 1002, 1004, 1013, 1016, 1022, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "empir": [9, 24, 25, 36, 68, 77, 80, 82, 83, 167, 218, 267, 303, 401, 407, 410, 413, 441, 443, 454, 463, 464, 465, 468, 471, 472, 526, 528, 533, 535, 537, 543, 545, 559, 584, 597, 633, 643, 661, 665, 672, 673, 710, 715, 716, 717, 818, 828, 829, 830, 832, 851, 874, 916, 955, 973, 975, 981, 983, 985, 991, 993, 995, 1017, 1018], "heterogen": [9, 24, 55, 69, 71, 76, 167, 171, 200, 243, 308, 313, 368, 370, 388, 458, 482, 538, 575, 585, 707, 853, 857, 893, 978, 988, 991, 1001, 1018, 1026, 1030, 1032, 1033], "mode": [9, 10, 46, 47, 80, 200, 229, 281, 283, 300, 313, 376, 379, 384, 385, 388, 400, 406, 410, 414, 437, 438, 441, 443, 446, 453, 456, 465, 466, 472, 476, 481, 502, 503, 551, 555, 558, 586, 589, 590, 592, 593, 594, 604, 621, 638, 639, 652, 653, 660, 662, 667, 668, 669, 670, 673, 676, 677, 683, 687, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 849, 893, 895, 898, 901, 903, 919, 929, 930, 932, 984, 987, 1001, 1007, 1008, 1015, 1023, 1031, 1036], "stick": [9, 788, 980], "bias": [9, 27, 82, 98, 125, 131, 169, 170, 172, 266, 371, 392, 401, 410, 518, 543, 849, 873, 884, 976, 980, 989, 995, 997], "yet": [9, 57, 184, 218, 251, 262, 349, 364, 371, 375, 380, 388, 392, 393, 394, 407, 408, 410, 411, 413, 442, 446, 455, 456, 571, 771, 965, 970, 977, 981, 987, 995, 1002, 1031], "extent": [9, 30, 58, 154, 155, 156, 233, 340, 343, 434, 529, 690, 788, 981], "assum": [9, 55, 57, 159, 165, 169, 170, 189, 200, 218, 229, 232, 252, 261, 270, 303, 342, 349, 363, 375, 376, 378, 380, 382, 388, 389, 390, 392, 397, 400, 401, 403, 405, 407, 408, 410, 411, 413, 414, 419, 424, 431, 433, 438, 440, 444, 451, 457, 463, 464, 465, 466, 467, 468, 469, 470, 497, 502, 503, 526, 536, 542, 543, 555, 556, 561, 562, 581, 582, 583, 585, 614, 626, 637, 638, 640, 641, 646, 652, 653, 654, 655, 656, 660, 661, 662, 665, 666, 670, 671, 672, 675, 679, 681, 682, 686, 703, 719, 728, 734, 749, 757, 762, 767, 771, 774, 790, 793, 794, 804, 829, 835, 836, 839, 840, 841, 843, 844, 849, 860, 873, 941, 957, 958, 959, 971, 975, 977, 979, 980, 981, 983, 984, 986, 987, 988, 991, 995, 997, 1028, 1034], "parametr": [9, 24, 25, 82, 232, 285, 307, 316, 401, 404, 409, 410, 431, 545, 547, 629, 679, 690, 869, 881, 924, 925, 977, 980, 983, 984, 991, 994, 997, 1030, 1032, 1035], "therefor": [9, 13, 20, 24, 37, 52, 53, 71, 72, 75, 80, 86, 100, 105, 112, 115, 117, 125, 130, 132, 148, 169, 172, 200, 204, 216, 217, 246, 251, 252, 262, 264, 284, 299, 303, 308, 322, 334, 342, 343, 347, 348, 356, 362, 370, 374, 381, 388, 394, 403, 404, 405, 407, 408, 410, 411, 431, 490, 529, 543, 545, 547, 548, 553, 554, 558, 559, 598, 600, 652, 653, 659, 662, 665, 670, 672, 673, 695, 706, 728, 750, 788, 853, 854, 866, 870, 874, 882, 971, 975, 977, 978, 981, 983, 984, 985, 986, 989, 991, 996, 997, 1002, 1007, 1014, 1015, 1016, 1031, 1032, 1035, 1036, 1037, 1038], "minimum": [9, 55, 57, 80, 125, 126, 148, 189, 210, 233, 239, 271, 287, 288, 378, 385, 393, 396, 400, 403, 410, 411, 435, 439, 440, 444, 448, 450, 463, 464, 467, 468, 469, 470, 505, 507, 535, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 588, 621, 625, 626, 629, 631, 662, 665, 670, 672, 673, 676, 677, 686, 699, 718, 772, 773, 793, 794, 814, 829, 850, 851, 862, 863, 866, 867, 868, 872, 886, 887, 900, 901, 902, 903, 904, 910, 913, 914, 917, 933, 978, 981, 985, 987, 991, 993, 997, 1022, 1025, 1029, 1030, 1034, 1035], "determin": [9, 11, 13, 19, 46, 55, 80, 112, 114, 118, 157, 170, 179, 180, 196, 203, 261, 303, 308, 338, 349, 356, 358, 375, 376, 378, 385, 389, 390, 400, 401, 403, 407, 408, 410, 411, 412, 413, 426, 431, 435, 436, 437, 439, 441, 443, 444, 450, 453, 454, 455, 459, 463, 464, 466, 467, 468, 469, 470, 476, 477, 478, 482, 485, 486, 489, 491, 497, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 531, 533, 536, 537, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 559, 561, 562, 564, 576, 577, 578, 582, 585, 588, 596, 601, 602, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 629, 630, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 681, 683, 684, 686, 687, 688, 701, 705, 716, 722, 723, 731, 776, 777, 778, 780, 781, 784, 790, 792, 793, 794, 796, 804, 812, 813, 814, 815, 816, 817, 818, 820, 824, 826, 827, 829, 836, 838, 839, 844, 849, 850, 851, 857, 858, 866, 867, 868, 870, 874, 882, 893, 894, 896, 899, 902, 904, 907, 928, 944, 950, 952, 955, 970, 973, 975, 980, 984, 986, 987, 991, 994, 995, 997, 1007, 1022, 1027, 1030, 1031, 1033, 1034, 1035], "concentr": [9, 100, 112, 130, 157, 167, 226, 245, 252, 253, 305, 324, 372, 376, 410, 437, 513, 788, 980, 987], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 57, 59, 61, 62, 68, 80, 91, 102, 114, 121, 128, 173, 226, 239, 246, 247, 248, 249, 262, 287, 288, 290, 306, 314, 318, 336, 346, 347, 349, 350, 364, 365, 369, 371, 373, 376, 378, 381, 388, 390, 398, 409, 411, 417, 418, 421, 482, 496, 497, 498, 505, 506, 507, 508, 509, 516, 524, 535, 538, 558, 560, 583, 584, 585, 625, 685, 686, 689, 698, 699, 704, 711, 713, 718, 724, 729, 730, 748, 750, 771, 772, 779, 783, 784, 786, 788, 789, 845, 846, 854, 858, 865, 873, 922, 924, 942, 949, 965, 971, 978, 980, 984, 987, 989, 991, 994, 998, 1001, 1002, 1005, 1007, 1010, 1013, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "outli": [9, 80, 390, 463, 468, 977, 987], "skew": [9, 125, 203, 233, 239, 303, 319, 368, 407, 633, 634, 635, 636, 869, 881, 977, 991, 1018, 1025, 1029, 1038], "Of": [9, 25, 27, 164, 362, 378, 403, 411, 971], "screen": [9, 1035], "presenc": [9, 60, 62, 80, 81, 109, 169, 173, 184, 204, 239, 303, 374, 377, 390, 405, 408, 706, 719, 749, 762, 822, 856, 864, 866, 873, 965, 971, 977, 981, 982, 995, 1025, 1026, 1028, 1032, 1034, 1036], "mixtur": [9, 44, 55, 57, 248, 249, 253, 365, 371, 372, 390, 403, 408, 409, 413, 617, 790, 1001, 1002, 1017, 1018, 1022, 1026, 1027, 1028, 1029], "univari": [9, 36, 68, 72, 74, 143, 144, 150, 167, 215, 329, 345, 368, 402, 403, 404, 411, 439, 498, 519, 524, 586, 589, 590, 592, 593, 594, 596, 599, 600, 601, 602, 603, 621, 622, 623, 624, 639, 790, 795, 815, 819, 853, 854, 863, 868, 872, 873, 893, 898, 977, 996, 998, 1003, 1015, 1018, 1022, 1028], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 56, 58, 62, 71, 73, 75, 86, 90, 95, 96, 102, 104, 106, 117, 118, 125, 145, 152, 170, 172, 184, 189, 204, 205, 214, 221, 222, 223, 229, 234, 236, 261, 262, 264, 273, 279, 290, 303, 307, 308, 314, 334, 338, 349, 356, 358, 362, 368, 376, 378, 384, 388, 389, 390, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 415, 434, 440, 446, 456, 458, 459, 461, 463, 468, 476, 477, 478, 479, 502, 503, 510, 511, 512, 518, 525, 526, 527, 528, 529, 531, 533, 535, 536, 537, 542, 543, 544, 547, 548, 551, 552, 553, 554, 558, 559, 560, 582, 583, 584, 585, 621, 626, 627, 632, 633, 635, 636, 652, 653, 662, 670, 671, 672, 685, 693, 695, 701, 719, 749, 751, 752, 774, 781, 783, 784, 790, 804, 819, 822, 828, 829, 830, 831, 832, 842, 852, 853, 862, 869, 870, 873, 878, 879, 881, 882, 883, 884, 889, 900, 901, 902, 903, 904, 913, 919, 922, 929, 930, 953, 971, 973, 977, 978, 979, 980, 981, 983, 985, 987, 991, 995, 996, 997, 998, 1000, 1005, 1023, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1036], "font_manag": [9, 81, 287, 333], "ellipticenvelop": [9, 229, 464, 467, 468, 469, 470, 557, 987, 1022, 1025, 1029, 1030, 1035], "load_win": [9, 242, 308, 837, 845, 1019, 1033], "oneclasssvm": [9, 11, 16, 214, 229, 316, 333, 557, 671, 839, 987, 995, 996, 1024, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037], "support_fract": [9, 463, 468], "contamin": [9, 80, 81, 229, 239, 287, 288, 463, 557, 839, 987, 1030, 1038], "ocsvm": [9, 214], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 85, 91, 114, 124, 155, 212, 224, 303, 331, 378, 390, 424, 458, 503, 561, 562, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 693, 856, 857, 858, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 1015], "frontier": [9, 214, 287, 333, 987, 1014], "xx1": [9, 114, 625], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 58, 80, 121, 130, 153, 154, 155, 156, 158, 171, 211, 212, 213, 214, 226, 229, 250, 287, 294, 297, 305, 306, 327, 333, 334, 339, 340, 343, 344, 625], "500": [9, 10, 44, 50, 57, 60, 61, 63, 85, 86, 103, 105, 116, 118, 126, 148, 152, 176, 213, 214, 222, 240, 241, 246, 247, 251, 261, 264, 274, 281, 287, 293, 307, 314, 319, 333, 340, 344, 362, 410, 463, 464, 468, 469, 470, 476, 477, 478, 605, 607, 608, 610, 615, 618, 619, 644, 645, 648, 649, 650, 674, 676, 677, 851, 970, 996], "clf_name": [9, 10, 347], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 56, 114, 128, 141, 212, 213, 214, 230, 236, 239, 268, 287, 288, 297, 305, 332, 333, 334, 338, 339, 340, 344, 378, 390, 401, 410, 431, 463, 543, 544, 547, 549, 553, 555, 557, 561, 587, 588, 625, 626, 627, 652, 653, 660, 662, 668, 669, 670, 671, 692, 694, 696, 701, 714, 719, 720, 728, 732, 733, 735, 749, 775, 781, 782, 785, 790, 793, 794, 804, 814, 821, 822, 823, 824, 839, 853, 860, 890, 893, 895, 897, 898, 977, 981, 987, 988, 995, 996, 1014, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 58, 80, 96, 101, 121, 124, 129, 130, 139, 141, 154, 198, 213, 214, 216, 229, 287, 306, 308, 327, 333, 334, 340, 343, 344, 403, 653, 708, 709, 712, 981, 1011, 1014, 1015], "contour": [9, 11, 16, 34, 46, 47, 80, 121, 141, 149, 155, 156, 158, 211, 212, 213, 214, 229, 234, 250, 287, 294, 332, 333, 335, 336, 338, 339, 340, 373, 383, 625, 626, 987, 995], "linewidth": [9, 24, 33, 34, 37, 40, 58, 73, 78, 86, 92, 113, 125, 129, 152, 156, 160, 189, 190, 194, 195, 196, 198, 201, 203, 206, 214, 217, 229, 237, 239, 270, 274, 287, 291, 304, 314, 332, 333, 335, 340, 354, 1012], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 43, 85, 94, 101, 107, 167, 384, 408, 527, 535, 686, 981, 1000, 1001, 1015], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 70, 73, 74, 102, 118, 125, 127, 198, 206, 229, 238, 248, 259, 260, 262, 265, 268, 270, 281, 285, 305, 309, 317, 326, 334, 348, 349, 364, 368, 370, 378, 388, 390, 404, 407, 414, 415, 417, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 490, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 691, 692, 694, 695, 696, 707, 755, 758, 764, 772, 773, 788, 789, 790, 793, 794, 796, 801, 802, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 908, 918, 919, 935, 941, 970, 981, 991, 1011, 1012, 1016, 1018, 1022, 1028, 1029, 1038], "boxstyl": [9, 305], "fc": [9, 286, 371], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 268, 294, 339, 393, 640, 641, 644, 645, 646, 647, 648, 649, 654, 655, 656, 657, 658, 675, 676, 677, 678, 680], "xycoord": [9, 26], "textcoord": [9, 176], "xytext": [9, 26, 176], "bbox": [9, 12, 34, 45, 102, 246, 247, 248, 251, 252, 305], "arrowprop": [9, 26], "xlim": [9, 12, 26, 34, 44, 58, 62, 73, 78, 79, 80, 97, 114, 115, 116, 131, 138, 153, 154, 170, 179, 190, 192, 199, 206, 209, 214, 229, 237, 247, 252, 256, 271, 275, 287, 288, 333, 338, 339, 343, 355], "ylim": [9, 12, 24, 26, 33, 34, 37, 44, 58, 62, 78, 79, 80, 97, 114, 115, 122, 123, 125, 131, 134, 139, 153, 154, 170, 187, 189, 190, 192, 193, 194, 206, 209, 210, 214, 229, 237, 247, 252, 256, 260, 264, 271, 274, 275, 287, 288, 333, 338, 339, 343, 347, 355], "prop": [9, 73, 81, 206, 248, 287, 333, 356, 394, 941, 1012], "fontproperti": [9, 81, 287, 333], "ash": [9, 373, 1025, 1028], "malic_acid": 9, "plot_outlier_detection_win": [9, 15], "matplotlibdeprecationwarn": [9, 34, 80, 214, 287, 333, 336], "deprec": [9, 16, 34, 80, 171, 214, 287, 316, 333, 336, 365, 379, 380, 385, 390, 394, 431, 435, 439, 441, 443, 444, 451, 453, 472, 520, 530, 531, 532, 533, 534, 540, 547, 548, 549, 550, 563, 564, 573, 574, 576, 621, 627, 632, 638, 639, 644, 645, 648, 649, 650, 652, 658, 659, 734, 749, 761, 771, 772, 773, 793, 794, 796, 828, 829, 830, 832, 840, 852, 866, 895, 896, 897, 898, 899, 909, 924, 925, 927, 970, 971, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "minor": [9, 34, 80, 214, 239, 264, 268, 287, 333, 336, 371, 379, 391, 490, 981, 1022, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "97": [9, 32, 98, 105, 149, 173, 237, 252, 300, 323, 334, 373, 382, 389, 407, 652, 976, 982, 991, 1022], "98": [9, 32, 34, 42, 44, 54, 62, 64, 82, 98, 149, 229, 259, 297, 300, 305, 323, 373, 380, 407, 410, 653, 828, 976, 983, 1011, 1016], "abil": [9, 61, 80, 125, 151, 162, 164, 167, 169, 170, 172, 200, 204, 218, 229, 347, 364, 393, 410, 411, 413, 605, 616, 619, 775, 776, 777, 780, 978, 981, 984, 987, 997, 1002, 1022, 1024, 1029, 1031, 1035, 1036], "locat": [9, 25, 53, 54, 72, 80, 81, 194, 294, 315, 334, 369, 374, 376, 380, 381, 384, 385, 393, 403, 405, 409, 442, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 482, 494, 495, 498, 499, 506, 509, 966, 971, 977, 982, 987, 991, 997, 1030], "hard": [9, 200, 229, 233, 261, 263, 364, 375, 388, 390, 403, 408, 411, 528, 535, 563, 670, 895, 896, 897, 898, 899, 977, 994, 996, 997, 1002, 1014, 1015, 1016, 1031, 1032], "due": [9, 26, 27, 53, 55, 60, 75, 112, 115, 152, 170, 171, 179, 184, 191, 198, 200, 202, 217, 218, 233, 239, 247, 269, 270, 281, 308, 309, 338, 342, 347, 348, 349, 374, 376, 382, 390, 393, 401, 403, 407, 408, 410, 413, 437, 440, 441, 453, 529, 533, 537, 538, 568, 665, 790, 793, 794, 798, 800, 804, 814, 815, 818, 821, 825, 826, 858, 862, 863, 873, 971, 977, 978, 980, 981, 982, 984, 988, 995, 996, 1002, 1015, 1022, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "banana": [9, 981], "anywai": [9, 347, 378, 659, 679, 680], "rid": [9, 995], "difficulti": [9, 27, 218, 303, 364, 376, 401, 850, 851, 980, 984], "bandwidth": [9, 44, 63, 235, 285, 286, 294, 388, 390, 403, 409, 442, 452, 455, 833, 834, 838, 974, 987, 1033, 1037], "compromis": [9, 171, 362, 376, 641, 673, 984, 1025], "risk": [9, 55, 200, 204, 218, 304, 342, 358, 375, 376, 390, 402, 407, 410, 561, 562, 878, 879, 881, 882, 883, 884, 977, 981, 1005, 1029], "x2": [9, 16, 85, 91, 114, 124, 155, 212, 378, 404, 582, 623, 693, 1015], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 373], "147": [9, 85, 87, 304, 311, 982], "148": [9, 66, 68, 274, 277, 1025], "929": [9, 15, 27, 28], "goal": [10, 17, 20, 52, 57, 86, 164, 171, 176, 200, 215, 218, 238, 239, 258, 259, 347, 363, 364, 371, 378, 381, 382, 390, 391, 392, 408, 412, 536, 542, 584, 587, 732, 981, 984, 986, 987, 995, 996, 997, 999, 1005, 1007, 1010, 1014, 1016, 1030], "boxplot": [10, 80, 126, 170, 173, 313], "gc": 10, "defaultdict": [10, 19, 25, 173, 264, 348, 349], "make_regress": [10, 75, 179, 181, 182, 186, 203, 204, 274, 314, 358, 372, 378, 379, 389, 548, 550, 554, 559, 629, 640, 641, 643, 645, 647, 649, 657, 658, 659, 661, 665, 673, 851, 894, 981, 982, 984], "randomforestregressor": [10, 118, 131, 132, 135, 164, 165, 315, 389, 410, 551, 552, 554, 556, 560, 562, 564, 626, 627, 903, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "sgdregressor": [10, 211, 362, 364, 388, 402, 640, 643, 661, 665, 670, 673, 851, 894, 899, 977, 995, 1024, 1026, 1028, 1029, 1030, 1033, 1035, 1036, 1037, 1038], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 60, 61, 95, 111, 118, 119, 121, 132, 165, 184, 208, 209, 214, 229, 262, 266, 267, 274, 281, 310, 322, 323, 324, 325, 336, 347, 348, 358, 371, 385, 390, 398, 463, 468, 482, 483, 485, 486, 489, 491, 497, 505, 506, 507, 508, 509, 513, 516, 518, 525, 531, 533, 534, 540, 541, 547, 548, 549, 550, 558, 559, 561, 562, 596, 652, 653, 660, 661, 662, 666, 668, 670, 671, 672, 681, 790, 792, 793, 794, 795, 796, 804, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 823, 850, 851, 874, 893, 894, 895, 898, 929, 930, 950, 952, 976, 977, 982, 989, 995, 996, 1011, 1016, 1018, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 64, 70, 72, 74, 132, 187, 262, 299, 300, 303, 316, 326, 347, 374, 380, 390, 397, 434, 437, 441, 443, 446, 448, 453, 456, 458, 461, 465, 466, 472, 525, 530, 531, 532, 533, 534, 537, 539, 540, 541, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 587, 588, 621, 626, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 684, 686, 688, 758, 771, 788, 789, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 822, 824, 827, 842, 849, 850, 851, 852, 853, 854, 855, 890, 893, 894, 895, 896, 897, 898, 899, 947, 1002, 1024, 1025, 1027, 1029, 1030, 1031, 1033, 1034, 1036, 1037], "n_instanc": [10, 627], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 79, 81, 82, 95, 98, 100, 111, 114, 115, 124, 126, 127, 131, 146, 149, 165, 179, 184, 186, 191, 193, 194, 199, 200, 201, 204, 205, 206, 210, 215, 218, 233, 236, 237, 239, 246, 250, 252, 258, 261, 266, 270, 271, 286, 303, 314, 315, 338, 342, 348, 349, 352, 356, 362, 363, 371, 378, 382, 390, 401, 402, 403, 405, 408, 410, 411, 412, 413, 416, 440, 446, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 481, 491, 502, 503, 517, 520, 521, 525, 526, 529, 531, 532, 533, 534, 536, 537, 541, 542, 546, 551, 552, 553, 554, 555, 556, 558, 559, 560, 575, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 605, 630, 633, 637, 638, 639, 644, 652, 653, 658, 659, 660, 662, 665, 670, 671, 672, 679, 680, 697, 703, 706, 707, 709, 710, 718, 722, 723, 727, 731, 733, 739, 776, 777, 778, 780, 787, 788, 805, 806, 809, 810, 822, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 856, 863, 865, 866, 868, 869, 870, 872, 873, 879, 880, 881, 882, 886, 893, 901, 902, 903, 904, 928, 967, 971, 977, 979, 980, 983, 984, 985, 991, 992, 993, 995, 996, 997, 1007, 1014, 1016, 1022, 1024, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "atomic_benchmark": 10, "percentil": [10, 71, 125, 239, 243, 303, 362, 586, 589, 590, 592, 593, 594, 597, 600, 626, 627, 741, 991, 1027, 1035], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 74, 123, 135, 165, 201, 258, 265, 334, 338, 352, 362, 374, 376, 388, 389, 404, 406, 410, 413, 443, 477, 532, 549, 550, 551, 552, 557, 558, 559, 560, 564, 679, 680, 790, 793, 794, 804, 817, 828, 829, 830, 831, 832, 970, 981, 991, 1016, 1030, 1032], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 66, 79, 81, 124, 149, 152, 158, 159, 171, 176, 202, 256, 261, 262, 273, 323, 348, 349, 378, 385, 390, 391, 400, 401, 402, 403, 408, 411, 412, 582, 587, 601, 602, 609, 621, 628, 653, 795, 805, 806, 809, 919, 971, 980, 1018, 1030, 1032], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 58, 64, 100, 114, 116, 121, 125, 141, 156, 160, 180, 183, 192, 209, 212, 218, 233, 256, 261, 268, 270, 327, 330, 332, 334, 335, 336, 338, 340, 348, 353, 371, 388, 390, 400, 401, 404, 407, 411, 413, 431, 434, 435, 439, 444, 451, 457, 465, 466, 472, 487, 502, 503, 576, 586, 589, 590, 592, 593, 594, 604, 607, 608, 609, 611, 613, 614, 616, 617, 619, 621, 626, 627, 637, 686, 693, 694, 699, 700, 701, 709, 724, 733, 751, 752, 756, 759, 762, 763, 764, 765, 766, 767, 769, 771, 772, 773, 774, 775, 779, 821, 833, 834, 908, 981, 982, 983, 984, 991, 997, 1022, 1034, 1035, 1037, 1038], "contain": [10, 19, 24, 27, 33, 40, 49, 56, 58, 70, 71, 114, 116, 120, 128, 158, 170, 171, 173, 176, 191, 204, 218, 229, 236, 239, 240, 243, 251, 259, 261, 267, 270, 271, 279, 287, 288, 290, 303, 316, 323, 326, 347, 348, 369, 370, 371, 373, 376, 378, 380, 381, 382, 383, 384, 385, 389, 390, 397, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 415, 417, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 456, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 490, 494, 496, 497, 498, 502, 503, 504, 508, 509, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 682, 683, 684, 685, 686, 690, 691, 692, 694, 695, 696, 703, 706, 728, 729, 730, 761, 765, 772, 773, 781, 785, 788, 789, 790, 793, 794, 796, 804, 808, 809, 812, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 933, 934, 936, 937, 944, 948, 950, 970, 971, 973, 979, 982, 985, 987, 991, 992, 994, 997, 1001, 1007, 1016, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "generate_dataset": 10, "coef": [10, 54, 105, 169, 170, 179, 184, 187, 191, 192, 194, 199, 203, 204, 205, 209, 216, 243, 274, 299, 319, 343, 518, 640, 641, 643, 646, 647, 653, 654, 655, 656, 657, 663, 666, 668, 674, 675, 676, 677, 678, 679, 680, 681, 985], "random_se": [10, 92, 121], "x_scaler": 10, "y_scaler": 10, "ok": [10, 376, 987], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 294, 326, 362, 701, 707, 722, 723, 731, 776, 777, 780, 781, 981, 1022, 1030, 1031, 1037], "bp": [10, 126, 149, 188, 189, 373, 989], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 60, 80, 92, 95, 96, 97, 115, 132, 135, 161, 176, 179, 180, 190, 198, 226, 240, 256, 267, 294, 298, 304, 308, 309, 324, 334, 355, 374, 390, 403, 408, 982], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 55, 58, 59, 60, 63, 64, 85, 91, 92, 97, 101, 118, 131, 159, 160, 176, 188, 193, 195, 197, 198, 200, 202, 203, 215, 217, 222, 246, 248, 249, 256, 261, 263, 264, 265, 288, 303, 308, 324, 352, 376, 380, 411, 1030, 1032, 1033, 1038], "linestyl": [10, 11, 16, 33, 60, 73, 80, 103, 105, 112, 124, 134, 138, 141, 152, 155, 157, 159, 161, 172, 173, 185, 187, 188, 189, 200, 201, 202, 206, 210, 212, 213, 218, 237, 239, 258, 260, 264, 265, 270, 286, 294, 298, 304, 332, 335, 336, 338, 339, 340, 342, 1012], "major": [10, 14, 118, 268, 303, 307, 313, 314, 315, 316, 317, 318, 319, 338, 349, 362, 371, 375, 376, 379, 382, 388, 391, 403, 407, 409, 411, 545, 563, 564, 688, 722, 723, 731, 776, 777, 780, 905, 907, 981, 984, 995, 1002, 1005, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25, 796, 812], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 208, 383, 432, 570, 692, 694, 696, 912], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 658, 679, 680, 977, 981], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 208, 223, 226, 281], "1e2": [10, 152, 159, 235, 252, 334, 739], "randomforest": [10, 121, 362, 410, 901, 902, 1027], "0001": [10, 138, 149, 208, 259, 378, 415, 437, 441, 453, 465, 466, 472, 527, 532, 534, 541, 543, 544, 553, 554, 640, 641, 642, 643, 646, 647, 652, 653, 654, 655, 656, 657, 662, 663, 666, 668, 670, 672, 674, 681, 683, 687, 850, 851, 893, 894, 970], "250": [10, 22, 34, 35, 65, 125, 176, 221, 338, 487, 686, 970, 993, 1029], "615": [10, 15, 48], "plot_prediction_lat": [10, 15], "conserv": [11, 390, 576, 583, 885, 886, 980, 993], "biologi": 11, "south": [11, 170, 294, 409], "american": [11, 12, 70, 81, 371, 403, 405, 409, 410, 411, 463, 468, 724, 873], "mammal": 11, "past": [11, 380, 381, 384, 388, 391, 407, 408, 410, 532, 549, 550, 672, 1005, 1008, 1038], "environment": [11, 184, 218], "unsuccess": 11, "cast": [11, 53, 200, 222, 370, 390, 391, 411, 490, 638, 639, 640, 646, 650, 651, 654, 655, 656, 657, 658, 659, 667, 669, 946, 1029, 1030, 1031, 1032, 1035, 1037], "densiti": [11, 49, 55, 60, 65, 75, 101, 105, 149, 167, 186, 200, 215, 218, 225, 229, 233, 245, 252, 253, 261, 267, 282, 287, 288, 295, 303, 334, 347, 373, 385, 390, 403, 410, 414, 422, 438, 440, 442, 444, 446, 458, 461, 492, 496, 530, 535, 543, 544, 788, 789, 790, 833, 834, 838, 839, 886, 975, 977, 980, 984, 986, 987, 993, 1001, 1003, 1007, 1017, 1018, 1024, 1026, 1030, 1031, 1037, 1038], "phillip": [11, 294, 492], "2006": [11, 294, 410, 413, 456, 492, 551, 552, 559, 560, 604, 605, 608, 613, 616, 643, 660, 661, 734, 781, 782, 788, 828, 886, 903, 904, 977, 981, 983, 986, 993, 994], "basemap": [11, 294], "coast": [11, 294], "line": [11, 17, 40, 43, 60, 70, 95, 100, 112, 118, 124, 151, 162, 164, 165, 167, 170, 171, 188, 189, 190, 192, 195, 196, 198, 201, 202, 203, 208, 209, 211, 212, 229, 233, 234, 237, 239, 258, 265, 267, 268, 291, 294, 304, 315, 333, 338, 339, 343, 344, 347, 370, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 388, 408, 409, 410, 432, 481, 482, 483, 502, 503, 536, 547, 548, 549, 550, 604, 607, 608, 626, 664, 680, 694, 695, 696, 796, 812, 949, 975, 981, 985, 988, 995, 1001, 1004, 1014, 1016, 1024, 1033, 1035, 1038], "nation": [11, 80, 294, 371, 840], "boundari": [11, 13, 25, 26, 27, 31, 34, 58, 60, 110, 114, 121, 130, 136, 153, 156, 167, 171, 183, 201, 229, 234, 237, 264, 289, 291, 292, 294, 297, 303, 305, 308, 321, 328, 329, 331, 332, 334, 336, 343, 344, 345, 353, 372, 401, 410, 411, 413, 444, 450, 498, 530, 543, 544, 563, 582, 583, 585, 625, 728, 754, 790, 822, 835, 841, 843, 844, 845, 868, 872, 889, 890, 895, 897, 898, 901, 917, 975, 984, 987, 991, 994, 995, 996, 1022, 1024, 1026, 1035, 1036, 1037], "america": [11, 12, 80, 294, 840, 991], "bradypu": [11, 294, 492], "variegatu": [11, 294, 492], "brown": [11, 92, 294, 492, 622, 971, 1027, 1029, 1030, 1031, 1034], "throat": [11, 294, 492], "sloth": [11, 294, 492], "microryzomi": [11, 294, 492], "minutu": [11, 294, 492], "known": [11, 17, 25, 27, 39, 49, 57, 58, 81, 104, 105, 132, 157, 159, 165, 184, 200, 201, 218, 229, 261, 263, 270, 290, 294, 304, 316, 322, 331, 338, 348, 364, 373, 374, 376, 379, 384, 388, 390, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 413, 432, 457, 476, 478, 492, 502, 503, 538, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 582, 583, 585, 588, 603, 616, 627, 652, 653, 666, 676, 677, 688, 698, 704, 707, 712, 722, 736, 748, 750, 786, 822, 828, 829, 830, 831, 832, 835, 840, 843, 849, 877, 901, 902, 903, 904, 971, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 991, 996, 997, 1007, 1012, 1014, 1015], "forest": [11, 27, 31, 110, 117, 121, 127, 128, 130, 132, 135, 136, 164, 167, 168, 174, 176, 229, 258, 294, 315, 347, 358, 369, 389, 390, 401, 402, 412, 457, 458, 484, 485, 489, 490, 492, 509, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 624, 628, 790, 795, 819, 826, 853, 867, 897, 901, 902, 903, 970, 971, 982, 989, 1002, 1003, 1018, 1019, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031], "rice": [11, 294, 492, 1035], "rat": [11, 294, 492], "rodent": [11, 294, 492], "live": [11, 70, 170, 294, 376, 403, 492, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619], "peru": [11, 294, 492], "colombia": [11, 294, 492], "ecuador": [11, 294, 492], "venezuela": [11, 294, 492], "entropi": [11, 241, 273, 294, 315, 322, 323, 358, 403, 410, 415, 492, 527, 551, 558, 601, 602, 652, 711, 729, 730, 734, 786, 901, 903, 977, 978, 981, 985, 997, 1024, 1026, 1030, 1031, 1036, 1038], "anderson": [11, 294, 492, 1028, 1034], "schapir": [11, 294, 410, 492, 547, 548], "ecolog": [11, 294, 492], "190": [11, 124, 180, 218, 219, 270, 294, 382, 492], "231": [11, 294, 403, 414, 438, 492, 578], "259": [11, 130, 136, 223, 294, 410, 492, 561, 562], "________________________________________________________________________________": [11, 54, 347], "coastlin": [11, 149, 294, 373], "coverag": [11, 125, 200, 218, 294, 379, 399, 492, 621, 714], "area": [11, 34, 128, 149, 200, 218, 239, 258, 261, 268, 270, 271, 334, 338, 339, 343, 373, 376, 380, 388, 403, 411, 696, 700, 701, 702, 735, 781, 782, 978, 981, 984, 1000, 1024], "roc": [11, 25, 117, 149, 167, 228, 230, 239, 240, 244, 254, 277, 383, 401, 407, 498, 504, 558, 652, 696, 700, 701, 702, 720, 735, 775, 781, 782, 809, 819, 822, 860, 898, 987, 1019, 1024, 1025, 1027, 1028, 1032, 1034, 1038], "868443": 11, "993919": 11, "elaps": [11, 47, 67, 118, 119, 120, 362, 458, 461, 563, 564, 852, 853, 854, 855], "astro": [11, 159, 221, 249], "washington": [11, 159, 221, 249, 286, 294], "fetch_species_distribut": [11, 294, 1031], "bunch": [11, 369, 370, 371, 458, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 501, 504, 561, 562, 563, 564, 626, 627, 628, 852, 853, 901, 902, 903, 904, 941, 1005, 1016, 1027, 1029, 1032, 1034, 1038], "ll": [11, 55, 120, 256, 294, 376, 388, 526, 535, 984, 997, 1007], "otherwis": [11, 56, 62, 114, 161, 165, 181, 202, 208, 294, 338, 342, 358, 364, 374, 378, 380, 382, 390, 394, 403, 405, 407, 411, 413, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 447, 448, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 490, 520, 527, 528, 529, 530, 532, 534, 535, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 584, 585, 588, 591, 596, 604, 605, 608, 625, 626, 627, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 684, 686, 690, 691, 692, 694, 696, 697, 701, 703, 707, 708, 717, 719, 720, 721, 722, 723, 731, 734, 745, 747, 748, 749, 759, 767, 771, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 804, 808, 809, 812, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 850, 851, 853, 856, 857, 858, 859, 860, 864, 865, 872, 873, 874, 875, 878, 879, 880, 882, 883, 884, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 908, 914, 916, 929, 930, 940, 942, 965, 967, 976, 977, 978, 981, 984, 985, 987, 988, 991, 993, 995, 996, 1001, 1005, 1007, 1024, 1030, 1031, 1032, 1035, 1038], "improvis": [11, 294], "mpl_toolkit": [11, 45, 67, 90, 101, 102, 171, 197, 221, 223, 294], "except": [11, 16, 44, 53, 98, 109, 118, 208, 215, 229, 236, 269, 281, 294, 298, 299, 303, 305, 318, 365, 369, 376, 378, 379, 380, 381, 388, 390, 394, 397, 400, 404, 407, 408, 410, 411, 413, 426, 454, 459, 462, 476, 477, 478, 503, 548, 550, 551, 552, 554, 556, 558, 559, 562, 564, 605, 621, 624, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 681, 705, 771, 797, 826, 827, 833, 834, 836, 839, 844, 850, 851, 857, 871, 873, 891, 894, 896, 899, 902, 904, 934, 967, 977, 981, 996, 1007, 1015, 1016, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "importerror": [11, 16, 53, 98, 281, 294, 384, 490], "construct_grid": [11, 294], "object": [11, 13, 14, 19, 26, 44, 50, 62, 66, 70, 71, 98, 109, 132, 138, 147, 148, 157, 167, 171, 184, 196, 200, 216, 218, 228, 236, 240, 242, 243, 244, 259, 273, 294, 309, 316, 317, 319, 322, 348, 349, 358, 369, 370, 371, 376, 377, 379, 381, 382, 383, 385, 389, 390, 391, 394, 397, 403, 404, 405, 408, 411, 412, 413, 417, 419, 424, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 705, 712, 725, 726, 735, 751, 752, 774, 775, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 908, 913, 914, 915, 916, 917, 920, 924, 926, 936, 937, 938, 939, 940, 941, 942, 944, 946, 947, 949, 966, 967, 969, 977, 978, 979, 980, 984, 987, 988, 991, 994, 995, 996, 1001, 1002, 1007, 1008, 1010, 1011, 1014, 1016, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "func": [11, 75, 117, 170, 180, 218, 294, 376, 404, 459, 693, 857, 991, 1026, 1028, 1030, 1031], "xgrid": [11, 294], "ygrid": [11, 294], "correspond": [11, 13, 16, 20, 26, 32, 41, 53, 65, 78, 82, 97, 112, 115, 118, 119, 121, 128, 145, 148, 149, 153, 158, 161, 170, 189, 192, 200, 201, 204, 209, 218, 230, 235, 236, 243, 251, 260, 262, 264, 265, 270, 271, 294, 308, 315, 316, 317, 348, 352, 353, 358, 363, 370, 371, 372, 375, 376, 378, 380, 383, 384, 389, 390, 391, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 418, 424, 431, 433, 435, 439, 442, 445, 447, 453, 455, 457, 458, 466, 476, 477, 478, 484, 485, 486, 487, 488, 489, 490, 528, 535, 538, 539, 540, 543, 544, 546, 549, 551, 553, 554, 555, 558, 576, 578, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 611, 624, 626, 627, 629, 637, 638, 639, 640, 641, 642, 646, 652, 653, 654, 655, 656, 662, 663, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 681, 684, 685, 686, 688, 697, 704, 707, 717, 718, 727, 731, 745, 747, 767, 771, 775, 781, 782, 785, 787, 788, 789, 790, 793, 794, 796, 804, 812, 814, 822, 825, 828, 829, 830, 831, 832, 833, 834, 838, 839, 840, 842, 850, 851, 860, 863, 864, 866, 867, 870, 874, 882, 893, 894, 895, 898, 901, 902, 903, 904, 918, 924, 941, 956, 970, 971, 973, 974, 975, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 991, 992, 995, 996, 1000, 1007, 1013, 1016, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "coordin": [11, 12, 13, 54, 100, 131, 156, 185, 221, 262, 294, 362, 408, 413, 437, 441, 442, 443, 455, 465, 466, 472, 525, 531, 532, 533, 534, 536, 537, 539, 540, 541, 542, 544, 608, 640, 641, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 675, 676, 677, 678, 682, 683, 684, 687, 688, 700, 757, 762, 893, 977, 978, 996, 1014, 1022, 1025, 1026, 1027, 1031, 1033, 1035, 1036, 1037], "corner": [11, 13, 26, 53, 169, 258, 262, 270, 271, 294, 376, 492, 905, 907, 981, 1036], "cell": [11, 12, 20, 26, 32, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 149, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 294, 300, 309, 314, 315, 317, 318, 324, 356, 373, 381, 686, 981, 982, 1028, 1036], "xmin": [11, 78, 190, 192, 209, 210, 294], "x_left_lower_corn": [11, 294, 492], "grid_siz": [11, 61, 294, 492], "xmax": [11, 78, 190, 192, 209, 210, 294], "nx": [11, 34, 294, 492], "ymin": [11, 78, 187, 189, 192, 193, 201, 209, 261, 294], "y_left_lower_corn": [11, 294, 492], "ny": [11, 34, 260, 294, 373, 492, 971, 993], "create_species_bunch": 11, "species_nam": [11, 294], "record": [11, 96, 116, 172, 236, 309, 349, 362, 376, 403, 405, 444, 451, 492, 614, 637, 686, 764, 767, 771, 772, 773, 774, 816, 839, 1035, 1036], "join": [11, 12, 19, 55, 164, 218, 261, 305, 371, 391, 457, 1016, 1022, 1030], "ascii": [11, 294, 411, 481, 582, 583, 585], "pt": [11, 371, 412, 869, 991], "desir": [11, 24, 114, 149, 165, 200, 202, 303, 307, 369, 376, 378, 380, 384, 397, 400, 403, 406, 407, 408, 412, 497, 532, 534, 538, 541, 561, 587, 596, 597, 658, 664, 679, 680, 693, 702, 729, 833, 834, 838, 858, 860, 863, 864, 866, 867, 869, 870, 874, 877, 879, 881, 882, 917, 950, 973, 975, 978, 984, 991, 995, 996, 997, 1007, 1022, 1030, 1031, 1032, 1035], "pts_": 11, "ix": [11, 270, 341], "searchsort": 11, "dd": [11, 12, 130, 294, 492], "ii": [11, 96, 171, 207, 256, 373, 411, 576, 577, 583, 632, 660, 661, 856, 865, 977, 991, 1000], "lat": [11, 294, 492, 757], "cov_": [11, 82], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 81, 92, 124, 165, 172, 224, 232, 236, 238, 273, 315, 378, 381, 389, 394, 794, 811, 828, 829, 830, 832, 970, 971], "land": [11, 294, 391, 410], "water": 11, "land_refer": [11, 294], "standard": [11, 12, 20, 26, 32, 34, 55, 61, 70, 71, 73, 80, 81, 86, 96, 112, 115, 117, 118, 119, 120, 121, 128, 132, 149, 152, 157, 159, 161, 170, 179, 185, 189, 198, 200, 209, 221, 222, 223, 234, 239, 251, 256, 259, 260, 261, 262, 264, 303, 308, 332, 347, 362, 363, 368, 369, 370, 372, 373, 374, 376, 378, 379, 381, 382, 385, 388, 390, 393, 397, 399, 403, 405, 406, 407, 411, 413, 440, 462, 466, 482, 490, 495, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 516, 518, 519, 524, 526, 529, 535, 546, 584, 588, 605, 628, 638, 639, 644, 645, 648, 649, 650, 658, 659, 666, 667, 668, 669, 670, 672, 681, 683, 687, 781, 796, 811, 812, 830, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 857, 862, 863, 866, 869, 870, 871, 873, 881, 882, 883, 884, 891, 893, 894, 913, 970, 973, 977, 978, 981, 983, 984, 985, 987, 995, 996, 1002, 1005, 1007, 1012, 1014, 1015, 1016, 1018, 1028, 1029, 1030, 1031, 1033, 1034, 1035], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 294], "llcrnrlat": [11, 294], "urcrnrlat": [11, 294], "llcrnrlon": [11, 294], "urcrnrlon": [11, 294], "drawcoastlin": [11, 294], "drawcountri": [11, 294], "9998": [11, 294], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 56, 60, 63, 65, 68, 74, 75, 80, 91, 92, 95, 102, 103, 111, 112, 114, 121, 125, 128, 130, 131, 133, 134, 138, 141, 145, 146, 149, 153, 155, 156, 160, 165, 167, 170, 171, 172, 173, 182, 183, 185, 194, 197, 204, 212, 214, 233, 235, 237, 238, 239, 246, 249, 261, 264, 265, 270, 271, 274, 281, 283, 286, 287, 288, 289, 290, 292, 293, 294, 304, 305, 306, 307, 310, 313, 317, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 346, 347, 349, 350, 356, 358, 363, 370, 371, 373, 376, 384, 385, 390, 394, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 456, 463, 466, 482, 496, 498, 500, 506, 517, 525, 531, 535, 538, 539, 540, 543, 544, 547, 549, 551, 552, 553, 575, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 625, 633, 634, 642, 644, 645, 647, 648, 649, 650, 652, 653, 657, 658, 659, 660, 661, 663, 673, 674, 676, 677, 678, 679, 680, 682, 685, 689, 690, 698, 699, 702, 711, 719, 730, 736, 749, 751, 752, 754, 759, 762, 767, 768, 769, 770, 772, 784, 785, 786, 788, 789, 791, 795, 797, 798, 799, 802, 805, 806, 808, 809, 811, 817, 828, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 846, 847, 854, 858, 859, 860, 864, 865, 866, 868, 869, 873, 881, 886, 900, 908, 916, 925, 930, 955, 970, 971, 973, 974, 975, 977, 978, 979, 980, 983, 985, 986, 987, 989, 994, 995, 996, 997, 1001, 1004, 1011, 1017, 1018, 1022, 1023, 1024, 1025, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "solid": [11, 16, 31, 33, 124, 155, 212, 213, 229, 239, 294, 305, 1005], "z": [11, 16, 34, 58, 101, 121, 141, 154, 156, 171, 210, 212, 213, 214, 221, 223, 229, 234, 250, 287, 294, 297, 305, 308, 327, 333, 334, 339, 340, 344, 373, 400, 408, 410, 547, 548, 579, 633, 658, 665, 679, 680, 683, 687, 693, 717, 778, 873, 977, 978, 985, 986, 1037], "float64": [11, 13, 48, 53, 71, 124, 126, 127, 170, 171, 272, 317, 318, 363, 370, 376, 378, 390, 411, 465, 466, 472, 490, 491, 502, 503, 536, 575, 576, 583, 585, 635, 652, 667, 669, 693, 731, 858, 866, 867, 895, 896, 898, 899, 902, 904, 911, 913, 952, 955, 957, 958, 959, 996, 1007, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "idx": [11, 16, 19, 30, 45, 55, 105, 114, 118, 121, 133, 161, 171, 173, 184, 192, 199, 200, 209, 222, 353, 404, 407], "9999": [11, 218, 294, 325, 492, 621, 1030], "coverages_land": 11, "contourf": [11, 16, 121, 214, 234, 287, 294, 297, 305, 306, 327, 333, 339, 344, 625, 626], "pts_train": 11, "pts_test": 11, "auc": [11, 25, 149, 200, 218, 239, 258, 261, 265, 268, 270, 271, 401, 696, 702, 781, 981, 1027, 1030, 1034], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 34, 101, 105, 213, 214, 247, 268, 287, 288, 333, 339, 344, 403, 701, 981, 997], "fpr": [11, 230, 239, 258, 270, 271, 383, 586, 590, 692, 696, 700, 720, 782, 981, 1019, 1022, 1038], "tpr": [11, 230, 239, 258, 270, 271, 383, 696, 700, 782, 981, 1019, 1022, 1038], "threshold": [11, 25, 42, 65, 98, 105, 149, 167, 171, 173, 195, 230, 232, 258, 259, 260, 268, 279, 319, 321, 328, 353, 356, 390, 403, 408, 410, 412, 435, 436, 439, 440, 463, 494, 502, 503, 525, 531, 536, 542, 543, 544, 557, 582, 585, 587, 591, 596, 597, 638, 661, 665, 670, 672, 686, 692, 694, 696, 697, 700, 701, 714, 719, 720, 732, 733, 749, 775, 781, 782, 785, 788, 789, 809, 828, 839, 840, 856, 858, 860, 876, 888, 889, 890, 898, 905, 907, 955, 977, 981, 984, 985, 987, 991, 994, 996, 997, 1002, 1022, 1026, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1038], "roc_curv": [11, 230, 258, 270, 696, 700, 720, 775, 781, 981, 1022, 1023, 1024, 1027, 1028, 1030, 1035, 1038], "roc_auc": [11, 149, 261, 265, 270, 271, 383, 628, 696, 981, 1019], "ntime": [11, 272], "843": [11, 15], "plot_species_distribution_model": [11, 15, 492], "emploi": [12, 152, 235, 405, 411, 444, 472, 576, 583, 989, 1005, 1015, 1028], "techniqu": [12, 18, 70, 72, 97, 106, 113, 123, 140, 148, 149, 165, 167, 169, 208, 223, 225, 266, 285, 316, 323, 338, 352, 364, 373, 388, 390, 401, 402, 403, 407, 408, 409, 410, 411, 412, 441, 442, 443, 444, 528, 548, 671, 683, 687, 688, 719, 749, 973, 977, 978, 980, 981, 984, 987, 989, 993, 995, 997, 1002, 1005, 1010, 1015, 1016, 1035], "histor": [12, 200, 1002], "quot": [12, 14, 70, 262, 347, 348, 363, 370, 371, 374, 380, 402, 482, 483, 490, 981, 993, 996, 1016, 1037], "quantiti": [12, 122, 261, 268, 315, 362, 390, 403, 410, 715, 716, 717, 778, 849, 970, 972, 975, 977, 1027], "daili": [12, 1005], "price": [12, 75, 122, 132, 239, 309, 971, 977, 1005, 1012], "link": [12, 17, 112, 170, 171, 179, 200, 204, 218, 246, 264, 291, 352, 363, 374, 375, 376, 377, 380, 384, 390, 401, 403, 405, 408, 413, 555, 556, 604, 642, 663, 674, 682, 699, 912, 914, 977, 984, 997, 998, 1001, 1004, 1010, 1014, 1016, 1020, 1022, 1025, 1026, 1029, 1030, 1033], "fluctuat": [12, 60, 200, 268, 1030], "normalesup": [12, 32, 46, 66, 234], "2003": [12, 400, 403, 408, 411, 445, 446, 456, 507, 509, 683, 687, 828, 830, 977, 978, 983, 993, 1030], "2008": [12, 405, 407, 408, 472, 528, 557, 584, 639, 658, 679, 680, 686, 710, 719, 749, 823, 828, 832, 849, 975, 978, 979, 981, 982, 983, 986, 987, 996], "calm": 12, "ago": [12, 1002], "tech": [12, 373, 831], "firm": [12, 403], "crash": [12, 376, 462, 883, 884, 891, 991, 1026, 1030, 1038], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 384, 849, 986, 1014], "msft": 12, "ibm": [12, 19, 326, 349, 371], "twx": 12, "warner": [12, 1037, 1038], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1016], "amzn": 12, "amazon": 12, "tm": [12, 984], "toyota": 12, "caj": 12, "canon": [12, 390, 401, 410, 476, 477, 479, 761, 1002, 1003, 1018], "sne": [12, 167, 220, 221, 222, 223, 225, 227, 508, 519, 686, 1017, 1018], "soni": [12, 1032, 1034], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 850, 851, 985], "boe": 12, "ko": [12, 26, 153], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 80, 81, 405, 463, 468], "mcdonald": 12, "pep": [12, 384, 1022], "pepsi": 12, "kellogg": 12, "un": [12, 376, 401, 411, 415, 527, 583, 786, 856, 865, 876, 880, 1031], "unilev": 12, "mar": [12, 999], "marriott": 12, "pg": [12, 382, 643, 977, 1027], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 972, 983, 1034], "electr": [12, 373, 403], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 1005], "chase": [12, 1022], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 1005], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 362, 374, 388, 982], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 70], "instrument": [12, 70, 96, 169], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1032], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 135], "dynam": [12, 171, 549, 550, 557, 573, 574, 670, 671, 672, 997, 1005, 1028, 1034], "rtn": 12, "raytheon": 12, "cat": [12, 71, 171, 172, 239, 316, 317, 318, 319, 371, 411, 576, 706, 712, 747, 776, 874, 981, 991, 1031, 1032, 1034], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 349, 363, 378, 382, 405, 411, 493, 576, 582, 583, 585, 905, 907, 1001], "fetch": [12, 17, 132, 170, 218, 369, 370, 371, 376, 380, 381, 384, 402, 408, 490, 549, 550, 557, 582, 583, 585, 1030, 1038], "histori": [12, 365, 540, 553, 554, 999, 1022], "stderr": [12, 822], "url": [12, 17, 149, 370, 373, 380], "githubusercont": 12, "master": [12, 16, 281, 318, 376, 380, 1005, 1027], "financi": [12, 403, 410, 977], "csv": [12, 370, 373, 381, 1004, 1030, 1035], "read_csv": [12, 381, 490, 1037], "close_pric": 12, "vstack": [12, 26, 57, 65, 155, 156, 182, 246, 250, 281, 294, 339, 625, 982, 1030], "q": [12, 71, 85, 125, 200, 316, 400, 403, 408, 929, 977, 996], "open_pric": 12, "carri": [12, 31, 112, 165, 261, 264, 269, 298, 305, 349, 391, 397, 411, 551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904, 1005, 1015], "invers": [12, 54, 77, 83, 112, 167, 251, 270, 276, 284, 334, 348, 349, 368, 390, 402, 404, 406, 407, 408, 411, 415, 439, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 521, 527, 528, 529, 533, 535, 537, 551, 555, 558, 583, 584, 585, 622, 638, 639, 652, 653, 660, 662, 668, 669, 670, 671, 672, 674, 717, 736, 745, 788, 789, 835, 836, 843, 844, 850, 851, 853, 857, 860, 866, 867, 869, 885, 886, 893, 894, 895, 898, 899, 901, 903, 919, 975, 977, 981, 984, 985, 991, 995, 996, 1014, 1016, 1017, 1018, 1022, 1025, 1030, 1033, 1034, 1036], "correl": [12, 27, 82, 85, 86, 106, 129, 145, 148, 157, 167, 168, 169, 171, 172, 174, 184, 189, 195, 218, 261, 279, 309, 314, 315, 369, 372, 373, 381, 390, 392, 400, 405, 407, 412, 444, 451, 476, 477, 479, 487, 488, 494, 518, 558, 600, 603, 621, 628, 629, 630, 676, 677, 736, 750, 771, 772, 773, 819, 833, 834, 870, 871, 873, 882, 972, 977, 982, 988, 991, 995, 997, 1002, 1003, 1018, 1022, 1023, 1024, 1035, 1036], "condition": [12, 27, 200, 401, 405, 751, 975], "connect": [12, 39, 44, 47, 51, 54, 62, 66, 67, 374, 376, 385, 390, 405, 435, 439, 446, 456, 457, 579, 580, 689, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 979, 984, 986, 994, 1026, 1035], "edge_model": 12, "graphicallassocv": [12, 82, 405, 465, 467, 468, 469, 470, 472, 1030, 1034, 1036, 1038], "seri": [12, 20, 82, 119, 169, 172, 173, 182, 200, 204, 221, 243, 266, 310, 317, 322, 368, 371, 381, 390, 403, 483, 484, 485, 486, 490, 494, 495, 496, 498, 499, 504, 535, 684, 688, 811, 909, 972, 977, 978, 982, 984, 995, 1001, 1025, 1028, 1029, 1030, 1034, 1037], "rather": [12, 53, 82, 112, 115, 164, 170, 200, 201, 214, 239, 307, 308, 347, 348, 358, 363, 372, 376, 378, 381, 382, 384, 388, 389, 390, 391, 403, 407, 408, 410, 411, 413, 442, 455, 457, 559, 575, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 623, 640, 641, 646, 647, 654, 655, 656, 657, 774, 804, 824, 826, 827, 856, 893, 894, 905, 930, 975, 977, 978, 981, 983, 984, 988, 1002, 1011, 1014, 1022, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1037, 1038], "former": [12, 349, 410, 411, 559, 792, 799, 808, 983, 1022, 1028, 1031], "recoveri": [12, 82, 184, 199, 405, 412], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 384], "trust": [12, 26, 71, 72, 81, 111, 112, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 173, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 380, 391, 397, 401, 1011, 1036], "unabl": [12, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 169, 170, 171, 172, 181, 184, 200, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 364, 873, 991, 1031], "render": [12, 26, 53, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 195, 204, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 376, 380, 381, 382, 390, 545, 583, 625, 694, 696, 870, 882, 905, 907, 980, 997, 1035], "nbviewer": [12, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 55, 58, 60, 134, 171, 173, 200, 222, 236, 252, 256, 309, 324, 348, 356, 371, 381, 390, 391, 394, 403, 409, 410, 411, 428, 440, 489, 582, 583, 585, 588, 712, 781, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 820, 866, 867, 903, 904, 977, 978, 980, 981, 982, 991, 997, 998, 999, 1001, 1007, 1010, 1011, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1038], "amongst": [12, 997], "indic": [12, 19, 20, 25, 26, 27, 48, 59, 60, 66, 75, 86, 90, 95, 112, 117, 157, 160, 165, 169, 171, 197, 223, 233, 236, 255, 263, 264, 267, 268, 281, 294, 322, 323, 326, 347, 348, 349, 356, 363, 371, 376, 377, 378, 380, 384, 385, 388, 390, 399, 400, 401, 403, 405, 407, 408, 410, 411, 414, 418, 431, 434, 438, 444, 445, 446, 447, 449, 450, 451, 454, 458, 461, 466, 481, 502, 503, 505, 506, 507, 517, 526, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 575, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 614, 621, 622, 623, 624, 626, 627, 633, 641, 644, 645, 647, 648, 649, 655, 657, 659, 667, 669, 676, 677, 684, 686, 688, 690, 697, 701, 706, 707, 712, 713, 714, 718, 721, 722, 723, 724, 727, 731, 732, 733, 734, 747, 764, 771, 772, 773, 774, 776, 777, 778, 780, 781, 783, 784, 785, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 824, 826, 827, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 857, 860, 864, 866, 874, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 909, 913, 914, 919, 934, 944, 945, 971, 976, 977, 978, 981, 982, 983, 984, 985, 988, 989, 991, 992, 995, 996, 1002, 1007, 1011, 1014, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1032, 1033, 1035, 1037, 1038], "reflect": [12, 40, 46, 47, 80, 92, 96, 122, 171, 172, 200, 218, 270, 285, 348, 372, 375, 380, 390, 392, 400, 444, 450, 978, 981, 987, 989, 1015, 1023, 1031], "properti": [12, 25, 159, 160, 202, 217, 247, 283, 308, 356, 362, 365, 369, 376, 378, 393, 400, 401, 403, 405, 408, 410, 412, 413, 418, 436, 439, 445, 446, 447, 458, 459, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 584, 585, 587, 588, 591, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 626, 640, 646, 649, 654, 656, 668, 669, 693, 698, 699, 702, 790, 793, 794, 804, 821, 822, 852, 853, 866, 867, 868, 874, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 973, 976, 977, 978, 981, 982, 984, 987, 991, 994, 996, 997, 998, 1002, 1007, 1027, 1031, 1032, 1035, 1036], "impact": [12, 25, 36, 37, 68, 75, 112, 145, 167, 169, 170, 171, 202, 204, 218, 239, 255, 284, 308, 318, 342, 348, 358, 362, 363, 369, 388, 391, 401, 403, 408, 441, 443, 530, 534, 541, 584, 660, 661, 662, 666, 668, 670, 671, 672, 686, 785, 790, 793, 794, 804, 816, 833, 834, 835, 870, 882, 893, 894, 916, 930, 952, 955, 970, 980, 988, 996, 1029, 1032, 1035], "affinity_propag": [12, 44], "covariance_": [12, 34, 80, 82, 463, 464, 465, 466, 467, 468, 469, 470, 543, 544, 975, 1029], "n_label": [12, 92, 237, 390, 481, 517, 707, 714, 719, 732, 733, 747, 749, 783, 784, 810, 981, 1028, 1030], "lai": [12, 308, 338, 987], "canva": [12, 16], "manifold": [12, 39, 52, 67, 224, 225, 226, 227, 281, 313, 317, 318, 324, 365, 369, 390, 403, 408, 410, 496, 519, 524, 538, 543, 560, 842, 854, 863, 886, 916, 984, 1017, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1029], "dens": [12, 55, 167, 178, 219, 317, 318, 326, 362, 385, 390, 403, 408, 410, 412, 437, 440, 441, 443, 458, 461, 490, 517, 518, 528, 529, 538, 560, 579, 580, 601, 602, 623, 646, 651, 652, 653, 660, 662, 666, 667, 670, 671, 672, 681, 682, 683, 686, 687, 753, 754, 760, 772, 783, 850, 851, 858, 865, 866, 868, 870, 871, 872, 873, 882, 883, 884, 885, 886, 893, 894, 895, 896, 898, 899, 931, 952, 955, 971, 974, 977, 978, 981, 982, 984, 987, 991, 993, 994, 995, 996, 997, 1022, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "eigen_solv": [12, 44, 46, 66, 221, 222, 408, 446, 456, 529, 682, 683, 685, 687, 689, 978, 1023, 1032, 1035, 1036, 1037], "arpack": [12, 19, 44, 46, 66, 222, 408, 445, 446, 447, 456, 529, 535, 538, 682, 683, 685, 687, 689, 978, 1028, 1029, 1034, 1038], "don": [12, 54, 70, 123, 170, 222, 236, 237, 261, 281, 325, 331, 335, 347, 348, 362, 370, 376, 378, 380, 382, 384, 388, 389, 394, 404, 411, 640, 646, 821, 901, 902, 903, 904, 945, 970, 977, 980, 982, 985, 987, 995, 1004, 1016, 1026, 1031, 1038], "control": [12, 16, 61, 99, 100, 118, 138, 157, 159, 184, 201, 204, 208, 232, 233, 262, 264, 283, 314, 316, 338, 352, 354, 355, 362, 363, 369, 372, 376, 378, 381, 384, 388, 390, 393, 397, 402, 403, 406, 407, 408, 409, 412, 413, 428, 434, 443, 448, 465, 466, 472, 525, 530, 531, 532, 533, 534, 537, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 587, 588, 590, 608, 613, 619, 621, 626, 628, 633, 635, 636, 640, 641, 643, 644, 645, 646, 648, 649, 650, 666, 668, 670, 671, 676, 677, 681, 686, 695, 703, 788, 789, 790, 792, 793, 794, 795, 796, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 819, 820, 823, 824, 827, 850, 851, 872, 874, 885, 886, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 907, 947, 949, 968, 970, 977, 978, 980, 981, 982, 984, 987, 988, 991, 993, 995, 996, 997, 1001, 1002, 1003, 1014, 1018, 1022, 1024, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "neighbor": [12, 31, 39, 44, 47, 60, 130, 133, 140, 164, 165, 222, 223, 225, 229, 238, 239, 285, 286, 287, 288, 290, 291, 292, 294, 295, 315, 317, 318, 347, 365, 368, 373, 385, 390, 393, 403, 409, 410, 411, 414, 417, 427, 435, 438, 439, 442, 444, 446, 451, 452, 455, 457, 490, 496, 498, 557, 564, 596, 601, 602, 621, 622, 625, 682, 683, 684, 685, 686, 687, 690, 774, 790, 819, 853, 854, 873, 889, 897, 955, 982, 987, 1002, 1003, 1010, 1015, 1017, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029], "node": [12, 41, 122, 126, 184, 313, 319, 352, 356, 384, 385, 403, 405, 408, 410, 435, 436, 439, 457, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 644, 648, 650, 676, 677, 686, 833, 834, 901, 902, 903, 904, 905, 907, 935, 949, 984, 986, 987, 988, 997, 1025, 1026, 1027, 1028, 1029, 1031, 1034, 1035, 1036, 1037], "plane": [12, 149, 212, 234, 287, 333, 336, 338, 339, 344, 373, 446, 456, 975, 977, 996, 1014], "node_position_model": 12, "locallylinearembed": [12, 221, 222, 223, 317, 682, 684, 686, 978, 984, 1027, 1028, 1036, 1037, 1038], "n_neighbor": [12, 44, 62, 67, 133, 164, 221, 222, 223, 225, 229, 239, 281, 283, 284, 287, 288, 289, 290, 293, 308, 313, 315, 347, 410, 446, 596, 601, 602, 622, 682, 683, 685, 687, 690, 835, 836, 837, 839, 841, 842, 846, 888, 889, 971, 978, 984, 987, 994, 1029, 1036, 1038], "output": [12, 14, 16, 25, 27, 37, 53, 59, 98, 110, 112, 115, 121, 122, 132, 136, 140, 141, 152, 160, 164, 165, 167, 170, 196, 228, 236, 243, 244, 249, 255, 259, 261, 264, 268, 270, 271, 281, 304, 307, 309, 310, 313, 316, 317, 319, 348, 349, 351, 356, 357, 369, 370, 371, 373, 376, 378, 382, 384, 388, 389, 390, 401, 402, 403, 404, 406, 407, 410, 411, 412, 413, 419, 424, 427, 431, 435, 436, 437, 439, 440, 441, 443, 444, 446, 453, 454, 456, 457, 458, 459, 460, 461, 462, 476, 477, 478, 479, 482, 485, 486, 487, 488, 489, 490, 491, 497, 499, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 605, 621, 622, 623, 624, 625, 626, 627, 629, 632, 633, 634, 635, 636, 640, 641, 644, 646, 647, 648, 651, 652, 654, 655, 656, 657, 660, 661, 662, 665, 667, 668, 670, 672, 673, 675, 676, 677, 678, 682, 683, 684, 686, 688, 690, 693, 694, 707, 708, 715, 716, 717, 719, 721, 728, 735, 738, 739, 741, 743, 744, 745, 746, 747, 749, 754, 760, 765, 778, 781, 788, 789, 792, 793, 794, 795, 796, 802, 804, 805, 806, 807, 808, 809, 810, 814, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 836, 837, 838, 842, 843, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 881, 882, 885, 886, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 914, 916, 919, 930, 931, 937, 940, 948, 968, 970, 971, 973, 975, 977, 978, 981, 982, 983, 984, 985, 988, 991, 996, 1003, 1007, 1008, 1010, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "edg": [12, 26, 46, 66, 98, 122, 224, 268, 384, 390, 400, 403, 405, 447, 555, 556, 579, 580, 582, 583, 585, 788, 830, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 858, 906, 991, 994, 1005, 1028, 1030, 1033, 1036], "displai": [12, 25, 27, 34, 37, 46, 48, 60, 71, 81, 82, 85, 86, 89, 95, 118, 123, 128, 129, 132, 167, 170, 171, 185, 187, 218, 228, 229, 239, 244, 250, 258, 262, 263, 268, 275, 291, 309, 314, 315, 353, 362, 376, 379, 383, 385, 393, 404, 408, 411, 412, 432, 458, 461, 462, 490, 535, 558, 624, 625, 626, 652, 681, 691, 692, 694, 695, 696, 707, 712, 775, 782, 790, 796, 804, 812, 819, 853, 854, 866, 868, 873, 891, 898, 905, 906, 907, 921, 947, 968, 981, 985, 1001, 1018, 1031, 1033, 1034, 1036, 1037], "strength": [12, 132, 159, 200, 204, 262, 313, 362, 406, 410, 440, 561, 562, 637, 642, 643, 646, 652, 653, 663, 666, 667, 668, 669, 670, 672, 674, 681, 776, 850, 851, 893, 894, 898, 899, 970, 977, 984, 987, 995, 996], "plan": [12, 370, 374, 376, 377, 391, 991, 1025], "fair": [12, 410, 684, 688, 822, 982, 1005], "crucial": [12, 169, 204, 256, 362, 375, 376, 391, 403, 413, 996], "challeng": [12, 132, 152, 171, 179, 218, 229, 364, 371, 372, 403, 405, 456, 466, 981, 987, 1005, 1007], "overlap": [12, 37, 55, 90, 126, 148, 224, 248, 348, 374, 400, 403, 407, 410, 411, 581, 783, 784, 791, 795, 797, 798, 799, 800, 808, 978, 991, 1028], "heurist": [12, 14, 124, 239, 347, 363, 403, 412, 443, 446, 455, 456, 502, 503, 531, 533, 540, 670, 671, 672, 685, 689, 793, 794, 895, 896, 897, 898, 899, 918, 978, 979, 984, 995, 997, 1005, 1014, 1022, 1023, 1027, 1031, 1034, 1035], "direct": [12, 85, 86, 95, 97, 101, 104, 149, 206, 246, 252, 258, 290, 300, 308, 334, 339, 374, 376, 377, 380, 384, 391, 393, 403, 406, 408, 411, 412, 446, 456, 465, 466, 472, 528, 535, 543, 582, 583, 585, 596, 635, 682, 842, 975, 976, 977, 982, 984, 986, 1002, 1015, 1022, 1025], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 58, 61, 82, 89, 95, 98, 156, 165, 191, 212, 216, 238, 285, 287, 290, 291, 295, 300, 333, 334, 339, 340, 344, 365, 368, 373, 385, 390, 403, 409, 410, 414, 417, 427, 438, 440, 442, 444, 446, 451, 455, 456, 490, 496, 498, 601, 602, 621, 622, 624, 625, 629, 682, 683, 685, 686, 690, 783, 784, 790, 819, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 853, 854, 858, 873, 955, 978, 987, 996, 1002, 1003, 1010, 1018, 1022, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1034], "along": [12, 13, 56, 59, 66, 86, 119, 125, 187, 200, 234, 236, 265, 313, 348, 349, 358, 376, 380, 382, 384, 385, 390, 393, 394, 397, 400, 408, 410, 411, 412, 415, 527, 544, 581, 605, 606, 624, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 670, 672, 675, 676, 677, 678, 679, 680, 772, 773, 783, 790, 804, 862, 863, 866, 867, 870, 871, 872, 873, 878, 879, 880, 882, 883, 884, 909, 932, 956, 962, 970, 977, 984, 991, 994, 1005, 1022, 1027, 1028, 1030, 1034, 1035], "linecollect": [12, 224, 232, 626], "facecolor": [12, 16, 26, 34, 45, 60, 95, 102, 114, 141, 160, 221, 237, 261, 288, 305, 332, 335, 338, 339, 341], "partial_correl": 12, "precision_": [12, 82, 463, 464, 465, 466, 467, 468, 469, 470], "sqrt": [12, 80, 81, 82, 98, 101, 105, 116, 138, 173, 179, 181, 224, 226, 241, 246, 247, 248, 251, 252, 261, 339, 342, 403, 410, 411, 413, 457, 463, 464, 465, 466, 467, 468, 469, 470, 532, 534, 541, 551, 552, 553, 554, 558, 559, 613, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 693, 724, 756, 757, 762, 873, 886, 901, 902, 903, 904, 973, 977, 978, 981, 983, 993, 1036], "diag": [12, 82, 160, 248, 251, 408, 413, 526, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 788, 789, 977, 1037], "newaxi": [12, 13, 19, 24, 42, 82, 105, 113, 153, 181, 190, 196, 201, 202, 203, 205, 206, 217, 232, 234, 275, 286, 293, 354, 355, 400, 530, 977], "ab": [12, 17, 40, 75, 99, 106, 114, 122, 132, 145, 149, 173, 187, 191, 211, 213, 216, 218, 224, 261, 303, 332, 344, 403, 532, 534, 541, 621, 739, 833, 834, 868, 981], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 60, 61, 102], "start_idx": [12, 224], "end_idx": [12, 224], "sequenc": [12, 112, 121, 188, 224, 378, 390, 404, 407, 408, 410, 411, 497, 506, 555, 556, 563, 564, 575, 576, 582, 583, 585, 640, 790, 793, 801, 819, 877, 933, 934, 944, 952, 955, 1001, 1022, 1025, 1027, 1028], "line0": [12, 224], "linen": [12, 224], "x0": [12, 34, 192, 209, 224, 303, 331, 390, 424, 458, 561, 562, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 856, 857, 858, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874], "y0": [12, 224], "y1": [12, 91, 114, 224, 503, 710, 982, 983], "xm": [12, 224], "ym": [12, 224], "segment": [12, 36, 47, 68, 167, 224, 232, 371, 384, 403, 411, 446, 456, 502, 503, 685, 849, 981, 1001, 1005, 1030, 1032, 1034], "stop": [12, 17, 44, 62, 110, 118, 136, 157, 159, 167, 171, 178, 202, 219, 314, 376, 378, 384, 385, 390, 403, 408, 410, 412, 434, 435, 437, 439, 441, 443, 446, 448, 456, 457, 465, 466, 472, 476, 477, 478, 490, 498, 502, 503, 509, 514, 526, 530, 531, 532, 533, 534, 537, 539, 540, 541, 547, 548, 551, 552, 553, 554, 555, 556, 558, 559, 565, 582, 583, 585, 596, 611, 621, 638, 639, 640, 642, 643, 646, 650, 652, 653, 660, 661, 662, 663, 665, 670, 671, 672, 674, 685, 686, 689, 708, 788, 789, 819, 850, 851, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 935, 955, 970, 977, 985, 986, 996, 997, 1002, 1003, 1005, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038], "lc": [12, 224, 232], "zorder": [12, 34, 58, 97, 129, 141, 153, 161, 190, 198, 222, 224, 232, 235, 246, 314, 339], "hot_r": [12, 303], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 155, 158, 179, 184, 186, 191, 224, 246, 247, 248, 250, 252, 258, 262, 286, 303, 334, 348, 382, 385, 390, 403, 411, 412, 436, 437, 441, 453, 454, 458, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 483, 525, 528, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 583, 584, 585, 591, 637, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 666, 668, 670, 672, 675, 678, 679, 680, 684, 686, 687, 688, 763, 830, 865, 880, 893, 895, 898, 963, 964, 974, 977, 979, 981, 991, 995, 1025, 1027, 1029, 1033], "set_arrai": [12, 224, 232], "set_linewidth": [12, 224, 232], "add_collect": [12, 224, 232], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 58, 71, 72, 112, 117, 119, 123, 146, 149, 157, 164, 169, 170, 171, 172, 173, 200, 204, 218, 240, 243, 247, 248, 252, 256, 259, 260, 261, 262, 264, 272, 273, 281, 303, 308, 309, 310, 317, 322, 323, 348, 349, 371, 373, 374, 376, 378, 380, 385, 388, 390, 400, 404, 407, 408, 410, 411, 418, 437, 441, 442, 443, 444, 445, 447, 448, 451, 453, 454, 458, 461, 497, 503, 551, 552, 553, 554, 558, 559, 560, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 611, 626, 627, 634, 691, 698, 699, 706, 710, 712, 724, 731, 750, 772, 773, 779, 781, 785, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 819, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 866, 901, 902, 903, 904, 934, 952, 955, 960, 961, 981, 983, 984, 985, 995, 997, 1001, 1014, 1016, 1022, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "dx": [12, 13, 520, 693], "dy": [12, 693], "this_dx": 12, "argmin": [12, 124, 260, 378, 405, 525, 531, 539, 540, 679, 772, 773, 997], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 62, 102, 229, 246, 297, 305], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 56, 60, 67, 91, 92, 102, 114, 121, 128, 130, 131, 133, 134, 141, 144, 153, 154, 156, 160, 171, 183, 192, 202, 209, 212, 213, 214, 233, 234, 235, 237, 239, 246, 249, 261, 264, 275, 284, 287, 288, 289, 292, 297, 305, 306, 308, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 344, 353, 354, 355, 625], "ptp": 12, "03": [12, 22, 35, 52, 80, 83, 95, 107, 136, 149, 157, 170, 174, 181, 218, 219, 233, 244, 246, 252, 262, 277, 295, 301, 323, 328, 345, 348, 350, 373, 411, 741, 790, 977, 981], "668": [12, 15], "plot_stock_market": [12, 15], "parallel": [13, 110, 116, 118, 121, 136, 167, 171, 202, 262, 314, 315, 317, 339, 356, 361, 368, 376, 377, 379, 380, 388, 390, 404, 412, 414, 415, 431, 438, 440, 442, 443, 444, 446, 451, 452, 455, 458, 461, 466, 489, 525, 527, 528, 529, 531, 533, 535, 536, 537, 539, 540, 542, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 583, 588, 596, 604, 626, 628, 633, 652, 682, 683, 684, 685, 686, 687, 688, 767, 771, 774, 790, 793, 794, 796, 801, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 852, 855, 888, 889, 949, 951, 1002, 1011, 1016, 1018, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1037, 1038], "acquir": [13, 120, 263, 1034], "angl": [13, 34, 98, 149, 246, 247, 248, 251, 252, 373, 408, 525, 531, 533, 536, 537, 539, 540, 542, 644, 645, 646, 647, 648, 649, 650, 657, 658, 659, 672, 676, 677, 678, 679, 680, 686, 978, 979, 1003, 1018, 1022], "Such": [13, 128, 152, 157, 169, 179, 184, 189, 201, 264, 347, 390, 391, 407, 408, 410, 549, 550, 650, 971, 981, 984, 991, 997, 1014, 1032, 1037], "ct": [13, 160, 243, 404, 458, 460, 461], "cellular": 13, "materi": [13, 391, 575, 883, 884, 1000], "haar": 13, "wavelet": [13, 105, 408], "sparsiti": [13, 82, 167, 178, 184, 193, 215, 216, 219, 235, 348, 362, 390, 405, 408, 410, 412, 495, 496, 521, 525, 531, 532, 533, 534, 537, 539, 540, 541, 640, 646, 651, 652, 670, 672, 715, 716, 717, 862, 868, 873, 878, 974, 977, 984, 991, 1010, 1015, 1024], "oper": [13, 19, 149, 160, 167, 235, 254, 258, 268, 277, 349, 362, 363, 373, 374, 376, 379, 382, 388, 390, 391, 393, 397, 399, 407, 408, 410, 411, 412, 416, 442, 455, 462, 469, 476, 477, 478, 479, 498, 527, 528, 535, 545, 546, 560, 566, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 610, 615, 618, 624, 629, 637, 652, 683, 687, 696, 700, 701, 702, 720, 767, 774, 775, 781, 782, 809, 819, 822, 833, 834, 856, 860, 865, 876, 877, 891, 898, 901, 932, 949, 954, 977, 984, 991, 996, 1001, 1005, 1014, 1026, 1028, 1029, 1030, 1032, 1033, 1038], "fidel": 13, "penal": [13, 30, 82, 132, 184, 189, 193, 200, 204, 216, 218, 308, 342, 403, 405, 408, 412, 463, 464, 465, 466, 467, 468, 469, 470, 472, 641, 646, 647, 655, 657, 670, 699, 709, 727, 779, 786, 866, 893, 894, 900, 977, 981, 983, 985, 995, 996, 1014], "account": [13, 55, 97, 104, 112, 157, 164, 170, 218, 236, 261, 284, 290, 342, 344, 348, 362, 372, 376, 390, 391, 397, 403, 406, 407, 408, 410, 411, 457, 561, 562, 621, 622, 624, 626, 627, 643, 667, 673, 698, 701, 721, 722, 723, 731, 736, 749, 776, 777, 780, 781, 791, 795, 808, 867, 973, 975, 979, 981, 982, 983, 984, 991, 995, 997, 1027, 1029, 1030, 1031, 1034, 1035, 1037], "call": [13, 17, 46, 48, 50, 54, 71, 92, 109, 117, 124, 146, 152, 156, 158, 160, 169, 171, 188, 200, 201, 204, 218, 236, 240, 242, 243, 261, 262, 270, 275, 276, 281, 283, 308, 310, 315, 316, 347, 348, 349, 356, 362, 363, 364, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 394, 401, 403, 404, 405, 406, 407, 408, 410, 411, 413, 415, 426, 434, 437, 440, 441, 443, 444, 445, 446, 447, 448, 451, 454, 456, 458, 459, 462, 463, 468, 476, 477, 478, 482, 485, 486, 489, 491, 497, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 571, 576, 577, 579, 580, 582, 583, 585, 591, 596, 601, 602, 604, 605, 608, 611, 614, 621, 622, 623, 624, 625, 626, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 698, 725, 735, 748, 764, 767, 771, 772, 773, 774, 784, 788, 789, 790, 792, 793, 794, 795, 796, 802, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 842, 844, 849, 850, 851, 852, 853, 856, 857, 858, 860, 862, 863, 865, 870, 873, 874, 877, 882, 883, 884, 885, 886, 890, 893, 894, 895, 896, 898, 899, 902, 904, 920, 924, 929, 930, 941, 947, 948, 949, 952, 955, 965, 970, 971, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 989, 991, 993, 994, 996, 997, 1001, 1005, 1007, 1011, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 56, 57, 61, 62, 66, 68, 79, 85, 95, 97, 111, 112, 113, 114, 118, 167, 176, 187, 189, 203, 216, 223, 225, 228, 232, 239, 244, 247, 248, 249, 252, 258, 261, 270, 281, 287, 288, 290, 294, 303, 305, 308, 313, 314, 315, 318, 333, 347, 348, 358, 362, 364, 369, 370, 371, 372, 373, 376, 377, 378, 379, 384, 385, 389, 390, 392, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 413, 414, 415, 416, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 463, 468, 469, 472, 476, 477, 478, 482, 497, 505, 506, 507, 508, 509, 516, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 547, 548, 549, 550, 553, 554, 557, 585, 597, 598, 604, 605, 629, 631, 633, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 698, 699, 702, 711, 713, 728, 730, 736, 767, 771, 772, 784, 786, 788, 789, 821, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 849, 854, 858, 860, 873, 877, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 913, 929, 930, 932, 946, 950, 956, 971, 973, 976, 978, 979, 980, 981, 983, 986, 987, 991, 994, 995, 996, 1000, 1001, 1002, 1003, 1005, 1007, 1010, 1011, 1013, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "computation": [13, 78, 95, 118, 124, 132, 152, 281, 338, 347, 361, 377, 402, 403, 404, 407, 408, 410, 413, 532, 626, 627, 665, 756, 790, 792, 793, 794, 804, 816, 977, 978, 980, 988, 989, 993, 1015, 1018, 1026], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 68, 79, 94, 96, 97, 107, 112, 118, 125, 130, 135, 143, 150, 151, 162, 167, 172, 182, 184, 186, 188, 191, 198, 204, 215, 220, 223, 227, 228, 232, 244, 248, 254, 256, 258, 277, 279, 297, 305, 307, 308, 313, 315, 327, 331, 346, 348, 350, 358, 371, 373, 390, 401, 405, 406, 408, 412, 413, 431, 432, 437, 440, 441, 443, 482, 498, 506, 508, 509, 516, 519, 535, 543, 544, 547, 558, 559, 575, 576, 582, 583, 584, 585, 600, 602, 604, 605, 609, 616, 619, 625, 633, 637, 652, 666, 682, 683, 684, 685, 686, 698, 731, 736, 772, 781, 790, 791, 792, 793, 795, 796, 804, 806, 807, 808, 809, 810, 811, 819, 828, 831, 835, 850, 854, 866, 867, 871, 873, 874, 878, 879, 880, 881, 882, 883, 884, 893, 895, 896, 898, 899, 901, 970, 975, 978, 981, 983, 984, 987, 996, 1019], "l2": [13, 30, 40, 82, 85, 167, 178, 184, 185, 191, 200, 211, 215, 216, 218, 219, 262, 281, 303, 326, 347, 348, 378, 385, 388, 403, 405, 408, 411, 435, 439, 444, 451, 518, 532, 534, 541, 552, 555, 556, 559, 583, 584, 585, 637, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 666, 670, 672, 674, 675, 680, 681, 682, 728, 743, 754, 755, 771, 772, 773, 804, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 850, 851, 865, 873, 880, 893, 894, 898, 899, 900, 902, 904, 964, 970, 974, 977, 979, 984, 985, 991, 995, 997, 1014, 1016, 1024, 1026, 1027, 1029, 1031], "produc": [13, 25, 26, 44, 57, 70, 98, 125, 126, 127, 128, 184, 267, 300, 325, 358, 371, 372, 376, 378, 381, 390, 391, 403, 404, 407, 408, 410, 434, 437, 440, 446, 513, 530, 553, 557, 575, 582, 587, 588, 626, 627, 792, 793, 794, 802, 807, 810, 814, 858, 868, 895, 898, 972, 973, 977, 979, 980, 981, 984, 987, 988, 992, 994, 995, 996, 1007, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 55, 60, 62, 66, 73, 80, 94, 95, 100, 107, 112, 114, 117, 120, 130, 149, 165, 167, 171, 172, 176, 178, 201, 219, 222, 237, 248, 261, 264, 270, 271, 303, 305, 308, 315, 325, 329, 334, 338, 339, 345, 347, 358, 362, 372, 373, 378, 381, 384, 388, 390, 401, 403, 404, 405, 408, 410, 411, 413, 458, 506, 513, 527, 532, 534, 535, 541, 543, 575, 582, 583, 585, 604, 625, 632, 640, 641, 667, 670, 671, 684, 688, 718, 725, 738, 739, 741, 746, 783, 809, 825, 826, 852, 853, 895, 897, 898, 903, 904, 970, 971, 973, 975, 977, 978, 980, 987, 988, 991, 995, 996, 1012, 1014, 1015, 1022, 1025, 1027, 1028, 1032, 1034, 1035, 1038], "central": [13, 202, 403, 987, 1001], "emmanuel": [13, 66, 1022, 1029, 1030, 1031], "gouillart": [13, 66, 1022], "nsup": 13, "ndimag": [13, 46, 47, 54, 300, 1015], "_weight": [13, 218], "orig": [13, 288], "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 60, 62, 66, 81, 102, 122, 124, 141, 169, 190, 191, 218, 224, 235, 239, 272, 281, 310, 411, 971, 977, 1029], "hstack": [13, 33, 34, 42, 134, 145, 226, 238, 256, 337, 407, 852], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 141], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 304, 337, 629], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 124, 134, 348, 833, 834], "mask": [13, 42, 66, 120, 200, 208, 239, 259, 260, 326, 385, 390, 404, 410, 463, 468, 555, 556, 575, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 623, 624, 626, 627, 643, 665, 790, 793, 794, 804, 953, 971, 988, 1022, 1025, 1027, 1028, 1030, 1032], "logical_and": [13, 125], "proj_oper": 13, "coo_matrix": [13, 186, 446, 579, 580, 952, 955], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 58, 62, 103, 115, 129, 131, 144, 179, 184, 223, 224, 229, 235, 236, 275, 293, 314, 315, 326, 327, 341, 348, 354, 355, 385, 394, 538, 698, 699, 709, 750, 774, 779, 885, 886, 888, 889, 890, 993, 1007, 1022, 1033, 1034], "gaussian_filt": [13, 46, 47, 54, 1015], "sigma": [13, 46, 47, 54, 80, 103, 125, 259, 261, 400, 405, 408, 410, 608, 643, 975, 977, 979, 983, 986, 1015], "logical_xor": [13, 156, 340], "binary_eros": 13, "128": [13, 14, 104, 107, 145, 150, 200, 362, 530], "proj": [13, 643], "randn": [13, 33, 34, 39, 54, 65, 66, 80, 81, 98, 103, 128, 144, 152, 156, 169, 172, 189, 194, 195, 199, 213, 214, 217, 247, 250, 251, 256, 268, 270, 271, 275, 287, 288, 310, 314, 315, 333, 339, 340, 344, 378, 381, 637, 664, 666, 672, 811, 896, 899], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 58, 71, 74, 78, 82, 87, 103, 118, 121, 122, 124, 125, 137, 142, 143, 147, 149, 150, 170, 171, 178, 184, 188, 200, 202, 218, 219, 248, 249, 251, 254, 258, 261, 262, 263, 265, 267, 270, 275, 277, 285, 300, 302, 304, 309, 311, 313, 315, 325, 334, 342, 365, 371, 376, 378, 385, 388, 389, 390, 394, 397, 398, 401, 404, 405, 408, 410, 411, 412, 413, 431, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 487, 495, 496, 498, 509, 535, 561, 562, 569, 587, 588, 591, 596, 600, 603, 636, 637, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 695, 696, 700, 707, 721, 734, 778, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 827, 853, 854, 858, 873, 874, 891, 893, 895, 898, 936, 980, 981, 984, 985, 989, 991, 996, 997, 1001, 1002, 1003, 1005, 1007, 1010, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "lassocv": [13, 132, 138, 170, 184, 189, 410, 412, 645, 646, 648, 649, 650, 657, 678, 977, 1011, 1022, 1025, 1029, 1032, 1033, 1035, 1036], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 58, 82, 89, 95, 98, 156, 159, 167, 178, 191, 216, 219, 232, 238, 270, 285, 293, 300, 323, 334, 340, 413, 629, 639, 647, 657, 666, 678, 694, 701, 836, 844, 854, 868, 872, 972, 977, 981, 991, 1029, 1034], "133": [13, 56], "wspace": [13, 14, 39, 44, 45, 62, 80, 95, 114, 200, 218, 229, 246, 248, 249, 252, 286, 294, 323, 331], "923": [13, 14, 15], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 72, 382, 402, 411, 529, 532, 538, 541, 1017, 1018, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "latentdirichletalloc": [14, 364, 381, 408, 1001, 1027, 1029, 1036, 1037], "corpu": [14, 348, 349, 371, 408, 582, 583, 584, 585, 1016, 1023], "frobeniu": [14, 98, 437, 441, 453, 463, 464, 465, 466, 467, 468, 469, 470, 525, 531, 532, 534, 539, 540, 541, 977, 1029], "kullback": [14, 221, 408, 532, 534, 541, 686, 978, 1029], "leibler": [14, 221, 408, 532, 534, 541, 686, 978, 1029], "diverg": [14, 124, 221, 226, 286, 532, 534, 541, 686, 849, 978, 980, 981, 986, 988, 1029, 1030, 1035], "probabilist": [14, 27, 30, 82, 94, 107, 151, 152, 155, 159, 162, 167, 347, 390, 401, 409, 410, 431, 467, 470, 526, 528, 529, 535, 553, 582, 583, 604, 616, 637, 639, 670, 697, 734, 790, 815, 860, 895, 896, 898, 899, 974, 975, 977, 980, 981, 986, 991, 996, 997, 1001, 1005, 1022, 1025, 1029], "semant": [14, 347, 348, 390, 538, 1016, 1017, 1018, 1024], "runnabl": [14, 380, 381], "coupl": [14, 52, 53, 55, 222, 370, 371, 400, 401, 403, 412, 583, 899, 970, 996], "ten": [14, 19, 112, 118, 149, 222, 252, 371, 373, 410, 514, 898, 1031], "polynomi": [14, 164, 167, 175, 177, 178, 200, 206, 219, 241, 261, 275, 315, 316, 331, 341, 368, 372, 446, 485, 614, 633, 634, 635, 637, 666, 758, 767, 768, 819, 854, 863, 865, 868, 872, 893, 895, 896, 897, 898, 899, 976, 996, 1003, 1018, 1034, 1035], "lda": [14, 33, 34, 94, 107, 167, 290, 358, 373, 399, 498, 530, 535, 543, 544, 842, 1001, 1003, 1017, 1018, 1027], "proport": [14, 26, 40, 148, 186, 200, 207, 213, 229, 239, 264, 284, 288, 291, 342, 344, 362, 371, 401, 403, 405, 407, 408, 410, 411, 432, 433, 440, 463, 468, 509, 543, 544, 549, 551, 553, 554, 555, 556, 557, 558, 577, 578, 582, 585, 621, 626, 652, 653, 660, 661, 662, 668, 669, 670, 672, 690, 695, 706, 791, 792, 793, 794, 807, 810, 819, 839, 850, 851, 867, 893, 894, 895, 898, 899, 901, 903, 905, 907, 919, 970, 980, 981, 984, 987, 995, 996, 997, 1027], "753": [14, 38], "tf": [14, 19, 233, 347, 348, 349, 371, 408, 515, 538, 582, 583, 584, 585, 832, 840, 865, 970, 979, 983, 991, 1001, 1016], "idf": [14, 19, 233, 347, 348, 349, 371, 408, 515, 538, 582, 583, 584, 585, 832, 840, 865, 970, 979, 983, 991, 1016, 1022], "159": [14, 53, 307, 311, 371, 1022], "156": [14, 149, 155, 162, 170, 373], "2000": [14, 26, 40, 50, 75, 96, 103, 123, 176, 249, 252, 261, 297, 317, 348, 371, 373, 403, 404, 410, 415, 446, 456, 527, 528, 553, 683, 685, 687, 736, 781, 788, 839, 869, 881, 978, 981, 987, 993, 1007, 1015], "067": [14, 161], "minibatchnmf": [14, 364, 408, 1036, 1038], "batch_siz": [14, 19, 42, 64, 95, 98, 99, 348, 408, 443, 528, 530, 531, 532, 533, 540, 849, 850, 851, 933, 934, 947, 1023, 1030, 1033, 1035, 1036], "072": [14, 58, 431, 642], "186": [14, 200, 300, 326, 382, 781, 981], "893": 14, "ensta": [14, 17, 37, 48, 61, 200, 218, 222, 262, 264, 347, 348, 349], "chyi": [14, 1025, 1026, 1027, 1028, 1029], "kwei": [14, 1025, 1026, 1027, 1028, 1029], "yau": [14, 1025, 1026, 1027, 1028, 1029], "chyikwei": 14, "fetch_20newsgroup": [14, 19, 70, 262, 326, 347, 348, 349, 371, 483, 1016, 1027, 1032], "countvector": [14, 326, 349, 371, 381, 404, 408, 411, 483, 530, 576, 583, 584, 585, 1016, 1022, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035], "tfidfvector": [14, 19, 70, 262, 347, 371, 408, 411, 483, 582, 583, 584, 1016, 1022, 1024, 1030, 1031, 1032, 1035, 1036], "n_top_word": 14, "init": [14, 42, 45, 58, 59, 61, 64, 171, 180, 221, 222, 224, 225, 226, 247, 249, 281, 348, 379, 384, 403, 408, 410, 437, 441, 443, 445, 447, 453, 454, 532, 534, 541, 542, 553, 554, 626, 627, 684, 686, 688, 842, 978, 1022, 1031, 1034, 1036, 1037, 1038], "nndsvda": [14, 408, 532, 534, 541, 1031, 1034], "plot_top_word": 14, "feature_nam": [14, 19, 90, 106, 119, 126, 129, 149, 170, 172, 209, 240, 284, 303, 313, 314, 315, 331, 347, 353, 369, 371, 381, 404, 484, 485, 486, 490, 494, 495, 496, 498, 499, 504, 576, 625, 626, 627, 905, 906, 907, 989, 997, 1038], "flatten": [14, 32, 224, 234, 259, 307, 331, 343, 382, 496, 563, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 842], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 124, 126, 172, 173, 200, 218, 313, 322, 323, 347, 348, 371, 989], "top_featur": 14, "barh": [14, 126, 164, 165, 169, 170, 172, 173, 243, 310, 347, 348, 349], "fontdict": [14, 39], "labels": [14, 307], "set_vis": [14, 285, 291, 303], "filter": [14, 46, 47, 206, 218, 259, 261, 283, 347, 371, 378, 382, 385, 402, 403, 411, 442, 482, 483, 497, 582, 585, 589, 590, 591, 592, 767, 828, 922, 946, 983, 984, 1013, 1016, 1032], "useless": [14, 121, 264, 382, 412, 509, 522, 652, 706, 977, 991, 1031], "earli": [14, 44, 62, 110, 118, 121, 136, 167, 178, 219, 314, 390, 410, 435, 439, 443, 457, 490, 498, 509, 514, 530, 531, 532, 533, 540, 547, 548, 553, 554, 555, 556, 565, 621, 639, 650, 660, 661, 662, 670, 672, 686, 819, 850, 851, 955, 978, 984, 991, 1000, 1002, 1005, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037], "strip": [14, 218, 348, 362, 370, 371, 490], "header": [14, 70, 262, 347, 348, 371, 374, 411, 482, 483, 790, 793, 794, 804], "footer": [14, 70, 262, 347, 348, 371, 482, 483], "repli": [14, 347, 375, 376, 379], "common": [14, 17, 19, 98, 146, 149, 167, 168, 174, 256, 268, 315, 338, 347, 349, 356, 362, 365, 370, 376, 378, 384, 386, 388, 389, 392, 394, 400, 401, 402, 403, 404, 407, 409, 412, 413, 459, 461, 490, 584, 626, 647, 666, 667, 695, 739, 746, 762, 791, 792, 795, 805, 807, 808, 809, 810, 811, 816, 819, 854, 856, 864, 865, 866, 871, 873, 878, 879, 881, 882, 883, 884, 932, 970, 971, 977, 984, 987, 991, 996, 997, 1001, 1002, 1005, 1007, 1018, 1022, 1030, 1032, 1033, 1037], "english": [14, 19, 70, 347, 348, 349, 381, 411, 582, 583, 585, 1001, 1002, 1016, 1035], "occur": [14, 70, 200, 204, 218, 342, 358, 376, 378, 384, 391, 400, 403, 405, 407, 411, 438, 502, 503, 566, 575, 582, 584, 585, 621, 665, 789, 790, 793, 794, 796, 804, 812, 815, 816, 817, 820, 863, 918, 981, 983, 991, 1016, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 262, 326, 347, 348, 582, 585, 1033], "min_df": [14, 19, 70, 262, 326, 347, 348, 411, 582, 585, 1022, 1024, 1033], "max_featur": [14, 31, 116, 127, 238, 258, 273, 315, 410, 412, 549, 550, 551, 552, 553, 554, 557, 558, 559, 582, 585, 591, 901, 902, 903, 904, 970, 977, 1022, 1024, 1025, 1029, 1030, 1033, 1036], "stop_word": [14, 19, 347, 348, 411, 582, 583, 585], "tfidf": [14, 70, 326, 411, 585, 1016], "tf_vector": 14, "beta_loss": [14, 532, 534, 541, 1029], "alpha_w": [14, 408, 532, 534, 541, 1035], "00005": 14, "alpha_h": [14, 408, 532, 534, 541, 1035], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 170, 172, 316, 347, 348, 349, 371, 378, 390, 404, 411, 419, 424, 427, 436, 437, 439, 441, 443, 458, 461, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 560, 561, 562, 563, 564, 575, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 682, 683, 686, 837, 842, 845, 849, 852, 853, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 991, 1035, 1036, 1037, 1038], "solver": [14, 30, 33, 34, 46, 66, 167, 178, 189, 191, 192, 193, 200, 202, 215, 216, 218, 219, 297, 298, 299, 300, 310, 347, 382, 388, 390, 393, 399, 403, 415, 446, 456, 465, 466, 472, 496, 527, 529, 534, 535, 538, 541, 543, 640, 641, 642, 646, 647, 652, 653, 654, 655, 656, 657, 660, 662, 663, 664, 666, 668, 670, 674, 675, 678, 681, 682, 683, 685, 687, 689, 781, 804, 819, 824, 827, 850, 851, 895, 896, 897, 898, 899, 975, 978, 981, 985, 995, 996, 1001, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "mu": [14, 80, 81, 261, 408, 416, 467, 469, 470, 473, 474, 475, 534, 541, 975, 977, 1029, 1032], "mbnmf": 14, "learning_method": [14, 381, 530], "learning_offset": [14, 530], "tf_feature_nam": 14, "165": [14, 15, 982], "plot_topics_extraction_with_nmf_lda": [14, 15], "09": [15, 68, 97, 98, 105, 170, 226, 233, 237, 274, 277, 348, 403, 728, 831, 981, 991, 995], "00": [15, 22, 28, 32, 35, 68, 76, 80, 83, 87, 93, 98, 107, 136, 142, 150, 157, 162, 166, 170, 171, 174, 177, 191, 218, 219, 227, 233, 244, 253, 259, 262, 277, 280, 295, 301, 311, 320, 322, 323, 328, 345, 348, 350, 357, 370, 373, 382, 403, 410, 411, 707, 709, 781, 790, 804, 817, 902, 977, 981, 991, 993, 995, 1015], "732": [15, 166, 202], "execut": [15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 136, 142, 150, 162, 164, 166, 174, 177, 184, 189, 219, 227, 235, 244, 253, 266, 277, 280, 295, 301, 311, 320, 328, 345, 350, 357, 363, 376, 382, 397, 399, 403, 408, 414, 437, 455, 790, 796, 804, 812, 814, 815, 816, 817, 820, 838, 947, 948, 991, 994, 1008, 1016, 1024, 1027, 1030], "auto_examples_appl": 15, "06": [15, 68, 107, 136, 161, 170, 191, 199, 200, 253, 261, 262, 277, 300, 305, 341, 348, 350, 382, 476, 477, 478, 638, 639, 683, 687, 788, 789, 790, 804, 902, 977, 991, 993], "real": [15, 31, 55, 57, 70, 74, 78, 80, 110, 112, 136, 155, 170, 204, 225, 239, 255, 267, 275, 285, 304, 305, 338, 349, 362, 365, 369, 370, 373, 380, 382, 385, 388, 389, 390, 400, 401, 403, 405, 407, 408, 410, 411, 463, 483, 484, 487, 488, 489, 490, 491, 494, 495, 498, 504, 514, 545, 546, 547, 549, 550, 551, 552, 553, 554, 558, 559, 586, 588, 589, 590, 591, 592, 593, 594, 693, 698, 717, 721, 745, 748, 750, 778, 786, 787, 818, 819, 850, 851, 895, 896, 897, 898, 899, 901, 902, 904, 971, 972, 973, 978, 981, 983, 985, 986, 987, 997, 1000, 1018, 1022, 1035], "svm_gui": [15, 16, 1014], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 81, 171, 326, 347, 348, 349, 371, 382, 402, 403, 405, 408, 783, 784, 788, 823, 905, 981, 982, 988, 1001, 1016], "frontend": [16, 382], "mainli": [16, 27, 53, 112, 115, 152, 270, 362, 378, 401, 605, 983, 988], "intend": [16, 57, 58, 99, 201, 338, 347, 376, 377, 378, 383, 388, 407, 462, 576, 667, 693, 862, 863, 873, 891, 976, 977, 981, 985, 992], "didact": [16, 376, 1002], "region": [16, 25, 36, 47, 49, 53, 56, 66, 68, 133, 159, 167, 170, 200, 218, 229, 233, 234, 252, 306, 334, 342, 373, 383, 390, 403, 410, 413, 442, 444, 450, 456, 581, 978, 981, 984, 987, 991, 995, 997, 1015], "induc": [16, 26, 56, 170, 184, 191, 193, 198, 201, 215, 235, 239, 342, 349, 400, 402, 408, 410, 440, 443, 533, 537, 547, 551, 552, 553, 554, 558, 559, 560, 637, 719, 749, 866, 901, 902, 903, 904, 974, 981, 995, 1014], "mous": [16, 370], "button": [16, 376, 384, 1014], "prettenho": 16, "tkagg": 16, "backend": [16, 363, 390, 462, 891, 947, 949, 951, 981, 1025, 1030, 1031, 1032, 1033], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "tkinter": 16, "tk": 16, "contourset": 16, "dump_svmlight_fil": [16, 1022, 1023, 1027, 1037], "y_min": [16, 31, 34, 58, 114, 121, 130, 141, 154, 234, 297, 305, 327, 338, 339, 629, 631], "y_max": [16, 31, 34, 58, 114, 121, 130, 141, 154, 218, 234, 297, 305, 327, 338, 339, 629, 631], "x_min": [16, 31, 34, 52, 58, 114, 121, 125, 130, 141, 154, 189, 234, 297, 305, 327, 338, 339], "x_max": [16, 31, 34, 52, 58, 114, 121, 130, 141, 154, 234, 297, 305, 327, 338, 339], "notifi": [16, 566, 567, 568, 1004, 1020, 1032], "regist": [16, 34, 184, 347, 382, 949, 951], "surfac": [16, 110, 136, 167, 192, 209, 330, 331, 351, 357, 410, 498, 547, 551, 558, 625, 757, 901, 907, 975, 980, 995, 996, 997], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 176, 338, 341, 446, 529, 633, 634, 637, 768, 770, 895, 896, 897, 898, 899, 979, 996], "kernel_map": 16, "hasattr": [16, 44, 56, 62, 82, 109, 121, 218, 233, 297, 305, 347, 390, 942, 1032], "decision_surfac": 16, "delta": [16, 406, 446], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 119, 138, 167, 254, 260, 262, 265, 277, 390, 407, 413, 496, 561, 621, 653, 659, 707, 790, 793, 794, 804, 819, 898, 970, 977, 981, 1029, 1030, 1031], "docstr": [16, 376, 378, 382, 390, 442, 455, 466, 693, 695, 920, 970, 981, 984, 985, 995, 1022, 1029, 1030, 1035, 1036], "set_xlim": [16, 31, 42, 60, 75, 80, 92, 117, 130, 165, 171, 198, 200, 205, 234, 246, 265, 267, 268, 286, 297, 303, 305, 306, 307, 308, 314, 343], "attributeerror": [16, 404, 553, 571, 942, 1015, 1031, 1032, 1034, 1038], "get_tk_widget": 16, "pack": [16, 385, 1030], "fill": [16, 34, 121, 138, 172, 256, 286, 353, 390, 404, 408, 509, 521, 532, 534, 541, 581, 624, 905, 907, 971, 984, 997], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 66, 101, 105, 115, 125, 153, 184, 210, 286, 291, 294, 314, 315, 319, 338, 401, 403, 404, 409, 415, 446, 459, 515, 527, 530, 609, 610, 616, 635, 752, 759, 769, 850, 851, 869, 975, 977, 979, 983, 984, 985, 994, 995, 996, 1014], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 218, 376, 380, 382, 403, 462, 530, 640, 646, 891, 978, 1002, 1004, 1022, 1027, 1028, 1030, 1035, 1036, 1037], "isinst": [16, 121, 218, 390], "lineset": 16, "support_vector": [16, 332], "place": [16, 60, 230, 240, 285, 362, 374, 376, 377, 378, 381, 383, 391, 401, 411, 413, 435, 439, 440, 476, 477, 478, 509, 575, 584, 622, 624, 625, 761, 774, 788, 960, 961, 1001, 1022, 1029, 1032, 1033, 1035], "circl": [16, 60, 100, 130, 131, 141, 226, 237, 288, 291, 298, 303, 305, 324, 338, 355, 372, 380, 384, 403, 446, 456, 508, 516, 757, 996], "dash": [16, 33, 80, 112, 124, 134, 152, 155, 157, 170, 187, 192, 195, 201, 202, 209, 212, 213, 239, 261, 271, 336, 340, 995], "bone": [16, 213, 344], "rais": [16, 109, 201, 236, 237, 264, 307, 316, 376, 378, 380, 381, 382, 385, 388, 390, 394, 397, 404, 407, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 503, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 570, 571, 575, 576, 582, 583, 584, 585, 588, 597, 604, 605, 611, 623, 626, 629, 630, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 690, 692, 696, 703, 705, 706, 707, 708, 720, 722, 723, 731, 749, 771, 775, 776, 777, 780, 781, 782, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 804, 808, 812, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 842, 843, 844, 848, 850, 851, 852, 853, 856, 857, 858, 859, 860, 865, 866, 867, 871, 872, 873, 880, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 908, 911, 913, 914, 916, 917, 934, 942, 965, 966, 967, 968, 981, 991, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "valueerror": [16, 236, 237, 378, 382, 394, 462, 571, 597, 611, 629, 665, 708, 825, 843, 852, 858, 872, 912, 916, 917, 966, 967, 968, 991, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 233, 362, 363, 374, 376, 380, 382, 384, 393, 411, 502, 1001, 1016, 1024], "anchor": [16, 272], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 167, 178, 192, 209, 219, 237, 264, 329, 331, 334, 338, 339, 345, 506, 625, 652, 653, 660, 662, 668, 669, 670, 671, 893, 895, 897, 898, 995, 996], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 380, 652, 653, 660, 662, 670, 671, 672, 850, 851, 893, 991], "add_opt": 16, "action": [16, 316, 347, 375, 379, 380, 393, 991, 1032], "store": [16, 32, 53, 54, 70, 72, 81, 90, 146, 160, 176, 186, 189, 204, 222, 230, 240, 251, 266, 270, 322, 349, 356, 362, 370, 371, 376, 378, 383, 384, 385, 388, 390, 404, 406, 408, 410, 411, 413, 414, 432, 434, 438, 440, 444, 451, 463, 464, 467, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 502, 528, 529, 535, 543, 544, 549, 550, 557, 563, 564, 583, 604, 605, 621, 625, 626, 629, 632, 643, 644, 648, 654, 655, 656, 657, 660, 661, 667, 669, 670, 671, 672, 682, 683, 684, 686, 691, 692, 694, 695, 696, 774, 788, 789, 790, 796, 804, 812, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 848, 864, 871, 873, 874, 888, 889, 890, 913, 914, 938, 939, 952, 955, 971, 973, 977, 984, 993, 996, 997, 1001, 1007, 1016, 1019, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "dest": [16, 318], "dump": [16, 17, 397, 481, 833, 834], "argv": [16, 233], "opt": [16, 374, 378], "arg": [16, 236, 298, 377, 390, 408, 410, 417, 565, 566, 567, 568, 569, 570, 571, 572, 611, 693, 857, 977, 983, 984], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 326, 388], "classic": [17, 195, 225, 246, 252, 373, 380, 405, 407, 408, 437, 441, 443, 453, 486, 494, 498, 504, 626, 627, 903, 904, 975, 977, 980, 983, 991, 1001, 1010, 1022, 1023, 1027, 1036], "graph": [17, 25, 39, 44, 46, 66, 67, 160, 221, 258, 281, 283, 325, 362, 376, 379, 390, 400, 405, 414, 435, 438, 439, 446, 447, 451, 456, 457, 465, 466, 472, 505, 579, 580, 682, 685, 686, 689, 775, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 848, 889, 978, 981, 984, 986, 994, 997, 1001, 1005, 1012, 1015, 1022, 1029, 1030, 1032, 1035, 1037], "vertex": [17, 26, 403, 447, 1035], "en": [17, 24, 384, 525, 531, 589, 630, 658, 662, 665, 679, 680, 689, 699, 835, 836, 841, 842, 843, 844, 871, 887, 901, 902, 977, 981, 996, 997], "wiki": [17, 24, 382, 384, 589, 630, 662, 665, 689, 699, 835, 836, 841, 842, 843, 844, 871, 887, 901, 902, 977, 997], "eigenvector_centr": 17, "webpag": [17, 176, 376], "pagerank": 17, "insid": [17, 19, 26, 171, 202, 236, 261, 324, 334, 364, 370, 371, 378, 382, 403, 411, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 583, 584, 585, 588, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 941, 949, 988, 1005], "accord": [17, 24, 26, 37, 49, 78, 118, 124, 149, 153, 183, 200, 218, 233, 313, 338, 348, 358, 376, 378, 388, 389, 390, 391, 400, 403, 405, 407, 408, 410, 411, 413, 431, 444, 446, 450, 454, 456, 459, 463, 498, 510, 511, 512, 519, 524, 526, 529, 530, 532, 534, 544, 547, 548, 555, 556, 557, 560, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 635, 636, 638, 639, 643, 652, 653, 664, 674, 685, 689, 728, 772, 773, 790, 791, 792, 793, 794, 797, 798, 799, 804, 814, 828, 829, 830, 831, 832, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 856, 863, 871, 883, 885, 886, 893, 894, 895, 896, 898, 899, 975, 977, 981, 983, 984, 991, 994, 995, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "tradit": [17, 55, 200, 215, 348, 364, 401, 410, 411, 626, 688, 977, 980, 991, 1005], "power_iter": 17, "martinsson": [17, 529, 535, 930], "dbpedia": 17, "content": [17, 308, 347, 349, 371, 376, 380, 382, 397, 402, 411, 480, 497, 502, 503, 582, 583, 585, 665, 907, 990, 1005, 1016, 1023, 1032], "bz2": [17, 502, 503], "bz2file": 17, "pprint": [17, 125, 236, 262, 371, 925], "urlopen": 17, "randomized_svd": [17, 385, 445, 447, 526, 535, 538, 540, 1022, 1023, 1028, 1035, 1036, 1037], "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 125, 164, 200, 299, 315, 361, 365, 379, 389, 410, 793, 794, 982, 999, 1002, 1005, 1008, 1018, 1030, 1035, 1036], "wait": [17, 376, 380, 390, 660, 661, 662, 670, 672, 1034], "wb": 17, "index_map": 17, "setdefault": [17, 908], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 70, 262, 283, 313, 376, 380, 382, 384, 413, 419, 436, 437, 439, 441, 443, 458, 461, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 633, 634, 635, 636, 682, 683, 686, 796, 817, 837, 842, 845, 849, 853, 859, 885, 886, 1028, 1029, 1035, 1037], "get_redirect": 17, "transit": [17, 342, 380, 1033], "malform": [17, 1026], "1000000": [17, 530], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 55, 66, 82, 98, 105, 119, 125, 170, 171, 196, 225, 232, 236, 298, 303, 334, 347, 371, 378, 380, 389, 390, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 419, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 515, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 617, 621, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 956, 962, 970, 976, 984, 985, 991, 997, 1005, 1011, 1012, 1014, 1015, 1034, 1035, 1036, 1037, 1038], "break": [17, 39, 46, 70, 81, 167, 189, 206, 236, 248, 316, 323, 329, 345, 347, 349, 376, 378, 380, 382, 389, 403, 463, 506, 633, 767, 771, 774, 788, 866, 873, 878, 895, 898, 977, 980, 989, 991, 996, 1002, 1022, 1023, 1029, 1030, 1032, 1034, 1038], "get_adjacency_matrix": 17, "resolv": [17, 375, 376, 380, 384, 391, 411, 440, 446, 456, 685, 689, 930, 971, 981, 1029, 1031, 1032, 1035], "lil_matrix": 17, "float32": [17, 124, 224, 300, 318, 363, 371, 376, 378, 399, 551, 552, 553, 554, 557, 558, 559, 560, 587, 588, 634, 635, 652, 693, 756, 858, 901, 902, 903, 904, 911, 957, 958, 959, 997, 1007, 1016, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "del": [17, 382, 1034, 1035], "convert": [17, 34, 46, 48, 66, 71, 98, 157, 173, 200, 221, 239, 242, 247, 248, 251, 252, 294, 362, 370, 371, 385, 388, 390, 397, 411, 434, 437, 438, 441, 443, 444, 445, 446, 453, 458, 459, 490, 528, 535, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 566, 575, 576, 582, 583, 584, 585, 587, 588, 600, 621, 622, 623, 624, 640, 646, 652, 653, 654, 656, 660, 662, 664, 668, 670, 671, 672, 686, 771, 848, 857, 858, 860, 864, 866, 867, 868, 870, 893, 901, 902, 903, 904, 911, 913, 914, 936, 966, 967, 970, 977, 978, 979, 981, 991, 992, 996, 997, 1016, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1034, 1037, 1038], "csr": [17, 349, 362, 370, 371, 385, 388, 390, 411, 414, 437, 440, 441, 443, 444, 453, 491, 502, 517, 547, 548, 551, 552, 558, 559, 560, 624, 652, 686, 708, 761, 783, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 848, 856, 860, 862, 864, 865, 868, 871, 872, 873, 876, 877, 878, 880, 883, 886, 901, 902, 903, 904, 909, 913, 914, 936, 944, 956, 957, 958, 959, 960, 961, 962, 984, 991, 995, 1022, 1023, 1028, 1030, 1031, 1037, 1038], "tocsr": 17, "convers": [17, 125, 191, 347, 358, 364, 370, 376, 378, 384, 388, 397, 411, 566, 848, 857, 865, 913, 914, 967, 978, 1002, 1005, 1030, 1031, 1032, 1035, 1038], "5m": 17, "ram": [17, 53, 364, 410, 885, 886, 983, 996, 1016, 1028, 1034, 1037, 1038], "5000000": 17, "strongest": [17, 193], "highest": [17, 19, 26, 82, 145, 149, 204, 259, 261, 272, 315, 347, 376, 388, 401, 403, 407, 410, 412, 431, 549, 551, 558, 586, 589, 590, 592, 593, 594, 597, 598, 600, 629, 631, 719, 749, 785, 788, 790, 793, 794, 804, 890, 901, 932, 970, 977, 981, 982, 985, 995, 997, 1034], "centrality_scor": 17, "networkx": [17, 385], "copyright": [17, 82], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 373], "dan": [17, 1022, 1026, 1027, 1028, 1030, 1031], "schult": 17, "dschult": 17, "pieter": [17, 1028, 1029, 1036], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 199, 233, 265, 349, 400, 414, 438, 517, 518, 525, 531, 536, 542, 582, 585, 679, 680, 693, 835, 836, 839, 841, 843, 844, 977, 981], "indptr": [17, 281, 356, 1030, 1038], "dangl": 17, "isclos": 17, "guess": [17, 112, 121, 407, 410, 411, 472, 526, 532, 534, 535, 541, 981, 995], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 57, 62, 78, 79, 80, 82, 85, 86, 96, 97, 98, 103, 105, 112, 115, 152, 153, 159, 160, 170, 181, 184, 192, 194, 195, 207, 234, 247, 248, 250, 251, 265, 330, 332, 338, 362, 378, 382, 385, 390, 400, 408, 411, 527, 532, 534, 541, 584, 585, 608, 640, 641, 644, 646, 647, 648, 651, 654, 655, 656, 657, 675, 676, 677, 678, 681, 754, 756, 865, 905, 931, 979, 983, 991, 995, 996, 1015, 1031], "converg": [17, 57, 61, 78, 79, 123, 125, 152, 158, 161, 193, 202, 208, 216, 247, 249, 298, 299, 303, 308, 323, 364, 385, 390, 400, 403, 408, 411, 413, 415, 434, 437, 440, 441, 442, 443, 446, 448, 453, 454, 455, 456, 465, 466, 472, 476, 477, 478, 527, 529, 530, 531, 532, 533, 540, 547, 565, 604, 638, 639, 640, 641, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 662, 666, 668, 670, 672, 676, 677, 681, 682, 684, 685, 688, 689, 788, 789, 842, 850, 851, 888, 889, 895, 971, 976, 977, 978, 980, 985, 995, 1022, 1025, 1026, 1027, 1029, 1030, 1033, 1035, 1036, 1037, 1038], "l_inf": 17, "scores_max": 17, "err": [17, 85, 99, 112], "6f": [17, 99, 266, 730, 786], "concern": [18, 36, 77, 84, 88, 94, 108, 110, 143, 151, 163, 167, 175, 178, 220, 245, 251, 278, 282, 296, 302, 321, 329, 346, 351, 362, 378, 402, 978, 993], "demo": [18, 22, 36, 68, 128, 167, 173, 184, 206, 251, 262, 270, 308, 347, 348, 378, 400, 403, 411, 434, 435, 438, 440, 441, 442, 444, 445, 447, 449, 452, 496, 505, 506, 507, 535, 698, 699, 711, 713, 730, 784, 786, 854, 873, 874], "spectral": [18, 22, 36, 44, 46, 49, 55, 68, 167, 222, 223, 376, 411, 443, 445, 446, 447, 456, 463, 464, 465, 466, 467, 468, 469, 470, 482, 505, 507, 585, 682, 683, 684, 685, 686, 689, 713, 786, 984, 994, 1017, 1018, 1022, 1023], "twenti": [19, 233, 373, 400, 403, 1016], "comp": [19, 85, 86, 98, 106, 300, 326, 347, 348, 349, 371, 1016], "window": [19, 326, 371, 376, 378, 379, 411, 1001, 1022, 1025, 1029, 1033, 1035, 1036], "misc": [19, 53, 98, 262, 326, 347, 348, 349, 371, 1015], "categori": [19, 44, 62, 70, 71, 122, 132, 170, 171, 200, 208, 215, 239, 262, 298, 299, 305, 309, 310, 315, 318, 326, 347, 348, 349, 370, 371, 385, 402, 403, 404, 410, 411, 413, 482, 490, 491, 497, 555, 556, 642, 652, 653, 663, 674, 736, 751, 752, 829, 866, 867, 874, 971, 977, 978, 979, 983, 989, 1007, 1016, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "noth": [19, 70, 347, 348, 381, 536, 708, 856, 865, 914, 991], "frequenc": [19, 27, 152, 171, 184, 194, 200, 233, 314, 315, 347, 348, 349, 371, 388, 401, 407, 408, 410, 411, 412, 545, 551, 553, 554, 555, 558, 582, 583, 584, 585, 598, 652, 653, 658, 660, 662, 668, 669, 670, 679, 680, 822, 857, 866, 867, 893, 895, 898, 901, 903, 919, 977, 978, 983, 991, 995, 997, 1024, 1026, 1027, 1033], "dhillon": [19, 400, 445, 447, 505], "cut": [19, 43, 46, 65, 66, 223, 380, 388, 400, 403, 440, 446, 447, 456, 582, 585, 685, 689, 991], "minibatchkmean": [19, 36, 44, 50, 61, 68, 167, 348, 364, 403, 408, 434, 436, 441, 506, 772, 1023, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038], "coclust": [19, 400, 445, 507], "4415": 19, "3015": 19, "talk": [19, 70, 262, 347, 348, 349, 365, 371, 390, 397, 1005, 1008, 1016], "polit": [19, 347, 371, 375, 977, 982], "mideast": [19, 371], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 308, 373], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 371], "sci": [19, 70, 347, 348, 349, 371, 388, 683, 687, 864, 978, 991, 1016], "med": [19, 70, 270, 371, 991, 1016], "geb": 19, "gordon": [19, 249, 1028, 1032, 1034, 1036], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 371, 1016], "religion": [19, 262, 347, 348, 349, 371, 982, 1016], "alt": [19, 262, 326, 347, 348, 349, 371, 384, 1016], "atheism": [19, 262, 326, 347, 348, 349, 371, 1016], "god": [19, 347, 348, 1016], "jesu": [19, 347, 348], "kent": 19, "belief": [19, 261, 849, 986], "christ": 19, "faith": [19, 158, 339], "moral": [19, 71, 347, 652, 1030, 1034, 1035], "775": 19, "1623": 19, "pc": [19, 326, 349, 371], "hardwar": [19, 326, 349, 362, 363, 371, 374, 393, 1001, 1036, 1037], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 811], "s3": [19, 96, 149, 188, 189, 373, 1015], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 309, 326, 371, 376, 702, 981], "electron": [19, 149, 371, 373, 532, 534, 541, 621], "voltag": 19, "ship": [19, 132, 165, 353, 363, 374, 393, 411, 977, 1022, 1031], "circuit": [19, 978], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 400, 445, 1024, 1029, 1033], "v_measure_scor": [19, 37, 38, 49, 58, 319, 348, 403, 711, 729, 730, 750, 981, 1031], "number_norm": 19, "token": [19, 349, 362, 371, 380, 411, 530, 582, 583, 584, 585, 1022, 1030, 1034], "placehold": [19, 380, 621, 622, 623, 624, 805, 806, 809, 810, 971], "begin": [19, 109, 149, 152, 256, 263, 279, 316, 347, 358, 376, 381, 382, 390, 400, 403, 410, 547, 548, 553, 555, 556, 660, 661, 670, 671, 672, 970, 977, 981, 991, 993, 995, 1030, 1036, 1037], "By": [19, 45, 95, 128, 129, 179, 204, 236, 270, 303, 313, 319, 338, 347, 363, 376, 378, 382, 383, 390, 394, 403, 404, 406, 407, 408, 409, 410, 412, 432, 435, 439, 440, 444, 458, 461, 462, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 518, 520, 543, 544, 551, 552, 553, 554, 558, 559, 579, 580, 582, 583, 585, 600, 603, 626, 627, 665, 667, 669, 671, 684, 686, 688, 691, 693, 694, 696, 697, 712, 722, 723, 727, 731, 776, 777, 780, 785, 787, 793, 794, 839, 853, 854, 866, 867, 869, 871, 881, 883, 891, 896, 897, 901, 902, 903, 904, 913, 914, 949, 970, 971, 973, 977, 981, 988, 991, 993, 997, 1007, 1011, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1036], "isdigit": [19, 411], "numbernormalizingvector": 19, "build_token": [19, 411, 582, 583, 585], "super": [19, 25, 27, 378, 411, 1030], "forsal": [19, 349, 371], "rec": [19, 349, 371, 635], "auto": [19, 25, 27, 33, 44, 45, 48, 57, 58, 60, 92, 95, 145, 146, 149, 156, 176, 183, 221, 222, 223, 224, 226, 234, 241, 258, 260, 268, 281, 284, 289, 305, 313, 314, 315, 316, 317, 318, 330, 331, 332, 337, 340, 341, 349, 370, 371, 378, 410, 412, 413, 414, 435, 438, 439, 440, 441, 443, 444, 446, 451, 453, 456, 490, 502, 503, 529, 535, 538, 543, 551, 552, 555, 556, 557, 558, 559, 561, 562, 587, 588, 591, 596, 601, 602, 623, 625, 626, 627, 629, 633, 640, 641, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 694, 696, 728, 734, 793, 794, 821, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 850, 851, 866, 867, 874, 885, 886, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 929, 930, 947, 950, 972, 975, 977, 978, 981, 982, 984, 991, 996, 1001, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "motorcycl": [19, 371], "sport": [19, 371], "basebal": [19, 371], "hockei": [19, 371], "crypt": [19, 371], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 95, 317, 348, 376, 390, 403, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 454, 455, 456, 457, 505, 507, 1015, 1022, 1026, 1028, 1030, 1031, 1033, 1036], "svd_method": [19, 445, 447, 526, 1025], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 57, 58, 61, 68, 167, 249, 252, 306, 317, 348, 385, 403, 434, 437, 442, 443, 446, 456, 506, 783, 784, 788, 789, 858, 984, 991, 1002, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 57, 58, 60, 61, 64, 95, 221, 222, 223, 224, 314, 317, 348, 403, 437, 441, 443, 445, 446, 447, 453, 456, 684, 688, 788, 789, 1015, 1022, 1030, 1036, 1037, 1038], "y_coclust": 19, "row_labels_": [19, 20, 21, 400, 445, 447], "y_kmean": 19, "fit_predict": [19, 56, 57, 60, 229, 239, 288, 378, 390, 403, 421, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 463, 557, 671, 788, 789, 839, 845, 853, 897, 987, 1027, 1030, 1031, 1035, 1037], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 55, 59, 63, 64, 70, 118, 133, 221, 239, 343, 505, 507], "get_indic": [19, 418, 445, 447], "float_info": 19, "row_compl": 19, "logical_not": [19, 64, 105, 203], "rows_": [19, 400, 418, 445, 447], "col_compl": 19, "columns_": [19, 400, 418, 445, 447], "ident": [19, 64, 124, 195, 200, 218, 229, 233, 327, 347, 371, 378, 390, 400, 403, 404, 405, 407, 413, 416, 432, 433, 446, 458, 459, 467, 469, 470, 473, 474, 475, 482, 497, 545, 553, 554, 558, 559, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 637, 673, 674, 693, 698, 699, 729, 778, 786, 792, 795, 805, 806, 807, 809, 810, 835, 836, 842, 850, 851, 857, 858, 870, 882, 901, 902, 974, 975, 978, 981, 984, 985, 996, 1026, 1030, 1031, 1032, 1036], "most_common": 19, "counter": [19, 112, 268, 403, 670, 671, 672, 1035], "itemgett": 19, "revers": [19, 75, 149, 205, 261, 528, 535, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 605, 782, 853, 981, 1022, 1023, 1032, 1034, 1038], "best_idx": [19, 260], "get_shap": [19, 418, 445, 447], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 58], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "489": [19, 22], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 400, 445, 447, 505, 507], "simultan": [20, 55, 96, 265, 269, 319, 342, 355, 368, 400, 403, 970, 981, 982, 997, 1005, 1029], "aim": [20, 81, 165, 204, 289, 324, 338, 364, 371, 374, 376, 390, 397, 403, 405, 411, 442, 977, 981, 984, 991, 996, 1001, 1007, 1015, 1036], "identifi": [20, 90, 97, 104, 125, 126, 169, 170, 200, 203, 204, 249, 251, 259, 264, 270, 290, 310, 315, 338, 347, 348, 370, 371, 375, 376, 380, 381, 390, 403, 404, 407, 410, 411, 440, 444, 451, 481, 490, 502, 503, 549, 550, 557, 600, 637, 643, 693, 706, 767, 818, 839, 858, 888, 889, 970, 977, 981, 987, 994, 1005, 1014, 1029, 1031, 1036, 1037], "particularli": [20, 31, 70, 71, 74, 105, 130, 201, 231, 261, 305, 314, 344, 358, 362, 376, 385, 390, 403, 404, 406, 409, 411, 490, 796, 812, 830, 930, 949, 950, 977, 978, 981, 983, 1002, 1005, 1015, 1022, 1027, 1029, 1030, 1036], "suit": [20, 95, 130, 170, 200, 201, 229, 251, 316, 317, 319, 347, 363, 376, 378, 381, 382, 384, 388, 393, 406, 408, 410, 444, 446, 497, 671, 830, 874, 924, 970, 973, 978, 981, 983, 984, 995, 1001, 1002, 1005, 1009, 1029, 1036], "arrang": [20, 279, 626, 824, 825, 826, 827, 981], "genom": [20, 507], "rearrang": [20, 21, 400], "kemaleren": [20, 21], "make_checkerboard": [20, 505, 1024], "uniform": [20, 31, 37, 53, 124, 125, 128, 145, 153, 158, 161, 179, 180, 214, 226, 229, 232, 269, 284, 287, 288, 293, 297, 304, 306, 307, 310, 317, 319, 333, 378, 381, 403, 432, 433, 545, 563, 564, 604, 605, 622, 633, 643, 644, 648, 662, 670, 671, 672, 693, 715, 716, 721, 738, 739, 741, 743, 744, 746, 778, 794, 802, 804, 828, 829, 832, 835, 836, 843, 844, 858, 870, 872, 882, 918, 932, 970, 971, 980, 981, 984, 1028, 1030, 1032, 1036, 1038], "deviat": [20, 34, 61, 80, 115, 118, 119, 120, 121, 149, 152, 157, 159, 161, 170, 179, 206, 239, 258, 259, 260, 261, 262, 264, 287, 288, 303, 308, 368, 372, 373, 381, 385, 390, 407, 410, 413, 444, 466, 495, 505, 506, 507, 508, 510, 511, 512, 516, 518, 519, 524, 546, 588, 605, 628, 638, 639, 665, 717, 745, 796, 812, 839, 862, 863, 873, 882, 883, 884, 977, 981, 987, 991, 1014, 1028, 1029, 1030, 1033, 1034, 1035], "matshow": [20, 21, 66, 120, 147, 299, 496], "afterward": [20, 380, 529, 535, 817], "row_idx_shuffl": 20, "permut": [20, 21, 37, 81, 120, 126, 141, 167, 168, 174, 216, 254, 277, 310, 392, 398, 403, 410, 458, 490, 494, 498, 553, 554, 558, 559, 621, 624, 628, 673, 698, 699, 711, 729, 730, 748, 750, 786, 807, 809, 818, 819, 853, 867, 898, 901, 902, 930, 950, 952, 955, 981, 995, 1011, 1014, 1018, 1022, 1028, 1035, 1037], "col_idx_shuffl": 20, "redefin": [20, 125, 170], "lost": [20, 57, 82, 371, 377, 388, 978, 981], "ground": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 128, 160, 184, 194, 200, 201, 239, 252, 264, 348, 390, 402, 403, 697, 698, 699, 702, 706, 707, 708, 709, 711, 712, 715, 716, 717, 721, 722, 723, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 776, 777, 778, 779, 780, 786, 787, 981, 994, 1007, 1015, 1030], "truth": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 103, 128, 160, 184, 194, 200, 201, 239, 252, 264, 348, 390, 402, 403, 697, 698, 699, 702, 706, 707, 708, 709, 711, 712, 715, 716, 717, 719, 721, 722, 723, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 776, 777, 778, 779, 780, 786, 787, 981, 1007, 1015, 1030, 1036], "consensus_scor": [20, 21, 400, 1024], "biclusters_": [20, 21, 418, 445, 447], "consensu": [20, 21, 37, 375, 376, 391, 400, 403, 643, 665, 672, 673, 713, 981], "1f": [20, 30, 50, 53, 98, 180, 200, 233, 246, 248, 268, 313, 348, 349], "perfect": [20, 26, 37, 70, 81, 98, 100, 196, 200, 347, 348, 376, 380, 403, 407, 547, 548, 684, 688, 698, 699, 702, 711, 719, 721, 724, 730, 736, 749, 750, 778, 779, 786, 977, 981, 984, 996, 1005, 1014, 1036], "ascend": [20, 71, 172, 309, 410, 444, 450, 621, 629, 905, 906, 907, 995, 1032, 1038], "column_labels_": [20, 21, 400, 445, 447], "reorder": [20, 45, 102, 390, 691, 712, 1002, 1030], "reordered_row": 20, "reordered_data": 20, "step": [20, 26, 33, 42, 54, 55, 58, 67, 70, 71, 72, 73, 74, 81, 86, 98, 103, 112, 117, 121, 122, 132, 146, 147, 148, 154, 157, 170, 172, 200, 208, 218, 230, 231, 234, 240, 243, 252, 259, 262, 268, 270, 281, 283, 284, 289, 297, 300, 305, 308, 309, 314, 317, 327, 330, 334, 348, 349, 352, 358, 362, 365, 371, 374, 375, 376, 378, 380, 381, 384, 388, 390, 400, 401, 403, 405, 406, 408, 410, 411, 412, 436, 441, 443, 530, 531, 532, 533, 540, 557, 582, 583, 585, 587, 588, 591, 600, 621, 638, 642, 660, 661, 663, 670, 672, 673, 674, 688, 694, 788, 789, 790, 793, 794, 804, 824, 825, 826, 827, 849, 850, 851, 853, 854, 856, 893, 894, 895, 896, 898, 899, 929, 930, 952, 956, 971, 977, 980, 985, 986, 991, 995, 997, 998, 1001, 1004, 1012, 1016, 1022, 1026, 1027, 1029, 1030, 1031, 1033, 1034, 1035, 1038], "outer": [20, 100, 266, 324, 445, 508, 634, 644, 645, 648, 973, 1023], "product": [20, 71, 95, 133, 152, 157, 171, 338, 358, 362, 378, 379, 382, 385, 397, 400, 408, 410, 445, 532, 534, 541, 576, 583, 584, 585, 607, 608, 627, 634, 658, 659, 679, 680, 754, 756, 768, 770, 865, 868, 885, 886, 931, 970, 973, 977, 979, 991, 993, 995, 996, 1001, 1005, 1030], "shade": [20, 53, 183, 284, 289, 330, 408], "445": [20, 22, 171, 989], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 365, 411, 418, 443, 445, 447, 482, 505, 507, 585, 713, 786, 981, 1017, 1018, 1024, 1028], "make_biclust": [21, 507, 1024], "implant": 21, "row_idx": [21, 200], "col_idx": 21, "fit_data": 21, "316": [21, 22, 157, 161, 605, 608, 619, 869], "plot_spectral_coclust": [21, 22], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 55, 75, 92, 110, 111, 133, 136, 144, 151, 152, 153, 154, 162, 167, 170, 221, 225, 230, 233, 261, 264, 267, 268, 271, 303, 307, 313, 315, 325, 327, 362, 365, 371, 372, 378, 382, 388, 390, 403, 407, 408, 411, 412, 413, 429, 430, 431, 432, 433, 440, 441, 443, 498, 506, 509, 517, 521, 543, 544, 545, 547, 549, 551, 553, 555, 556, 558, 561, 563, 564, 587, 588, 604, 607, 608, 616, 621, 626, 627, 652, 653, 665, 670, 686, 692, 694, 696, 697, 700, 701, 703, 706, 710, 714, 719, 720, 722, 732, 733, 734, 735, 749, 775, 777, 780, 781, 782, 785, 788, 789, 790, 793, 794, 804, 818, 819, 822, 824, 825, 828, 829, 830, 831, 832, 835, 838, 843, 849, 850, 886, 887, 888, 889, 890, 893, 895, 898, 901, 903, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 991, 993, 994, 995, 997, 1002, 1003, 1004, 1016, 1018, 1022, 1024, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1036], "confid": [24, 25, 26, 27, 157, 159, 247, 261, 264, 325, 391, 401, 413, 630, 652, 653, 660, 662, 665, 668, 669, 670, 692, 696, 701, 714, 719, 720, 732, 733, 749, 782, 821, 860, 893, 895, 898, 977, 980, 981, 982, 987, 994, 995, 996, 1005, 1016, 1032], "being": [24, 27, 45, 52, 55, 82, 86, 90, 100, 112, 116, 129, 152, 157, 170, 172, 176, 194, 236, 239, 255, 261, 307, 308, 334, 338, 347, 349, 374, 375, 376, 378, 380, 381, 388, 390, 391, 397, 403, 405, 407, 410, 411, 412, 413, 414, 416, 435, 436, 438, 439, 444, 450, 463, 469, 487, 517, 563, 634, 643, 650, 666, 668, 681, 684, 688, 706, 712, 722, 727, 729, 776, 782, 788, 833, 834, 839, 841, 843, 844, 845, 868, 886, 931, 970, 971, 977, 980, 981, 984, 987, 988, 989, 991, 993, 995, 996, 997, 1022, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "postprocess": [24, 401, 529, 535], "brier": [24, 25, 401, 703], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 368, 410, 431, 446, 529, 555, 614, 633, 637, 758, 767, 770, 850, 851, 895, 896, 897, 898, 899, 986, 996, 1018, 1035], "isoton": [24, 25, 167, 228, 244, 365, 431, 651, 916, 1003, 1018, 1023, 1024, 1025, 1026, 1028, 1035, 1038], "belong": [24, 27, 55, 60, 239, 261, 313, 319, 324, 370, 371, 400, 401, 403, 404, 406, 407, 410, 418, 434, 437, 441, 442, 443, 445, 447, 517, 706, 724, 797, 803, 814, 840, 860, 874, 937, 938, 977, 980, 981, 983, 984, 985, 987, 996, 1001, 1007, 1014], "mblondel": [24, 48, 191, 222, 262, 347, 370, 502], "telecom": [24, 25, 42, 229, 1005], "balaz": [24, 1026], "kegl": [24, 1026], "jhm": [24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235], "informatik": [24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235, 981], "uni": [24, 25, 26, 27, 74, 116, 152, 153, 155, 156, 157, 158, 159, 161, 191, 234, 235, 324, 342], "bremen": [24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235], "style": [24, 26, 81, 125, 189, 208, 218, 265, 376, 383, 403, 411, 437, 441, 453, 694, 796, 812, 913, 914, 1022, 1025, 1036], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 91, 192, 212, 229, 249, 306, 314, 317, 332, 335, 336, 343, 372, 378, 379, 410, 509, 1030, 1033, 1036], "50000": 24, "n_bin": [24, 25, 27, 53, 200, 218, 304, 306, 310, 432, 433, 858, 991], "calibration_curv": [24, 401, 431, 432, 1031, 1036], "blob": [24, 33, 42, 44, 57, 62, 64, 91, 403, 442, 506, 1027], "sample_weight": [24, 181, 200, 213, 218, 236, 314, 319, 344, 376, 390, 394, 403, 410, 414, 420, 426, 431, 437, 438, 441, 443, 453, 454, 459, 463, 476, 477, 478, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 604, 605, 626, 627, 628, 629, 631, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 691, 692, 694, 696, 697, 701, 702, 703, 706, 707, 710, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 727, 728, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 775, 776, 777, 778, 780, 781, 782, 785, 787, 790, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 858, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 941, 969, 981, 995, 996, 997, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "sw_train": [24, 314], "sw_test": [24, 314], "calibratedclassifiercv": [24, 25, 26, 358, 390, 401, 670, 970, 996, 1002, 1026, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "brier_score_loss": [24, 25, 401, 981, 1030, 1031, 1032], "gaussiannb": [24, 25, 27, 31, 134, 263, 358, 401, 410, 431, 563, 828, 829, 830, 832, 854, 975, 982, 983, 1026, 1027, 1028, 1030, 1035, 1038], "With": [24, 34, 44, 67, 75, 90, 100, 123, 145, 167, 171, 200, 202, 228, 230, 235, 237, 243, 244, 261, 285, 362, 365, 371, 376, 378, 390, 403, 404, 407, 410, 412, 431, 433, 495, 576, 626, 627, 652, 761, 851, 854, 856, 867, 873, 874, 900, 902, 974, 977, 978, 981, 982, 984, 985, 988, 995, 997, 1007, 1008, 1015, 1019, 1025, 1029, 1030, 1032, 1034, 1036], "itself": [24, 49, 55, 112, 125, 128, 171, 184, 198, 236, 242, 270, 281, 310, 334, 348, 362, 364, 375, 376, 378, 380, 390, 394, 402, 403, 414, 434, 435, 438, 439, 440, 463, 464, 465, 466, 467, 468, 469, 470, 521, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 545, 560, 563, 577, 586, 589, 590, 592, 593, 594, 596, 597, 633, 634, 635, 636, 637, 639, 649, 683, 685, 783, 784, 828, 829, 830, 831, 832, 833, 834, 838, 846, 847, 858, 859, 860, 888, 889, 973, 977, 978, 980, 984, 985, 989, 1001, 1026, 1037], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 130, 134, 149, 153, 154, 155, 156, 236, 270, 297, 305, 308, 313, 315, 347, 378, 383, 390, 401, 402, 410, 431, 432, 543, 544, 545, 547, 549, 551, 553, 555, 558, 561, 563, 587, 588, 604, 613, 614, 616, 617, 625, 626, 627, 652, 653, 670, 692, 694, 696, 734, 735, 781, 788, 789, 790, 793, 794, 804, 814, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 835, 843, 850, 853, 860, 888, 889, 890, 895, 898, 901, 903, 977, 981, 983, 985, 988, 994, 995, 996, 997, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 114, 127, 184, 192, 206, 208, 209, 236, 323, 339, 342, 353, 373, 384, 388, 393, 403, 468, 553, 554, 584, 585, 629, 639, 658, 670, 672, 679, 680, 788, 977], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": 24, "109": [24, 53, 140, 142, 982, 1024], "y_uniqu": 24, "rainbow": [24, 223], "this_i": [24, 206], "this_x": [24, 198, 206, 1014], "this_sw": 24, "lexsort": 24, "51": [24, 157, 218, 281, 403, 404, 774, 977], "uncalibr": [24, 25, 26, 431], "gnb": [24, 25, 27, 134, 410, 563, 983], "plot_calibr": [24, 28], "reliabl": [25, 27, 401, 407, 432, 433, 640, 997, 1005], "diagram": [25, 27, 71, 241, 314, 401, 403, 432, 433, 462, 891, 991, 1033, 1034], "redund": [25, 27, 106, 148, 247, 252, 358, 372, 375, 376, 381, 390, 401, 509, 628, 1002, 1016, 1034], "uninform": [25, 27, 310, 372, 381, 411, 970, 977, 1030], "rest": [25, 30, 122, 126, 167, 178, 184, 215, 219, 236, 239, 249, 313, 326, 331, 382, 390, 402, 413, 506, 604, 625, 638, 652, 653, 670, 747, 781, 821, 822, 823, 842, 893, 895, 898, 977, 981, 982, 985, 988, 996, 1005, 1026, 1027, 1036, 1037, 1038], "make_classif": [25, 27, 31, 91, 116, 117, 119, 123, 146, 148, 258, 264, 272, 273, 291, 297, 305, 313, 315, 319, 342, 358, 372, 379, 399, 431, 432, 506, 547, 549, 551, 558, 660, 691, 692, 694, 696, 812, 817, 823, 850, 853, 893, 970, 981, 982, 991, 996, 1028, 1029, 1030, 1032], "100_000": [25, 27, 170], "n_inform": [25, 27, 31, 91, 116, 119, 146, 148, 179, 184, 203, 204, 258, 264, 274, 291, 297, 305, 313, 342, 378, 381, 509, 518, 547, 548, 549, 550, 558, 559, 659, 823, 982, 1030], "n_redund": [25, 27, 31, 91, 119, 146, 148, 258, 264, 291, 297, 305, 381, 431, 509, 547, 549, 558, 823], "logisticregress": [25, 27, 30, 71, 73, 117, 134, 140, 148, 149, 183, 190, 191, 192, 193, 207, 215, 216, 230, 231, 241, 243, 264, 270, 279, 300, 305, 313, 314, 315, 316, 317, 319, 347, 362, 376, 378, 382, 384, 389, 394, 401, 404, 410, 412, 432, 561, 563, 591, 625, 628, 637, 646, 653, 666, 667, 668, 669, 670, 681, 694, 781, 804, 812, 824, 825, 827, 878, 879, 881, 882, 883, 884, 900, 925, 977, 981, 982, 991, 995, 996, 1012, 1014, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "baselin": [25, 112, 122, 125, 135, 149, 173, 179, 218, 271, 279, 315, 348, 373, 403, 412, 545, 546, 628, 981, 984, 1016, 1038], "regular": [25, 36, 68, 71, 73, 79, 100, 110, 136, 159, 164, 167, 178, 179, 180, 184, 185, 187, 188, 189, 191, 200, 214, 218, 219, 235, 247, 255, 262, 265, 274, 286, 287, 296, 299, 300, 301, 308, 309, 329, 331, 333, 334, 335, 338, 345, 347, 349, 352, 362, 376, 388, 389, 401, 403, 405, 406, 408, 409, 410, 413, 431, 437, 441, 465, 466, 470, 472, 473, 474, 475, 498, 506, 508, 509, 514, 516, 518, 522, 532, 533, 534, 537, 541, 542, 544, 553, 555, 556, 582, 583, 585, 632, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 687, 728, 734, 743, 788, 789, 807, 819, 820, 850, 851, 854, 873, 893, 894, 895, 896, 898, 899, 900, 970, 971, 973, 974, 975, 978, 980, 986, 987, 991, 994, 995, 996, 1003, 1005, 1011, 1012, 1014, 1018, 1022, 1023, 1024, 1026, 1027, 1031, 1032, 1034, 1035], "logist": [25, 27, 30, 69, 71, 76, 117, 140, 167, 178, 219, 230, 243, 279, 300, 308, 317, 347, 390, 391, 401, 404, 410, 412, 413, 431, 483, 490, 496, 498, 506, 535, 553, 555, 565, 604, 625, 640, 651, 652, 653, 660, 662, 670, 734, 790, 804, 819, 849, 850, 851, 853, 873, 900, 916, 918, 981, 985, 986, 995, 996, 1003, 1005, 1012, 1018, 1026, 1029, 1030, 1032, 1033], "guid": [25, 55, 69, 95, 118, 161, 167, 170, 171, 188, 221, 268, 287, 288, 291, 309, 313, 314, 315, 316, 317, 318, 319, 365, 374, 375, 376, 381, 382, 383, 389, 390, 391, 394, 402, 404, 410, 414, 415, 416, 417, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 926, 981, 982, 1009, 1016, 1022, 1023, 1024, 1025, 1027, 1029, 1031, 1032], "gridspec": [25, 27, 65, 246, 383], "calibrationdisplai": [25, 27, 401, 1035, 1036], "lr": [25, 27, 117, 134, 135, 203, 215, 231, 232, 257, 264, 389, 394, 410, 562, 563, 564, 706], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 339], "dark2": [25, 27, 222], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 110, 136, 167, 200, 233, 267, 286, 303, 315, 401, 484, 553, 554, 555, 556, 558, 559, 636, 751, 752, 790, 795, 973, 979, 991, 1017, 1018, 1034, 1037], "grid_posit": [25, 27], "y_prob": [25, 27, 155, 432, 433, 703, 824, 850, 981, 1036], "poorli": [25, 62, 78, 86, 115, 127, 225, 363, 403, 410, 522, 624, 977, 978, 1028], "violat": [25, 334, 384, 388, 390, 629, 917, 988, 995, 997], "independ": [25, 27, 37, 46, 96, 97, 99, 117, 121, 159, 171, 238, 239, 261, 264, 266, 270, 279, 303, 310, 313, 348, 358, 362, 363, 372, 378, 380, 389, 390, 393, 400, 401, 402, 403, 404, 405, 406, 407, 411, 415, 443, 458, 482, 497, 509, 510, 511, 512, 514, 526, 527, 529, 531, 533, 534, 540, 541, 545, 546, 598, 601, 602, 619, 634, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 666, 667, 668, 669, 698, 699, 711, 729, 730, 748, 750, 786, 792, 818, 822, 824, 826, 827, 865, 869, 870, 871, 873, 877, 878, 879, 880, 882, 883, 884, 887, 895, 896, 897, 898, 899, 924, 970, 973, 975, 977, 978, 981, 982, 983, 986, 988, 991, 996, 997, 1017, 1018, 1022, 1023, 1028, 1030, 1032, 1037], "overli": [25, 26, 189, 266, 358, 408, 981], "typic": [25, 27, 99, 109, 176, 184, 200, 204, 218, 235, 263, 264, 268, 270, 271, 287, 288, 315, 334, 348, 362, 369, 370, 371, 374, 378, 379, 380, 385, 389, 390, 401, 402, 403, 404, 407, 408, 410, 411, 413, 437, 441, 443, 490, 545, 547, 549, 550, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 623, 632, 634, 637, 648, 649, 650, 665, 676, 677, 706, 860, 867, 871, 874, 929, 930, 941, 966, 970, 974, 977, 978, 980, 981, 982, 983, 987, 989, 1005, 1016, 1031, 1035, 1038], "transpos": [25, 261, 415, 520, 532, 534, 541, 654, 655, 656, 657, 781, 930, 967, 981, 993, 1015, 1022, 1036], "nearli": [25, 264, 371, 390, 402, 757, 981, 984, 993, 1016], "albeit": 25, "strongli": [25, 27, 82, 86, 98, 122, 126, 170, 182, 215, 236, 267, 347, 376, 392, 393, 401, 410, 652, 729, 786, 977, 978, 1018, 1031, 1038], "plenti": 25, "greater": [25, 92, 112, 114, 170, 217, 234, 239, 249, 267, 279, 287, 288, 352, 362, 372, 381, 390, 401, 403, 406, 410, 435, 439, 443, 446, 457, 466, 530, 535, 551, 552, 553, 554, 555, 556, 558, 559, 560, 587, 588, 591, 604, 605, 622, 634, 636, 639, 658, 660, 661, 665, 670, 671, 672, 686, 703, 706, 714, 728, 729, 732, 735, 781, 786, 788, 789, 823, 835, 836, 843, 844, 850, 851, 856, 871, 883, 887, 890, 893, 894, 901, 902, 903, 904, 930, 950, 970, 976, 977, 978, 981, 982, 987, 991, 996, 997, 1025, 1030, 1033, 1035, 1036, 1037], "exploit": [25, 279, 982, 1002, 1025], "f1_score": [25, 268, 326, 371, 731, 981, 1022, 1024, 1025, 1026, 1027, 1031, 1032, 1038], "log_loss": [25, 26, 124, 127, 153, 308, 326, 347, 390, 401, 410, 551, 553, 555, 558, 640, 652, 670, 901, 903, 970, 977, 981, 995, 997, 1024, 1026, 1028, 1036, 1037, 1038], "precision_scor": [25, 268, 702, 780, 981, 1022, 1024, 1025, 1026, 1027, 1032, 1038], "recall_scor": [25, 268, 407, 702, 777, 981, 1022, 1024, 1025, 1026, 1027, 1032, 1038], "roc_auc_scor": [25, 149, 261, 270, 313, 696, 700, 701, 702, 782, 981, 1024, 1025, 1030, 1032, 1036, 1037], "score_nam": [25, 37, 235, 263, 276, 319, 348, 796, 812], "score_df": 25, "set_index": [25, 112, 125, 157, 189, 218, 261, 309, 348], "decim": [25, 158, 465, 466, 906, 1029, 1030], "098921": 25, "323178": 25, "937457": 25, "872009": 25, "851408": 25, "861586": 25, "117608": 25, "782755": 25, "940374": 25, "857400": 25, "875941": 25, "866571": 25, "098332": 25, "370738": 25, "938613": 25, "883065": 25, "836224": 25, "859007": 25, "108880": 25, "368896": 25, "940201": 25, "861106": 25, "871277": 25, "866161": 25, "refin": [25, 82, 466, 703, 981, 1016], "alter": [25, 165, 378, 390, 722, 723, 731, 776, 777, 780, 1027, 1031, 1034], "uncertainti": [25, 152, 159, 179, 263, 401, 403, 561, 562, 637, 853, 971, 993], "linearsvc": [25, 27, 70, 72, 145, 146, 167, 176, 234, 258, 260, 268, 305, 313, 329, 331, 342, 345, 347, 362, 378, 382, 401, 411, 412, 431, 506, 561, 571, 625, 633, 637, 646, 666, 667, 668, 669, 670, 681, 728, 735, 816, 821, 894, 895, 898, 900, 977, 981, 982, 996, 1022, 1023, 1024, 1028, 1030, 1033, 1038], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 218, 232, 303, 334, 629, 670, 734, 863, 991, 1026, 1033, 1034], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 134, 431, 901, 903], "dual": [25, 27, 70, 72, 145, 146, 176, 234, 258, 260, 268, 305, 313, 331, 332, 342, 347, 411, 412, 465, 466, 472, 561, 562, 605, 633, 640, 641, 646, 647, 652, 653, 654, 655, 656, 657, 675, 678, 728, 821, 833, 834, 893, 894, 895, 898, 981, 982, 996, 1024, 1033, 1036, 1038], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 67, 100, 170, 171, 189, 268, 390, 401, 405, 407, 412, 437, 441, 443, 463, 532, 534, 541, 557, 706, 723, 839, 897, 1022], "behavior": [25, 27, 37, 39, 52, 164, 167, 170, 171, 200, 218, 236, 252, 254, 264, 277, 299, 303, 305, 310, 334, 358, 363, 370, 373, 376, 378, 380, 384, 385, 390, 401, 403, 407, 411, 530, 545, 560, 660, 661, 662, 670, 671, 672, 693, 695, 722, 723, 776, 777, 780, 791, 792, 795, 807, 808, 809, 810, 811, 830, 866, 893, 894, 970, 977, 982, 987, 991, 996, 1005, 1007, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "hing": [25, 207, 210, 212, 269, 331, 332, 336, 338, 390, 660, 670, 728, 893, 900, 977, 995, 996, 1016], "focus": [25, 78, 189, 371, 388, 978, 991, 1001], "far": [25, 60, 82, 122, 153, 159, 170, 200, 218, 334, 338, 347, 349, 376, 385, 413, 714, 873, 956, 986, 987, 996, 1005, 1014], "awai": [25, 26, 27, 60, 78, 121, 152, 153, 157, 203, 338, 339, 371, 401, 413, 622, 835, 836, 843, 844, 980, 981, 996, 1014], "shown": [25, 48, 57, 89, 109, 114, 118, 125, 161, 169, 171, 184, 190, 198, 218, 226, 229, 234, 239, 248, 261, 264, 267, 270, 286, 298, 299, 303, 304, 305, 322, 342, 347, 348, 376, 381, 391, 401, 403, 404, 407, 408, 409, 411, 413, 432, 454, 626, 692, 694, 695, 696, 707, 790, 804, 905, 907, 976, 977, 978, 981, 984, 989, 991, 995, 996, 997, 1016, 1026, 1031, 1032, 1033, 1036], "varieti": [25, 164, 248, 309, 334, 384, 388, 402, 403, 405, 411, 637, 984, 997, 1001, 1005, 1024, 1037, 1038], "niculescu": [25, 27, 401, 431, 433], "mizil": [25, 27, 401, 431, 433], "caruana": [25, 27, 401, 431, 433], "144943": 25, "465660": 25, "937597": 25, "872186": 25, "851792": 25, "861868": 25, "099820": 25, "376999": 25, "936480": 25, "853174": 25, "877981": 25, "865400": 25, "098758": 25, "321301": 25, "937532": 25, "873724": 25, "848743": 25, "861053": 25, "deal": [25, 57, 71, 164, 170, 184, 225, 338, 349, 376, 381, 402, 404, 411, 412, 413, 468, 490, 697, 702, 756, 780, 859, 930, 977, 1005, 1013, 1025, 1037, 1038], "situat": [25, 44, 57, 72, 169, 170, 206, 229, 264, 376, 384, 405, 407, 408, 410, 462, 522, 528, 576, 866, 869, 881, 891, 975, 977, 983, 984, 994, 997, 1030], "supervis": [25, 27, 37, 49, 54, 58, 86, 104, 117, 140, 141, 222, 237, 248, 261, 290, 315, 325, 328, 348, 362, 365, 371, 378, 389, 390, 401, 403, 406, 407, 408, 410, 411, 413, 431, 433, 458, 482, 497, 498, 547, 582, 584, 587, 588, 628, 670, 722, 791, 792, 795, 797, 798, 799, 800, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 818, 819, 842, 852, 853, 857, 867, 874, 888, 889, 890, 898, 975, 978, 981, 983, 984, 987, 991, 992, 996, 997, 998, 1001, 1002, 1004, 1007, 1008, 1010, 1016, 1018, 1022, 1028, 1034], "icml": [25, 27, 401, 403, 411, 431, 433, 828, 830, 849, 981, 983, 995, 1000], "2005": [25, 27, 81, 373, 401, 431, 433, 842, 977, 984, 994], "160": [25, 28, 237, 970, 1014], "plot_calibration_curv": [25, 28], "simplex": [26, 664, 788, 868], "arrow": [26, 1036], "green": [26, 34, 81, 92, 115, 129, 134, 152, 176, 226, 298, 304, 308, 314, 390, 982, 1030, 1031, 1033, 1034], "600": [26, 50, 131, 132, 371, 674], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 212, 229, 249, 306, 336, 506], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 56, 116, 117, 118, 119, 120, 121, 134, 172, 173, 241, 242, 258, 273, 313, 315, 347, 358, 389, 390, 401, 410, 412, 551, 552, 553, 555, 560, 561, 563, 793, 794, 823, 903, 970, 982, 1005, 1019, 1026, 1027, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "concaten": [26, 39, 50, 61, 69, 76, 81, 114, 128, 160, 167, 179, 182, 222, 229, 246, 250, 251, 257, 268, 270, 271, 286, 300, 307, 310, 323, 347, 404, 458, 461, 498, 503, 525, 531, 535, 536, 593, 774, 790, 852, 853, 855, 858, 866, 898, 982, 1011, 1023], "randomforestclassifierrandomforestclassifi": [26, 119, 120, 172, 241, 273], "cal_clf": 26, "prefit": [26, 390, 401, 412, 431, 561, 562, 591, 1002, 1034, 1035, 1036], "x27": [26, 71, 72, 111, 117, 132, 135, 146, 170, 171, 172, 230, 231, 240, 241, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 324], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "ro": 26, "bo": [26, 1034], "unit": [26, 70, 80, 170, 176, 200, 218, 286, 299, 303, 348, 371, 376, 377, 378, 382, 384, 385, 408, 411, 415, 458, 483, 484, 513, 518, 526, 527, 528, 535, 536, 583, 584, 585, 605, 652, 653, 670, 679, 693, 763, 840, 849, 850, 851, 857, 863, 865, 869, 871, 873, 879, 880, 881, 883, 884, 893, 894, 977, 979, 980, 986, 991, 997, 1001, 1014, 1026, 1030, 1036, 1037], "mid": [26, 334, 981, 983], "frac": [26, 80, 81, 112, 261, 268, 270, 316, 400, 401, 403, 405, 408, 409, 410, 411, 413, 426, 457, 459, 476, 477, 478, 548, 550, 552, 554, 556, 559, 562, 564, 605, 609, 613, 616, 617, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 663, 664, 666, 667, 672, 673, 674, 690, 748, 762, 826, 827, 836, 844, 851, 894, 896, 899, 902, 904, 973, 975, 976, 977, 978, 979, 981, 983, 984, 985, 986, 988, 989, 991, 993, 995, 996, 997, 1014], "shrink": [26, 82, 95, 126, 171, 184, 195, 198, 204, 221, 250, 303, 342, 408, 553, 554, 670, 672, 840, 850, 851, 895, 896, 897, 898, 899, 984, 996, 1014], "perfectli": [26, 37, 264, 275, 338, 392, 403, 410, 432, 561, 600, 698, 699, 709, 711, 729, 730, 750, 779, 786, 866, 976, 978, 981, 996, 1035, 1036], "incur": [26, 613, 893, 996, 1030], "correct": [26, 27, 57, 81, 112, 160, 170, 184, 189, 200, 218, 246, 255, 261, 268, 270, 334, 336, 347, 358, 373, 376, 378, 380, 391, 401, 402, 403, 407, 408, 410, 411, 444, 450, 463, 468, 482, 495, 497, 629, 661, 670, 672, 697, 698, 702, 706, 707, 712, 715, 716, 717, 721, 722, 723, 727, 731, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 776, 777, 778, 780, 785, 787, 821, 822, 823, 830, 838, 864, 966, 977, 981, 982, 996, 1007, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "decreas": [26, 39, 46, 55, 58, 66, 75, 129, 148, 149, 160, 170, 171, 173, 208, 232, 233, 263, 268, 274, 297, 305, 308, 313, 352, 362, 364, 376, 401, 403, 410, 435, 439, 457, 515, 528, 529, 535, 551, 552, 553, 554, 555, 556, 558, 559, 560, 596, 629, 630, 631, 670, 671, 672, 700, 706, 720, 775, 782, 850, 851, 901, 902, 903, 904, 970, 972, 977, 978, 981, 984, 985, 988, 989, 995, 996, 1005, 1014, 1024, 1029, 1032, 1035], "cal_scor": 26, "327": [26, 723, 1014], "549": 26, "p1d": 26, "p0": 26, "p1": [26, 134], "p2": [26, 134, 218], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 401, 431], "this_p": 26, "sure": [26, 56, 193, 206, 236, 237, 358, 362, 363, 370, 374, 375, 376, 377, 378, 380, 381, 384, 388, 401, 404, 411, 487, 517, 643, 913, 914, 924, 967, 971, 978, 995, 1001, 1002, 1029, 1030, 1032, 1037], "renorm": 26, "multiclass": [26, 30, 118, 167, 178, 219, 237, 239, 254, 268, 271, 277, 279, 331, 343, 365, 371, 372, 378, 379, 381, 390, 403, 410, 431, 446, 456, 483, 498, 553, 555, 561, 562, 565, 588, 596, 604, 625, 626, 627, 652, 653, 660, 662, 667, 668, 669, 670, 696, 700, 702, 722, 723, 727, 728, 731, 736, 747, 776, 777, 780, 781, 782, 785, 790, 791, 793, 794, 795, 796, 804, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 860, 874, 893, 895, 898, 975, 977, 992, 996, 997, 1003, 1004, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1037, 1038], "argmax": [26, 103, 260, 274, 378, 410, 563, 821, 901, 996, 1035], "970": [26, 28], "plot_calibration_multiclass": [26, 28], "gave": [27, 401, 790, 793, 794, 804, 860], "four": [27, 145, 160, 176, 182, 201, 248, 249, 323, 331, 372, 376, 390, 551, 558, 713, 901, 903, 919, 977, 979, 980, 981, 991, 1000], "naiv": [27, 31, 130, 261, 263, 347, 349, 365, 371, 401, 410, 411, 431, 538, 828, 829, 830, 831, 832, 975, 976, 984, 1003, 1018, 1022, 1023, 1024, 1025, 1030, 1032, 1035, 1037], "bay": [27, 31, 115, 130, 152, 189, 251, 263, 347, 365, 371, 401, 408, 410, 411, 530, 543, 544, 650, 828, 829, 830, 831, 832, 874, 975, 976, 977, 991, 1003, 1016, 1018, 1022, 1023, 1024, 1025, 1030, 1032, 1035, 1037], "train_sampl": [27, 215, 216], "against": [27, 37, 86, 105, 115, 126, 144, 176, 191, 192, 209, 217, 236, 270, 309, 313, 334, 371, 376, 391, 401, 403, 407, 411, 432, 503, 536, 542, 545, 670, 672, 748, 750, 781, 792, 797, 799, 818, 822, 947, 973, 977, 981, 982, 984, 996, 1000, 1007], "rfc": [27, 242, 313, 1019], "contrast": [27, 104, 171, 202, 235, 261, 263, 290, 308, 348, 390, 401, 403, 404, 406, 410, 413, 443, 446, 456, 613, 637, 804, 849, 971, 974, 976, 977, 981, 984, 986, 989, 991, 994, 995, 997, 1032], "push": [27, 376, 380, 401, 1004], "equat": [27, 342, 376, 403, 408, 410, 551, 552, 553, 554, 558, 559, 560, 584, 621, 652, 653, 676, 677, 681, 756, 873, 901, 902, 903, 904, 971, 978, 981, 986, 1030], "twice": [27, 273, 347, 349, 378, 413, 613, 723, 725, 932, 1031], "approx": [27, 95, 234, 408, 410, 411, 981, 988, 995], "rare": [27, 171, 309, 358, 380, 388, 390, 392, 401, 403, 407, 583, 642, 652, 653, 663, 674, 893, 918, 949, 977, 991, 1005, 1029, 1030, 1031, 1035, 1037], "explan": [27, 86, 236, 362, 375, 376, 401, 411, 970, 980, 982, 997, 1005, 1025], "bag": [27, 70, 110, 116, 118, 127, 136, 167, 172, 348, 349, 372, 401, 402, 510, 511, 512, 549, 550, 551, 552, 553, 554, 557, 558, 559, 734, 795, 819, 902, 979, 982, 1003, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1035, 1036, 1038], "underli": [27, 56, 80, 131, 149, 173, 201, 203, 204, 236, 266, 285, 286, 338, 355, 363, 376, 388, 390, 392, 394, 399, 401, 403, 405, 407, 408, 409, 410, 412, 413, 431, 445, 446, 447, 456, 458, 459, 465, 466, 472, 518, 561, 562, 563, 564, 587, 588, 591, 596, 652, 662, 674, 685, 689, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 838, 893, 901, 902, 903, 904, 946, 977, 978, 982, 987, 994, 996, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1038], "restrict": [27, 66, 67, 164, 167, 217, 296, 301, 378, 382, 388, 401, 403, 410, 411, 459, 487, 496, 526, 575, 604, 647, 648, 649, 650, 652, 676, 677, 707, 775, 781, 782, 819, 841, 843, 844, 845, 847, 849, 850, 851, 853, 879, 981, 997, 1017, 1018, 1022, 1024, 1032, 1034], "interv": [27, 110, 136, 159, 167, 184, 200, 201, 202, 218, 261, 371, 390, 401, 407, 410, 413, 432, 433, 510, 511, 512, 551, 552, 554, 556, 558, 559, 629, 630, 632, 671, 735, 741, 743, 794, 811, 819, 856, 858, 872, 895, 896, 897, 917, 973, 977, 981, 991, 997, 1029, 1033], "move": [27, 121, 262, 300, 334, 375, 376, 380, 382, 401, 403, 543, 544, 565, 566, 567, 569, 571, 572, 948, 1015, 1022, 1023, 1027, 1030, 1032, 1035, 1036], "characterist": [27, 44, 62, 149, 157, 167, 229, 254, 258, 277, 303, 358, 371, 373, 381, 401, 407, 410, 413, 497, 498, 617, 632, 652, 696, 700, 702, 720, 775, 781, 782, 809, 819, 822, 860, 898, 977], "difficult": [27, 55, 112, 170, 208, 239, 376, 384, 401, 408, 410, 547, 548, 553, 555, 556, 976, 978, 980, 984, 986, 988, 997, 1005, 1022, 1036], "bayesian": [27, 54, 167, 178, 184, 188, 219, 245, 247, 251, 252, 253, 408, 431, 518, 522, 526, 605, 638, 639, 650, 651, 788, 789, 854, 856, 868, 873, 970, 1001, 1003, 1017, 1018, 1028, 1035], "domingo": [27, 781, 981], "pazzani": 27, "proc": [27, 79, 401, 411, 444, 683, 687, 828, 970, 978, 983, 987], "13th": 27, "intl": [27, 407], "1996": [27, 403, 410, 414, 438, 510, 511, 512, 549, 550, 991], "zadrozni": [27, 401, 431, 670], "bianca": 27, "charl": [27, 757, 1022, 1025, 1028, 1032, 1034, 1037], "elkan": [27, 314, 401, 431, 437, 441, 453, 670, 1028, 1032, 1033, 1035, 1036], "vol": [27, 160, 184, 267, 373, 403, 468, 553, 554, 622, 629, 639, 658, 679, 680, 788, 818, 830, 971, 983, 984], "2001": [27, 157, 172, 260, 400, 403, 410, 431, 445, 446, 447, 456, 505, 553, 554, 558, 559, 622, 628, 633, 639, 685, 690, 728, 781, 874, 886, 918, 971, 977, 981, 987, 989, 991, 993, 996], "plot_compare_calibr": [27, 28], "04": [28, 30, 40, 42, 54, 67, 68, 85, 97, 105, 142, 149, 157, 170, 181, 199, 218, 219, 227, 237, 239, 244, 246, 252, 253, 261, 262, 274, 277, 294, 301, 328, 341, 373, 410, 412, 465, 466, 781, 790, 804, 977, 981, 985, 995], "299": [28, 113, 201, 219, 348, 674], "auto_examples_calibr": 28, "calibr": [28, 30, 218, 365, 390, 506, 509, 558, 563, 652, 670, 703, 722, 734, 777, 780, 781, 819, 831, 890, 893, 970, 977, 981, 994, 996, 1003, 1018, 1019, 1026, 1028], "discrimin": [29, 35, 104, 144, 146, 149, 167, 176, 215, 222, 237, 290, 365, 373, 401, 410, 469, 506, 543, 544, 560, 776, 842, 970, 978, 981, 984, 995, 997, 1003, 1014, 1018, 1025], "ellipsoid": [29, 35, 167, 245, 246, 253, 543, 544, 788, 789, 975, 980], "ledoit": [29, 35, 77, 78, 82, 83, 167, 467, 469, 473, 474, 506, 543, 975], "wolf": [29, 35, 77, 78, 82, 83, 167, 467, 469, 473, 474, 506, 543, 975, 1029], "oa": [29, 35, 77, 83, 167, 405, 463, 464, 467, 468, 470, 471, 506, 543, 790, 975], "hand": [29, 35, 86, 89, 97, 100, 118, 125, 144, 157, 167, 170, 171, 193, 204, 207, 225, 232, 233, 235, 236, 239, 258, 263, 270, 334, 362, 370, 371, 373, 376, 378, 382, 384, 389, 397, 408, 409, 410, 412, 496, 637, 691, 707, 781, 819, 874, 898, 970, 974, 977, 981, 983, 985, 989, 994, 996, 1005, 1007, 1010, 1013, 1014], "built": [30, 86, 109, 112, 113, 121, 123, 172, 208, 264, 294, 313, 353, 356, 362, 374, 376, 377, 378, 380, 382, 384, 385, 388, 389, 390, 393, 397, 402, 403, 404, 407, 410, 412, 439, 497, 547, 548, 549, 550, 555, 556, 582, 583, 587, 591, 633, 634, 635, 636, 637, 640, 641, 646, 652, 654, 655, 656, 657, 666, 667, 668, 669, 675, 793, 794, 801, 824, 827, 833, 834, 903, 904, 965, 977, 981, 982, 994, 995, 997, 1001, 1005, 1016, 1022, 1025, 1026, 1028, 1034], "enabl": [30, 50, 72, 123, 171, 208, 223, 236, 305, 314, 316, 317, 319, 343, 374, 376, 381, 384, 388, 390, 393, 394, 399, 402, 403, 404, 408, 410, 411, 443, 462, 528, 529, 535, 553, 554, 555, 556, 557, 573, 574, 584, 585, 596, 604, 788, 789, 790, 793, 853, 854, 866, 867, 890, 891, 893, 894, 895, 896, 897, 898, 899, 908, 948, 971, 973, 978, 980, 981, 984, 991, 992, 995, 996, 1002, 1005, 1022, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "troubl": [30, 411], "ovr": [30, 192, 215, 279, 313, 343, 652, 653, 781, 822, 893, 895, 898, 977, 981, 982, 996, 1022, 1027, 1028, 1030, 1031, 1032, 1036, 1037], "gpc": [30, 151, 162, 167, 498, 604, 605, 607, 608, 613, 614, 616, 617, 697, 734, 1003, 1018, 1032], "gaussian_process": [30, 31, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 365, 390, 413, 637, 982, 1025, 1028, 1029], "gaussianprocessclassifi": [30, 31, 153, 154, 155, 156, 160, 390, 413, 605, 613, 614, 616, 617, 982, 1028, 1030, 1032, 1036], "accuracy_scor": [30, 112, 153, 265, 308, 325, 347, 358, 389, 394, 551, 558, 702, 722, 723, 727, 731, 735, 776, 777, 780, 785, 787, 970, 981, 1023, 1024, 1025, 1034], "iri": [30, 41, 45, 74, 88, 93, 94, 99, 106, 107, 110, 123, 133, 136, 141, 145, 151, 162, 167, 178, 183, 193, 219, 243, 248, 255, 266, 267, 270, 271, 284, 292, 298, 315, 321, 328, 329, 330, 334, 337, 345, 351, 356, 357, 369, 370, 389, 403, 404, 407, 408, 410, 490, 498, 535, 543, 547, 551, 558, 604, 616, 625, 670, 790, 804, 888, 889, 890, 893, 898, 901, 905, 906, 907, 970, 971, 975, 980, 981, 984, 988, 991, 994, 995, 996, 997, 1007, 1014, 1015, 1018, 1035], "load_iri": [30, 41, 45, 74, 90, 99, 102, 104, 106, 121, 123, 133, 141, 145, 154, 183, 193, 209, 243, 248, 255, 266, 267, 268, 270, 271, 284, 289, 292, 298, 313, 315, 318, 327, 330, 331, 334, 337, 353, 356, 389, 397, 403, 404, 407, 410, 412, 555, 561, 596, 604, 613, 614, 616, 617, 625, 652, 653, 781, 790, 793, 794, 796, 804, 821, 842, 888, 889, 890, 901, 903, 905, 906, 907, 971, 976, 981, 982, 983, 984, 988, 991, 997, 1007, 1013, 1014, 1015, 1028, 1030, 1033], "saga": [30, 191, 215, 216, 652, 653, 666, 668, 681, 804, 977, 1029, 1031], "multi_class": [30, 192, 215, 270, 313, 563, 604, 652, 653, 781, 827, 893, 977, 982, 996, 1022, 1026, 1030, 1035, 1037], "n_classifi": [30, 563, 564], "xx": [30, 34, 42, 58, 80, 121, 125, 130, 141, 154, 155, 156, 171, 187, 207, 210, 211, 212, 213, 214, 226, 229, 237, 250, 287, 297, 305, 306, 327, 333, 334, 339, 340, 343, 344, 380], "yy": [30, 34, 42, 58, 80, 121, 130, 141, 154, 156, 171, 207, 211, 212, 213, 214, 226, 229, 237, 287, 297, 305, 306, 327, 333, 334, 339, 340, 343, 344], "xfull": 30, "imshow_handl": 30, "cax": [30, 155, 272], "orient": [30, 95, 170, 221, 303, 390, 905, 978], "horizont": [30, 95, 221, 234, 303, 306, 381, 390, 458, 509, 691, 695], "385": [30, 35, 200, 219, 297, 301, 348], "plot_classification_prob": [30, 35], "salt": [31, 234, 305, 1036], "convei": [31, 226, 305, 1014], "linearli": [31, 100, 114, 149, 170, 179, 214, 222, 229, 270, 271, 305, 308, 338, 347, 362, 373, 388, 408, 410, 509, 636, 701, 981, 984, 987, 996, 1014, 1029, 1038], "semi": [31, 237, 305, 315, 328, 365, 371, 390, 482, 498, 529, 582, 584, 670, 722, 819, 853, 857, 888, 889, 890, 898, 979, 984, 987, 1003, 1018, 1022, 1034, 1037], "transpar": [31, 305, 966, 1005], "ga\u00ebl": [31, 45, 51, 73, 89, 90, 102, 183, 197, 198, 305, 338, 339, 391, 1005], "modifi": [31, 45, 51, 73, 75, 89, 90, 183, 184, 197, 198, 210, 221, 222, 223, 236, 239, 248, 319, 339, 344, 374, 376, 378, 380, 390, 403, 410, 413, 437, 441, 448, 453, 462, 476, 477, 478, 479, 489, 504, 575, 604, 605, 607, 613, 670, 672, 683, 687, 722, 723, 761, 776, 777, 780, 911, 977, 994, 995, 1002, 1013, 1017, 1018, 1022, 1024, 1025, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1037], "listedcolormap": [31, 121, 289, 292, 297, 305], "make_circl": [31, 44, 62, 100, 130, 226, 297, 298, 305, 324, 372, 1023, 1030, 1033], "make_moon": [31, 44, 62, 229, 261, 297, 298, 305, 372, 970, 1029, 1033], "discriminant_analysi": [31, 33, 34, 104, 222, 290, 358, 365, 399, 530, 842, 975, 982, 1022, 1025, 1026, 1027, 1028, 1029], "quadraticdiscriminantanalysi": [31, 34, 543, 975, 982, 984, 1022, 1027, 1029, 1037], "adaboostclassifi": [31, 111, 114, 121, 410, 548, 553, 555, 1024, 1025, 1028, 1029, 1031, 1032, 1035, 1037, 1038], "decisionboundarydisplai": [31, 56, 114, 128, 133, 183, 192, 209, 264, 284, 289, 292, 308, 330, 331, 332, 335, 336, 338, 353, 1036, 1037], "kneighborsclassifi": [31, 133, 140, 283, 284, 289, 290, 308, 315, 317, 347, 410, 596, 836, 840, 841, 842, 843, 844, 982, 984, 1014, 1022, 1032, 1034, 1035, 1036, 1037, 1038], "neural_network": [31, 167, 171, 240, 296, 297, 298, 299, 300, 364, 365, 388, 982, 985, 1024], "mlpclassifi": [31, 167, 296, 297, 299, 301, 364, 496, 498, 508, 516, 565, 849, 851, 863, 982, 985, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "decisiontreeclassifi": [31, 111, 112, 114, 121, 133, 265, 319, 352, 353, 356, 390, 410, 547, 549, 551, 553, 555, 558, 625, 796, 817, 902, 903, 905, 906, 907, 971, 982, 997, 1023, 1024, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "net": [31, 167, 178, 184, 191, 211, 219, 274, 382, 402, 407, 465, 466, 472, 495, 518, 551, 552, 553, 554, 558, 559, 560, 640, 641, 646, 651, 652, 653, 654, 655, 656, 657, 662, 670, 672, 675, 678, 849, 901, 902, 903, 904, 970, 981, 986, 995, 1003, 1005, 1018, 1022, 1027, 1031, 1032, 1034], "adaboost": [31, 110, 121, 136, 167, 513, 514, 545, 547, 548, 553, 625, 697, 787, 819, 901, 902, 1003, 1018, 1024], "qda": [31, 34, 373, 543, 544, 1003, 1018, 1027], "025": [31, 202, 239, 258, 684, 688], "n_clusters_per_class": [31, 91, 116, 146, 148, 258, 291, 297, 305, 381, 509], "linearly_separ": [31, 297], "ds_cnt": [31, 305, 306], "rdbu": [31, 95, 216, 297, 334, 339], "cm_bright": [31, 297, 305], "ff0000": [31, 289, 297], "0000ff": [31, 289, 297], "ep": [31, 44, 46, 49, 55, 65, 183, 185, 224, 233, 388, 403, 414, 438, 444, 449, 465, 466, 472, 625, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 675, 676, 677, 678, 684, 688, 708, 734, 845, 885, 886, 887, 993, 1037, 1038], "lstrip": [31, 44, 62, 229, 297, 305], "598": [31, 35, 58, 103, 153, 535], "plot_classifier_comparison": [31, 35, 305], "8x8": [32, 89, 191, 233, 290, 300, 373, 496, 1013], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 58, 72, 73, 89, 139, 140, 147, 191, 207, 222, 233, 234, 259, 260, 263, 269, 276, 283, 285, 290, 298, 300, 319, 322, 323, 382, 404, 439, 440, 526, 527, 528, 529, 593, 594, 632, 633, 662, 682, 683, 684, 685, 1007, 1011, 1012, 1013, 1014, 1015, 1028, 1033], "set_axis_off": 32, "gray_r": [32, 89, 98, 155, 222, 300, 322, 323, 1013], "entir": [32, 164, 200, 208, 300, 303, 314, 338, 356, 358, 370, 377, 378, 390, 397, 403, 407, 409, 411, 466, 486, 528, 582, 583, 584, 585, 641, 645, 647, 649, 652, 653, 655, 657, 659, 660, 662, 670, 676, 677, 727, 787, 821, 822, 825, 850, 852, 853, 866, 878, 879, 881, 882, 883, 884, 950, 970, 971, 981, 991, 995, 997, 1014, 1031, 1032], "86": [32, 70, 146, 191, 305, 322, 323, 781, 901, 981, 1012], "92": [32, 34, 50, 98, 146, 176, 259, 300, 322, 323, 334, 371, 373, 532, 534, 541, 556, 591, 790, 804, 976, 1016], "899": [32, 259], "confus": [32, 167, 230, 254, 270, 277, 322, 323, 347, 390, 462, 498, 625, 646, 691, 707, 709, 712, 722, 723, 731, 747, 777, 780, 819, 891, 898, 1016, 1022, 1023, 1027, 1031, 1032, 1034, 1035, 1036, 1037], "figure_": [32, 171, 240, 313, 315, 383, 432, 625, 626, 691, 692, 694, 695, 696, 796, 812], "confusion_matrix": [32, 230, 255, 322, 323, 691, 707, 747, 816, 981, 1016, 1023, 1028, 1029, 1032, 1033, 1035], "gt": [32, 71, 72, 117, 132, 170, 251, 259, 273, 374, 376, 380], "rebuilt": [32, 833, 834], "283": [32, 35, 263, 277], "plot_digits_classif": [32, 35], "oracl": [33, 200, 218, 416, 463, 464, 467, 468, 469, 470, 975, 1022], "shrinkag": [33, 77, 79, 82, 83, 103, 127, 167, 292, 416, 463, 464, 467, 468, 469, 470, 471, 473, 474, 475, 533, 537, 543, 555, 556, 790, 977, 991, 1003, 1018, 1022, 1026, 1027, 1029], "lineardiscriminantanalysi": [33, 34, 104, 222, 290, 358, 399, 530, 544, 842, 975, 982, 984, 1022, 1025, 1026, 1027, 1028, 1029, 1031, 1034, 1036, 1037, 1038], "200": [33, 34, 44, 45, 50, 54, 60, 68, 75, 98, 114, 123, 125, 131, 156, 186, 195, 201, 204, 205, 206, 212, 217, 222, 241, 246, 262, 268, 270, 271, 303, 306, 324, 333, 334, 355, 358, 371, 378, 388, 408, 410, 415, 434, 448, 462, 465, 466, 527, 528, 529, 532, 533, 534, 537, 541, 578, 643, 645, 665, 673, 686, 804, 850, 851, 891, 895, 896, 897, 898, 899, 996], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 133, 134, 410, 563], "lsqr": [33, 310, 543, 666, 668, 681, 975, 1023, 1029, 1036], "clf2": [33, 133, 134, 378, 397, 410, 563], "store_precis": [33, 79, 463, 464, 467, 468, 469, 470], "assume_cent": [33, 79, 405, 416, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474], "clf3": [33, 133, 134, 378, 410, 563], "covariance_estim": [33, 543, 975, 1034], "features_samples_ratio": 33, "gold": [33, 194, 201, 203, 206, 210, 214, 217, 247, 252, 268, 287, 333, 382], "navi": [33, 70, 79, 99, 104, 105, 131, 179, 203, 211, 224, 247, 248, 249, 252, 268, 270, 286, 293, 324, 355], "030": [33, 35, 348], "plot_lda": [33, 35], "doubl": [34, 118, 273, 376, 390, 408, 532, 534, 541, 833, 834, 844, 965, 971, 996, 997, 1022, 1032, 1033], "own": [34, 118, 218, 236, 251, 281, 283, 324, 348, 363, 370, 379, 380, 381, 384, 385, 393, 402, 403, 415, 419, 434, 448, 527, 551, 558, 640, 788, 789, 835, 836, 837, 839, 841, 843, 844, 845, 867, 901, 903, 919, 924, 949, 977, 983, 984, 987, 991, 996, 1001, 1005, 1015, 1016, 1029, 1030, 1032], "mpl": [34, 246, 247, 248, 252, 303], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "plot_lda_qda": [34, 35], "dataset_fixed_cov": 34, "dim": [34, 209, 233, 289, 290, 292, 330, 331, 521, 693], "dataset_cov": 34, "matric": [34, 39, 40, 80, 82, 95, 205, 247, 248, 250, 251, 252, 281, 294, 314, 326, 347, 348, 368, 370, 378, 379, 388, 389, 390, 402, 403, 404, 405, 406, 408, 411, 412, 418, 444, 445, 447, 458, 467, 476, 477, 478, 528, 529, 532, 534, 535, 538, 541, 543, 544, 549, 550, 557, 560, 575, 576, 583, 637, 652, 658, 666, 668, 681, 747, 753, 761, 767, 771, 772, 773, 774, 783, 788, 789, 819, 837, 840, 845, 856, 860, 862, 865, 868, 870, 871, 873, 876, 878, 880, 882, 883, 884, 885, 886, 895, 896, 898, 899, 909, 930, 936, 945, 952, 954, 955, 971, 975, 978, 979, 980, 982, 984, 985, 993, 995, 996, 1001, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "linalg": [34, 54, 78, 79, 82, 101, 103, 105, 186, 246, 247, 248, 251, 252, 376, 382, 408, 445, 446, 447, 456, 526, 529, 535, 538, 651, 666, 668, 681, 685, 689, 928], "plot_data": 34, "fig_index": 34, "splot": [34, 247, 252], "tp": [34, 403, 706, 712, 724, 775, 776, 777, 780, 905, 981], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 115, 170, 334, 371], "000099": 34, "pcolormesh": [34, 130, 141, 183, 284, 289, 330, 334, 338, 625], "white": [34, 58, 60, 95, 157, 170, 214, 221, 287, 300, 305, 327, 333, 408, 411, 619, 997, 1022, 1025, 1028, 1032, 1036], "means_": [34, 246, 247, 248, 249, 251, 252, 543, 544, 788, 789], "yellow": [34, 92, 334, 982], "markers": [34, 49, 55, 58, 61, 63, 64, 125, 155, 159, 232, 317], "markeredgecolor": [34, 49, 55, 61, 63, 64], "plot_ellips": [34, 246], "cov": [34, 82, 86, 114, 251, 376, 390, 393, 396, 406, 416, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 513, 526, 528, 535, 542], "eigh": [34, 246, 247, 248, 251, 252, 408, 415, 527, 529, 1037], "arctan": [34, 247, 252, 372, 512], "180": [34, 246, 247, 248, 251, 252, 290, 294, 348, 382, 496], "ell": [34, 246, 247, 248, 252, 400], "patch": [34, 50, 239, 246, 247, 248, 251, 252, 256, 371, 380, 388, 408, 410, 549, 550, 577, 578, 581, 1022, 1030], "ellips": [34, 229, 246, 247, 248, 251, 252, 987], "set_clip_box": [34, 246, 247, 248, 251, 252], "set_alpha": [34, 111, 246, 247, 248, 251, 252], "add_artist": [34, 222, 246, 247, 248, 251, 252], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 130, 222, 348, 385, 399, 406, 415, 445, 447, 476, 477, 479, 526, 527, 528, 529, 533, 534, 535, 538, 540, 543, 544, 658, 666, 667, 668, 679, 680, 681, 852, 930, 975, 1016, 1024, 1028, 1029, 1035, 1037], "store_covari": [34, 543, 544, 1027, 1029], "tight": [34, 40, 105, 114, 121, 141, 145, 185, 187, 192, 193, 194, 205, 209, 212, 214, 217, 223, 226, 250, 281, 287, 288, 292, 293, 330, 333, 334, 337, 339, 353, 576, 686, 1034], "545": 35, "auto_examples_classif": 35, "modul": [36, 37, 49, 53, 77, 84, 88, 94, 95, 110, 143, 151, 161, 163, 167, 168, 175, 178, 215, 220, 221, 245, 254, 278, 282, 296, 298, 299, 302, 321, 329, 346, 351, 354, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 388, 390, 392, 393, 397, 401, 402, 403, 406, 410, 411, 412, 414, 438, 497, 529, 573, 574, 653, 922, 970, 975, 977, 979, 981, 982, 985, 987, 988, 991, 993, 995, 997, 998, 1005, 1010, 1011, 1016, 1023, 1024, 1025, 1027, 1028, 1032, 1034, 1036], "handwritten": [36, 68, 167, 220, 225, 227, 233, 259, 299, 300, 322, 323, 369, 403, 410, 441, 496, 535, 538, 543, 560, 682, 683, 684, 685, 686, 698, 699, 711, 730, 784, 786, 842, 854, 863, 873, 886, 978, 984, 1007, 1018], "hierarch": [36, 40, 54, 68, 167, 173, 317, 390, 411, 435, 437, 439, 440, 498, 506, 508, 516, 524, 541, 724, 846, 873, 998, 1002, 1017, 1018, 1022, 1025, 1026, 1038], "coin": [36, 68, 167, 403, 411, 435, 456, 993, 1015], "shift": [36, 44, 68, 167, 179, 224, 251, 286, 300, 303, 338, 405, 409, 434, 442, 452, 455, 463, 506, 509, 683, 687, 839, 862, 991, 1017, 1018, 1022, 1026, 1030], "chanc": [36, 49, 68, 112, 167, 173, 200, 208, 215, 218, 261, 267, 270, 271, 309, 342, 348, 358, 375, 403, 407, 694, 696, 698, 699, 702, 710, 748, 750, 779, 786, 818, 981, 989, 997, 1038], "agglom": [36, 44, 47, 68, 167, 403, 435, 439, 496, 685, 771, 846, 1025], "bisect": [36, 68, 167, 437, 441, 506, 1036], "quantiz": [36, 68, 167, 370, 371, 403, 437, 441, 443, 500, 772, 858, 955, 991], "birch": [36, 44, 68, 167, 317, 364, 390, 440, 443, 506, 1017, 1018, 1026, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "toi": [36, 49, 53, 57, 68, 86, 99, 115, 128, 133, 134, 167, 182, 190, 204, 214, 228, 244, 246, 298, 331, 341, 369, 382, 388, 410, 411, 434, 435, 436, 438, 440, 442, 443, 444, 446, 452, 463, 506, 508, 516, 557, 633, 671, 719, 749, 789, 839, 846, 854, 873, 897, 978, 980, 981, 987, 991, 1018], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 56, 67, 68, 167, 173, 434, 435, 439, 440, 457, 506, 508, 516, 873, 1001, 1015, 1025, 1030, 1033], "dbscan": [36, 44, 55, 65, 68, 167, 319, 388, 390, 440, 444, 446, 449, 506, 698, 699, 711, 730, 784, 786, 845, 873, 984, 1017, 1018, 1022, 1024, 1026, 1027, 1029, 1030, 1031, 1038], "hdbscan": [36, 44, 68, 167, 438, 506, 873, 971, 1001, 1017, 1018, 1038], "optic": [36, 44, 68, 167, 317, 369, 414, 438, 440, 449, 450, 451, 496, 1017, 1018, 1031, 1035, 1036, 1037, 1038], "affin": [36, 44, 68, 167, 303, 368, 378, 390, 402, 408, 434, 435, 439, 446, 448, 456, 506, 529, 685, 689, 698, 699, 711, 730, 784, 786, 889, 975, 978, 981, 1017, 1018, 1022, 1023, 1026, 1032, 1033, 1035, 1037], "propag": [36, 68, 167, 321, 328, 371, 402, 434, 448, 496, 506, 508, 691, 698, 699, 707, 708, 711, 712, 730, 784, 786, 853, 867, 888, 889, 890, 947, 948, 985, 1003, 1017, 1018, 1022, 1034, 1037], "agglomer": [36, 68, 167, 368, 403, 411, 439, 496, 594, 600, 639, 790, 795, 853, 1018], "unstructur": [36, 68, 167, 299, 403, 435, 439, 457, 497, 524, 846, 993, 1005, 1026], "dendrogram": [36, 68, 167, 173, 403, 435, 439, 498, 1034], "pictur": [36, 68, 167, 233, 252, 371, 391, 403, 408, 411, 456, 487, 488, 515, 1002], "greek": [36, 68, 167, 403, 456], "silhouett": [36, 38, 49, 57, 58, 68, 167, 348, 376, 441, 506, 783, 784, 1022, 1026], "embed": [36, 44, 46, 68, 117, 152, 167, 220, 223, 225, 227, 228, 244, 281, 290, 382, 390, 402, 403, 435, 446, 456, 483, 496, 538, 543, 560, 576, 633, 682, 683, 684, 685, 686, 687, 688, 689, 690, 842, 854, 863, 885, 886, 887, 973, 984, 987, 993, 998, 1001, 1017, 1018, 1022, 1023, 1033, 1034, 1036], "explor": [37, 115, 116, 173, 225, 226, 239, 262, 263, 269, 270, 310, 315, 334, 348, 358, 370, 373, 375, 382, 397, 403, 410, 466, 790, 793, 801, 874, 970, 977, 978, 980, 986, 988, 989, 991, 1005, 1010, 1016, 1028], "uniformli": [37, 118, 125, 144, 229, 246, 313, 378, 510, 511, 512, 545, 636, 794, 802, 804, 872, 970, 971, 981, 984, 991, 1026, 1031], "divid": [37, 43, 48, 91, 95, 146, 157, 200, 239, 246, 348, 358, 372, 373, 400, 403, 407, 408, 463, 464, 465, 466, 467, 468, 469, 470, 506, 513, 528, 535, 644, 645, 648, 649, 650, 658, 659, 670, 671, 672, 713, 719, 727, 731, 749, 785, 787, 850, 851, 895, 898, 930, 933, 934, 970, 978, 980, 981, 984, 991, 995, 1016, 1022, 1029, 1030, 1033], "randomli": [37, 48, 50, 61, 71, 88, 93, 115, 128, 164, 167, 171, 217, 233, 237, 251, 256, 267, 279, 322, 358, 363, 385, 388, 389, 403, 407, 410, 413, 443, 452, 506, 509, 513, 517, 525, 531, 539, 540, 545, 553, 554, 557, 558, 559, 604, 605, 665, 673, 684, 688, 710, 788, 789, 849, 887, 901, 902, 903, 904, 980, 982, 984, 987, 989, 993, 997, 1014, 1016, 1033, 1037], "quiroz": [37, 57, 118, 179, 184, 239, 262, 264, 308, 347, 348, 349], "fundament": [37, 49, 81, 348, 374, 389, 406, 490, 532, 534, 541, 702, 977, 981], "homogen": [37, 38, 39, 44, 46, 49, 55, 58, 348, 371, 388, 390, 405, 410, 413, 440, 608, 698, 711, 724, 729, 730, 750, 786, 978, 979, 981, 1031], "frequent": [37, 112, 165, 264, 270, 271, 348, 365, 373, 376, 411, 545, 584, 624, 843, 866, 867, 870, 882, 971, 973, 981, 995, 999, 1002], "ari": [37, 58, 348, 403, 699, 1027, 1033], "mutual": [37, 38, 49, 55, 58, 143, 150, 167, 390, 410, 412, 440, 586, 589, 590, 593, 594, 600, 601, 602, 603, 698, 699, 709, 748, 750, 779, 786, 970, 977, 981, 982, 1022, 1028, 1038], "mi": [37, 144, 403, 601, 602, 698, 748, 750, 971, 981, 995], "theoret": [37, 57, 152, 402, 403, 410, 547, 548, 633, 698, 719, 749, 893, 970, 978, 980, 981, 983, 993, 995, 996, 1004, 1005], "nmi": [37, 403, 711, 729, 730, 750], "ami": [37, 49, 58, 403, 698], "score_func": [37, 71, 72, 586, 589, 590, 592, 593, 594, 735, 1022, 1024], "rand_scor": [37, 403, 709, 981, 1034], "adjusted_rand_scor": [37, 38, 49, 58, 348, 403, 698, 709, 735, 750, 779, 981, 1035], "mutual_info_scor": [37, 403, 698, 981, 1030, 1033, 1034], "normalized_mutual_info_scor": [37, 403, 729, 748, 786, 981, 1030, 1036], "adjusted_mutual_info_scor": [37, 38, 49, 58, 403, 699, 709, 748, 750, 779, 981, 1022, 1030, 1034, 1038], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 61, 176, 348], "seaborn": [37, 111, 113, 169, 170, 179, 184, 251, 261, 376, 393, 396, 1001], "sn": [37, 111, 113, 169, 170, 179, 184, 251, 261], "color_palett": [37, 111, 113, 251], "colorblind": [37, 111, 113], "vx": 37, "errorbar": [37, 61, 79, 81, 148, 158, 159, 283, 325, 337, 796, 812], "refer": [37, 38, 60, 63, 71, 90, 126, 132, 149, 161, 218, 236, 239, 268, 284, 291, 303, 313, 314, 315, 316, 317, 318, 319, 348, 363, 365, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 388, 389, 390, 391, 393, 397, 404, 414, 415, 416, 431, 432, 433, 434, 436, 438, 440, 441, 442, 444, 445, 446, 447, 448, 451, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 492, 497, 505, 507, 509, 510, 511, 512, 513, 514, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 538, 541, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 584, 587, 588, 589, 596, 601, 602, 604, 605, 608, 613, 616, 617, 621, 622, 625, 626, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 641, 643, 645, 647, 649, 650, 652, 655, 657, 659, 660, 661, 662, 665, 667, 669, 670, 672, 673, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 698, 699, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 727, 728, 729, 730, 731, 733, 734, 736, 749, 751, 752, 762, 776, 778, 779, 781, 782, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 823, 824, 828, 829, 830, 832, 835, 838, 839, 840, 842, 849, 850, 851, 853, 858, 859, 860, 862, 863, 865, 866, 867, 869, 870, 871, 873, 874, 881, 886, 887, 888, 889, 890, 891, 893, 895, 896, 898, 899, 901, 902, 903, 904, 918, 930, 947, 992, 997, 1002, 1007, 1011, 1015, 1016, 1022, 1026, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "satur": [37, 170, 303], "uniform_labelings_scor": 37, "nwith": [37, 57, 61, 148, 348], "constantli": [37, 200, 1005], "unbound": [37, 980, 1036], "cardin": [37, 119, 120, 126, 172, 173, 309, 310, 319, 403, 410, 457, 547, 548, 551, 552, 553, 554, 558, 559, 560, 673, 866, 867, 874, 901, 902, 903, 904, 981, 982, 989, 991, 1036, 1037], "why": [37, 52, 95, 112, 118, 170, 172, 176, 189, 258, 261, 347, 348, 376, 384, 390, 403, 405, 408, 414, 438, 441, 445, 981, 983, 996, 1011, 1014, 1025], "chart": [37, 266, 982, 1009, 1025], "henc": [37, 60, 72, 170, 204, 233, 270, 334, 347, 348, 362, 371, 378, 380, 382, 390, 403, 407, 410, 411, 481, 502, 533, 535, 536, 537, 557, 584, 637, 640, 646, 654, 656, 666, 681, 698, 699, 703, 709, 724, 750, 779, 786, 809, 810, 828, 829, 830, 831, 832, 868, 978, 980, 981, 982, 987, 988, 991, 1002, 1029, 1030, 1033, 1034, 1036], "safe": [37, 170, 189, 236, 348, 376, 378, 403, 404, 428, 502, 503, 582, 585, 767, 771, 887, 947, 953, 984, 1028, 1029, 1030, 1035, 1036], "stabil": [37, 116, 170, 222, 266, 303, 342, 348, 390, 400, 440, 644, 648, 664, 831, 850, 851, 869, 881, 929, 971, 977, 980, 991, 1002, 1007, 1022, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "mislead": [37, 119, 120, 126, 170, 377, 392, 410, 547, 548, 551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904, 1018, 1035], "meaning": [37, 173, 226, 290, 349, 400, 407, 411, 412, 542, 722, 723, 731, 776, 777, 780, 842, 985, 995, 996, 1022, 1038], "650": [37, 68, 401], "plot_adjusted_for_chance_measur": [37, 68], "brendan": [38, 434, 448, 1038], "frei": [38, 434, 448, 1032], "delbert": [38, 434, 448], "dueck": [38, 434, 448], "messag": [38, 44, 62, 70, 95, 236, 347, 348, 371, 374, 375, 376, 380, 381, 384, 385, 403, 434, 448, 462, 533, 537, 542, 568, 621, 706, 790, 793, 794, 796, 804, 812, 817, 820, 822, 842, 850, 851, 891, 912, 913, 914, 917, 920, 944, 965, 981, 991, 1022, 1026, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "feb": [38, 434, 448], "affinitypropag": [38, 44, 317, 403, 1022, 1025, 1026, 1030, 1033, 1035, 1036, 1037, 1038], "labels_tru": [38, 49, 55, 64, 403, 698, 699, 708, 709, 711, 724, 729, 730, 748, 750, 779, 786], "af": 38, "prefer": [38, 44, 55, 252, 270, 303, 358, 362, 363, 364, 374, 376, 377, 378, 390, 403, 407, 408, 410, 411, 434, 448, 465, 466, 472, 481, 502, 503, 621, 626, 627, 648, 652, 653, 695, 719, 721, 750, 751, 842, 868, 893, 894, 935, 947, 970, 973, 975, 977, 981, 986, 996, 997, 1001, 1014, 1023, 1029, 1031, 1035, 1036], "cluster_centers_indic": [38, 448], "cluster_centers_indices_": [38, 434], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 55, 58, 61, 62, 63, 65, 67, 317, 319, 348, 376, 390, 403, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 449, 1015, 1027], "n_clusters_": [38, 49, 55, 63, 435, 439], "homogeneity_scor": [38, 49, 58, 348, 403, 711, 729, 786, 981], "completeness_scor": [38, 49, 58, 314, 348, 403, 729, 730, 786, 981], "silhouette_scor": [38, 49, 58, 60, 348, 376, 403, 1022, 1026, 1028, 1030, 1032, 1036], "sqeuclidean": [38, 444, 451, 771, 772, 773], "872": [38, 989], "912": 38, "871": [38, 80, 81, 405, 468], "cycler": 38, "viridi": [38, 281, 691], "class_memb": 38, "cluster_cent": [38, 61, 63, 64, 455], "194": [38, 68, 171, 300, 337, 345], "plot_affinity_propag": [38, 68, 434, 448], "impos": [39, 57, 129, 194, 204, 309, 388, 403, 408, 410, 411, 521, 651, 977], "simpli": [39, 86, 130, 152, 160, 225, 237, 239, 270, 294, 315, 316, 362, 371, 376, 378, 381, 388, 390, 405, 406, 407, 408, 410, 411, 479, 689, 755, 758, 860, 932, 973, 981, 982, 983, 984, 995, 1008, 1016, 1029, 1030, 1031], "There": [39, 46, 118, 152, 218, 225, 236, 252, 256, 258, 261, 347, 369, 371, 373, 376, 377, 378, 381, 388, 390, 391, 393, 400, 402, 403, 408, 410, 411, 412, 440, 446, 456, 528, 547, 548, 553, 554, 582, 583, 585, 600, 639, 971, 977, 978, 979, 980, 981, 984, 988, 991, 995, 996, 997, 1000, 1004, 1015, 1022, 1030], "singl": [39, 48, 52, 53, 55, 58, 61, 62, 72, 110, 112, 113, 121, 122, 123, 131, 136, 149, 152, 158, 164, 167, 171, 173, 176, 184, 200, 202, 204, 240, 242, 251, 257, 270, 299, 317, 319, 334, 347, 348, 349, 353, 355, 358, 362, 363, 370, 371, 376, 381, 383, 384, 385, 388, 389, 390, 401, 402, 404, 406, 407, 408, 410, 411, 412, 428, 431, 434, 435, 439, 440, 441, 443, 448, 458, 460, 461, 487, 488, 490, 500, 503, 528, 547, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 576, 586, 593, 594, 596, 600, 621, 626, 628, 637, 660, 661, 667, 670, 671, 672, 684, 686, 688, 704, 715, 716, 717, 718, 729, 730, 731, 734, 767, 778, 788, 789, 790, 793, 794, 804, 811, 815, 816, 818, 819, 822, 830, 833, 834, 838, 850, 851, 852, 862, 863, 866, 867, 868, 873, 874, 888, 889, 901, 902, 903, 904, 909, 945, 949, 968, 970, 976, 977, 978, 981, 982, 984, 986, 988, 989, 991, 995, 996, 997, 1001, 1005, 1007, 1014, 1016, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "unstabl": [39, 66, 170, 403, 405, 406, 683, 687, 929, 930, 997, 1026, 1027, 1029, 1034, 1036, 1038], "quickli": [39, 240, 298, 313, 373, 376, 377, 407, 410, 686, 977, 984, 985, 1005, 1016, 1033], "fight": [39, 204, 1005], "percol": 39, "distanc": [39, 40, 55, 57, 60, 61, 65, 67, 77, 81, 83, 100, 149, 164, 167, 173, 186, 201, 221, 223, 226, 233, 239, 281, 283, 284, 289, 291, 293, 294, 303, 308, 313, 317, 318, 338, 347, 348, 362, 373, 385, 388, 390, 400, 403, 405, 408, 409, 413, 414, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 449, 450, 451, 452, 453, 455, 456, 457, 462, 463, 464, 465, 466, 467, 468, 469, 470, 532, 534, 541, 601, 602, 609, 613, 614, 616, 617, 622, 652, 653, 660, 662, 668, 669, 670, 671, 672, 682, 683, 684, 686, 687, 688, 689, 690, 693, 697, 718, 727, 751, 753, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 771, 772, 773, 774, 783, 784, 787, 822, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 872, 887, 891, 893, 895, 897, 898, 899, 901, 902, 903, 904, 971, 975, 978, 979, 981, 987, 991, 993, 995, 996, 1002, 1014, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "merg": [39, 41, 46, 51, 316, 374, 376, 379, 384, 388, 391, 403, 434, 435, 436, 439, 440, 457, 810, 1015, 1022, 1029], "exagger": [39, 170, 686, 978], "behaviour": [39, 100, 201, 202, 218, 336, 376, 390, 403, 410, 553, 554, 558, 559, 596, 791, 792, 795, 807, 808, 809, 810, 811, 891, 901, 902, 954, 970, 971, 981, 991, 1030, 1033, 1034, 1037, 1038], "shortest": [39, 381, 385, 682, 935, 978, 1035], "mechan": [39, 236, 343, 347, 363, 376, 378, 403, 411, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 979, 997, 1005], "resembl": [39, 204], "brittl": [39, 403], "pronounc": [39, 40, 52, 157], "kneighbors_graph": [39, 44, 62, 67, 281, 390, 403, 435, 439, 835, 836, 837, 839, 841, 843, 844, 845, 847, 984, 1022, 1026, 1031], "geometri": [39, 403, 978, 984], "instabl": [39, 170, 291, 413, 446, 529, 533, 537, 689, 1029, 1032, 1035], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 56, 62, 67, 390, 403, 434, 436, 439, 1015, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1037], "1500": [39, 50, 57, 62, 67, 92, 221, 225, 246], "knn_graph": 39, "include_self": [39, 44, 67, 846, 847, 1026], "230": [39, 68, 578], "plot_agglomerative_clust": [39, 68], "waveform": 40, "euclidean": [40, 57, 58, 186, 233, 239, 281, 284, 289, 313, 318, 338, 348, 400, 402, 403, 408, 409, 410, 411, 413, 434, 435, 438, 439, 440, 444, 446, 451, 454, 457, 525, 531, 583, 609, 613, 616, 617, 670, 672, 684, 686, 689, 690, 693, 755, 756, 762, 763, 764, 765, 771, 772, 773, 774, 783, 784, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 887, 971, 975, 979, 982, 984, 993, 1002, 1026, 1029, 1030, 1031, 1032, 1038], "cityblock": [40, 44, 403, 444, 451, 755, 771, 772, 773, 984], "invari": [40, 373, 390, 403, 413, 608, 683, 740, 808, 809, 977, 978, 981, 996, 1002, 1030, 1033, 1034, 1035], "ie": [40, 66, 96, 434, 698, 761, 977, 991], "inter": [40, 119, 358, 410, 710, 936], "character": [40, 218, 352, 403, 407, 978], "ill": [40, 82, 205, 465, 466, 472, 644, 645, 648, 649, 650, 676, 677, 977, 980, 1015, 1032], "recov": [40, 65, 82, 96, 97, 103, 122, 152, 169, 184, 199, 200, 204, 221, 349, 405, 409, 412, 415, 454, 527, 553, 977, 978, 980, 1002, 1015, 1028], "put": [40, 58, 141, 152, 154, 234, 241, 246, 297, 305, 317, 327, 339, 344, 364, 378, 380, 381, 384, 413, 437, 441, 453, 509, 608, 641, 655, 788, 870, 874, 882, 895, 896, 897, 898, 899, 920, 971, 978, 980, 981, 982, 988, 991, 1004, 1008, 1010, 1016, 1034], "cc": [40, 374], "patheffect": 40, "pairwise_dist": [40, 390, 403, 414, 435, 438, 439, 440, 444, 451, 682, 690, 755, 764, 772, 773, 783, 784, 837, 839, 841, 845, 979, 1022, 1026, 1028, 1030, 1031, 1033, 1034], "sqr": 40, "sign": [40, 79, 86, 96, 99, 114, 184, 251, 297, 342, 376, 403, 408, 411, 538, 576, 583, 600, 629, 630, 652, 653, 660, 662, 668, 669, 670, 671, 728, 735, 893, 897, 928, 930, 946, 977, 981, 986, 991, 995, 996, 1015, 1022, 1026, 1031, 1035, 1037], "phi": [40, 408, 736, 859, 973, 981, 991, 996], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 62, 63, 229], "f781bf": [40, 44, 62, 63], "set_label": [40, 155, 233], "avg_dist": [40, 774], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 66], "cividi": 40, "vmin": [40, 82, 95, 98, 106, 155, 158, 179, 184, 191, 216, 234, 250, 256, 299, 334], "45": [40, 64, 73, 85, 98, 145, 157, 172, 189, 200, 218, 268, 272, 273, 323, 334, 358, 407, 410, 411, 558, 559, 621, 628, 781, 788, 897, 971, 981, 989, 1000, 1012, 1022, 1025], "interclass": 40, "746": [40, 68, 373], "plot_agglomerative_clustering_metr": [40, 68], "hierarchi": [41, 173, 376, 444, 450, 457, 986, 1015], "plot_dendrogram": 41, "kwarg": [41, 98, 236, 378, 383, 417, 432, 458, 529, 532, 534, 611, 625, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 692, 693, 694, 696, 735, 833, 834, 852, 853, 857, 908, 927, 941, 1029, 1033, 1035], "children_": [41, 435, 439, 457], "current_count": 41, "child_idx": 41, "leaf": [41, 117, 128, 130, 352, 356, 403, 410, 414, 435, 436, 437, 438, 439, 440, 444, 451, 457, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 901, 902, 903, 904, 905, 906, 984, 997, 1025, 1027, 1029, 1033, 1036], "linkage_matrix": 41, "column_stack": [41, 297, 305], "distances_": [41, 435, 439, 1034], "distance_threshold": [41, 435, 439, 1031, 1034], "truncate_mod": 41, "parenthesi": [41, 376], "065": [41, 68, 259, 382], "plot_agglomerative_dendrogram": [41, 68], "scalabl": [42, 44, 62, 167, 175, 177, 254, 277, 318, 348, 376, 403, 410, 411, 442, 485, 496, 583, 634, 796, 807, 817, 819, 831, 854, 863, 865, 893, 895, 898, 899, 973, 976, 978, 981, 994, 996, 1005, 1022, 1025, 1026, 1032, 1033, 1036, 1037], "hundr": [42, 124, 222, 307, 371, 407, 410, 555, 556, 978, 1033], "thousand": [42, 118, 233, 235, 307, 348, 371, 403, 410, 850, 851, 898, 978, 1016, 1031, 1033], "million": [42, 56, 157, 176, 411, 686, 978, 996, 1005, 1036, 1037], "chose": [42, 170, 1011], "usag": [42, 53, 71, 74, 85, 99, 109, 123, 146, 170, 171, 230, 234, 236, 255, 290, 292, 299, 330, 349, 362, 371, 375, 376, 378, 379, 383, 384, 386, 390, 391, 393, 403, 407, 408, 413, 414, 438, 440, 444, 458, 483, 555, 556, 585, 603, 642, 652, 653, 654, 660, 662, 663, 670, 671, 672, 673, 674, 771, 774, 783, 784, 852, 893, 901, 902, 903, 904, 930, 970, 971, 973, 980, 981, 982, 984, 996, 1003, 1007, 1011, 1018, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "enjoi": 42, "edit": [42, 373, 375, 376, 379, 380, 384, 388, 393, 524, 528, 823, 975, 977, 982, 988, 1016], "158": [42, 80, 99, 107, 410, 663], "manojkumarsivaraj334": 42, "joblib": [42, 54, 72, 118, 281, 314, 371, 374, 376, 379, 385, 388, 390, 393, 396, 397, 402, 404, 414, 431, 435, 438, 439, 440, 442, 444, 446, 451, 452, 455, 458, 461, 466, 502, 525, 529, 530, 531, 533, 536, 537, 539, 540, 542, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 588, 596, 604, 626, 628, 633, 641, 645, 647, 649, 651, 652, 653, 655, 657, 659, 660, 662, 670, 673, 682, 683, 684, 685, 686, 687, 688, 767, 771, 774, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 835, 836, 839, 841, 843, 844, 846, 847, 852, 853, 854, 855, 888, 889, 947, 948, 949, 951, 966, 981, 1002, 1022, 1023, 1025, 1027, 1029, 1030, 1031, 1033, 1034, 1037], "cpu_count": [42, 118, 281, 949], "n_center": [42, 506], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 57, 58, 167, 282, 295, 306, 317, 348, 372, 403, 436, 437, 440, 441, 442, 443, 446, 453, 454, 456, 498, 543, 625, 840, 1003, 1018, 1022, 1026, 1029, 1034, 1038], "subcluster_centers_": [42, 436], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 64], "256": [42, 48, 53, 124, 309, 363, 371, 403, 410, 443, 462, 531, 540, 557, 849, 881, 891, 1016, 1036], "max_no_improv": [42, 61, 64, 443, 531, 532, 533, 540, 1036, 1037], "t_mini_batch": [42, 64], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 58, 60, 61, 63, 64, 95, 317, 348, 434, 437, 441, 442, 443, 1015], "935": [42, 68, 125, 136, 1029], "plot_birch_vs_minibatchkmean": [42, 68], "bisectingkmean": [43, 403, 1036, 1037, 1038], "__doc__": [43, 75, 157, 249, 390], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 62], "variant": [43, 95, 163, 166, 167, 261, 316, 317, 348, 349, 382, 403, 406, 408, 411, 413, 443, 454, 484, 487, 488, 506, 509, 537, 553, 554, 559, 609, 613, 616, 617, 621, 624, 632, 633, 635, 639, 666, 698, 791, 795, 797, 798, 799, 808, 815, 836, 854, 890, 971, 977, 978, 979, 980, 981, 983, 984, 995, 1002, 1016, 1022, 1030], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 376, 384, 828, 829, 830, 831, 832, 1025, 1030, 1038], "flat": [43, 95, 101, 171, 221, 222, 223, 259, 403, 411, 434, 440, 442, 455, 503, 988, 1015, 1022, 1023, 1038], "label_out": 43, "317": [43, 68, 157], "plot_bisect_kmean": [43, 68], "null": [44, 71, 170, 171, 172, 261, 267, 403, 407, 642, 663, 674, 698, 724, 750, 786, 818, 977, 978, 981, 996, 1032], "mismatch": [44, 980, 1031], "warn": [44, 53, 62, 72, 171, 200, 215, 236, 264, 281, 298, 299, 306, 307, 313, 362, 365, 376, 379, 380, 381, 390, 397, 404, 411, 441, 443, 453, 490, 544, 547, 548, 551, 552, 553, 554, 558, 559, 560, 565, 566, 567, 568, 569, 570, 572, 596, 630, 664, 684, 687, 688, 706, 707, 722, 723, 731, 776, 777, 780, 828, 829, 830, 832, 857, 858, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 913, 914, 920, 930, 947, 951, 967, 968, 970, 981, 991, 1014, 1022, 1024, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "noisy_circl": [44, 62], "noisy_moon": [44, 62], "no_structur": [44, 62], "anisotropicli": [44, 62], "170": [44, 57, 58, 62, 160, 162, 382], "x_aniso": [44, 57, 62], "aniso": [44, 62], "plot_num": [44, 62, 229], "default_bas": [44, 62], "quantil": [44, 53, 63, 91, 112, 114, 167, 178, 219, 303, 306, 307, 388, 410, 432, 433, 452, 513, 546, 554, 556, 651, 664, 716, 738, 741, 743, 816, 858, 870, 871, 872, 882, 883, 981, 991, 1003, 1018, 1022, 1026, 1029, 1031, 1035, 1036, 1038], "damp": [44, 403, 434, 448], "min_sampl": [44, 49, 65, 388, 390, 403, 414, 438, 440, 444, 450, 451, 665, 977, 1031, 1035], "xi": [44, 65, 373, 403, 406, 411, 444, 450, 503, 995, 1033], "min_cluster_s": [44, 65, 319, 403, 440, 444, 450, 1031], "allow_single_clust": [44, 440], "hdbscan_min_cluster_s": 44, "hdbscan_min_sampl": 44, "220": [44, 134, 136, 1022], "i_dataset": [44, 62, 229], "algo_param": [44, 62], "param": [44, 55, 61, 62, 71, 124, 126, 127, 221, 235, 236, 259, 261, 269, 273, 285, 298, 376, 378, 390, 410, 413, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 682, 683, 684, 685, 686, 788, 789, 790, 793, 794, 802, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 1028, 1032, 1033, 1035, 1036], "estimate_bandwidth": [44, 63, 403, 442, 455], "symmetr": [44, 125, 173, 202, 390, 401, 403, 446, 456, 457, 468, 513, 521, 523, 684, 688, 689, 698, 699, 709, 710, 711, 717, 721, 729, 730, 748, 750, 756, 778, 786, 788, 789, 967, 970, 977, 981, 984, 1038], "meanshift": [44, 317, 403, 434, 1025, 1026, 1027, 1030, 1032, 1033, 1036, 1037, 1038], "bin_seed": [44, 63, 442, 455, 1033], "two_mean": 44, "spectralclust": [44, 317, 403, 434, 984, 1022, 1023, 1032, 1034, 1035, 1036, 1037, 1038], "nearest_neighbor": [44, 446, 685], "average_linkag": 44, "gmm": [44, 167, 245, 247, 250, 251, 252, 253, 498, 506, 789, 809, 980, 1022, 1023, 1026, 1027, 1028], "gaussianmixtur": [44, 57, 247, 248, 249, 250, 251, 252, 409, 788, 980, 1028, 1030, 1031, 1035, 1036, 1038], "covariance_typ": [44, 247, 248, 250, 251, 252, 788, 789, 1038], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 62, 299, 384, 385], "catch_warn": [44, 62, 236, 298, 299], "filterwarn": [44, 62, 215, 298, 299, 376, 991], "userwarn": [44, 62, 114, 192, 209, 339, 353, 381, 706, 991, 1028, 1030, 1035], "fulli": [44, 55, 119, 125, 362, 370, 371, 390, 403, 409, 410, 412, 437, 441, 551, 552, 558, 559, 901, 902, 903, 904, 905, 907, 970, 971, 977, 986, 994, 1001, 1035, 1036], "t1": [44, 46, 62, 215, 223, 226, 229], "ff7f00": [44, 62, 229], "4daf4a": [44, 62], "a65628": [44, 62], "984ea3": [44, 62], "999999": [44, 62], "e41a1c": [44, 62], "dede00": [44, 62, 63], "000000": [44, 170, 189, 218, 261, 307, 730], "transax": [44, 62, 225, 229, 248, 289, 305], "017": [44, 68, 382, 465, 466], "plot_cluster_comparison": [44, 68], "bad": [45, 60, 61, 153, 170, 347, 358, 376, 403, 413, 686, 739, 970, 977, 978, 983, 989, 1015, 1022], "eight": [45, 1016], "deliv": [45, 362, 1005], "though": [45, 55, 118, 149, 176, 179, 239, 267, 286, 305, 307, 348, 349, 358, 362, 370, 373, 376, 378, 389, 390, 403, 408, 409, 410, 411, 412, 693, 797, 799, 893, 970, 971, 973, 978, 981, 984, 991, 995, 1016, 1030], "3d": [45, 48, 67, 90, 101, 102, 197, 221, 223, 225, 356, 411, 500, 580, 944, 1029, 1030, 1032], "mplot3d": [45, 67, 90, 101, 102, 171, 197, 221, 223], "noqa": [45, 67, 90, 101, 102, 125, 149, 164, 165, 171, 197, 221, 223, 272, 273, 315, 347, 380, 573, 574, 621, 793, 794, 970, 1031], "f401": [45, 67, 90, 101, 102, 171, 197, 221, 223], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 132, 170, 236, 238, 305, 315, 358, 397, 410, 556, 728, 858, 970, 981, 991, 995, 1033, 1034], "elev": [45, 67, 90, 101, 102, 171, 197, 221, 225], "azim": [45, 67, 90, 101, 102, 171, 197, 221, 225], "134": [45, 53, 102, 124, 261, 1025], "xaxi": [45, 90, 101, 102, 118, 197, 221, 223, 226, 281, 286, 347], "set_ticklabel": [45, 90, 101, 102, 197, 347], "zaxi": [45, 90, 101, 102, 197, 221], "petal": [45, 90, 104, 106, 121, 243, 315, 318, 373, 404, 906, 997, 1013, 1014], "sepal": [45, 90, 104, 106, 121, 154, 183, 243, 284, 315, 318, 331, 373, 991, 1013, 1014], "length": [45, 70, 89, 90, 92, 104, 106, 121, 149, 152, 153, 154, 157, 158, 160, 176, 183, 236, 237, 240, 243, 284, 315, 318, 331, 349, 369, 373, 376, 384, 385, 390, 404, 408, 410, 411, 413, 439, 484, 502, 503, 506, 509, 517, 545, 557, 575, 576, 583, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 626, 640, 641, 644, 645, 646, 647, 648, 650, 651, 654, 655, 656, 657, 675, 678, 774, 790, 793, 794, 804, 819, 821, 824, 825, 827, 835, 836, 837, 839, 841, 880, 906, 913, 915, 919, 935, 936, 952, 955, 980, 987, 991, 1007, 1013, 1014, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1038], "set_zlabel": [45, 90, 197], "setosa": [45, 90, 102, 104, 270, 271, 373, 498, 1007, 1014], "versicolour": [45, 90, 102, 104, 373, 1014], "virginica": [45, 90, 102, 104, 270, 271, 373, 498, 981, 1014], "text3d": [45, 102], "plot_cluster_iri": [45, 68], "voxel": [46, 66, 579], "multipl": [46, 69, 76, 92, 105, 112, 118, 120, 121, 167, 170, 194, 234, 261, 273, 283, 313, 319, 362, 363, 364, 370, 372, 373, 376, 378, 379, 380, 381, 388, 390, 402, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 438, 454, 458, 460, 461, 463, 468, 482, 485, 486, 489, 490, 491, 497, 498, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 545, 547, 548, 549, 550, 553, 554, 555, 556, 557, 575, 593, 601, 602, 604, 605, 621, 626, 628, 633, 634, 635, 636, 640, 641, 644, 646, 647, 648, 651, 654, 655, 656, 657, 660, 661, 662, 665, 667, 670, 672, 673, 683, 684, 686, 687, 688, 715, 716, 721, 738, 739, 741, 743, 744, 746, 778, 781, 784, 788, 789, 790, 792, 793, 794, 795, 796, 802, 804, 805, 806, 807, 808, 809, 810, 815, 816, 817, 819, 823, 824, 825, 826, 827, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 855, 858, 870, 874, 882, 885, 886, 893, 894, 895, 898, 909, 924, 929, 930, 952, 955, 973, 976, 977, 978, 982, 983, 984, 988, 989, 994, 995, 997, 1001, 1002, 1007, 1016, 1022, 1023, 1025, 1028, 1029, 1032, 1033, 1034, 1035, 1037, 1038], "partli": [46, 762], "procedur": [46, 56, 118, 125, 149, 180, 188, 251, 263, 306, 310, 334, 347, 358, 376, 378, 388, 389, 390, 391, 401, 402, 405, 407, 408, 410, 412, 525, 531, 532, 534, 539, 540, 541, 547, 548, 549, 550, 553, 554, 587, 589, 596, 603, 638, 666, 668, 681, 721, 778, 850, 851, 870, 882, 952, 970, 977, 983, 989, 991, 994, 995, 996, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "solut": [46, 179, 184, 189, 191, 205, 214, 229, 235, 316, 334, 374, 378, 390, 400, 403, 405, 407, 408, 411, 412, 443, 445, 447, 525, 531, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 604, 640, 642, 644, 646, 648, 649, 650, 652, 654, 656, 658, 659, 660, 661, 662, 663, 666, 668, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 788, 789, 804, 842, 850, 851, 974, 975, 977, 978, 980, 985, 987, 995, 996, 1000, 1005, 1011, 1014, 1016, 1022, 1025, 1035, 1036, 1037], "closest": [46, 64, 204, 378, 403, 434, 436, 437, 441, 442, 443, 453, 647, 772, 773, 823, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 972, 975, 982, 984, 1014], "partit": [46, 66, 70, 128, 130, 261, 299, 390, 400, 401, 403, 407, 410, 443, 445, 447, 456, 505, 551, 552, 553, 554, 557, 558, 559, 698, 699, 709, 779, 841, 901, 902, 903, 904, 980, 984, 987, 991, 997, 1016], "cluster_qr": [46, 403, 446, 456, 1036], "qr": [46, 202, 528, 535, 538, 929, 930, 978, 1028], "pivot": [46, 272, 273], "cheung": [46, 1023], "andrew": [46, 403, 456, 685, 689, 711, 730, 786, 868, 985, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "knyazev": [46, 403, 446, 456, 689, 1032, 1035, 1036], "ucdenv": 46, "skimag": [46, 47, 370, 1015], "spectral_clust": [46, 66, 1030, 1032, 1034, 1035, 1036, 1037], "orig_coin": [46, 47], "speed": [46, 47, 57, 70, 98, 109, 118, 165, 171, 186, 189, 193, 281, 315, 323, 347, 349, 364, 365, 376, 379, 385, 388, 390, 401, 403, 408, 410, 411, 414, 437, 438, 441, 442, 443, 444, 446, 451, 453, 454, 455, 456, 525, 526, 604, 621, 626, 627, 628, 633, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 658, 675, 678, 686, 788, 789, 796, 817, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 868, 930, 970, 978, 980, 982, 995, 1005, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "down": [46, 47, 81, 112, 215, 216, 223, 233, 234, 236, 264, 300, 303, 338, 358, 370, 379, 384, 405, 408, 437, 444, 450, 584, 587, 588, 633, 643, 767, 771, 774, 862, 863, 868, 871, 872, 883, 895, 898, 905, 977, 1007, 1015, 1030], "alias": [46, 47, 236, 374, 376, 379, 394, 441, 453, 1022, 1026, 1036], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 1015], "anti_alias": [46, 47, 1015], "img_to_graph": [46, 66, 411, 1025, 1035], "exponenti": [46, 75, 152, 157, 286, 291, 409, 410, 413, 443, 530, 548, 553, 608, 613, 616, 633, 637, 751, 752, 833, 834, 838, 850, 851, 868, 973, 977, 981, 996, 1014, 1029, 1035], "beta": [46, 85, 169, 204, 382, 401, 403, 406, 530, 532, 534, 541, 638, 722, 723, 729, 735, 776, 786, 788, 981, 1014, 1024, 1027, 1029, 1031, 1032], "voronoi": [46, 66, 403], "n_region": 46, "extra": [46, 121, 238, 281, 349, 374, 375, 377, 380, 390, 410, 411, 432, 437, 441, 453, 458, 526, 551, 552, 560, 584, 585, 694, 695, 696, 814, 837, 903, 904, 920, 941, 980, 981, 984, 1022, 1025, 1027, 1028, 1030, 1035, 1037], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 446, 456, 682, 685, 689, 1032, 1035, 1036, 1037], "amg": [46, 66, 403, 446, 456, 685, 689, 1032, 1036, 1037], "pyamg": [46, 393, 396, 403, 446, 456, 685, 689], "toler": [46, 73, 164, 191, 193, 216, 217, 338, 349, 371, 378, 385, 403, 415, 437, 441, 446, 453, 456, 465, 466, 472, 476, 477, 478, 525, 526, 527, 529, 530, 534, 535, 536, 537, 538, 539, 541, 542, 553, 554, 555, 556, 621, 640, 641, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 670, 672, 673, 675, 676, 677, 678, 682, 683, 684, 685, 687, 688, 689, 833, 834, 838, 842, 850, 851, 888, 889, 893, 894, 895, 896, 897, 898, 899, 967, 977, 981, 995, 996, 1012, 1034, 1035, 1036, 1037], "eigen_tol": [46, 446, 456, 685, 689, 1023, 1036, 1037], "todo": [46, 233, 380, 384, 390, 403], "21243": 46, "assign_label": [46, 403, 446, 456], "individu": [46, 60, 80, 110, 115, 132, 136, 144, 161, 167, 168, 173, 174, 200, 218, 230, 239, 264, 266, 313, 338, 342, 363, 377, 380, 383, 385, 390, 392, 400, 404, 407, 410, 411, 431, 446, 456, 458, 490, 495, 497, 503, 549, 550, 553, 554, 556, 557, 559, 561, 562, 563, 564, 597, 603, 604, 626, 627, 637, 639, 651, 652, 653, 662, 665, 666, 667, 668, 669, 670, 671, 672, 681, 706, 713, 721, 727, 743, 744, 778, 790, 804, 821, 825, 826, 828, 829, 830, 831, 832, 851, 854, 862, 863, 865, 866, 867, 870, 872, 873, 878, 879, 880, 893, 894, 981, 982, 991, 996, 1011, 1016, 1018, 1023, 1026, 1028, 1034, 1036, 1038], "comment": [46, 347, 374, 375, 376, 377, 379, 380, 384, 481, 573, 981], "paus": 46, "21194": [46, 1035], "57": [46, 152, 170, 216, 270, 300, 333, 373, 374, 393, 395, 396, 404, 699, 774, 826, 981, 991, 1022], "73": [46, 92, 114, 265, 300, 323, 389, 790, 804, 839, 902, 991, 1012, 1022, 1024], "290": [46, 68, 128, 136, 323, 682, 683, 687, 978], "plot_coin_segment": [46, 68], "spatial": [47, 49, 55, 173, 184, 217, 299, 371, 390, 403, 414, 438, 440, 444, 446, 451, 673, 686, 753, 756, 771, 772, 773, 774, 783, 784, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 977, 984, 991, 1024, 1028, 1035, 1038], "constrain": [47, 95, 122, 129, 171, 191, 297, 314, 332, 334, 369, 390, 402, 403, 408, 410, 503, 555, 556, 629, 652, 653, 684, 688, 818, 977, 980, 1026], "piec": [47, 201, 363, 980], "grid_to_graph": [47, 51, 54, 403, 411, 1015, 1035], "st": [47, 67, 261, 318, 1025, 1028, 1030], "106": [47, 149, 243, 272, 277, 373, 869, 975, 1023], "4697": 47, "217": [47, 68, 529, 535], "plot_coin_ward_segment": [47, 68], "vq": [48, 58], "palac": 48, "china": [48, 403, 500, 501, 578], "literatur": [48, 157, 261, 348, 373, 376, 382, 384, 388, 389, 403, 406, 408, 410, 437, 441, 443, 495, 530, 532, 534, 541, 549, 550, 582, 585, 702, 788, 970, 973, 977, 981, 1032], "codebook": [48, 560, 823], "palett": [48, 170, 261], "byte": [48, 53, 411, 481, 497, 502, 503, 576, 582, 583, 585, 946, 1014, 1016, 1022, 1029, 1030, 1037], "wherea": [48, 53, 67, 80, 111, 128, 214, 239, 262, 263, 264, 270, 284, 308, 338, 342, 343, 364, 391, 407, 410, 438, 559, 652, 653, 792, 808, 821, 973, 980, 982, 984, 991, 997, 1035], "rgb": [48, 371, 411, 487, 488, 577, 578, 581], "gif": 48, "pick": [48, 55, 60, 173, 237, 269, 317, 322, 371, 376, 380, 403, 410, 437, 454, 517, 667, 903, 904, 970, 977, 978, 980, 995, 1033], "012": [48, 173, 176, 348], "015": [48, 348, 352, 989], "robertlayton": 48, "load_sample_imag": [48, 577, 578, 1031], "pairwise_distances_argmin": [48, 64, 317, 773, 1030, 1036, 1037, 1038], "n_color": 48, "photo": 48, "jpg": [48, 500, 578], "255": [48, 72, 76, 98, 281, 299, 309, 316, 371, 487, 488, 555, 556], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 240], "book": [48, 70, 437, 441, 443, 823, 828, 832, 977, 978, 979, 982, 999, 1034], "alongsid": [48, 376, 382, 390, 393, 412, 981, 988, 1001, 1002], "306": [48, 68, 252, 253, 268, 277, 621], "plot_color_quant": [48, 68], "750": [49, 55, 120, 261], "math": [49, 70, 149, 239, 261, 262, 373, 393, 757], "db": [49, 55, 403], "n_noise_": 49, "come": [49, 67, 70, 80, 86, 100, 101, 149, 152, 234, 313, 347, 348, 362, 364, 369, 373, 376, 377, 380, 384, 388, 390, 393, 403, 407, 410, 411, 433, 444, 450, 466, 544, 699, 786, 811, 895, 898, 970, 971, 975, 978, 980, 984, 987, 996, 1007, 1022, 1033, 1036, 1038], "handi": [49, 71, 348, 349, 377, 1038], "883": 49, "917": 49, "916": 49, "626": [49, 186], "unique_label": [49, 55, 348, 378, 385], "core_samples_mask": 49, "zeros_lik": [49, 202, 270], "bool": [49, 66, 81, 165, 218, 356, 376, 415, 416, 417, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 513, 516, 517, 518, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 694, 696, 697, 701, 702, 703, 705, 706, 707, 708, 719, 720, 721, 722, 723, 724, 731, 734, 735, 743, 744, 747, 749, 754, 756, 760, 761, 762, 767, 771, 775, 776, 777, 778, 780, 782, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 804, 808, 809, 812, 813, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 911, 912, 913, 914, 924, 930, 931, 943, 946, 952, 954, 962, 967, 968, 969, 971, 1031, 1034, 1035], "core_sample_indices_": [49, 438], "class_member_mask": 49, "markerfacecolor": [49, 55, 61, 63, 64], "129": [49, 68, 202, 1012, 1022], "plot_dbscan": [49, 68, 414, 438], "constitut": [50, 390, 407, 410, 444, 450, 582, 583, 585, 985], "standpoint": 50, "proce": [50, 146, 181, 374, 380, 406, 407, 410, 434, 977], "reassign": [50, 376, 441, 443, 1023, 1027], "success": [50, 167, 254, 268, 277, 358, 398, 403, 407, 408, 410, 509, 558, 573, 790, 793, 794, 811, 898, 984, 1005, 1011, 1015, 1018, 1034], "becom": [50, 55, 57, 72, 80, 202, 204, 236, 239, 263, 281, 304, 308, 334, 338, 347, 358, 370, 376, 378, 380, 384, 390, 391, 403, 405, 410, 411, 413, 434, 444, 448, 449, 451, 575, 582, 583, 585, 613, 621, 652, 653, 670, 672, 867, 893, 894, 900, 976, 977, 978, 980, 984, 991, 996, 1014, 1016, 1023, 1030, 1031, 1034, 1035, 1036, 1037], "fetch_olivetti_fac": [50, 95, 120, 238, 371, 1030, 1031, 1032], "olivetti": [50, 95, 120, 369, 408, 489, 1018, 1022, 1030], "ndownload": 50, "figshar": 50, "5976027": 50, "extract_patches_2d": [50, 98, 411, 1030], "patch_siz": [50, 98, 411, 577, 578], "buffer": [50, 1035], "max_patch": [50, 411, 577, 578, 1030], "4i": 50, "dt": [50, 98, 111, 133, 410, 411, 997], "2400": 50, "700": [50, 315], "800": [50, 123, 316, 371, 578, 686], "1100": 50, "1200": [50, 124, 303, 410], "1300": 50, "1400": [50, 468], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 316], "2200": [50, 371, 487], "2300": [50, 189], "ntrain": 50, "199": [50, 68, 641, 744, 996], "plot_dict_face_patch": [50, 68], "agglo": [51, 439, 1015], "featureagglomer": [51, 54, 434, 435, 998, 1015, 1025, 1031, 1032, 1035, 1036, 1038], "x_reduc": [51, 90, 130, 439, 1015], "x_restor": 51, "images_restor": 51, "vmax": [51, 82, 95, 98, 106, 155, 158, 179, 184, 191, 216, 234, 250, 256, 299, 334], "090": [51, 68], "plot_digits_agglomer": [51, 68], "rich": [52, 384, 388, 403, 433, 1005, 1033, 1036], "richer": [52, 105, 403], "uneven": [52, 256, 403, 407], "patholog": [52, 980, 1028], "clean": [52, 71, 199, 358, 368, 374, 409, 987, 991, 1032], "fring": [52, 403], "sensibl": [52, 164, 348, 378, 977, 991], "resampl": [52, 125, 157, 170, 218, 285, 385, 388, 390, 549, 550, 955, 1002, 1031, 1035], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 221, 222, 223, 682, 683, 684, 686, 978, 1023, 1028, 1032, 1036, 1037], "611": [52, 68, 259, 261, 535], "plot_digits_linkag": [52, 68], "raccoon": [53, 98, 408], "addition": [53, 72, 114, 170, 200, 218, 236, 314, 316, 348, 376, 388, 401, 411, 604, 605, 640, 646, 665, 870, 970, 971, 981, 989, 1001, 1028], "adapt": [53, 55, 111, 112, 124, 125, 155, 246, 247, 305, 338, 363, 374, 375, 376, 385, 403, 410, 413, 509, 510, 511, 512, 670, 671, 672, 850, 851, 977, 983, 985, 991, 995, 1001, 1002, 1030, 1031, 1038], "pooch": [53, 376, 393, 396], "instal": [53, 243, 281, 313, 314, 315, 316, 317, 318, 319, 362, 363, 365, 376, 377, 379, 380, 382, 384, 388, 389, 396, 399, 403, 411, 446, 456, 490, 685, 689, 997, 999, 1016, 1029, 1030, 1031, 1035, 1036], "raccoon_fac": [53, 98], "nbyte": [53, 233], "768": [53, 189, 219, 326, 328], "1024": [53, 105, 443, 462, 532, 891, 1035], "uint8": [53, 98, 370, 491, 500, 501, 1034], "786432": 53, "unsign": [53, 99, 371, 576, 946], "786": [53, 71], "kilobyt": 53, "behind": [53, 80, 112, 378, 380, 384, 402, 405, 410, 980, 984, 993, 1038], "simplest": [53, 407, 978, 981, 1014, 1015], "certainli": [53, 70, 348], "compressed_raccoon_uniform": 53, "_discret": [53, 306], "248": [53, 306, 348], "futurewarn": [53, 171, 179, 306, 313, 376, 384, 1029, 1030, 1031, 1033, 1035, 1038], "onward": [53, 306, 867, 1026], "subsampl": [53, 105, 124, 127, 171, 200, 217, 218, 257, 306, 310, 315, 452, 553, 554, 555, 556, 557, 626, 673, 695, 793, 794, 819, 858, 870, 882, 909, 919, 973, 977, 1002, 1004, 1022, 1032, 1036, 1038], "200_000": [53, 306, 858, 1038], "silenc": [53, 171, 236, 306, 490], "disabl": [53, 116, 306, 310, 347, 374, 376, 411, 443, 454, 462, 531, 532, 533, 540, 553, 554, 555, 556, 852, 891, 913, 914, 991, 1028, 1031, 1035, 1037], "spot": [53, 231, 403], "leav": [53, 112, 117, 126, 171, 173, 218, 268, 308, 356, 358, 362, 373, 375, 381, 390, 403, 410, 435, 436, 439, 440, 457, 497, 551, 552, 553, 554, 555, 556, 558, 559, 560, 667, 669, 792, 797, 798, 799, 800, 808, 809, 833, 834, 882, 901, 902, 903, 904, 970, 978, 984, 988, 997, 1011, 1014, 1022, 1029, 1031, 1033, 1034, 1038], "bin_edg": 53, "bin_edges_": [53, 304, 858], "bin_cent": [53, 200], "625": [53, 200, 298, 301, 702], "875": [53, 153, 663], "375": [53, 202, 219, 264, 277, 348, 443, 743, 981], "140": [53, 410, 504, 510, 511, 512, 549, 550, 982], "171": [53, 149, 373, 382, 781, 981], "203": 53, "234": [53, 828, 832, 850, 851, 983], "axvlin": [53, 60, 73, 82, 103, 124, 134, 170, 172, 173, 189, 267, 342, 1012], "get_ybound": 53, "state": [53, 57, 70, 72, 80, 202, 233, 241, 247, 267, 315, 358, 363, 364, 376, 378, 382, 384, 388, 390, 391, 402, 411, 416, 434, 437, 441, 443, 448, 453, 469, 538, 583, 673, 793, 794, 802, 804, 806, 833, 834, 840, 888, 889, 916, 970, 971, 977, 983, 986, 993, 1001, 1002, 1005, 1024, 1026, 1028, 1030, 1032, 1035, 1038], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "79431128": 53, "185": [53, 149, 161, 373, 382, 850, 851], "18557327": 53, "224": [53, 85, 96, 107, 130, 403, 718], "01945707": 53, "save": [53, 70, 72, 239, 300, 375, 376, 380, 382, 383, 384, 390, 397, 407, 415, 462, 528, 529, 621, 833, 834, 891, 977, 981, 991, 997, 1005, 1016, 1022, 1025, 1029, 1032], "verifi": [53, 60, 109, 170, 200, 376, 381, 399, 965, 984], "6291456": 53, "surpris": [53, 171, 977, 1001, 1024], "x8": 53, "ndarrai": [53, 58, 90, 200, 243, 259, 260, 261, 376, 377, 378, 382, 383, 399, 411, 414, 415, 418, 419, 421, 424, 425, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 694, 695, 696, 709, 712, 715, 716, 717, 720, 721, 731, 738, 739, 741, 743, 744, 746, 747, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 911, 912, 913, 918, 919, 929, 930, 931, 932, 935, 936, 943, 945, 946, 950, 953, 954, 956, 957, 958, 959, 962, 967, 968, 981, 996, 1002, 1025, 1029, 1032, 1033, 1036, 1037, 1038], "practic": [53, 71, 80, 86, 98, 118, 122, 152, 169, 170, 176, 184, 202, 229, 235, 262, 269, 287, 288, 315, 334, 338, 363, 365, 376, 378, 379, 382, 384, 389, 390, 403, 405, 407, 408, 409, 410, 411, 413, 441, 446, 456, 515, 518, 583, 626, 627, 664, 788, 832, 886, 893, 970, 971, 975, 980, 981, 982, 983, 984, 987, 988, 991, 1001, 1002, 1003, 1005, 1007, 1016, 1017, 1018, 1024, 1028, 1030, 1032, 1034], "gain": [53, 223, 268, 281, 283, 323, 347, 348, 356, 375, 382, 384, 388, 410, 526, 551, 555, 556, 558, 719, 749, 788, 789, 822, 901, 903, 982, 986, 994, 997, 1025, 1029, 1032], "380": [53, 68, 1016], "plot_face_compress": [53, 68], "anova": [54, 143, 150, 167, 329, 345, 404, 498, 509, 586, 589, 590, 592, 593, 594, 598, 599, 600, 603, 707, 815, 819, 853, 854, 873, 893, 898, 996], "bayesianridg": [54, 164, 179, 180, 184, 315, 621, 638, 977, 1029, 1030, 1031, 1032, 1035, 1036, 1038], "shutil": [54, 72, 404], "tempfil": [54, 283, 313, 404, 984], "feature_select": [54, 71, 72, 74, 143, 144, 145, 146, 147, 148, 149, 167, 243, 315, 317, 337, 358, 365, 390, 394, 404, 412, 575, 970, 1022, 1023, 1025, 1026, 1027, 1028, 1029], "kfold": [54, 118, 124, 138, 256, 266, 358, 407, 431, 466, 561, 562, 588, 596, 641, 645, 647, 649, 655, 657, 659, 667, 790, 793, 794, 796, 798, 800, 804, 809, 811, 812, 813, 814, 815, 816, 817, 818, 820, 824, 827, 874, 1011, 1023, 1024, 1025, 1027, 1028, 1030, 1032], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 78, 272, 1001], "cachedir": [54, 72, 385, 404], "mkdtemp": [54, 404], "mem": [54, 382, 502], "n_x": [54, 579], "n_y": [54, 579, 983, 991], "parcel": [54, 67, 403], "ward__n_clust": 54, "n_job": [54, 72, 73, 118, 119, 120, 125, 126, 132, 139, 148, 149, 164, 170, 171, 172, 173, 222, 224, 241, 260, 262, 263, 265, 276, 281, 313, 314, 315, 318, 342, 363, 376, 390, 410, 414, 431, 438, 440, 442, 444, 446, 451, 452, 455, 458, 461, 466, 525, 529, 530, 531, 533, 536, 537, 539, 540, 542, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 588, 596, 604, 626, 628, 633, 641, 645, 647, 649, 651, 652, 653, 655, 657, 659, 660, 662, 670, 673, 682, 683, 684, 685, 686, 687, 688, 767, 771, 774, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 852, 855, 888, 889, 947, 949, 970, 981, 982, 984, 1011, 1012, 1016, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 435, 439, 1022, 1026], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 111, 115, 116, 127, 231, 255, 260, 268, 270, 314, 348, 352, 356, 365, 373, 375, 376, 378, 385, 391, 400, 402, 403, 407, 408, 410, 411, 414, 438, 440, 446, 458, 481, 502, 506, 508, 514, 516, 520, 521, 525, 531, 532, 534, 544, 551, 552, 553, 554, 558, 559, 560, 561, 562, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 611, 626, 652, 653, 660, 662, 670, 671, 672, 701, 711, 720, 727, 729, 739, 756, 762, 771, 775, 781, 782, 823, 833, 834, 835, 836, 837, 839, 841, 843, 844, 848, 850, 851, 856, 872, 873, 876, 880, 893, 898, 901, 902, 903, 904, 932, 933, 934, 952, 954, 955, 975, 977, 981, 982, 985, 988, 991, 992, 993, 997, 1005, 1007, 1027, 1028, 1030, 1032, 1033, 1034, 1036, 1038], "return_dist": [54, 457, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 984, 1026], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 144, 412, 586, 589, 590, 592, 593, 594, 598, 599, 603, 1025, 1029, 1036], "cach": [54, 167, 262, 281, 282, 295, 362, 363, 371, 390, 435, 439, 444, 462, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 502, 790, 835, 837, 853, 854, 891, 895, 896, 897, 898, 899, 966, 984, 996, 1025, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038], "selectpercentil": [54, 71, 243, 337, 412, 586, 589, 590, 592, 593, 597, 600, 1023, 1028, 1038], "percentag": [54, 104, 122, 191, 218, 256, 264, 267, 407, 412, 528, 535, 538, 543, 587, 588, 642, 663, 674, 697, 727, 739, 808, 809, 810, 823, 905, 907, 982, 997, 1024, 1028, 1034, 1035], "anova__percentil": [54, 337], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 149, 197, 219, 371, 373, 1024], "638768": 54, "rdbu_r": [54, 82, 106, 334], "temporari": [54, 70, 72, 362, 462, 681, 774, 891, 984, 1025, 1026, 1029, 1035, 1036], "worri": [54, 978, 1008], "rmtree": [54, 72, 404], "ignore_error": 54, "460": [54, 68], "plot_feature_agglomeration_vs_univariate_select": [54, 68], "perspect": [55, 60, 200, 362, 371, 388, 391, 524, 637, 893, 974], "certain": [55, 170, 205, 217, 236, 261, 281, 307, 338, 358, 371, 372, 374, 380, 390, 392, 403, 408, 412, 632, 643, 647, 652, 657, 678, 858, 893, 970, 973, 977, 978, 981, 982, 985, 991, 996, 1001, 1007, 1011, 1027, 1031, 1034, 1037], "conveni": [55, 204, 239, 368, 384, 388, 404, 407, 411, 413, 418, 437, 441, 443, 445, 447, 458, 483, 605, 670, 672, 693, 721, 778, 852, 853, 955, 971, 973, 977, 978, 988, 1005, 1016, 1022], "ground_truth": [55, 288], "proba_map": 55, "class_index": 55, "ci": [55, 363, 379, 380, 384, 983, 1028, 1030], "preambl": 55, "parameters_str": 55, "greatest": [55, 393, 403, 860, 1030], "remark": [55, 86, 149, 364, 376, 991], "unlik": [55, 56, 118, 170, 171, 221, 223, 251, 303, 332, 376, 378, 382, 388, 390, 394, 405, 407, 408, 411, 440, 444, 529, 644, 645, 648, 649, 650, 676, 677, 778, 811, 833, 834, 873, 884, 896, 977, 980, 981, 988, 996, 1022, 1028], "bi": [55, 411], "isotrop": [55, 57, 61, 100, 154, 156, 221, 223, 403, 405, 413, 506, 513, 526, 609, 613, 614, 616, 617], "worth": [55, 121, 171, 200, 376, 384, 1005], "rememb": [55, 378, 381, 393, 411, 984, 988, 997], "hardli": [55, 601, 602], "proper": [55, 189, 218, 364, 382, 401, 410, 443, 535, 547, 670, 930, 956, 976, 977, 978, 981, 996, 1022, 1032, 1033, 1034, 1035, 1036, 1037], "must": [55, 170, 171, 173, 181, 184, 217, 218, 229, 240, 256, 287, 304, 309, 347, 358, 371, 375, 376, 377, 378, 380, 382, 384, 390, 391, 394, 399, 401, 403, 404, 407, 408, 410, 411, 412, 413, 414, 424, 432, 435, 438, 439, 440, 441, 443, 444, 445, 449, 451, 453, 455, 456, 458, 460, 461, 463, 468, 481, 502, 503, 506, 517, 525, 531, 532, 533, 534, 535, 537, 538, 541, 547, 548, 553, 554, 555, 556, 561, 562, 575, 576, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 604, 605, 611, 614, 621, 622, 623, 624, 626, 627, 632, 636, 637, 642, 643, 646, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 693, 697, 700, 703, 728, 739, 757, 764, 767, 771, 774, 781, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 795, 797, 799, 800, 802, 804, 805, 806, 808, 809, 811, 817, 819, 820, 828, 829, 830, 831, 832, 835, 836, 837, 839, 841, 842, 843, 844, 845, 848, 849, 850, 851, 853, 856, 857, 858, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 893, 894, 895, 896, 897, 898, 899, 900, 906, 949, 956, 965, 967, 970, 971, 977, 978, 979, 981, 984, 985, 987, 988, 995, 996, 997, 1007, 1016, 1022, 1025, 1029, 1033, 1035, 1036], "maintain": [55, 205, 218, 221, 236, 261, 363, 365, 375, 379, 382, 383, 384, 388, 390, 393, 403, 410, 434, 436, 862, 863, 869, 870, 873, 878, 881, 882, 884, 977, 978, 991, 1001, 1002, 1007, 1018, 1037], "mitig": [55, 172, 310, 363, 364, 978, 997, 1014, 1015, 1034], "great": [55, 169, 170, 198, 358, 376, 388, 408, 757, 1002, 1005, 1022, 1029], "appropri": [55, 57, 103, 157, 170, 204, 270, 352, 358, 374, 376, 378, 384, 390, 402, 403, 407, 409, 410, 414, 438, 444, 451, 483, 484, 485, 490, 494, 495, 496, 498, 499, 504, 571, 576, 585, 586, 589, 590, 592, 593, 594, 666, 668, 681, 703, 835, 836, 837, 839, 841, 843, 844, 845, 965, 977, 980, 981, 991, 1026, 1029, 1035, 1038], "immedi": [55, 376, 388, 790, 804, 814, 815, 1030], "hdb": [55, 440], "probabilities_": [55, 440], "capabl": [55, 56, 86, 157, 204, 225, 378, 390, 393, 982, 985, 996, 997, 1005, 1022, 1031], "constraint": [55, 57, 67, 95, 110, 136, 167, 195, 204, 239, 256, 298, 299, 300, 314, 376, 388, 408, 411, 481, 502, 503, 555, 556, 626, 629, 808, 809, 950, 970, 972, 977, 978, 995, 1026, 1029, 1030, 1033, 1035, 1037], "reachabl": [55, 65, 440, 444, 449, 450, 451, 839, 935], "extend": [55, 56, 67, 109, 201, 250, 268, 334, 373, 374, 388, 390, 401, 402, 403, 408, 410, 625, 714, 822, 825, 826, 858, 860, 877, 893, 894, 908, 973, 981, 982, 996, 1002, 1003, 1018, 1027, 1028, 1029, 1030, 1032, 1037], "fragment": [55, 98], "sparser": [55, 179, 191, 408, 465, 472, 533, 537, 977, 984, 995], "Not": [55, 138, 171, 362, 388, 403, 421, 422, 425, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 463, 464, 465, 466, 467, 468, 469, 470, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 557, 560, 563, 564, 575, 576, 577, 582, 583, 585, 621, 622, 623, 624, 671, 682, 683, 684, 685, 687, 761, 785, 788, 789, 790, 793, 794, 804, 830, 833, 834, 837, 838, 839, 841, 845, 857, 865, 868, 869, 871, 885, 886, 897, 981, 987, 1001, 1031], "mention": [55, 86, 112, 218, 314, 358, 362, 376, 380, 381, 388, 390, 403, 690, 885, 886, 970, 975, 977, 1002, 1005, 1016, 1029, 1030, 1031], "until": [55, 123, 149, 208, 273, 315, 317, 381, 390, 391, 400, 403, 407, 412, 502, 503, 551, 552, 553, 554, 558, 559, 560, 587, 640, 641, 646, 647, 652, 653, 654, 655, 656, 657, 660, 662, 665, 670, 671, 672, 688, 788, 789, 793, 794, 850, 851, 890, 893, 901, 902, 903, 904, 956, 970, 977, 978, 986, 994, 997, 1016, 1025, 1029, 1030, 1036], "tradeoff": [55, 115, 167, 234, 254, 268, 269, 277, 347, 362, 376, 384, 409, 509, 558, 692, 696, 720, 782, 819, 854, 873, 893, 978, 1014, 1031, 1034], "comfort": [55, 410], "epsilon": [55, 65, 182, 224, 235, 319, 341, 408, 440, 449, 637, 643, 661, 670, 672, 739, 850, 851, 894, 896, 899, 974, 977, 981, 985, 995, 996, 1014, 1022], "incap": 55, "suffici": [55, 123, 132, 208, 275, 334, 362, 390, 403, 412, 526, 540, 651, 676, 677, 809, 810, 982, 984, 1002, 1031, 1037, 1038], "intervent": 55, "inaccess": 55, "ultim": [55, 225, 377], "world": [55, 70, 74, 170, 204, 225, 239, 347, 362, 365, 369, 373, 403, 408, 411, 971, 981, 983, 1000, 1002, 1005, 1010, 1018, 1022], "whose": [55, 79, 80, 81, 149, 157, 200, 332, 371, 384, 385, 390, 401, 403, 405, 410, 412, 413, 416, 431, 432, 433, 442, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 509, 528, 532, 534, 535, 538, 541, 543, 566, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 634, 665, 689, 712, 790, 797, 804, 818, 839, 858, 885, 886, 929, 960, 961, 975, 982, 986, 987, 988, 996, 1025, 1030, 1031, 1033, 1036], "respect": [55, 67, 90, 100, 112, 116, 118, 121, 129, 160, 176, 179, 184, 189, 202, 214, 217, 221, 223, 230, 233, 235, 239, 251, 270, 287, 288, 300, 308, 317, 331, 338, 362, 363, 371, 372, 376, 401, 403, 406, 408, 410, 411, 413, 440, 458, 461, 464, 465, 466, 467, 468, 469, 470, 528, 534, 535, 541, 547, 555, 556, 591, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 630, 637, 665, 684, 688, 706, 721, 775, 778, 788, 789, 829, 839, 850, 851, 905, 907, 970, 974, 975, 977, 978, 981, 984, 985, 986, 987, 991, 996, 1001, 1005, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "neighborhood": [55, 82, 167, 221, 282, 284, 295, 373, 390, 403, 408, 414, 438, 440, 444, 451, 496, 498, 509, 535, 543, 622, 625, 690, 819, 835, 836, 839, 841, 842, 843, 844, 845, 847, 853, 854, 873, 978, 987, 1003, 1018, 1031], "recomput": [55, 56, 240, 242, 283, 313, 463, 468, 977, 993, 1027, 1038], "span": [55, 78, 125, 234, 258, 371, 403, 411, 543, 630, 790, 793, 981, 1015], "cut_dist": [55, 440], "491": [55, 68, 690], "plot_hdbscan": [55, 68], "intract": [56, 408, 978, 986], "inferenti": 56, "meta": [56, 70, 110, 135, 136, 167, 200, 236, 270, 319, 358, 370, 374, 378, 380, 388, 390, 394, 399, 401, 402, 412, 413, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 569, 575, 576, 582, 584, 585, 588, 591, 597, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 790, 791, 792, 793, 794, 797, 799, 804, 808, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 941, 970, 982, 1002, 1003, 1018, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1036, 1037], "chirag": 56, "nagpal": 56, "christo": [56, 1031, 1032, 1034, 1036], "arida": [56, 1031, 1032, 1034, 1036], "baseestim": [56, 109, 236, 281, 376, 389, 390, 413, 427, 626, 627, 922, 1022, 1029, 1032, 1034, 1036, 1037], "clone": [56, 125, 160, 171, 236, 300, 358, 374, 376, 379, 380, 382, 384, 390, 401, 404, 413, 431, 459, 563, 564, 591, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 796, 812, 817, 820, 824, 827, 853, 854, 890, 1002, 1022, 1028, 1030, 1034, 1038], "metaestim": [56, 378, 390, 890, 1026, 1035, 1036], "available_if": [56, 390, 1035, 1036], "check_is_fit": [56, 109, 236, 379, 385, 390, 1032, 1035, 1036], "5000": [56, 186, 215, 216, 218, 315, 874], "_classifier_ha": 56, "deleg": [56, 382, 428, 906, 1026, 1028, 1034], "unfit": [56, 404, 428, 458, 563, 564, 596, 605, 1030, 1032], "classifier_": [56, 236], "inductivecluster": 56, "clusterer_": 56, "plot_scatt": 56, "cluster_label": [56, 60], "x_new": [56, 404, 408, 412, 427, 436, 437, 439, 441, 443, 525, 526, 527, 528, 529, 530, 531, 533, 535, 536, 537, 538, 543, 561, 563, 564, 576, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 622, 624, 629, 632, 633, 634, 635, 636, 682, 683, 684, 685, 686, 842, 849, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 885, 886, 993, 1007], "y_new": 56, "declar": [56, 222, 236, 358, 376, 377, 378, 382, 390, 437, 440, 441, 453, 465, 466, 472, 684, 688, 1029, 1033], "membership": [56, 391, 400, 402, 403, 505, 506, 507, 508, 509, 513, 516, 996], "inductive_learn": 56, "probable_clust": 56, "response_method": [56, 114, 128, 133, 183, 192, 209, 264, 284, 289, 292, 308, 330, 331, 338, 353, 625, 626, 627, 692, 694, 696], "302": [56, 68, 261, 621], "plot_inductive_clust": [56, 68], "meant": [57, 149, 239, 371, 378, 385, 468, 487, 671, 839, 947, 948, 971, 985, 987, 991, 1023], "unintuit": 57, "possibli": [57, 86, 149, 200, 215, 338, 348, 373, 375, 384, 397, 403, 410, 411, 445, 447, 583, 828, 829, 830, 831, 832, 898, 899, 901, 902, 903, 904, 970, 973, 978, 984, 991, 1037], "undesir": [57, 153, 413], "phil": [57, 1027, 1038], "roth": [57, 1027, 1030, 1037], "mr": [57, 318, 1023, 1026, 1036], "spheric": [57, 85, 128, 223, 248, 250, 251, 294, 372, 757, 788, 789, 977, 980, 984, 1001], "anisotrop": [57, 154, 413, 611, 613, 616], "ellipt": [57, 977], "60834549": 57, "63667341": 57, "40887718": 57, "85253229": 57, "x_vari": 57, "y_vari": 57, "unequ": [57, 1030], "x_filter": 57, "unevenli": [57, 200, 256], "y_filter": 57, "set_i": 57, "scenario": [57, 70, 152, 176, 204, 264, 358, 383, 393, 407, 410, 531, 537, 539, 540, 975, 981, 991, 1032], "criteria": [57, 118, 167, 178, 189, 208, 219, 251, 261, 384, 403, 412, 460, 476, 477, 478, 495, 551, 552, 553, 554, 558, 559, 640, 646, 650, 652, 653, 665, 686, 854, 873, 893, 894, 901, 902, 903, 904, 971, 980, 985, 995, 1015, 1025, 1030, 1033], "knowledg": [57, 120, 170, 217, 239, 261, 365, 371, 376, 379, 382, 389, 390, 403, 407, 410, 414, 438, 505, 549, 550, 557, 714, 729, 733, 776, 822, 981, 982, 993, 1016], "consequ": [57, 103, 218, 261, 262, 303, 331, 358, 408, 410, 555, 556, 560, 649, 650, 971, 977, 981, 997, 1031, 1033, 1038], "likelihood": [57, 77, 79, 80, 81, 83, 103, 152, 153, 154, 156, 157, 158, 159, 161, 167, 188, 218, 250, 254, 261, 267, 277, 300, 303, 378, 390, 401, 405, 408, 410, 413, 431, 463, 464, 465, 466, 467, 468, 469, 470, 471, 509, 526, 530, 535, 543, 544, 545, 604, 605, 625, 639, 652, 706, 734, 788, 789, 790, 816, 819, 838, 849, 869, 881, 895, 896, 898, 899, 977, 980, 983, 991, 996, 1025, 1026, 1031, 1037], "inertia": [57, 58, 61, 348, 403, 437, 441, 443, 446, 453, 454, 456, 457, 1033], "common_param": [57, 125, 171, 235, 263, 264, 338], "unexpect": [57, 236, 358, 376, 381, 384, 397, 529, 690, 981, 996, 1024, 1030, 1031, 1034, 1036, 1038], "suffic": [57, 58, 378, 1016], "propos": [57, 78, 79, 281, 371, 376, 378, 388, 390, 403, 405, 410, 415, 416, 444, 469, 529, 601, 602, 670, 671, 672, 850, 851, 977, 980, 984, 995, 999, 1029], "inflat": [57, 169, 170, 172, 403, 407, 981, 991], "allevi": [57, 179, 184, 403, 983], "fastest": [57, 259, 349, 441, 664, 666, 668, 681, 929, 930, 980], "restart": [57, 379, 384, 441, 525, 531, 532, 537, 539, 540, 604, 605, 978, 1035], "766": [57, 68], "plot_kmeans_assumpt": [57, 68], "judg": [58, 206, 403, 1011], "definit": [58, 81, 188, 200, 268, 281, 348, 376, 377, 378, 390, 392, 403, 405, 406, 408, 521, 523, 529, 605, 622, 686, 702, 712, 721, 751, 788, 789, 970, 973, 975, 977, 979, 981, 984, 995, 1000, 1018, 1026, 1030, 1037], "shorthand": [58, 390, 404, 461, 555, 556, 854, 855, 1025], "homo": 58, "compl": 58, "mea": 58, "context": [58, 239, 243, 281, 362, 363, 370, 375, 377, 389, 390, 403, 404, 409, 410, 411, 413, 414, 431, 438, 440, 442, 444, 446, 451, 452, 455, 458, 461, 462, 466, 525, 529, 530, 531, 533, 536, 537, 538, 539, 540, 542, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 588, 596, 604, 620, 621, 624, 626, 628, 633, 641, 645, 647, 649, 651, 652, 653, 655, 657, 659, 660, 662, 670, 673, 682, 683, 684, 685, 686, 687, 688, 767, 771, 774, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 835, 836, 839, 841, 843, 844, 846, 847, 852, 855, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 949, 971, 977, 981, 987, 991, 995, 1002, 1005, 1014, 1022, 1029, 1030, 1035, 1038], "n_digit": 58, "1797": [58, 89, 259, 300, 322, 373, 439, 496, 526, 527, 528, 529, 593, 594, 682, 683, 684, 685, 984, 1013], "bench_k_mean": 58, "tabl": [58, 218, 261, 376, 377, 380, 385, 403, 411, 576, 652, 674, 790, 804, 830, 946, 977, 981, 982, 987, 1001, 1023], "fit_tim": [58, 122, 189, 208, 263, 407, 816, 817], "inertia_": [58, 61, 64, 437, 441, 443, 1033], "clustering_metr": 58, "sample_s": [58, 234, 348, 784], "formatter_result": 58, "determinist": [58, 125, 363, 372, 378, 390, 403, 437, 441, 443, 445, 446, 447, 452, 453, 456, 545, 553, 554, 558, 559, 577, 578, 685, 689, 801, 802, 849, 901, 902, 973, 977, 1023, 1026, 1028, 1030, 1031, 1034, 1037, 1038], "ttime": 58, "tinertia": 58, "thomo": 58, "tcompl": 58, "tv": 58, "tari": 58, "tami": 58, "tsilhouett": 58, "__________________________________________________________________________________": 58, "173": [58, 382, 578], "69545": 58, "645": [58, 186, 219], "621": [58, 762], "469": 58, "617": [58, 264, 403, 762], "152": [58, 239, 244, 382], "077": [58, 223, 281], "69735": 58, "681": [58, 382], "723": [58, 70, 76, 235], "701": 58, "574": [58, 528, 535], "698": 58, "72686": 58, "636": [58, 184, 348, 382], "658": [58, 86], "647": 58, "521": [58, 123, 136], "643": [58, 259], "reduced_data": 58, "mesh": [58, 121, 130, 154, 234, 289, 297, 305, 327, 330], "169": [58, 300], "mark": [58, 92, 144, 165, 265, 272, 368, 376, 378, 380, 384, 385, 390, 403, 529, 601, 602, 605, 626, 652, 846, 847, 888, 889, 906, 920, 925, 930, 977, 1005, 1018, 1022, 1023, 1028, 1030, 1031, 1038], "682": [58, 68, 382], "plot_kmeans_digit": [58, 68], "kmeans_plusplu": [59, 403, 1034], "4000": [59, 127, 249], "centers_init": 59, "4eacc5": [59, 64], "ff9c34": [59, 64], "4e9a06": [59, 64], "cluster_data": 59, "plot_kmeans_plusplu": [59, 68], "wrong": [60, 200, 287, 347, 358, 373, 376, 378, 411, 498, 719, 749, 784, 981, 987, 996, 1025, 1027, 1029, 1030, 1031, 1032, 1035], "wide": [60, 61, 90, 115, 233, 304, 388, 403, 408, 411, 970, 977, 1001, 1005, 1016, 1022, 1024, 1038], "ambival": 60, "thick": [60, 291, 984], "ow": 60, "7049787496083262": 60, "5882004012129721": 60, "6505186632729437": 60, "561464362648773": 60, "4857596147013469": 60, "silhouette_sampl": [60, 784, 1026, 1028, 1030, 1038], "distinct": [60, 261, 324, 347, 349, 371, 378, 381, 390, 391, 407, 410, 411, 583, 791, 800, 808, 867, 868, 888, 889, 970, 977, 984, 987, 1016, 1030], "center_box": [60, 506], "range_n_clust": 60, "set_size_inch": [60, 138, 240], "lie": [60, 85, 148, 170, 234, 303, 324, 332, 334, 408, 410, 600, 841, 843, 844, 845, 893, 894, 975, 978, 981, 991, 996], "insert": [60, 170, 200, 388, 403, 481, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 908], "blank": [60, 381, 971, 997], "demarc": 60, "silhouette_avg": 60, "sample_silhouette_valu": 60, "y_lower": [60, 125], "aggreg": [60, 116, 218, 264, 270, 317, 319, 403, 410, 528, 549, 550, 715, 716, 721, 738, 739, 741, 743, 744, 746, 778, 982, 984, 991, 1038], "ith_cluster_silhouette_valu": 60, "size_cluster_i": 60, "y_upper": [60, 125], "fill_betweenx": 60, "2nd": [60, 90, 160, 308, 403, 414, 438, 524, 991, 1037], "lw": [60, 78, 79, 81, 99, 104, 105, 194, 201, 203, 206, 210, 217, 224, 249, 256, 271, 286, 303, 324, 341], "fontweight": [60, 195], "bold": [60, 125, 189, 195, 376], "975": [60, 68, 149, 169, 996], "plot_kmeans_silhouette_analysi": [60, 68], "reach": [61, 118, 149, 200, 202, 216, 218, 263, 317, 334, 356, 381, 391, 393, 403, 408, 412, 444, 451, 502, 503, 587, 588, 621, 638, 639, 640, 641, 646, 647, 648, 649, 650, 654, 655, 656, 657, 660, 661, 662, 670, 671, 672, 673, 675, 676, 677, 678, 722, 723, 776, 788, 789, 850, 851, 890, 970, 981, 985, 995, 997, 1005, 1033, 1037, 1038], "optimum": [61, 158, 170, 176, 274, 408, 466, 977, 980], "stuck": [61, 686, 978], "check_random_st": [61, 216, 223, 232, 238, 378, 385, 390], "trade": [61, 78, 118, 172, 204, 260, 262, 263, 334, 347, 402, 403, 405, 547, 548, 553, 554, 628, 650, 686, 790, 793, 794, 804, 816, 978, 985, 993, 995, 996, 1002], "n_init_rang": 61, "n_samples_per_cent": 61, "make_data": 61, "n_clusters_tru": 61, "init_s": [61, 348, 443], "factori": [61, 261, 411, 735, 951, 981], "empti": [61, 70, 105, 212, 325, 362, 371, 378, 380, 403, 415, 477, 527, 555, 556, 625, 801, 858, 898, 900, 908, 913, 914, 920, 940, 971, 996, 1014, 1024, 1026, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "run_id": 61, "km": [61, 317, 348], "fmt": [61, 211], "my_memb": [61, 63, 64], "994": [61, 68, 281], "plot_kmeans_stability_low_dim_dens": [61, 68], "fast": [62, 176, 184, 189, 215, 216, 234, 235, 304, 349, 362, 371, 376, 385, 403, 405, 407, 408, 410, 411, 415, 440, 441, 463, 468, 502, 526, 527, 529, 532, 534, 538, 541, 558, 559, 560, 582, 583, 585, 626, 627, 634, 652, 653, 666, 668, 681, 693, 790, 804, 814, 815, 825, 826, 833, 834, 838, 849, 930, 950, 973, 977, 980, 983, 984, 986, 987, 997, 1001, 1005, 1016, 1022, 1023, 1028, 1029, 1032, 1033], "globular": [62, 403], "cleanli": [62, 1022], "191": [62, 68, 355, 357, 382, 982], "plot_linkage_comparison": [62, 68], "dorin": [63, 442], "comaniciu": [63, 403, 442], "meer": [63, 403, 442], "ieee": [63, 79, 81, 373, 403, 405, 412, 416, 442, 469, 528, 557, 658, 679, 680, 718, 762, 977, 981, 987], "transact": [63, 373, 403, 405, 414, 416, 438, 442, 469, 528, 532, 534, 541, 557, 638, 658, 679, 680, 718, 719, 749, 762, 977, 981], "intellig": [63, 149, 347, 373, 403, 410, 442, 549, 550, 632, 690, 718, 823, 850, 851, 982, 993, 1002, 1005], "2002": [63, 401, 403, 410, 431, 442, 587, 588, 719, 749, 840, 888, 973, 981], "603": [63, 142, 442], "619": [63, 442], "labels_uniqu": 63, "263": [63, 68], "plot_mean_shift": [63, 68, 455], "3000": [64, 224, 885, 886], "k_mean": [64, 385, 390, 1015, 1030, 1038], "t_batch": 64, "pairwis": [64, 169, 170, 233, 270, 313, 317, 318, 347, 362, 368, 378, 390, 403, 408, 413, 440, 452, 455, 456, 462, 481, 502, 503, 529, 555, 556, 614, 632, 633, 634, 635, 636, 637, 682, 684, 686, 688, 690, 693, 771, 774, 781, 783, 784, 821, 837, 841, 845, 859, 891, 973, 981, 984, 993, 996, 1018, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038], "k_means_cluster_cent": 64, "mbk_means_cluster_cent": 64, "k_means_label": 64, "mbk_means_label": 64, "ninertia": 64, "bbbbbb": 64, "126": [64, 68, 207, 219, 348, 410], "plot_mini_batch_kmean": [64, 68], "shane": [65, 1031, 1034, 1037], "grigsbi": 65, "refug": 65, "rocktalu": 65, "cluster_optics_dbscan": [65, 403], "n_points_per_clust": 65, "c1": [65, 122, 160, 232, 309], "c2": [65, 122, 160, 232, 309], "c3": [65, 122, 309], "c4": [65, 309, 1003, 1018], "c5": [65, 1003, 1018], "c6": 65, "clust": [65, 444, 451], "labels_050": 65, "reachability_": [65, 403, 444, 449, 450, 451], "core_dist": [65, 449], "core_distances_": [65, 444, 449, 451], "ordering_": [65, 403, 444, 449, 450, 451], "labels_200": 65, "ax3": [65, 325], "ax4": 65, "klass": 65, "xk": [65, 544], "rk": 65, "full_lik": 65, "noptic": 65, "ndbscan": 65, "729": [65, 68], "plot_opt": [65, 68], "tri": [66, 104, 221, 290, 338, 363, 378, 381, 388, 391, 401, 443, 445, 447, 625, 626, 627, 664, 686, 692, 694, 696, 804, 949, 986, 1004, 1007, 1024, 1030, 1034], "intens": [66, 98, 281, 373, 377, 408, 437, 441, 453, 601, 602, 626, 627, 792, 970, 988, 1005, 1030], "weakli": 66, "outlin": [66, 121, 376, 378, 390, 391, 392, 403, 970, 1018], "center1": 66, "center2": 66, "center3": 66, "67": [66, 170, 218, 373, 510, 511, 512, 621, 661, 707, 804, 971, 981, 995, 1022], "58": [66, 79, 300, 373, 405, 416, 469, 757, 991, 1012], "center4": 66, "radius1": 66, "radius2": 66, "radius3": 66, "radius4": 66, "circle1": 66, "circle2": 66, "circle3": 66, "circle4": 66, "label_im": 66, "cleaner": 66, "plot_segmentation_toi": [66, 68], "swiss": [67, 167, 220, 227, 403, 524, 686, 687, 1036], "roll": [67, 167, 220, 227, 379, 403, 524, 686, 687, 924, 1005, 1032, 1037], "sole": [67, 388, 403], "oppos": [67, 236, 380, 399, 403, 889, 984, 996, 1007, 1022], "make_swiss_rol": [67, 225, 1036], "thinner": 67, "fig1": 67, "set_posit": [67, 101, 102, 211, 303], "jet": 67, "fig2": 67, "121": [67, 114, 165, 234, 235, 258, 277, 663, 991], "242": [67, 68, 873, 1022], "plot_ward_structured_vs_unstructur": [67, 68], "988": 68, "auto_examples_clust": 68, "chain": [69, 76, 112, 167, 278, 280, 281, 284, 358, 365, 368, 388, 390, 402, 413, 490, 496, 535, 605, 621, 652, 731, 790, 819, 822, 824, 825, 826, 827, 853, 854, 873, 970, 971, 982, 986, 998, 1001, 1005, 1016, 1018], "raster": 70, "caption": 70, "serv": [70, 99, 112, 158, 264, 338, 404, 540, 545, 632, 973, 1036], "matt": [70, 1025, 1026, 1027, 1032, 1033, 1037, 1038], "terri": [70, 1026], "truncatedsvd": [70, 130, 222, 348, 408, 528, 529, 533, 534, 535, 686, 852, 855, 978, 1024, 1029, 1033, 1034, 1036], "dictvector": [70, 167, 346, 348, 350, 371, 411, 482, 576, 582, 583, 584, 585, 866, 1022, 1023, 1026, 1032, 1034, 1035, 1038], "compris": [70, 125, 259, 347, 348, 349, 371, 388, 408, 410, 509, 797, 978], "subject": [70, 129, 252, 264, 347, 371, 376, 378, 380, 388, 390, 391, 401, 402, 405, 407, 408, 489, 652, 653, 679, 856, 951, 972, 977, 996, 1000, 1016, 1031, 1032, 1035, 1037], "mccall": 70, "mksol": 70, "dseg": 70, "ti": [70, 200, 248, 251, 259, 343, 362, 401, 403, 593, 594, 629, 714, 719, 749, 788, 789, 895, 898, 901, 980, 981, 996, 1023, 1025, 1026, 1030, 1032, 1036, 1037, 1038], "fred": [70, 1022, 1035], "575": [70, 200], "3539": 70, "1993apr6": 70, "131900": 70, "8407": 70, "perhap": [70, 121, 373, 375, 384, 390, 409, 1002], "militari": 70, "slug": 70, "school": [70, 373, 403, 781, 981], "physic": [70, 118, 363, 499, 946, 977, 1038], "teacher": 70, "ex": [70, 374, 377, 393, 1026, 1027], "fighter": 70, "jock": 70, "wasn": [70, 236, 1031], "poundal": 70, "flink": 70, "funni": 70, "propon": 70, "si": 70, "insist": 70, "safeti": [70, 388, 404, 947, 1002, 1032], "ball": [70, 286, 294, 403, 409, 442, 686, 833, 834, 838, 841, 843, 844, 845, 1022, 1024, 1027, 1033], "mari": [70, 1030, 1031, 1032, 1033, 1036], "shafer": 70, "nasa": [70, 347, 348, 373], "am": [70, 75, 80, 132, 171, 347, 381, 405, 468, 487, 1029], "dryden": 70, "stateless": [70, 348, 364, 378, 390, 411, 576, 577, 583, 632, 856, 857, 865, 991, 1038], "subject_body_extractor": 70, "startswith": [70, 222, 294], "subject_body_transform": 70, "sentenc": [70, 347, 349, 371, 391, 411], "text_stat": 70, "num_sent": 70, "text_stats_transform": 70, "subjectbodyextractor": 70, "subjectbodi": 70, "union": [70, 170, 404, 731, 747, 852, 1029], "body_bow": 70, "pull": [70, 316, 363, 374, 379, 390, 391, 1032], "body_stat": 70, "transformer_weight": [70, 458, 461, 852, 1027, 1034], "396": [70, 149, 373, 1016], "394": [70, 148, 150, 161], "plot_column_transform": [70, 76], "imput": [71, 132, 166, 172, 231, 241, 243, 314, 317, 365, 368, 380, 389, 390, 404, 410, 484, 495, 559, 574, 633, 639, 666, 815, 836, 854, 912, 914, 1001, 1002, 1018, 1024, 1025], "miss": [71, 132, 149, 166, 172, 231, 241, 261, 281, 314, 318, 358, 362, 365, 368, 371, 373, 375, 376, 378, 380, 381, 390, 399, 402, 403, 404, 405, 440, 466, 484, 490, 492, 495, 555, 556, 559, 560, 621, 622, 623, 624, 633, 639, 666, 684, 688, 720, 762, 815, 836, 854, 862, 863, 867, 869, 870, 873, 874, 878, 881, 882, 884, 977, 978, 981, 1001, 1002, 1003, 1005, 1018, 1024, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "chi": [71, 80, 112, 307, 368, 412, 513, 586, 589, 590, 592, 593, 594, 598, 599, 600, 603, 632, 633, 634, 635, 636, 751, 752, 1018, 1022, 1027, 1028], "dispatch": [71, 365, 399, 462, 790, 804, 814, 815, 816, 891, 947, 948, 1011, 1018, 1037], "processor": [71, 132, 170, 365, 414, 431, 438, 440, 442, 444, 446, 451, 452, 455, 458, 461, 466, 525, 529, 530, 531, 533, 536, 537, 539, 540, 542, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 588, 596, 604, 626, 628, 633, 641, 645, 647, 649, 651, 652, 653, 655, 657, 659, 660, 662, 670, 673, 682, 683, 684, 685, 686, 687, 688, 767, 771, 774, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 835, 836, 839, 841, 843, 844, 846, 847, 852, 855, 888, 889], "pedro": [71, 1023, 1025, 1026, 1030], "chi2": [71, 411, 412, 446, 575, 586, 589, 590, 592, 593, 594, 599, 600, 603, 614, 632, 633, 634, 635, 636, 637, 752, 758, 767, 1022, 1029, 1036], "simpleimput": [71, 132, 164, 165, 172, 231, 241, 243, 314, 317, 358, 390, 621, 622, 623, 971, 991, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "40945": 71, "titan": [71, 172, 243, 313, 317, 318], "surviv": [71, 172, 970, 1001], "ag": [71, 149, 170, 172, 188, 189, 200, 218, 240, 241, 243, 303, 316, 317, 318, 371, 373, 1005, 1007, 1014], "fare": [71, 172, 243, 317, 318, 1026, 1027], "embark": [71, 172, 243, 313, 317, 318], "sex": [71, 149, 170, 172, 188, 189, 243, 318, 373, 989, 1014], "femal": [71, 170, 318, 381, 866, 867, 991], "male": [71, 170, 318, 381, 866, 867, 991], "pclass": [71, 172, 243, 313, 317, 318], "numeric_featur": [71, 317], "numeric_transform": [71, 317], "categorical_transform": 71, "selector": [71, 145, 146, 239, 342, 384, 411, 460, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 1024, 1032, 1034, 1038], "preprocessor": [71, 132, 170, 200, 231, 239, 241, 309, 314, 316, 317, 318, 404, 411, 582, 583, 585, 1001, 1016, 1022, 1025, 1030, 1032], "798": [71, 410], "lt": [71, 72, 117, 132, 170, 251, 259, 273, 374, 376], "0x7fca8a172e80": 71, "pipelinepipelin": [71, 72, 117, 132, 146, 170, 172, 230, 231, 240, 241, 243, 262, 268, 309, 314, 317], "columntransformercolumntransform": [71, 132, 170, 171, 172, 231, 241, 309, 314, 317], "simpleimputersimpleimput": [71, 132, 172, 231, 241, 314, 317], "standardscalerstandardscal": [71, 132, 170, 230, 231, 240, 241, 243, 268, 314, 317], "onehotencoderonehotencod": [71, 117, 132, 170, 171, 231, 241, 314, 317], "selectpercentileselectpercentil": [71, 243], "logisticregressionlogisticregress": [71, 117, 230, 231, 241, 243, 300, 314, 317], "make_column_selector": [71, 122, 132, 239, 404, 458, 461, 1032], "subset_featur": 71, "Then": [71, 111, 113, 117, 120, 132, 135, 146, 170, 176, 184, 188, 200, 204, 225, 230, 236, 242, 263, 264, 347, 370, 380, 382, 384, 393, 400, 401, 403, 406, 408, 411, 412, 564, 587, 713, 749, 790, 804, 853, 893, 894, 971, 980, 981, 987, 996, 1016, 1031], "1047": 71, "1118": 71, "684": [71, 80], "1045": 71, "841": 71, "1046": [71, 251], "kb": [71, 170, 171], "numerical_transform": 71, "yourself": [71, 375, 376, 377, 381, 384, 985], "dtype_exclud": [71, 460], "dtype_includ": [71, 122, 132, 239, 404, 460], "_column_transform": [71, 132], "0x7fca54c8a850": 71, "0x7fcadeb2e2d0": 71, "exactli": [71, 112, 169, 179, 184, 193, 200, 204, 252, 269, 304, 342, 347, 376, 378, 400, 403, 407, 408, 411, 416, 440, 447, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 509, 520, 584, 585, 609, 670, 672, 697, 699, 756, 791, 808, 814, 973, 977, 978, 979, 981, 982, 997, 1015, 1016, 1022, 1028, 1029, 1035], "hyperparamet": [71, 111, 152, 153, 159, 160, 164, 167, 171, 179, 184, 189, 214, 218, 229, 239, 254, 259, 264, 266, 277, 283, 300, 347, 378, 390, 403, 407, 408, 410, 413, 496, 529, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 637, 647, 653, 659, 667, 670, 721, 778, 790, 804, 970, 975, 976, 977, 980, 981, 983, 985, 987, 995, 1002, 1016, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038], "cartesian": [71, 400, 627, 984, 1037], "preprocessor__num__imputer__strategi": 71, "preprocessor__cat__selector__percentil": 71, "classifier__c": 71, "search_cv": 71, "param_distribut": [71, 152, 262, 269, 273, 315, 389, 794, 802, 804, 1038], "randomizedsearchcvrandomizedsearchcv": 71, "trigger": [71, 72, 380, 404, 850, 851, 853, 854, 913, 914, 930, 977, 1016, 1030, 1036, 1037], "best_params_": [71, 73, 125, 152, 235, 251, 259, 265, 315, 334, 389, 790, 793, 794, 804, 970, 1012, 1016], "best_score_": [71, 73, 235, 262, 265, 266, 334, 667, 669, 790, 793, 794, 804, 1011, 1012, 1016, 1033], "cv_results_": [71, 72, 73, 82, 118, 138, 148, 251, 259, 260, 261, 262, 265, 269, 272, 273, 283, 334, 466, 588, 790, 793, 794, 804, 1016, 1028, 1032, 1034, 1035], "sort_valu": [71, 172, 173, 243, 251, 261, 272, 309, 310], "mean_test_scor": [71, 72, 73, 82, 118, 138, 148, 251, 260, 261, 262, 269, 272, 273, 283, 334, 466, 588, 790, 804, 970, 1028, 1035], "std_test_scor": [71, 73, 118, 138, 148, 260, 261, 262, 269, 283, 466, 588, 790, 804, 1028, 1035], "param_preprocessor__num__imputer__strategi": 71, "param_preprocessor__cat__selector__percentil": 71, "param_classifier__c": 71, "786015": 71, "031020": 71, "785063": 71, "030498": 71, "783149": 71, "030462": 71, "738": [71, 76, 157, 162], "plot_column_transformer_mixed_typ": [71, 76], "instanti": [72, 155, 316, 379, 394, 410, 444, 561, 562, 596, 624, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 920, 987, 1013, 1022, 1030, 1034, 1038], "argument": [72, 201, 230, 233, 236, 363, 370, 371, 376, 377, 379, 381, 382, 384, 385, 388, 390, 403, 404, 407, 408, 410, 412, 414, 415, 417, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 451, 453, 455, 457, 462, 487, 490, 497, 502, 527, 529, 530, 532, 534, 545, 553, 554, 561, 562, 563, 564, 571, 575, 576, 582, 583, 585, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 625, 633, 637, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 660, 662, 670, 675, 678, 682, 686, 690, 692, 693, 694, 695, 696, 708, 713, 728, 735, 756, 772, 773, 796, 812, 821, 822, 825, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 850, 853, 857, 891, 907, 911, 920, 925, 927, 948, 949, 950, 951, 965, 970, 973, 977, 978, 979, 981, 984, 988, 989, 996, 997, 1007, 1011, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038], "memoiz": [72, 371, 390], "costli": [72, 78, 119, 164, 262, 343, 363, 377, 382, 403, 437, 621, 798, 800, 885, 886, 930, 981, 984, 993, 1002], "mcgibbon": [72, 1024, 1025, 1028], "selectkbest": [72, 74, 145, 146, 317, 358, 376, 394, 404, 412, 575, 586, 589, 590, 592, 594, 600, 970, 1023, 1028, 1038], "mutual_info_classif": [72, 412, 586, 589, 590, 593, 594, 1028, 1034, 1037], "pipe": [72, 73, 122, 241, 260, 309, 315, 316, 389, 394, 404, 411, 584, 853, 878, 879, 881, 882, 883, 884, 970, 991, 1012], "reduce_dim": [72, 241, 260, 404], "popul": [72, 78, 80, 170, 200, 239, 264, 303, 371, 385, 390, 405, 434, 706, 712, 835, 836, 837, 839, 841, 843, 844, 845, 950, 981, 987, 991, 997], "n_features_opt": 72, "c_option": 72, "iterated_pow": [72, 526, 529, 535, 1028], "reduce_dim__n_compon": [72, 260, 404], "classify__c": 72, "reduce_dim__k": 72, "reducer_label": 72, "kbest": [72, 586], "0x7fca8a170900": 72, "gridsearchcvgridsearchcv": [72, 241, 251, 259, 261], "minmaxscalerminmaxscal": 72, "passthroughpassthroughlinearsvclinearsvc": 72, "mean_scor": [72, 270, 273, 348, 1035], "alphabet": [72, 390, 734], "eas": [72, 173, 251, 308, 376, 379, 382, 977, 995, 1001, 1002, 1005, 1033, 1034, 1036], "sometim": [72, 132, 169, 261, 299, 348, 358, 363, 364, 376, 378, 380, 382, 389, 390, 403, 405, 408, 410, 411, 443, 528, 529, 532, 534, 535, 858, 859, 860, 908, 976, 977, 978, 981, 986, 991, 992, 996, 1007, 1015, 1019, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038], "worthwhil": [72, 390], "slower": [72, 98, 118, 122, 164, 235, 270, 349, 410, 411, 412, 440, 445, 447, 532, 534, 541, 549, 550, 552, 557, 559, 582, 583, 585, 625, 626, 627, 637, 653, 666, 668, 681, 686, 698, 821, 825, 826, 974, 978, 979, 980, 982, 984, 997, 1016, 1026, 1033], "constructor": [72, 232, 363, 378, 390, 402, 404, 411, 458, 461, 543, 544, 549, 561, 562, 563, 564, 575, 576, 582, 583, 591, 662, 670, 671, 835, 836, 837, 839, 840, 841, 843, 844, 845, 852, 853, 854, 855, 949, 970, 982, 991, 996, 1002, 1007, 1022, 1023, 1025, 1026, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037], "folder": [72, 371, 374, 376, 380, 384, 393, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 497, 984, 1016], "cached_pip": [72, 404], "delet": [72, 323, 325, 380, 381, 463, 468, 480], "exit": [72, 281, 380, 384, 462], "benefici": [72, 74, 78, 95, 130, 303, 304, 374, 978], "plot_compare_reduct": [72, 76], "logistic__c": [73, 1012], "046415888336127774": 73, "pca__n_compon": [73, 852, 1012], "truncat": [73, 130, 222, 385, 528, 529, 533, 534, 535, 538, 670, 672, 719, 749, 788, 842, 906, 930, 970, 980, 981, 995, 1012, 1016, 1017, 1018, 1028, 1030], "x_digit": [73, 140, 298, 404, 1011, 1012, 1014], "y_digit": [73, 140, 298, 404, 1011, 1012, 1014], "__": [73, 262, 390, 404, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 1012, 1030, 1031], "spectrum": [73, 518, 538, 689, 930, 1005, 1012, 1030], "ax0": [73, 75, 200, 232, 348, 1012], "n_components_": [73, 103, 390, 435, 439, 528, 532, 533, 534, 535, 536, 537, 885, 886, 1012, 1031, 1033], "explained_variance_ratio_": [73, 104, 348, 408, 528, 535, 538, 543, 1012, 1025, 1028], "named_step": [73, 86, 404, 587, 588, 591, 853, 854, 893, 894, 977, 1012, 1029, 1031], "components_col": 73, "param_pca__n_compon": 73, "best_clf": 73, "nlargest": 73, "yerr": [73, 79, 81, 119, 122, 148, 283, 309, 325], "val": [73, 212, 261, 932], "974": [73, 76], "plot_digits_pip": [73, 76], "candid": [74, 251, 259, 262, 269, 315, 364, 376, 380, 403, 410, 442, 444, 790, 793, 794, 802, 804, 977, 984, 997, 1028], "features__pca__n_compon": 74, "features__univ_select__k": 74, "svm__c": 74, "867": 74, "967": [74, 327, 328, 981, 985], "transformer_list": [74, 404, 852, 855, 971, 1033, 1034], "univ_select": 74, "amuel": [74, 116, 191, 234, 324, 342], "ai": [74, 116, 191, 234, 324, 342, 407], "bonn": [74, 116, 191, 234, 324, 342], "mayb": [74, 299, 390, 411, 996, 1002], "combined_featur": 74, "x_featur": [74, 634, 635, 636, 973], "grid_search": [74, 118, 241, 251, 259, 269, 404, 949, 1024, 1025, 1026, 1027, 1028, 1029], "229": [74, 76, 981], "plot_feature_union": [74, 76], "overview": [75, 377, 379, 389, 390, 727, 736, 983, 995, 1017, 1018], "transformedtargetregressor": [75, 170, 200, 388, 404, 587, 588, 591, 1030, 1032, 1035], "hous": [75, 132, 164, 165, 303, 315, 369, 484, 1018], "translat": [75, 378, 413, 521, 608, 862, 863, 879, 978, 981, 999, 1005], "lowest": [75, 86, 171, 184, 251, 370, 403, 407, 629, 631, 793, 794, 797, 900, 901, 978, 981, 997, 1037], "logarithm": [75, 132, 170, 204, 233, 262, 334, 390, 412, 454, 584, 652, 653, 670, 698, 719, 734, 744, 748, 749, 750, 796, 833, 834, 928, 997, 1011, 1029], "log1p": [75, 232, 857, 981, 991], "expm1": 75, "y_tran": 75, "At": [75, 112, 205, 273, 322, 325, 362, 363, 380, 391, 399, 406, 410, 431, 434, 459, 582, 583, 585, 596, 821, 823, 860, 945, 970, 977, 980, 982, 986, 995, 1005], "meda": [75, 170, 981], "median_absolute_error": [75, 170, 981, 1026, 1032, 1034], "r2_score": [75, 169, 184, 195, 196, 410, 426, 459, 476, 477, 478, 548, 550, 552, 554, 556, 559, 562, 564, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 717, 721, 826, 827, 836, 844, 851, 894, 896, 899, 902, 904, 970, 981, 1023, 1025, 1031, 1035, 1036], "compute_scor": [75, 103, 179, 180, 638, 639, 1031], "r2": [75, 113, 118, 132, 169, 171, 195, 235, 378, 404, 410, 548, 564, 667, 816, 851, 981, 989, 1031], "ridge_cv": 75, "y_pred_ridg": 75, "ridge_cv_with_trans_target": 75, "inverse_func": [75, 170, 404, 459, 857, 991, 1030], "y_pred_ridge_with_trans_target": 75, "sell": 75, "quantile_transform": [75, 870, 881, 991, 1029, 1030, 1031], "house_pric": [75, 132], "select_dtyp": [75, 122, 318, 460], "nan": [75, 122, 164, 165, 170, 218, 239, 241, 243, 256, 264, 309, 313, 318, 319, 362, 368, 378, 385, 390, 410, 440, 462, 490, 549, 550, 551, 555, 556, 558, 587, 588, 591, 597, 600, 603, 621, 622, 623, 624, 629, 706, 707, 708, 715, 716, 717, 721, 722, 723, 762, 771, 776, 777, 778, 780, 790, 793, 794, 796, 804, 812, 815, 816, 817, 820, 862, 863, 867, 869, 870, 873, 874, 878, 881, 882, 884, 911, 912, 913, 914, 956, 970, 981, 991, 997, 1018, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "inf": [75, 155, 291, 385, 403, 413, 440, 444, 451, 455, 465, 466, 472, 547, 548, 553, 554, 587, 588, 591, 600, 601, 602, 613, 621, 629, 631, 642, 643, 644, 646, 663, 665, 666, 670, 674, 681, 721, 723, 739, 771, 778, 782, 849, 858, 865, 911, 913, 914, 928, 981, 991, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "lotfrontag": 75, "garageyrblt": 75, "masvnrarea": [75, 132], "to_fram": 75, "n_quantil": [75, 171, 307, 870, 882, 1031], "output_distribut": [75, 303, 307, 404, 869, 870, 881, 882, 991], "squeez": [75, 158, 159, 239, 281, 303, 1015], "quantiletransform": [75, 171, 307, 404, 459, 869, 882, 971, 991, 1029, 1030, 1031, 1032, 1033, 1038], "weaker": 75, "residu": [75, 196, 202, 257, 426, 459, 476, 477, 478, 546, 548, 550, 552, 554, 556, 559, 562, 564, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 665, 666, 667, 668, 672, 673, 679, 680, 695, 737, 778, 826, 827, 836, 844, 851, 894, 896, 899, 902, 904, 977, 981, 1014, 1034, 1035, 1037], "smile": [75, 371, 1036], "943": [75, 76, 1011], "plot_transformed_target": [75, 76], "862": [76, 126, 136, 218, 219], "auto_examples_compos": 76, "mahalanobi": [77, 83, 167, 403, 405, 444, 451, 463, 464, 465, 466, 467, 468, 469, 470, 693, 771, 772, 773, 840, 975, 987, 1030, 1033, 1034], "ledoitwolf": [77, 79, 83, 103, 167, 405, 463, 464, 468, 469, 470, 471, 790, 1026], "empiricalcovari": [78, 80, 81, 405, 463, 467, 468, 469, 470, 987], "unbias": [78, 401, 405, 408, 431, 544, 650, 666, 668, 681, 977, 1011], "shrunk": [78, 103, 303, 310, 319, 416, 467, 469, 470, 473, 474, 475, 543, 874, 975, 995, 1017, 1018], "base_x_train": 78, "base_x_test": 78, "coloring_matrix": [78, 79], "shrunkcovari": [78, 103, 405, 463, 464, 467, 468, 469], "empirical_covari": [78, 405, 1038], "log_likelihood": [78, 604, 605, 788, 789], "negative_loglik": 78, "real_cov": [78, 79, 464, 467, 468, 469, 470], "emp_cov": [78, 80, 82, 472, 475], "loglik_r": 78, "inv": [78, 82, 298], "formula": [78, 79, 400, 403, 405, 416, 467, 469, 510, 511, 512, 584, 637, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 658, 670, 672, 698, 722, 748, 757, 970, 975, 977, 981, 986, 987, 991, 995, 1027, 1029, 1031], "asymptot": [78, 79, 189, 362, 405, 468, 530, 723, 977, 980, 1032], "criterion": [78, 79, 173, 188, 208, 251, 273, 314, 378, 385, 390, 403, 408, 435, 439, 443, 446, 453, 456, 526, 531, 533, 540, 547, 548, 551, 552, 553, 554, 558, 559, 560, 600, 621, 638, 639, 642, 650, 660, 661, 662, 663, 665, 666, 668, 670, 671, 672, 674, 685, 689, 704, 789, 890, 895, 896, 897, 898, 899, 901, 902, 903, 904, 977, 980, 981, 989, 994, 997, 1003, 1015, 1018, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1038], "chen": [78, 79, 405, 410, 416, 469, 719, 749, 973, 981, 1025, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1038], "Its": [78, 111, 259, 263, 372, 378, 390, 408, 413, 532, 976, 977, 986, 989, 995, 1001, 1005, 1025], "tuned_paramet": [78, 138, 259], "loglik_lw": 78, "loglik_oa": 78, "unseen": [78, 123, 146, 189, 204, 208, 274, 287, 338, 364, 368, 378, 389, 390, 403, 407, 839, 870, 882, 972, 981, 987, 989, 991, 997, 1007, 1025, 1030, 1034], "loglog": [78, 233], "lik_max": 78, "amax": [78, 123], "lik_min": 78, "amin": 78, "vline": [78, 97, 187, 188, 189, 201, 261, 274, 304], "shrinkage_": [78, 79, 467, 469], "magenta": [78, 127], "purpl": [78, 92, 225], "cyan": [78, 115, 170, 292], "realli": [78, 172, 189, 380, 381, 382, 981, 987, 1005, 1036], "interestingli": [78, 149, 991], "outperform": [78, 86, 132, 308, 388, 407, 410, 446, 456, 983, 991], "264": [78, 83], "plot_covariance_estim": [78, 83], "inspir": [79, 129, 171, 218, 376, 388, 410, 555, 556, 918, 971, 1001, 1031], "mmse": [79, 405, 416, 469], "tran": 79, "octob": [79, 371, 1022, 1029, 1035, 1036, 1038], "choleski": [79, 200, 218, 385, 465, 466, 472, 521, 605, 642, 644, 645, 648, 649, 650, 652, 653, 663, 666, 668, 674, 676, 677, 681, 788, 789, 977, 1025, 1029, 1031, 1034, 1037, 1038], "toeplitz": 79, "simul": [79, 97, 170, 194, 237, 261, 1005], "n_samples_rang": [79, 233], "lw_mse": 79, "oa_ms": 79, "lw_shrinkag": 79, "oa_shrinkag": 79, "error_norm": [79, 81, 463, 464, 465, 466, 467, 468, 469, 470], "darkorang": [79, 99, 104, 105, 201, 211, 224, 247, 248, 249, 252, 268, 270, 286, 292, 293, 324, 354], "524": [79, 83], "plot_lw_vs_oa": [79, 83], "x_i": [80, 116, 144, 170, 201, 316, 342, 403, 408, 409, 410, 413, 608, 609, 613, 616, 617, 619, 828, 829, 832, 972, 973, 977, 983, 984, 985, 991, 995, 996, 997], "d_": [80, 403, 408, 642, 663, 674, 771, 978, 983], "mle": [80, 103, 535, 1030, 1033], "resist": [80, 81, 376], "erron": [80, 81, 408, 977, 1023, 1030, 1034], "breakdown": [80, 81, 217, 673, 977], "n_": [80, 81, 173, 261, 316, 403, 408, 410, 640, 646, 679, 690, 973, 977, 981, 983, 984, 988, 991, 993, 996, 997], "smallest": [80, 81, 200, 281, 352, 371, 403, 405, 412, 521, 535, 624, 648, 649, 650, 676, 677, 684, 688, 689, 790, 793, 794, 804, 809, 863, 997, 1035], "pure": [80, 81, 86, 184, 200, 390, 403, 467, 473, 490, 551, 552, 553, 554, 558, 559, 560, 699, 709, 779, 786, 901, 902, 903, 904, 991], "rousseuw": [80, 81], "rousseeuw": [80, 81, 403, 405, 463, 468, 783, 784, 987], "ass": [80, 81, 405, 468], "1984": [80, 81, 405, 468, 901, 902, 997], "wilson": [80, 373, 1022, 1025], "hilferti": 80, "1931": 80, "proceed": [80, 149, 371, 373, 403, 414, 433, 438, 505, 690, 702, 719, 749, 840, 890, 981, 993, 994, 995], "academi": [80, 840], "688": 80, "n_outlier": [80, 81, 128, 203, 229, 288], "gen_cov": 80, "ey": [80, 81, 248, 252, 334, 371, 528, 535, 544], "outliers_cov": 80, "mincovdet": [80, 81, 405, 463, 464, 467, 469, 470, 987, 1022, 1029], "robust_cov": 80, "nmcd": 80, "nmle": 80, "26253567e": 80, "06695631e": 80, "22747343e": 80, "23773583": 80, "24640578": 80, "51963999": 80, "inlier": [80, 128, 203, 229, 239, 303, 390, 405, 425, 463, 557, 665, 671, 839, 870, 882, 896, 897, 899, 977, 987, 1029, 1030, 1035], "inlier_plot": 80, "outlier_plot": 80, "get_xlim": [80, 195, 205, 303], "zz": 80, "mahal_emp_cov": 80, "emp_cov_contour": 80, "pubu_r": 80, "mahal_robust_cov": 80, "robust_contour": 80, "ylorbr_r": 80, "dist": [80, 222, 233, 380, 463, 464, 465, 466, 467, 468, 469, 470, 693, 756, 762, 833, 834], "borderaxespad": 80, "plot_mahalanobis_dist": [80, 83], "157": [80, 144, 150, 382], "cubic": [80, 413], "suggest": [80, 98, 115, 119, 170, 173, 261, 334, 362, 375, 376, 383, 390, 407, 408, 410, 463, 468, 559, 639, 818, 975, 977, 978, 986, 996, 1016, 1026, 1033, 1036], "emp_mah": 80, "markeredgewidth": [80, 265], "rm": [80, 155, 380, 384, 405], "mahal": 80, "robust_mah": 80, "location_": [80, 81, 463, 464, 465, 466, 467, 468, 469, 470], "182": [80, 83, 152, 285, 295, 300, 382, 410], "compens": [81, 169, 171, 176, 200, 218, 262, 405, 408], "soon": [81, 390, 1014], "5n_": 81, "johanna": 81, "hardin": 81, "rock": 81, "decemb": [81, 157, 371, 658, 679, 680, 1022, 1030, 1032, 1034, 1037], "928": [81, 431], "946": 81, "zoubir": 81, "koivunen": 81, "chakhchoukh": 81, "muma": 81, "signal": [81, 95, 96, 97, 105, 125, 152, 157, 158, 167, 178, 199, 201, 219, 252, 316, 402, 403, 405, 411, 412, 413, 416, 469, 497, 515, 520, 525, 528, 531, 535, 619, 638, 639, 640, 641, 646, 647, 657, 658, 666, 678, 679, 680, 778, 811, 819, 867, 977, 981, 998, 1005, 1010, 1017, 1018], "tutori": [81, 138, 139, 140, 141, 189, 202, 218, 261, 365, 376, 377, 382, 384, 389, 397, 403, 446, 456, 685, 996, 1014, 1025], "treatment": [81, 169, 370, 408, 463, 468], "concept": [81, 118, 123, 236, 270, 365, 376, 388, 402, 403, 409, 411, 973, 981, 984, 997, 1005], "magazin": [81, 412], "61": [81, 171, 218, 370, 373, 382, 404, 535, 554, 707], "range_n_outli": 81, "err_loc_mcd": 81, "err_cov_mcd": 81, "err_loc_emp_ful": 81, "err_cov_emp_ful": 81, "err_loc_emp_pur": 81, "err_cov_emp_pur": 81, "outliers_index": 81, "outliers_offset": 81, "inliers_mask": 81, "pure_x": 81, "pure_loc": 81, "pure_emp_cov": 81, "font_prop": 81, "hat": [81, 105, 257, 261, 286, 316, 374, 401, 405, 409, 410, 972, 977, 978, 981, 983, 985], "_2": [81, 157, 338, 408, 411, 525, 531, 539, 540, 640, 646, 977, 985, 995, 996], "x_size": 81, "538": [81, 83], "plot_robust_vs_empirical_covari": [81, 83], "graphicallasso": [82, 405, 463, 464, 466, 467, 468, 469, 470, 472, 1030, 1038], "largest": [82, 97, 118, 149, 202, 373, 403, 405, 408, 437, 521, 535, 551, 552, 553, 554, 558, 559, 582, 703, 788, 789, 809, 831, 863, 901, 902, 903, 904, 930, 978, 981, 991, 996, 997], "invert": [82, 100, 146, 222, 348, 349, 388, 405, 411, 624, 683, 687, 991, 1031], "fairli": [82, 124, 223, 276, 298, 384, 403, 553, 554, 693, 982, 1014], "tweak": [82, 236, 407, 947, 980, 1016, 1033], "readabl": [82, 262, 316, 381, 382, 384, 397, 528, 1031, 1034, 1035, 1036, 1037], "make_sparse_spd_matrix": [82, 523], "prng": 82, "prec": [82, 230, 521, 981], "smallest_coef": [82, 521], "largest_coef": [82, 521], "multivariate_norm": [82, 86, 246, 463, 464, 465, 466, 467, 468, 469, 470], "ledoit_wolf": [82, 405, 1035], "prec_": 82, "lw_cov_": 82, "lw_prec_": 82, "this_cov": 82, "this_prec": 82, "ma": [82, 309, 334, 977, 1028, 1033], "masked_equ": 82, "set_facecolor": [82, 246], "set_axis_bgcolor": 82, "alpha_": [82, 138, 170, 180, 188, 189, 466, 605, 638, 639, 641, 645, 647, 649, 650, 655, 657, 667, 669, 977, 997, 1011, 1022, 1029], "370": [82, 83], "plot_sparse_cov": [82, 83], "auto_examples_covari": 83, "cross_decomposit": [84, 85, 86, 167, 237, 365, 1026, 1027, 1029, 1030, 1031], "plscanon": [85, 476, 478, 479, 1003, 1018, 1026, 1030, 1032, 1034, 1036], "plsregress": [85, 86, 1003, 1018, 1029, 1032, 1034, 1036, 1038], "share": [85, 130, 170, 251, 347, 356, 358, 362, 363, 378, 384, 403, 408, 411, 543, 662, 698, 702, 788, 789, 793, 794, 975, 988, 1022, 1024, 1030, 1032, 1034, 1037], "appar": [85, 983, 1005], "scatterplot": [85, 179, 261], "maxim": [85, 86, 90, 95, 106, 125, 179, 251, 252, 262, 266, 270, 271, 291, 308, 315, 334, 338, 352, 356, 373, 390, 400, 403, 406, 408, 412, 413, 543, 604, 605, 638, 639, 642, 663, 673, 674, 714, 790, 793, 794, 804, 862, 868, 878, 975, 977, 980, 981, 984, 986, 996, 1011, 1014, 1025, 1027, 1032, 1035, 1037], "weak": [85, 111, 123, 126, 204, 218, 267, 407, 551, 552, 553, 558, 559, 560, 624, 984, 1005, 1038], "var": [85, 86, 101, 115, 149, 180, 261, 373, 377, 412, 635, 639, 895, 896, 897, 898, 899, 981, 1030], "corr": [85, 173, 261], "corrcoef": [85, 106], "07": [85, 105, 142, 170, 196, 218, 219, 226, 227, 270, 277, 308, 358, 371, 403, 555, 556, 686, 981, 995], "plsca": [85, 477], "x_train_r": 85, "y_train_r": 85, "x_test_r": 85, "y_test_r": 85, "221": [85, 130, 1025], "222": [85, 130, 996], "223": [85, 130, 149, 373], "yj": [85, 307], "noiz": 85, "xb": [85, 872], "11693539": 85, "19803308": 85, "12190903": 85, "77322639": 85, "77777215": 85, "04995982": 85, "34990341": 85, "37257991": 85, "27597342": 85, "95433992": 85, "9403917": 85, "02818216": 85, "06880943": 85, "08604995": 85, "05216586": 85, "72295655": 85, "70432034": 85, "79769376": 85, "exce": [85, 279, 314, 413, 436, 509, 596, 643, 652, 1031, 1034, 1036], "plot_compare_cross_decomposit": [85, 87], "pcr": [86, 406], "pl": [86, 204, 373, 406, 476, 477, 478, 479, 1027], "greedili": [86, 149, 403, 407, 412, 454], "despit": [86, 198, 200, 218, 235, 290, 390, 394, 405, 621, 622, 624, 977, 984, 1005, 1030, 1031], "suffer": [86, 120, 172, 281, 303, 348, 362, 403, 410, 538, 756, 976, 977, 981, 984, 1015, 1031], "dive": [86, 376, 382], "explained_variance_": [86, 528, 535, 538, 1015, 1029], "onto": [86, 222, 223, 234, 303, 388, 408, 411, 415, 440, 442, 455, 527, 533, 537, 621, 622, 624, 682, 975, 979, 984], "recommend": [86, 120, 164, 217, 230, 236, 257, 270, 307, 315, 338, 362, 363, 365, 370, 374, 376, 378, 382, 384, 388, 393, 406, 407, 408, 410, 412, 432, 441, 443, 445, 454, 490, 502, 529, 532, 538, 543, 555, 556, 563, 576, 577, 583, 600, 605, 625, 626, 632, 664, 670, 686, 691, 692, 694, 696, 796, 802, 804, 812, 849, 856, 858, 865, 872, 873, 878, 879, 881, 882, 883, 884, 886, 895, 898, 930, 949, 970, 978, 981, 983, 985, 988, 991, 993, 995, 996, 997, 1000, 1005, 1018, 1024, 1025, 1031, 1032, 1033, 1034, 1036, 1038], "linearregress": [86, 135, 169, 179, 190, 195, 196, 197, 198, 203, 206, 217, 232, 236, 238, 257, 275, 304, 358, 376, 388, 389, 404, 410, 459, 564, 626, 629, 640, 643, 646, 648, 665, 666, 681, 977, 981, 991, 1014, 1026, 1027, 1031, 1034, 1035, 1036, 1038], "retriev": [86, 170, 204, 268, 348, 356, 380, 390, 408, 411, 412, 462, 490, 584, 587, 588, 620, 647, 657, 678, 693, 719, 723, 725, 726, 749, 774, 828, 832, 865, 891, 977, 979, 981, 983, 1001, 1002, 1015, 1027, 1032, 1034, 1036], "026": [86, 196, 219, 348], "predit": 86, "pca_2": 86, "673": [86, 382], "340": [86, 87, 235, 322], "plot_pcr_vs_pl": [86, 87], "487": [87, 717], "auto_examples_cross_decomposit": 87, "multilabel": [88, 93, 167, 228, 244, 268, 279, 371, 378, 379, 390, 398, 476, 481, 491, 502, 503, 509, 517, 535, 551, 558, 561, 668, 669, 697, 701, 707, 719, 722, 723, 727, 728, 731, 732, 747, 749, 776, 777, 780, 781, 785, 787, 822, 826, 850, 857, 860, 864, 866, 877, 898, 901, 903, 919, 943, 944, 945, 992, 1003, 1004, 1016, 1018, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "034": [89, 93, 465], "plot_digits_last_imag": [89, 93], "iris": [90, 267, 268, 1013], "150x4": 90, "legend_el": [90, 128, 213, 264, 284, 338], "flower": [90, 104, 270, 500, 501, 981, 1001], "versicolor": [90, 270, 271, 498], "differenti": [90, 268, 410, 413, 553, 554, 613, 616], "unus": [90, 101, 102, 171, 197, 221, 223, 457, 573, 756, 764, 970, 978, 1022, 1030, 1032, 1033, 1035, 1037], "110": [90, 179, 197, 207, 232, 309, 431, 975, 976], "3rd": [90, 160, 828, 871, 983, 991], "eigenvalu": [90, 251, 400, 403, 405, 446, 456, 463, 464, 465, 466, 467, 468, 469, 470, 529, 535, 543, 667, 682, 683, 685, 687, 689, 859, 978, 991, 1024, 1028, 1031, 1032, 1033, 1034], "123": [90, 93, 116, 134, 216, 332, 345, 358, 410, 510, 511, 512, 549, 550, 826, 982, 989], "plot_iris_dataset": [90, 93], "easi": [91, 171, 208, 218, 249, 259, 261, 334, 347, 358, 371, 382, 384, 388, 389, 403, 410, 494, 498, 504, 860, 970, 976, 980, 988, 991, 1001, 1002, 1005, 1016, 1032, 1037, 1038], "make_gaussian_quantil": [91, 112, 114, 372, 464, 468, 469, 470, 514], "321": 91, "323": [91, 233], "y2": [91, 114, 710, 982], "324": [91, 371], "multi": [91, 110, 111, 136, 167, 178, 216, 219, 220, 223, 227, 228, 229, 237, 240, 244, 254, 258, 270, 277, 279, 296, 301, 313, 318, 347, 351, 356, 357, 363, 371, 373, 378, 379, 385, 390, 393, 403, 410, 411, 413, 420, 431, 446, 456, 463, 468, 489, 490, 498, 499, 504, 508, 509, 513, 514, 516, 535, 543, 544, 545, 547, 549, 551, 552, 553, 555, 558, 559, 561, 563, 604, 625, 627, 637, 640, 641, 646, 647, 651, 652, 654, 655, 656, 657, 660, 662, 666, 667, 668, 669, 670, 675, 678, 684, 697, 707, 714, 722, 727, 733, 735, 776, 790, 804, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 840, 841, 843, 849, 850, 851, 854, 860, 873, 877, 888, 889, 893, 895, 898, 901, 902, 903, 905, 906, 907, 913, 916, 919, 970, 982, 984, 988, 991, 995, 1001, 1002, 1003, 1007, 1013, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1038], "325": [91, 171, 174], "326": 91, "187": [91, 93, 261, 308, 311, 382, 578, 982, 1014, 1024], "plot_random_dataset": [91, 93], "make_multilabel_classif": [92, 237, 372, 509, 530, 781, 824, 825, 981, 1024, 1025, 1027, 1033], "star": [92, 135, 376], "degener": [92, 247, 415, 434, 448, 527, 714, 977, 981, 1031, 1035, 1036], "vocabulari": [92, 215, 347, 348, 388, 411, 582, 583, 584, 585, 983, 1007, 1016, 1022, 1024, 1027, 1030, 1033, 1035], "w0": 92, "w1": [92, 410, 651], "38": [92, 171, 191, 199, 204, 255, 269, 270, 286, 300, 319, 356, 410, 626, 723, 874, 981, 991, 1022, 1023, 1024], "54": [92, 149, 176, 184, 200, 203, 239, 371, 373, 403, 485, 1023, 1024], "make_ml_clf": 92, "ff3333": 92, "0198e1": 92, "bf5fff": 92, "fcd116": 92, "ff7216": 92, "4dbd33": 92, "87421f": 92, "plot_2d": [92, 221], "p_c": [92, 517], "p_w_c": [92, 517], "allow_unlabel": [92, 237, 517], "return_distribut": [92, 517], "sep": [92, 270], "p_w": 92, "plot_random_multilabel_dataset": [92, 93], "426": [93, 191, 219], "auto_examples_dataset": 93, "blind": [94, 107, 167, 347, 408, 527, 535], "fastica": [94, 107, 167, 408, 526, 529, 535, 1015, 1022, 1024, 1030, 1036, 1037], "increment": [94, 107, 167, 264, 380, 382, 436, 441, 457, 498, 527, 528, 529, 530, 533, 535, 538, 596, 640, 652, 660, 796, 817, 825, 826, 828, 829, 830, 831, 832, 862, 863, 873, 893, 894, 956, 977, 983, 1025, 1026], "fa": [94, 106, 107, 167, 382, 408, 467, 470, 526, 535, 790, 815], "precomput": [94, 107, 167, 178, 219, 224, 281, 283, 378, 385, 388, 390, 403, 411, 414, 426, 434, 435, 438, 439, 440, 444, 446, 451, 459, 465, 476, 477, 478, 518, 525, 529, 531, 534, 536, 542, 548, 550, 552, 554, 556, 559, 562, 564, 604, 605, 614, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 675, 676, 678, 679, 682, 684, 685, 686, 690, 767, 771, 774, 783, 784, 826, 827, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 851, 894, 895, 896, 897, 898, 899, 902, 904, 957, 958, 959, 973, 979, 984, 996, 1002, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038], "chapter": [95, 358, 378, 403, 408, 410, 413, 524, 526, 528, 608, 613, 616, 637, 971, 974, 977, 996, 997], "decompos": [95, 99, 115, 305, 402, 528, 532, 703, 814, 930, 976, 977, 981, 998, 1017, 1018], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 238], "constrained_layout": [95, 171, 221, 309, 310, 318], "set_constrained_layout_pad": 95, "w_pad": [95, 121, 353], "h_pad": [95, 121, 353], "set_edgecolor": 95, "vec": [95, 411, 532, 534, 541], "im": [95, 106, 272, 285, 1004], "pad": [95, 121, 164, 171, 221, 239, 347, 353, 411, 582, 583, 585], "initialis": [95, 532, 534, 541, 1022, 1030, 1031], "mathbb": [95, 115, 155, 406, 981, 988, 996], "4096": [95, 371, 408, 489], "human": [95, 171, 347, 397, 403, 408, 850, 851, 981, 988, 1031], "friendli": [95, 363, 376, 384, 408, 886, 993, 994, 1001, 1002], "visualis": [95, 98, 106, 237, 538, 791, 792, 795, 807, 808, 809, 810, 811, 984, 1002], "64x64": [95, 371, 408], "singular": [95, 385, 400, 403, 406, 445, 447, 476, 477, 478, 479, 515, 518, 528, 532, 534, 535, 538, 541, 543, 544, 651, 666, 667, 668, 681, 930, 977, 978, 980, 1017, 1018, 1028, 1029], "scalar": [95, 316, 382, 390, 404, 413, 415, 458, 461, 518, 527, 609, 610, 611, 616, 617, 621, 622, 731, 735, 909, 917, 973, 985, 987, 991, 995, 1001, 1032, 1033, 1036, 1038], "noise_variance_": [95, 188, 526, 528, 535, 650, 1029, 1036], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 170, 368, 405, 408, 411, 467, 510, 511, 512, 621, 622, 623, 624, 643, 665, 672, 673, 828, 829, 830, 831, 832, 975, 977, 980, 983, 1001, 1007, 1015, 1018], "subcompon": [95, 408], "ica_estim": 95, "15e": 95, "sparsepca": [95, 525, 527, 528, 529, 531, 533, 534, 535, 536, 539, 540, 1022, 1029, 1030, 1032, 1033, 1035, 1036, 1037], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 364, 408, 525, 532, 536, 539, 540, 1023, 1025, 1032, 1033, 1035, 1036, 1037, 1038], "batch_dict_estim": 95, "That": [95, 112, 149, 189, 229, 261, 265, 348, 349, 363, 370, 384, 390, 407, 412, 413, 437, 440, 441, 551, 558, 587, 808, 901, 902, 970, 978, 979, 981, 987, 997, 1031, 1032], "enhanc": [95, 204, 375, 376, 380, 388, 390, 403, 981, 999, 1020, 1021, 1022, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "consum": [95, 358, 370, 378, 390, 394, 403, 407, 410, 443, 793, 794, 853, 854, 937, 977, 1005, 1027], "kmeans_estim": 95, "factoranalysi": [95, 103, 106, 408, 538, 1023, 1025, 1034, 1036], "heteroscedast": [95, 103, 125, 202, 408, 869, 881], "fa_estim": 95, "wrap": [95, 117, 125, 281, 370, 378, 390, 427, 502, 579, 580, 651, 670, 735, 819, 877, 971, 981, 984, 996, 1001, 1022, 1027, 1030, 1032, 1033, 1035, 1037], "colormap": [95, 114, 160, 192, 209, 334, 339, 353, 691, 1035], "uv": [95, 408], "x_1": [95, 144, 155, 197, 201, 406, 408, 410, 413, 607, 619, 651, 866, 893, 894, 977, 983, 985, 991, 995], "x_n": [95, 408, 893, 894, 983, 985, 995], "dict_pos_dict_estim": 95, "positive_dict": [95, 525, 531, 539, 540], "dict_pos_code_estim": 95, "fit_algorithm": [95, 525, 531, 1037, 1038], "cd": [95, 149, 373, 374, 376, 380, 382, 408, 465, 466, 472, 525, 531, 533, 534, 537, 539, 540, 541, 977, 1016, 1027, 1037], "positive_cod": [95, 525, 531, 536, 539, 540], "dict_pos_estim": 95, "plot_faces_decomposit": [95, 107], "imagin": [96, 152, 236, 338, 407, 408, 411, 977], "plai": [96, 126, 154, 183, 209, 255, 292, 330, 331, 362, 388, 1016], "microphon": 96, "s1": [96, 149, 160, 188, 189, 373, 1015], "sinusoid": [96, 113, 125, 184, 235, 974, 1015], "s2": [96, 149, 160, 188, 189, 373, 544, 1015], "sawtooth": [96, 1015], "saw": [96, 201, 204, 1015], "tooth": [96, 1015], "s_": [96, 265, 978, 989, 1015], "a_": [96, 400, 403, 532, 534, 541, 977, 1015], "mixing_": [96, 97, 527, 1015], "prove": [96, 1005], "revert": [96, 624, 626, 627, 1029, 1034], "unmix": [96, 415, 527], "allclos": [96, 129, 993, 1015], "mean_": [96, 265, 526, 527, 528, 533, 535, 537, 873, 991, 1015, 1030], "orthogon": [96, 97, 98, 167, 178, 219, 402, 408, 520, 525, 531, 533, 536, 537, 542, 658, 659, 679, 680, 993, 1003, 1018, 1022], "steelblu": [96, 97, 134], "sig": 96, "plot_ica_blind_source_separ": [96, 107], "ica": [97, 402, 415, 997, 1017, 1018], "geometr": [97, 403, 682, 698, 724, 750, 978, 1030], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 252], "axis_list": 97, "x_axi": [97, 208, 265], "y_axi": [97, 208], "quiver": 97, "hline": 97, "set_zord": 97, "214": [97, 107, 153, 578], "plot_ica_vs_pca": [97, 107], "firstli": [98, 362, 388, 651, 1016], "undistort": 98, "noiseless": [98, 979], "pursuit": [98, 167, 178, 219, 408, 468, 520, 525, 531, 536, 542, 658, 659, 679, 680, 1003, 1018, 1022], "omp": [98, 105, 199, 408, 525, 531, 536, 542, 658, 659, 679, 680, 1003, 1018, 1022, 1030], "promin": [98, 390], "reminisc": 98, "downsampl": 98, "075": [98, 226], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 208, 249, 390, 434, 441, 442, 443, 465, 466, 476, 477, 478, 525, 526, 527, 530, 531, 532, 533, 534, 537, 555, 556, 621, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 670, 671, 672, 673, 674, 684, 686, 788, 789, 842, 850, 851, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 1026, 1029, 1030, 1032, 1035, 1036, 1038], "n_steps_": [98, 443, 531, 532, 1035], "reconstruct_from_patches_2d": [98, 411, 577], "intercept": [98, 192, 209, 217, 343, 390, 476, 477, 478, 543, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 868, 872, 875, 893, 894, 900, 977, 979, 981, 986, 995, 996, 1025, 1027, 1031, 1032], "transform_algorithm": [98, 105, 525, 531, 536, 1038], "n1": 98, "atom": [98, 105, 408, 525, 531, 533, 536, 537, 539, 540, 647, 657, 678, 977, 1022, 1035], "transform_n_nonzero_coef": [98, 105, 525, 531, 536], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 525, 531, 536, 1035], "set_param": [98, 106, 116, 122, 125, 171, 172, 180, 188, 189, 193, 204, 208, 234, 239, 274, 284, 313, 337, 348, 379, 390, 403, 404, 410, 413, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 971, 987, 1007, 1014, 1022, 1028, 1029, 1030, 1035, 1036], "801": [98, 107], "plot_image_denois": [98, 107], "ipca": [99, 527, 528], "flip": [99, 576, 735, 930, 983, 1026, 1035], "incrementalpca": [99, 364, 408, 527, 529, 533, 535, 538, 1026, 1029, 1030, 1032, 1033, 1036], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 127, 206, 217, 224, 248, 249, 268], "x_transform": [99, 130, 236, 479, 525, 526, 527, 528, 529, 531, 533, 537, 560, 632, 633, 682, 683, 684, 685], "nmean": 99, "shadow": [99, 104, 105, 224, 324, 341, 349, 411], "scatterpoint": [99, 104, 224, 248, 324], "plot_incremental_pca": [99, 107], "nest": [100, 112, 167, 189, 236, 254, 277, 363, 382, 390, 393, 403, 407, 413, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 456, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 498, 513, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 793, 794, 795, 804, 815, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 981, 984, 1022, 1023, 1026, 1028, 1029, 1030, 1036], "train_ax": 100, "test_ax": 100, "straight": [100, 190, 196, 198, 258, 338, 362], "inner": [100, 125, 262, 266, 324, 362, 411, 437, 508, 540, 576, 583, 642, 663, 674, 768, 770, 973, 981, 991, 996, 1023, 1026, 1036], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 379, 978], "untangl": 100, "mind": [100, 169, 170, 171, 218, 307, 308, 347, 348, 358, 376, 397, 405, 407, 410, 640, 641, 698, 977, 996, 1001, 1007, 1014], "investig": [100, 106, 112, 165, 342, 376, 977], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 118, 122, 149, 173, 188, 189, 281, 314, 318, 347, 362, 363, 378, 381, 384, 385, 388, 390, 399, 400, 403, 408, 410, 411, 543, 579, 580, 587, 591, 601, 602, 817, 820, 858, 947, 970, 973, 975, 977, 981, 984, 991, 996, 1005, 1030, 1031, 1032, 1036, 1038], "analyt": [100, 408, 413, 526, 614, 702, 971, 975, 981, 1000, 1005], "kernelridg": [100, 152, 235, 666, 974, 1026], "kernal": 100, "relianc": [100, 204], "428": [100, 107], "plot_kernel_pca": [100, 107], "aid": [101, 258, 403, 783, 784, 978, 1005, 1022, 1034], "kevin": [101, 637, 1024, 1026, 1028, 1029, 1032, 1033, 1034, 1036, 1037], "hugh": [101, 868, 1024, 1035], "pdf": [101, 149, 261, 286, 303, 373, 376, 403, 412, 436, 443, 525, 528, 531, 535, 635, 638, 643, 652, 658, 660, 661, 665, 670, 673, 676, 677, 679, 680, 686, 830, 831, 842, 849, 886, 888, 977, 994, 997, 1004, 1022], "30000": [101, 371], "pdf_z": 101, "plot_fig": [101, 197], "fig_num": [101, 197], "pca_scor": [101, 103], "vt": [101, 544], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 171, 197], "138": [101, 107, 382, 410, 981], "plot_pca_3d": [101, 107], "cla": 102, "054": [102, 107, 195, 219], "plot_pca_iri": [102, 107], "homoscedast": [103, 232, 307, 981, 1030], "succe": [103, 184], "subspac": [103, 406, 410, 446, 509, 549, 550, 685, 689, 930, 975, 984, 987, 993, 1005, 1015], "overestim": [103, 358, 407], "circumst": [103, 218, 984, 1001], "nip": [103, 373, 509, 535, 560, 635, 981], "minka": [103, 535, 977], "deni": [103, 1024, 1025, 1029, 1030, 1031, 1037, 1038], "engemann": [103, 1024, 1025, 1029], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 139, 164, 165, 167, 254, 257, 266, 275, 277, 319, 337, 358, 376, 378, 388, 407, 410, 514, 569, 697, 735, 790, 814, 816, 901, 902, 970, 981, 1011, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1034, 1035, 1038], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 138, 190, 260, 264], "violet": [103, 1038], "660": [103, 107, 243], "plot_pca_vs_fa_model_select": [103, 107], "92461872": 104, "05306648": 104, "x_r": [104, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "x_r2": 104, "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 408, 525, 531, 534, 542, 1029, 1030, 1032, 1034, 1036], "mexican": 105, "piecewis": [105, 316, 400, 972, 977, 991, 997], "matter": [105, 252, 338, 358, 403, 404, 410, 561, 662, 670, 672, 977, 1026], "motiv": [105, 376, 378, 390, 973, 981, 991, 1005, 1035], "heavier": [105, 405, 977], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 525, 531, 536, 542, 1032], "n_nonzero": 105, "coder": [105, 536, 710], "flatnonzero": [105, 188, 260, 269, 270, 774], "soft": [105, 133, 134, 376, 390, 563, 564, 889, 897, 995, 1005, 1027], "debias": 105, "lstsq": [105, 376, 651, 664], "rcond": 105, "216": [105, 107, 994], "plot_sparse_cod": [105, 107], "uncov": [106, 689], "inher": [106, 195, 358, 403, 408, 971, 973, 975, 976, 978, 982], "varimax": [106, 408, 526, 1034], "jona": [106, 1034], "sassenhagen": [106, 1034], "set_yticklabel": [106, 155, 164, 165, 173, 272, 349], "n_comp": [106, 176], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "277": [106, 107, 989, 1024], "plot_varimax_fa": [106, 107], "auto_examples_decomposit": 107, "custom": [108, 167, 240, 254, 262, 277, 283, 288, 313, 329, 334, 345, 347, 349, 368, 371, 374, 378, 383, 384, 385, 388, 389, 390, 402, 403, 404, 407, 413, 462, 483, 487, 488, 496, 498, 532, 534, 541, 543, 551, 552, 558, 559, 565, 567, 596, 625, 684, 693, 707, 790, 819, 857, 891, 898, 965, 970, 975, 981, 984, 1001, 1002, 1005, 1016, 1018, 1022, 1026, 1027, 1029, 1030, 1032, 1033, 1034, 1037, 1038], "__sklearn_is_fitted__": [108, 167, 378, 417, 420, 965, 1035, 1036], "convent": [109, 261, 365, 376, 378, 379, 380, 382, 390, 421, 422, 425, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 463, 464, 465, 466, 467, 468, 469, 470, 502, 503, 525, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 541, 557, 560, 563, 564, 575, 576, 577, 582, 583, 585, 621, 622, 623, 624, 671, 682, 683, 684, 685, 712, 788, 789, 821, 822, 837, 839, 841, 845, 857, 865, 868, 869, 871, 885, 886, 897, 924, 925, 981, 1008, 1022, 1029, 1030, 1033, 1035, 1036, 1038], "subclass": [109, 378, 413, 568, 947, 1027, 1030, 1035], "showcas": [109, 378], "statu": [109, 161, 370, 380, 393, 490, 833, 834], "_is_fit": 109, "snippet": [109, 358, 376, 381, 384, 388, 399, 410, 411, 412, 971, 991, 1004, 1035], "customestim": 109, "classifiermixin": [109, 236, 376, 378, 390, 407, 1033], "kushan": 109, "kushansharma1": 109, "classes_": [109, 192, 209, 230, 236, 270, 322, 323, 376, 378, 390, 431, 432, 543, 544, 545, 547, 549, 551, 553, 555, 558, 561, 563, 587, 588, 604, 652, 653, 660, 662, 668, 669, 670, 691, 694, 696, 781, 790, 793, 794, 804, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 835, 840, 843, 850, 853, 860, 861, 864, 888, 889, 890, 893, 895, 898, 901, 903, 906, 981, 992, 995, 1023, 1026, 1027, 1029, 1032, 1034], "track": [109, 116, 124, 323, 376, 379, 380, 399, 528, 950, 982, 1001, 1002, 1029, 1032], "notfittederror": [109, 390, 842, 965, 1026, 1028, 1031, 1032, 1038], "boolean": [109, 356, 371, 376, 378, 385, 404, 410, 411, 412, 458, 555, 556, 575, 576, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 623, 626, 627, 630, 643, 665, 693, 822, 828, 849, 856, 876, 909, 965, 971, 977, 983, 988, 991, 997, 1022, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1037], "sklearn_is_fit": 109, "predictor": [110, 136, 167, 200, 218, 378, 389, 390, 404, 406, 407, 410, 413, 460, 461, 476, 477, 478, 490, 510, 511, 512, 549, 550, 556, 559, 562, 596, 604, 624, 626, 627, 642, 647, 651, 663, 667, 674, 695, 814, 816, 825, 826, 854, 866, 867, 873, 955, 977, 982, 1023, 1029, 1032], "stack": [110, 136, 167, 286, 356, 375, 384, 388, 390, 402, 409, 458, 460, 461, 490, 509, 556, 559, 561, 562, 606, 621, 622, 624, 647, 667, 695, 814, 816, 854, 858, 866, 867, 873, 955, 971, 1001, 1002, 1003, 1004, 1018, 1022, 1025, 1029, 1030, 1031, 1032, 1033], "versu": [110, 132, 136, 167, 170, 178, 209, 215, 219, 235, 249, 254, 277, 289, 321, 328, 403, 407, 410, 413, 498, 514, 528, 547, 550, 604, 633, 652, 653, 660, 662, 668, 669, 670, 671, 776, 787, 790, 795, 815, 819, 825, 854, 889, 890, 897, 898, 901, 902, 970, 977, 981, 982, 987, 994, 995, 996, 1014, 1030], "isolationforest": [110, 136, 167, 229, 239, 625, 819, 897, 987, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038], "oob": [110, 124, 136, 167, 410, 509, 558, 1002, 1024, 1035], "votingclassifi": [110, 136, 167, 498, 558, 564, 625, 652, 831, 835, 898, 901, 970, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036], "vote": [110, 118, 133, 134, 136, 167, 279, 338, 390, 391, 402, 495, 549, 550, 551, 554, 558, 559, 563, 564, 651, 821, 835, 836, 841, 843, 982, 984, 1003, 1014, 1018, 1022, 1025, 1027, 1032], "hasti": [111, 112, 115, 116, 123, 127, 149, 188, 260, 373, 407, 410, 513, 514, 547, 553, 554, 622, 650, 715, 716, 717, 823, 840, 886, 901, 902, 971, 975, 977, 982, 988, 993, 995, 997], "2009": [111, 112, 115, 116, 127, 184, 403, 407, 408, 410, 411, 513, 514, 522, 525, 531, 532, 534, 535, 538, 541, 547, 553, 554, 629, 665, 673, 690, 824, 901, 902, 929, 930, 977, 981, 982, 988, 997], "tibshirani": [111, 115, 116, 127, 149, 188, 260, 373, 407, 410, 514, 553, 554, 622, 650, 715, 716, 717, 823, 840, 901, 902, 971, 975, 977, 982, 988, 997], "friedman": [111, 115, 116, 127, 260, 405, 407, 410, 472, 510, 511, 512, 514, 552, 553, 554, 559, 587, 588, 823, 901, 902, 904, 975, 977, 982, 988, 997], "ed": [111, 116, 127, 403, 410, 514, 553, 554, 993, 1022, 1029], "springer": [111, 115, 116, 127, 260, 401, 403, 407, 408, 410, 514, 529, 553, 554, 684, 688, 690, 699, 714, 719, 733, 734, 749, 788, 901, 902, 978, 981, 982, 988, 997], "zhu": [111, 112, 410, 513, 547, 652, 888], "zou": [111, 112, 188, 410, 513, 547, 650, 977, 995], "rosset": [111, 112, 410, 513, 547], "make_hastie_10_2": [111, 123, 127, 265, 372, 410, 553, 988], "12_000": 111, "Be": [111, 146, 161, 347, 376, 405, 561, 562, 642, 648, 649, 650, 652, 653, 663, 674, 698, 808, 809, 868, 991, 1019, 1023], "stump": [111, 114, 410, 553, 1033], "2_000": [111, 112], "dt_stump": 111, "min_samples_leaf": [111, 118, 124, 125, 172, 313, 316, 352, 410, 551, 552, 553, 554, 555, 556, 558, 559, 560, 901, 902, 903, 904, 997, 1028], "dt_stump_err": 111, "dt_err": 111, "ada_discret": 111, "adaboostclassifieradaboostclassifi": 111, "decisiontreeclassifierdecisiontreeclassifi": [111, 356], "ada_r": 111, "zero_one_loss": [111, 376, 697, 727, 981, 1023, 1024, 1025], "ada_discrete_err": 111, "staged_predict": [111, 112, 126, 410, 547, 548, 553, 554, 555, 556, 1022, 1034], "ada_discrete_err_train": 111, "ada_real_err": 111, "ada_real_err_train": 111, "leg": 111, "fancybox": [111, 341], "get_fram": 111, "503": [111, 136, 309, 311], "plot_adaboost_hastie_10_2": [111, 136], "experi": [112, 155, 159, 169, 170, 171, 172, 176, 202, 308, 342, 348, 349, 363, 370, 376, 379, 402, 407, 509, 721, 778, 977, 982, 993, 999, 1000, 1001, 1005, 1014, 1016], "depict": [112, 263, 410, 980], "principl": [112, 159, 286, 308, 349, 376, 388, 390, 391, 407, 410, 930, 970, 980, 984, 995, 1029], "repeatedli": [112, 317, 358, 390, 403, 410, 413, 502, 540, 660, 661, 670, 671, 672, 774, 971, 985, 1011], "misclassifi": [112, 255, 338, 347, 996], "349": [112, 159, 162, 382], "360": 112, "sphere": [112, 167, 220, 221, 227, 348, 409, 513, 583, 682, 683, 684, 685, 686, 757, 916, 975, 979, 984], "roughli": [112, 125, 189, 252, 271, 281, 308, 362, 390, 408, 411, 513, 978, 1022], "percent": [112, 486, 594, 994], "base_estim": [112, 315, 378, 401, 431, 547, 548, 549, 550, 824, 827, 890, 970, 977, 1033, 1035, 1036, 1037, 1038], "predecessor": [112, 444, 450, 451], "mistak": [112, 146, 323, 358, 403, 407, 728, 864, 878, 879, 881, 882, 883, 884, 977, 982], "samm": [112, 114, 410, 547, 1038], "incorrect": [112, 169, 268, 325, 358, 376, 403, 601, 602, 626, 627, 727, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "consecut": [112, 201, 401, 407, 411, 437, 441, 443, 444, 446, 450, 453, 456, 531, 532, 533, 540, 596, 639, 660, 661, 662, 670, 671, 672, 788, 789, 795, 828, 829, 830, 831, 832, 850, 851, 970, 991, 1016, 1030], "weak_learn": 112, "max_leaf_nod": [112, 118, 127, 200, 316, 356, 410, 551, 552, 553, 554, 555, 556, 558, 559, 560, 901, 902, 903, 904, 1025, 1031, 1033], "adaboost_clf": 112, "misclassification_error": 112, "dummyclassifi": [112, 264, 546, 981, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1032], "preval": [112, 313, 390, 694, 706, 981], "dummi": [112, 113, 200, 218, 236, 264, 365, 378, 381, 398, 866, 875, 991, 997, 1018, 1023, 1025, 1026, 1027, 1029], "dummy_clf": [112, 545], "weak_learners_misclassification_error": 112, "dummy_classifiers_misclassification_error": 112, "475": 112, "692": [112, 266, 277], "surpass": [112, 338, 850, 851], "conclud": [112, 170, 180, 218, 261, 349, 358, 391], "boosting_error": 112, "missclassif": 112, "jitter": [112, 644, 648, 1033], "stagewis": 112, "estimator_errors_": [112, 547, 548], "estimator_weights_": [112, 547, 548], "weak_learners_info": 112, "layout": [112, 303, 388, 893, 894, 895, 898, 914, 996, 1025, 1027], "get_figur": 112, "reweight": [112, 348, 390, 405, 410, 584, 585, 642, 663, 674], "formul": [112, 152, 161, 204, 270, 376, 405, 408, 411, 413, 416, 469, 543, 544, 551, 558, 644, 645, 648, 649, 650, 652, 653, 659, 664, 756, 762, 789, 895, 898, 901, 903, 981, 982, 991, 1003, 1018], "mathemat": [112, 170, 188, 217, 264, 368, 373, 376, 390, 392, 402, 405, 408, 409, 543, 544, 551, 558, 629, 640, 650, 783, 784, 789, 851, 895, 898, 901, 903, 981, 991, 993, 1003, 1005, 1014, 1018, 1036], "th": [112, 239, 316, 356, 389, 403, 407, 410, 418, 435, 439, 445, 447, 453, 457, 466, 551, 552, 553, 554, 555, 556, 558, 559, 560, 587, 588, 626, 642, 643, 663, 665, 674, 690, 712, 773, 811, 874, 918, 971, 977, 981, 985, 988, 995, 996, 1037], "boil": [112, 379, 405], "forc": [112, 152, 185, 204, 281, 307, 347, 370, 374, 380, 398, 407, 410, 444, 451, 490, 600, 603, 640, 641, 646, 647, 651, 654, 655, 656, 657, 666, 667, 668, 675, 678, 681, 747, 771, 774, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 895, 896, 897, 898, 899, 911, 913, 914, 991, 1018, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1038], "969": [112, 136, 370], "plot_adaboost_multiclass": [112, 136], "1d": [113, 115, 167, 171, 201, 233, 282, 295, 341, 354, 376, 383, 385, 389, 390, 404, 409, 458, 461, 611, 627, 647, 651, 654, 657, 678, 697, 706, 707, 713, 722, 723, 727, 731, 735, 776, 777, 780, 787, 835, 836, 837, 838, 839, 841, 843, 844, 845, 858, 909, 913, 914, 944, 968, 982, 1007, 1014, 1022, 1027, 1028, 1029, 1031, 1035, 1036], "drucker": [113, 410, 548], "1997": [113, 371, 408, 410, 529, 548, 684, 688, 977, 978, 981], "decisiontreeregressor": [113, 115, 240, 304, 313, 319, 354, 355, 381, 548, 550, 552, 553, 554, 556, 559, 626, 627, 901, 904, 906, 925, 971, 997, 1023, 1024, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "adaboostregressor": [113, 410, 547, 556, 1024, 1025, 1028, 1031, 1032, 1035, 1037, 1038], "regr_1": [113, 354, 355], "regr_2": [113, 354, 355], "y_1": [113, 354, 355, 406, 981, 985, 995], "y_2": [113, 354, 355, 985], "285": [113, 136, 243, 323, 717], "plot_adaboost_regress": [113, 136], "puriti": [114, 905, 907], "plot_adaboost_twoclass": [114, 136], "bdt": 114, "plot_color": [114, 353], "br": 114, "plot_step": [114, 121, 353], "class_nam": [114, 255, 905, 906, 907, 997, 1038], "xx0": [114, 625], "twoclass_output": 114, "plot_rang": 114, "398": [114, 136, 348, 641, 1016], "irreduc": [115, 981], "light": [115, 371], "beam": [115, 1022], "pointwis": [115, 159, 414, 438], "offset": [115, 176, 388, 405, 408, 463, 502, 503, 557, 626, 627, 635, 636, 638, 639, 671, 721, 768, 770, 839, 897, 981, 995, 1014, 1030], "narrow": [115, 125, 303, 305, 381, 833, 834], "bootstrap": [115, 116, 124, 164, 264, 273, 315, 407, 410, 548, 549, 550, 551, 552, 557, 558, 559, 919, 952, 977, 1022, 1023, 1025, 1027, 1030, 1032, 1035], "stem": [115, 172, 199, 252, 407, 411, 973, 983], "0255": 115, "0003": [115, 347], "0152": 115, "0098": 115, "0196": 115, "0004": [115, 308], "0092": 115, "baggingregressor": [115, 410, 549, 904, 971, 1025, 1028, 1030, 1033, 1037, 1038], "n_repeat": [115, 119, 126, 148, 170, 172, 173, 261, 313, 407, 509, 628, 805, 806, 989], "knn": [115, 133, 140, 164, 284, 289, 290, 293, 308, 315, 324, 347, 410, 596, 842, 888, 889, 984, 994, 1014, 1028], "y_predict": [115, 378, 1022], "y_error": [115, 206], "y_nois": 115, "y_bia": 115, "y_var": 115, "751": [115, 136, 154, 162], "plot_bias_vari": [115, 136], "z_i": [116, 985], "y_i": [116, 316, 342, 401, 410, 972, 973, 977, 981, 985, 995, 996, 997], "whilst": [116, 223], "practition": [116, 204], "suitabl": [116, 125, 184, 186, 204, 298, 349, 370, 371, 382, 385, 403, 408, 411, 446, 456, 462, 481, 499, 502, 621, 629, 828, 829, 832, 867, 868, 891, 946, 950, 975, 977, 980, 991, 993, 995, 1001, 1004, 1016, 1036, 1037], "p592": 116, "593": 116, "kian": [116, 1027, 1037, 1038], "ho": [116, 410, 549, 550, 981, 1027, 1030, 1031, 1036], "hui": [116, 188, 532, 534, 541, 650, 977], "ordereddict": 116, "warm_start": [116, 156, 193, 316, 378, 382, 390, 410, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 604, 640, 642, 643, 646, 652, 654, 656, 660, 661, 662, 663, 670, 671, 672, 674, 788, 789, 842, 850, 851, 987, 1003, 1018, 1022, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1036, 1038], "trajectori": 116, "ensemble_clf": 116, "oob_scor": [116, 410, 549, 550, 551, 552, 558, 559, 1027, 1029], "log2": [116, 210, 241, 551, 552, 553, 554, 558, 559, 901, 902, 903, 904, 982], "error_r": 116, "min_estim": 116, "max_estim": 116, "oob_error": 116, "oob_score_": [116, 549, 550, 551, 552, 553, 554, 558, 559, 1024, 1038], "clf_err": 116, "572": [116, 136], "plot_ensemble_oob": [116, 136], "betatim": [117, 131, 1037], "leak": [117, 266, 347, 358, 404, 407, 853, 878, 879, 881, 882, 883, 884, 991, 1022, 1029, 1032, 1038], "80_000": 117, "x_full_train": 117, "y_full_train": 117, "x_train_ensembl": 117, "x_train_linear": 117, "y_train_ensembl": 117, "y_train_linear": 117, "gradientboostingclassifi": [117, 123, 124, 127, 305, 358, 388, 547, 555, 626, 627, 982, 988, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "random_forest": 117, "gradient_boost": [117, 1024, 1025, 1031], "histgradientboostingclassifi": [117, 118, 313, 314, 315, 316, 318, 363, 553, 558, 626, 627, 971, 1001, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "randomtreesembed": [117, 130, 222, 410, 903, 1023, 1030, 1031, 1035, 1036, 1037], "random_tree_embed": 117, "rt_model": 117, "randomtreesembeddingrandomtreesembed": 117, "rf_appli": 117, "rf_leaves_yield": 117, "kw_arg": [117, 857, 991, 1028], "rf_model": 117, "0x7fca1f1e6700": 117, "functiontransformerfunctiontransform": 117, "gbdt_appli": 117, "gbdt_leaves_yield": 117, "gbdt_model": 117, "0x7fca1f1e5a80": 117, "roccurvedisplai": [117, 239, 242, 258, 270, 271, 313, 383, 781, 782, 987, 1019, 1032, 1038], "rt": 117, "rf": [117, 118, 131, 134, 135, 172, 313, 358, 410, 561, 563, 564], "gbdt": [117, 171, 313, 314, 319, 381, 410], "model_displai": 117, "423": [117, 136], "plot_feature_transform": [117, 136], "hgbt": [118, 410], "fetch_california_h": [118, 164, 165, 303, 315, 371, 389, 404, 1031, 1033], "20640": [118, 165, 371, 484], "n_core": 118, "only_physical_cor": 118, "unnecessari": [118, 246, 381, 437, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 699, 984, 991, 1002, 1005, 1025, 1027, 1032, 1033, 1035, 1038], "early_stop": [118, 171, 208, 297, 316, 347, 390, 410, 555, 556, 660, 661, 662, 670, 671, 672, 850, 851, 995, 1030, 1033, 1036, 1037], "return_train_scor": [118, 265, 309, 407, 790, 793, 794, 804, 816, 1028, 1029, 1031], "wast": [118, 382, 407, 408, 970], "plotli": [118, 262, 376, 393, 396], "cursor": [118, 262], "px": [118, 262], "make_subplot": 118, "shared_yax": 118, "subplot_titl": 118, "model_nam": [118, 239, 279], "colors_list": 118, "param_nam": [118, 262, 276, 319, 342, 394, 812, 820, 976, 1016], "param_": 118, "scatter_fig": 118, "mean_fit_tim": [118, 283, 790, 804], "error_x": [118, 262], "std_fit_tim": [118, 283, 790, 804], "error_i": [118, 262], "hover_data": [118, 262], "line_fig": 118, "scatter_trac": 118, "line_trac": 118, "add_trac": 118, "mean_score_tim": [118, 259, 262, 790, 804], "std_score_tim": [118, 262, 790, 804], "update_layout": [118, 262], "xaxis2": 118, "traceord": 118, "borderwidth": 118, "plateau": [118, 148, 259, 263], "earlier": [118, 171, 204, 370, 376, 406, 824, 827, 991, 999, 1020, 1023, 1035, 1037], "never": [118, 237, 358, 376, 385, 388, 397, 403, 404, 406, 407, 444, 451, 517, 540, 549, 550, 551, 558, 853, 854, 973, 991, 1032, 1035], "hgbdt": 118, "domin": [118, 165, 173, 200, 205, 239, 270, 308, 371, 382, 401, 873, 983, 991, 997, 1038], "ever": [118, 131, 385, 410, 1005], "disput": 118, "alwai": [118, 122, 125, 179, 200, 218, 226, 233, 264, 267, 271, 310, 331, 338, 342, 348, 358, 362, 363, 370, 374, 376, 377, 378, 382, 389, 390, 393, 401, 403, 404, 407, 410, 411, 412, 413, 426, 437, 443, 458, 459, 461, 463, 476, 477, 478, 482, 490, 502, 503, 538, 543, 545, 546, 548, 550, 552, 553, 554, 555, 556, 558, 559, 562, 564, 575, 582, 583, 585, 588, 605, 621, 622, 624, 626, 627, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 665, 666, 667, 670, 672, 673, 689, 699, 703, 709, 715, 716, 717, 725, 727, 728, 732, 775, 778, 779, 788, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 826, 827, 836, 837, 844, 845, 851, 858, 866, 871, 873, 886, 894, 895, 896, 898, 899, 901, 902, 904, 931, 940, 970, 971, 973, 975, 977, 980, 981, 984, 987, 989, 993, 994, 996, 997, 1005, 1007, 1014, 1022, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "thumb": [118, 176, 362, 376, 377, 388, 403, 652, 653, 660, 662, 670, 671, 672, 893, 981], "546": [118, 136, 349, 350], "plot_forest_hist_grad_boosting_comparison": [118, 136], "artifici": [119, 122, 129, 149, 165, 204, 221, 235, 300, 347, 371, 372, 373, 381, 400, 402, 403, 407, 408, 529, 690, 823, 850, 851, 974, 978, 980, 982, 988, 993, 997, 1002, 1005, 1022], "feature_importances_": [119, 120, 126, 149, 172, 173, 390, 410, 412, 547, 548, 551, 552, 553, 554, 558, 559, 560, 587, 588, 591, 901, 902, 903, 904, 1024, 1027, 1031], "estimators_": [119, 121, 237, 313, 390, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 821, 822, 823, 824, 825, 826, 827, 1023, 1029, 1036], "forest_import": 119, "mdi": [119, 126, 167, 168, 173, 174, 410, 458, 490, 558, 624, 628, 819, 853, 867, 989], "overcom": [119, 204, 362, 411], "permutation_import": [119, 120, 126, 172, 173, 313, 410, 547, 548, 551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904, 989, 1032, 1034, 1035], "importances_mean": [119, 126, 172, 173, 313, 628, 989], "069": [119, 182, 219, 259, 345], "importances_std": [119, 628, 989], "omit": [119, 169, 170, 327, 381, 416, 469, 528, 660, 662, 670, 797, 799, 821, 822, 825, 828, 829, 830, 831, 832, 850, 979, 986], "438": [119, 136, 170, 181, 219, 989], "plot_forest_import": [119, 136], "hotter": 120, "job": [120, 249, 376, 380, 384, 410, 414, 431, 438, 440, 442, 444, 446, 451, 452, 455, 458, 461, 462, 466, 525, 529, 530, 531, 533, 536, 537, 539, 540, 542, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 596, 604, 628, 633, 651, 682, 683, 684, 685, 686, 687, 688, 767, 771, 774, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 852, 855, 888, 889, 891, 947, 1005, 1009], "five": [120, 247, 323, 326, 371, 525, 533, 539, 978, 984, 996, 1005, 1022], "drawback": [120, 217, 973, 976], "img_shap": 120, "imp_reshap": 120, "met": [120, 236, 378, 412, 528, 535, 621, 665, 977, 981, 1030], "207": [120, 136, 300, 348, 1022], "plot_forest_importances_fac": [120, 136], "third": [121, 126, 144, 149, 160, 218, 229, 252, 286, 305, 319, 363, 371, 375, 388, 391, 411, 528, 582, 583, 584, 585, 792, 793, 794, 799, 835, 836, 837, 839, 841, 871, 883, 949, 970, 992, 999, 1022, 1033, 1038], "fourth": [121, 1007], "descend": [121, 621, 1032], "extratreesclassifi": [121, 130, 410, 412, 552, 558, 560, 903, 904, 982, 1025, 1026, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "decisiontre": [121, 1027], "consol": [121, 374, 1008], "extratre": [121, 130, 362, 1025], "sequenti": [121, 143, 150, 167, 194, 262, 315, 374, 408, 410, 411, 494, 495, 528, 587, 591, 596, 597, 599, 600, 640, 641, 646, 647, 652, 654, 655, 656, 657, 667, 781, 853, 854, 873, 971, 989, 995, 1001, 1003, 1018, 1022, 1031, 1034], "9266666666666666": 121, "8666666666666667": 121, "9933333333333333": 121, "rdylbu": [121, 353], "plot_step_coars": 121, "plot_idx": 121, "model_titl": 121, "model_detail": 121, "blend": [121, 132, 309, 390, 407, 1001], "estimator_alpha": 121, "coarser": [121, 125], "regularli": [121, 388, 983], "xx_coarser": 121, "yy_coars": 121, "z_points_coars": 121, "cs_point": 121, "355": [121, 136], "plot_forest_iri": [121, 136], "equidist": [122, 686], "lowa": 122, "sale": [122, 239, 261, 981, 1005], "42165": 122, "categorical_columns_subset": 122, "bldgtype": 122, "garagefinish": 122, "lotconfig": 122, "masvnrtyp": [122, 132], "housestyl": [122, 132], "fireplacequ": 122, "extercond": 122, "exterqu": [122, 132], "poolqc": 122, "numerical_columns_subset": 122, "3ssnporch": 122, "fireplac": 122, "bsmthalfbath": 122, "halfbath": 122, "garagecar": [122, 132], "totrmsabvgrd": 122, "bsmtfinsf1": [122, 132], "bsmtfinsf2": 122, "grlivarea": 122, "screenporch": 122, "n_categorical_featur": [122, 555, 556, 626, 627], "n_numerical_featur": 122, "1460": [122, 132], "make_column_transform": [122, 132, 170, 231, 314, 404, 458, 460, 1030], "dropper": 122, "hist_drop": 122, "hist_one_hot": 122, "etc": [122, 200, 218, 256, 265, 266, 358, 362, 364, 376, 378, 380, 381, 388, 389, 390, 394, 400, 404, 407, 411, 483, 497, 551, 552, 558, 559, 662, 670, 686, 712, 764, 790, 804, 824, 827, 857, 868, 901, 902, 903, 904, 905, 907, 913, 914, 924, 970, 971, 975, 981, 984, 1001, 1002, 1005, 1022, 1029, 1031, 1032], "use_encoded_valu": [122, 132, 172, 239, 309, 867, 991, 1034], "unknown_valu": [122, 132, 172, 239, 309, 867, 991, 1034, 1036, 1037], "hist_ordin": 122, "n_unique_categori": [122, 309], "hist_n": 122, "mean_absolute_percentage_error": [122, 981, 1034, 1036], "neg_mean_absolute_percentage_error": [122, 981, 989], "n_cv_fold": [122, 309, 796, 812, 817, 820], "dropped_result": 122, "one_hot_result": 122, "ordinal_result": 122, "native_result": 122, "plot_result": [122, 246, 247, 252], "figure_titl": 122, "plot_info": 122, "test_scor": [122, 124, 126, 208, 260, 263, 309, 342, 352, 389, 407, 796, 812, 816, 817, 820], "y_limit": 122, "mape_cv_mean": 122, "mape_cv_std": 122, "c0": [122, 232, 309], "slowest": [122, 929, 930], "theori": [122, 235, 251, 342, 373, 402, 403, 407, 410, 684, 688, 719, 749, 885, 886, 930, 970, 977, 978, 980, 981, 982, 996, 997], "poorer": [122, 358, 408], "slight": [122, 205, 315, 410, 443, 1032], "acf": 122, "bde": 122, "isol": [122, 128, 229, 239, 348, 374, 376, 382, 393, 557, 839, 897, 1031, 1032], "bcde": 122, "histgradientboostingregressor__max_depth": 122, "histgradientboostingregressor__max_it": 122, "altogeth": [122, 382, 1030], "plot_gradient_boosting_categor": [122, 136], "validation_fract": [123, 208, 316, 410, 553, 554, 555, 556, 660, 661, 662, 670, 672, 850, 851, 995, 1030, 1036], "denot": [123, 385, 390, 393, 401, 403, 407, 410, 582, 583, 585, 790, 796, 804, 812, 866, 867, 966, 970, 973, 977, 979, 981, 982, 991, 994, 1007], "kept": [123, 251, 281, 342, 370, 380, 397, 413, 490, 529, 532, 534, 535, 540, 541, 591, 604, 605, 613, 614, 638, 689, 788, 789, 914, 991, 1030, 1031], "asid": [123, 208, 397, 553, 554, 555, 556, 660, 661, 662, 670, 672, 850, 851], "n_estimators_": [123, 553, 554], "vighnesh": [123, 1027, 1028, 1030], "birodkar": [123, 1027, 1028, 1030], "vighneshbirodkar": 123, "rvraghav93": [123, 265, 303], "data_list": 123, "n_gb": 123, "score_gb": 123, "time_gb": 123, "n_gbe": 123, "gbe": 123, "gb": [123, 135, 410, 547, 627], "bar_width": 123, "bar1": 123, "crimson": 123, "bar2": 123, "coral": 123, "n_est": 123, "max_i": [123, 237, 983], "plot_gradient_boosting_early_stop": [123, 136], "fly": [124, 381, 384, 502, 503, 576, 1022, 1024, 1031], "pessimist": [124, 410], "cumul": [124, 200, 218, 403, 719, 728, 749, 870, 882, 991, 995, 1029, 1031, 1032], "demand": [124, 411, 790, 804, 814, 815], "6840": 124, "special": [124, 170, 190, 218, 291, 309, 334, 370, 372, 378, 382, 388, 390, 403, 406, 408, 458, 461, 547, 549, 553, 814, 905, 970, 975, 977, 979, 980, 981, 982, 984, 997, 1029, 1032, 1034, 1036], "expit": [124, 190, 410, 555, 977, 1029], "ridgewai": [124, 410], "gbm": [124, 410, 1025], "x3": [124, 404, 1015], "binomi": [124, 127, 410, 547, 553, 555, 977, 1036], "acc": 124, "heldout_scor": 124, "devianc": [124, 127, 200, 218, 319, 410, 547, 552, 553, 555, 556, 559, 642, 663, 674, 715, 716, 717, 740, 742, 745, 902, 904, 977, 997, 1023, 1032, 1033, 1035, 1036, 1038], "y_proba": [124, 127, 308, 390, 853], "staged_predict_proba": [124, 127, 547, 553, 555, 1022], "cv_estim": 124, "cv_clf": 124, "val_scor": 124, "cv_score": 124, "cumsum": [124, 200, 218, 1029], "oob_improvement_": [124, 410, 553, 554, 1024], "oob_best_it": 124, "test_best_it": 124, "cv_best_it": 124, "brew": [124, 374, 393], "oob_color": 124, "174": [124, 300, 382, 578], "212": [124, 149, 266, 325, 373, 463, 494, 987, 1014], "test_color": 124, "127": [124, 171, 224, 227, 237, 244, 1022], "201": [124, 149, 185, 219, 373, 578], "cv_color": 124, "253": [124, 226, 227, 528], "192": [124, 382, 1022], "oob_lin": 124, "test_lin": 124, "cv_line": 124, "dashdot": [124, 152, 155, 239], "xticks_po": 124, "tolist": [124, 164, 260, 315, 371], "xticks_label": 124, "plot_gradient_boosting_oob": [124, 136], "atleast_2d": [125, 378], "expected_i": 125, "amplitud": [125, 157, 159, 194, 977], "lognorm": [125, 158, 181, 250, 307, 991], "tail": [125, 165, 170, 200, 202, 261, 303, 515, 518, 977], "imposs": [125, 349, 1002], "mean_pinball_loss": [125, 316, 977, 981, 1035], "all_model": 125, "min_samples_split": [125, 126, 127, 265, 273, 304, 315, 410, 551, 552, 553, 554, 558, 559, 560, 793, 794, 901, 902, 903, 904, 970, 997, 1028], "gbr": 125, "gbr_l": 125, "5th": [125, 160, 403], "95th": [125, 741], "y_med": 125, "fill_between": [125, 138, 152, 157, 159, 161, 179, 180, 218, 261, 263, 264, 265, 271, 796, 812], "unfortun": [125, 169, 170, 218, 384, 388, 410, 502, 503], "sinoisoid": 125, "highlight_min": [125, 189], "font": [125, 189, 214, 234, 905, 907], "pbl": 125, "nbsp": [125, 189], "715413": 125, "750348": 125, "127128": 125, "253445": 125, "379763": 125, "933253": 125, "305438": 125, "622811": 125, "940184": 125, "827917": 125, "909909": 125, "145957": 125, "382005": 125, "667219": 125, "asymmetr": [125, 202, 390, 1027], "nor": [125, 264, 347, 358, 362, 381, 388, 411, 431, 440, 588, 917, 985, 997, 1033], "917281": 125, "767498": 125, "617715": 125, "692901": 125, "144204": 125, "245961": 125, "347717": 125, "648026": 125, "412021": 125, "607752": 125, "803483": 125, "874771": 125, "354394": 125, "355445": 125, "356497": 125, "852774": 125, "underestim": [125, 171, 200, 218, 261, 376], "extrem": [125, 200, 202, 238, 239, 303, 310, 325, 348, 376, 379, 403, 408, 551, 552, 558, 559, 560, 626, 627, 673, 717, 745, 903, 904, 905, 907, 981, 983], "coverage_fract": 125, "y_low": 125, "y_high": 125, "868": [125, 145], "hypothesi": [125, 261, 267, 407, 684, 688, 818, 978], "pinbal": [125, 316, 556, 664, 716, 741, 977, 1035, 1036], "experiment": [125, 164, 165, 200, 272, 273, 315, 316, 365, 376, 378, 379, 386, 388, 390, 394, 407, 490, 543, 621, 690, 793, 794, 951, 970, 971, 977, 980, 981, 1001, 1002, 1010, 1018, 1030, 1031, 1034, 1035, 1036, 1037], "enable_halving_search_cv": [125, 272, 273, 315, 380, 793, 794, 970], "halvingrandomsearchcv": [125, 273, 315, 573, 793, 970, 1034, 1036, 1037, 1038], "make_scor": [125, 265, 394, 407, 790, 815, 816, 981, 1031], "neg_mean_pinball_loss_05p_scor": 125, "greater_is_bett": [125, 735, 981], "search_05p": 125, "max_resourc": [125, 793, 794, 970], "min_resourc": [125, 793, 794], "neg_mean_pinball_loss_95p_scor": 125, "search_95p": 125, "estimator__alpha": 125, "did": [125, 152, 170, 173, 200, 208, 218, 247, 310, 371, 621, 706, 809, 895, 1015, 1023, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037], "untun": 125, "joint": [125, 167, 171, 178, 219, 221, 404, 605, 646, 656, 686, 828, 829, 830, 831, 832, 893, 977, 978, 982, 986, 988, 992, 1022], "9026666666666666": 125, "796": 125, "sadli": 125, "plot_gradient_boosting_quantil": [125, 136], "tackl": [126, 261, 363, 376, 403, 830, 983, 1005, 1010], "katrina": [126, 1033], "ni": [126, 1028, 1033], "nilichen": 126, "reg": [126, 170, 180, 236, 304, 314, 339, 410, 552, 554, 562, 644, 645, 647, 648, 649, 650, 651, 657, 658, 659, 664, 665, 672, 673, 683, 687, 904, 977, 1027], "3025": 126, "7877": 126, "train_score_": [126, 410, 553, 554, 555, 556], "impur": [126, 173, 356, 392, 410, 412, 547, 548, 551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904, 905, 907, 997, 1018, 1027, 1028, 1029, 1030], "feature_import": 126, "sorted_idx": [126, 313], "po": [126, 224, 411], "align": [126, 165, 221, 246, 272, 349, 390, 683, 687, 984, 995, 1017, 1018, 1038], "vert": [126, 172, 173, 313, 995], "plot_gradient_boosting_regress": [126, 136], "consider": [127, 153, 156, 239, 256, 262, 268, 376, 413, 613, 790, 804, 970, 983, 987, 995, 1005], "return_invers": [127, 378], "original_param": 127, "test_devi": 127, "118": [127, 136, 172, 174, 584], "plot_gradient_boosting_regular": [127, 136], "anomali": [128, 167, 228, 239, 244, 287, 288, 371, 402, 463, 506, 516, 557, 633, 671, 839, 854, 897, 987, 1001, 1028, 1029], "recurs": [128, 143, 150, 167, 352, 378, 402, 403, 407, 434, 435, 436, 439, 457, 496, 509, 557, 587, 588, 591, 596, 626, 627, 652, 809, 898, 981, 984, 987, 988, 997, 1003, 1015, 1018, 1022, 1032, 1033], "deform": [128, 251, 344], "notat": [128, 390, 404, 408, 411, 584, 706, 977, 981, 1007, 1031, 1038], "120": [128, 222, 257, 277, 412, 584, 1022], "cluster_1": 128, "cluster_2": 128, "nuniformli": 128, "max_sampl": [128, 164, 410, 549, 550, 551, 552, 557, 558, 559, 628, 1032, 1035, 1038], "isolationforestisolationforest": 128, "ax_": [128, 255, 264, 268, 276, 284, 308, 313, 383, 432, 625, 691, 692, 694, 695, 696, 796, 812], "nof": 128, "plot_isolation_forest": [128, 136], "trend": [129, 157, 171, 232, 298, 1005, 1029], "xgboost": [129, 410, 1001], "partialdependencedisplai": [129, 171, 240, 314, 315, 316, 318, 383, 627, 988, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "f_0": 129, "f_1": [129, 268, 981], "gbdt_no_cst": [129, 314], "histgradientboostingregressorhistgradientboostingregressor": [129, 132, 309, 318], "gbdt_with_monotonic_cst": 129, "monotonic_cst": [129, 314, 316, 410, 555, 556, 1037], "line_kw": [129, 240, 263, 314, 626, 796, 812], "unconstrain": [129, 171, 314, 371, 995], "axes_": [129, 240, 314, 383, 626], "f_idx": 129, "oscil": [129, 171, 205, 403, 434], "x_df": 129, "gbdt_with_monotonic_cst_df": 129, "516": [129, 136], "plot_monotonic_constraint": [129, 136], "excel": [130, 370, 376, 410, 684, 688, 977, 1005], "bernoullinb": [130, 364, 829, 830, 831, 832, 982, 983, 1023, 1024, 1026, 1029, 1034, 1035, 1037], "hasher": [130, 349, 411], "transformed_grid": 130, "y_grid_pr": 130, "plot_random_forest_embed": [130, 136], "multioutput": [131, 270, 279, 365, 378, 390, 426, 459, 476, 477, 478, 545, 548, 550, 551, 552, 554, 556, 558, 559, 562, 564, 605, 626, 627, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 715, 716, 721, 738, 739, 741, 743, 744, 746, 778, 781, 814, 822, 836, 844, 851, 860, 894, 896, 899, 901, 902, 903, 904, 919, 944, 945, 981, 1003, 1018, 1022, 1023, 1024, 1028, 1029, 1035, 1036], "multioutputregressor": [131, 426, 459, 476, 477, 478, 548, 550, 552, 554, 556, 559, 562, 564, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 825, 827, 836, 844, 851, 894, 896, 899, 902, 904, 1028, 1029, 1031, 1033, 1034, 1038], "nativ": [131, 164, 363, 371, 390, 410, 555, 556, 825, 826, 949, 977, 981, 1001, 1032, 1034], "centr": 131, "regr_multirf": 131, "regr_rf": 131, "y_multirf": 131, "y_rf": 131, "cornflowerblu": [131, 194, 203, 210, 247, 249, 252, 268, 270, 286, 292, 354, 355], "343": [131, 136, 138, 142], "plot_random_forest_regression_multioutput": [131, 136], "compil": [132, 281, 349, 362, 363, 376, 377, 378, 379, 384, 385, 388, 1001, 1022], "dean": [132, 1030, 1036, 1038], "cock": [132, 1031], "becam": [132, 391, 1030], "kaggl": [132, 389], "residenti": 132, "iowa": [132, 239], "won": [132, 299, 348, 380, 403, 462, 490, 621, 622, 624, 681, 698, 711, 729, 730, 748, 750, 786, 980, 991, 1027, 1028, 1033], "load_ames_h": 132, "yrsold": 132, "heatingqc": 132, "street": [132, 149, 373], "yearremodadd": 132, "heat": [132, 334, 403, 446, 456, 689], "bsmtunfsf": 132, "mssubclass": 132, "condition2": 132, "garagetyp": 132, "overallqu": 132, "totalbsmtsf": 132, "miscfeatur": 132, "mosold": 132, "cat_selector": 132, "num_selector": 132, "besid": [132, 232, 376, 381, 583, 970, 1030], "cat_tree_processor": 132, "encoded_missing_valu": [132, 172, 867, 991, 1036, 1037], "num_tree_processor": 132, "add_ind": [132, 165, 621, 622, 624, 971, 1031, 1034, 1038], "tree_preprocessor": [132, 200], "0x7fca5dfb37d0": 132, "0x7fca5dfb1050": 132, "ordinalencoderordinalencod": [132, 171, 172, 309], "cat_linear_processor": 132, "num_linear_processor": 132, "linear_preprocessor": 132, "tediou": 132, "wrote": [132, 371], "lasso_pipelin": 132, "lassocvlassocv": 132, "rf_pipelin": 132, "randomforestregressorrandomforestregressor": 132, "gbdt_pipelin": 132, "stackingregressor": [132, 313, 390, 410, 561, 1032, 1033, 1034, 1035, 1036], "stacking_regressor": 132, "final_estim": [132, 313, 410, 561, 562], "unknown_v": 132, "stackingregressorstackingregressor": 132, "forestcolumntransform": 132, "lassocolumntransform": 132, "boostingcolumntransform": 132, "final_estimatorridgecvridgecv": 132, "cross_val_predict": [132, 257, 313, 401, 407, 410, 431, 561, 562, 815, 816, 1026, 1027, 1028, 1029, 1031, 1033, 1035], "scorer": [132, 218, 265, 378, 390, 394, 407, 410, 555, 556, 588, 596, 628, 653, 667, 669, 705, 725, 726, 735, 790, 793, 794, 796, 804, 812, 815, 816, 817, 820, 939, 970, 977, 981, 989, 1002, 1026, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "test_": [132, 407], "line_kwarg": [132, 695], "nevalu": 132, "plot_stack_predictor": [132, 136], "exemplari": 133, "eclf": [133, 134, 410], "axarr": [133, 303], "tt": [133, 256, 459], "461": [133, 136, 382], "plot_voting_decision_region": [133, 136], "examplari": 134, "class1_1": 134, "class2_1": 134, "lightgreen": [134, 206, 217], "p3": 134, "p4": 134, "nweight": 134, "plot_voting_proba": [134, 136], "votingregressor": [135, 410, 563, 1031, 1032, 1033, 1036], "cohort": 135, "reg1": [135, 410], "reg2": [135, 410], "reg3": [135, 410], "ereg": [135, 410], "votingregressorvotingregressor": 135, "gbgradientboostingregressorgradientboostingregressor": 135, "rfrandomforestregressorrandomforestregressor": 135, "lrlinearregressionlinearregress": 135, "xt": [135, 281, 390, 439, 532, 534, 621, 623, 790, 793, 794, 804, 837, 845, 853, 858, 863, 870, 882, 911, 1038], "pred1": 135, "pred2": 135, "pred3": 135, "pred4": 135, "labelbottom": [135, 261], "602": [135, 136], "plot_voting_regressor": [135, 136], "637": 136, "auto_examples_ensembl": 136, "n_fold": [138, 641, 645, 647, 649, 653, 655, 657, 1023, 1024, 1028], "scores_std": [138, 139], "semilogx": [138, 139, 189, 274], "std_error": 138, "transluc": 138, "31622776601683794": 138, "answer": [138, 169, 261, 376, 388, 719, 749, 981, 1005], "extern": [138, 152, 364, 365, 369, 373, 376, 378, 381, 388, 390, 400, 403, 411, 412, 413, 587, 604, 605, 711, 730, 786, 977, 980, 981, 984, 997, 1002, 1008, 1014, 1018, 1030, 1034], "lasso_cv": 138, "k_fold": [138, 1011], "maximis": [138, 247, 289, 975, 984], "5f": [138, 317], "moreov": [138, 158, 305, 317, 358, 380, 403, 407, 413, 886, 951, 981, 1005, 1030, 1036, 1037], "substanti": [138, 283, 287, 288, 304, 376, 839, 987, 1026, 1029], "05968": 138, "54209": 138, "04520": 138, "15521": 138, "07880": 138, "45192": 138, "plot_cv_diabet": [138, 142], "this_scor": [139, 337], "874": [139, 142, 781, 782, 981], "plot_cv_digit": [139, 142], "961111": 140, "933333": [140, 842], "plot_digits_classification_exercis": [140, 142], "200j": 141, "278": [141, 142, 149, 150, 373, 833, 834], "plot_iris_exercis": [141, 142], "auto_examples_exercis": 142, "exercis": [142, 364, 365, 373, 376, 495, 496, 498, 499, 646, 647, 652, 790, 795, 815, 835, 898, 1008, 1025], "elimin": [143, 150, 167, 402, 403, 407, 442, 496, 509, 587, 588, 591, 596, 652, 793, 794, 809, 898, 967, 981, 1003, 1005, 1018, 1022], "x_2": [144, 155, 197, 408, 410, 411, 413, 607, 619, 977, 985, 991], "x_3": [144, 991], "irrelev": [144, 184, 358, 382, 405, 410, 412, 598, 733, 981], "agre": [144, 384, 391, 402, 403, 779, 1007], "percept": [144, 171, 988], "correctli": [144, 148, 200, 218, 236, 268, 270, 275, 291, 310, 324, 334, 376, 385, 408, 410, 420, 431, 463, 487, 543, 544, 545, 547, 549, 551, 553, 555, 558, 561, 563, 604, 652, 660, 662, 668, 669, 670, 697, 785, 787, 821, 822, 823, 824, 828, 829, 830, 831, 832, 835, 840, 843, 850, 873, 888, 889, 893, 895, 896, 897, 898, 899, 901, 903, 931, 978, 981, 984, 985, 991, 996, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "mutual_info_regress": [144, 317, 412, 586, 589, 590, 593, 594, 603, 1028, 1029, 1034, 1036, 1037, 1038], "f_test": 144, "x_": [144, 153, 252, 261, 313, 378, 403, 406, 408, 621, 629, 757, 888, 889, 977, 983, 988, 1028], "plot_f_test_vs_mi": [144, 150], "examin": [145, 382, 384, 403, 842], "f_classif": [145, 146, 337, 412, 586, 589, 590, 592, 593, 594, 598, 600, 603], "log10": [145, 158, 170, 185, 193, 262, 334], "pvalues_": [145, 586, 589, 590, 592, 593, 594, 1022], "x_indic": 145, "p_": [145, 981, 984, 997], "svm_weight": 145, "789": [145, 410], "clf_select": 145, "svm_weights_select": 145, "get_support": [145, 149, 315, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 1024], "plot_feature_select": [145, 150], "anova_filt": 146, "anova_svm": 146, "selectkbestselectkbest": [146, 317], "linearsvclinearsvc": [146, 268], "75788833": 146, "27161955": 146, "26113448": 146, "plot_feature_selection_pipelin": [146, 150], "rfe": [147, 148, 412, 588, 591, 596, 1022, 1026, 1032, 1033, 1034, 1035, 1036, 1038], "n_features_to_select": [147, 149, 315, 412, 587, 596, 1034, 1036], "ranking_": [147, 587, 588], "plot_rfe_digit": [147, 150], "introduct": [148, 218, 259, 365, 376, 407, 408, 411, 584, 781, 782, 828, 832, 977, 979, 981, 983, 1000, 1008, 1014, 1017, 1018], "class_sep": [148, 291, 509], "rfecv": [148, 412, 587, 591, 596, 1026, 1028, 1030, 1032, 1033, 1034, 1035, 1038], "stratifiedkfold": [148, 248, 256, 267, 271, 325, 407, 431, 561, 562, 588, 596, 653, 667, 790, 791, 793, 794, 795, 796, 798, 800, 804, 808, 810, 812, 813, 814, 815, 816, 817, 818, 820, 874, 1011, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1035], "min_features_to_select": [148, 588, 1030], "n_features_": [148, 535, 587, 588, 1035, 1037], "n_score": 148, "plot_rfe_with_cross_valid": [148, 150], "selectfrommodel": [149, 390, 587, 596, 597, 1003, 1018, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1038], "sequentialfeatureselector": [149, 412, 587, 591, 597, 1034, 1035, 1036, 1037, 1038], "greedi": [149, 410, 412, 441, 443, 454, 553, 554, 596, 977, 997], "442": [149, 165, 373, 495, 1014], "descript": [149, 170, 309, 369, 370, 375, 376, 380, 381, 384, 390, 403, 411, 446, 456, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 501, 504, 538, 624, 670, 755, 758, 771, 981, 995, 996, 1002, 1004, 1016, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "descr": [149, 369, 370, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 501, 504, 1013, 1030], "_diabetes_dataset": 149, "mass": [149, 240, 373, 440, 788, 977, 988], "blood": [149, 230, 373, 1014], "pressur": [149, 373, 1014], "six": [149, 201, 222, 307, 373, 1031], "serum": [149, 373], "bmi": [149, 188, 189, 240, 373, 989], "tc": [149, 373, 391], "cholesterol": [149, 373], "ldl": [149, 373], "lipoprotein": [149, 373], "hdl": [149, 373], "s4": [149, 188, 189, 373], "tch": [149, 373], "s5": [149, 188, 189, 373, 989], "ltg": [149, 373, 495], "triglycerid": [149, 373], "s6": [149, 188, 189, 373], "glu": [149, 373], "sugar": [149, 373], "www4": [149, 373], "ncsu": [149, 373], "boo": [149, 373], "bradlei": [149, 373, 977], "efron": [149, 373, 676, 677, 977], "trevor": [149, 188, 318, 373, 622, 650, 715, 716, 717, 971, 977, 993, 1026, 1027, 1030, 1031, 1032, 1034], "iain": [149, 373, 977], "johnston": [149, 373, 977, 1031], "annal": [149, 184, 188, 373, 410, 468, 510, 511, 512, 553, 554, 650, 977], "407": [149, 373], "499": [149, 373, 382], "web": [149, 370, 371, 373, 376, 379, 384, 403, 411, 515, 886, 981, 991, 1022], "stanford": [149, 373, 643, 676, 677, 828, 831, 832, 886, 979], "leastangle_2002": [149, 373], "pitfal": [149, 167, 168, 172, 174, 315, 365, 389, 390, 392, 407, 459, 461, 490, 647, 666, 667, 695, 746, 805, 816, 819, 854, 866, 873, 977, 1018], "e501": [149, 347], "accept": [149, 152, 236, 258, 313, 334, 347, 349, 358, 362, 363, 370, 376, 378, 385, 388, 389, 390, 391, 394, 397, 399, 403, 408, 411, 431, 435, 438, 439, 442, 455, 458, 461, 502, 503, 549, 550, 555, 556, 563, 564, 575, 576, 587, 588, 591, 622, 629, 633, 637, 673, 720, 735, 771, 788, 789, 793, 794, 835, 836, 843, 844, 857, 911, 913, 914, 917, 941, 977, 979, 981, 984, 989, 991, 996, 1001, 1002, 1011, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "tic": [149, 171, 239, 272, 983], "sfm": 149, "toc": [149, 239], "sf": [149, 261, 315, 371, 412, 486, 596], "backward": [149, 236, 315, 379, 390, 412, 490, 571, 596, 608, 609, 612, 613, 614, 616, 617, 906, 909, 981, 985, 1002, 1022, 1025, 1030, 1031, 1032, 1034, 1036, 1038], "tic_fwd": 149, "sfs_forward": 149, "toc_fwd": 149, "tic_bwd": 149, "sfs_backward": 149, "toc_bwd": 149, "096": [149, 348], "270": [149, 184, 305, 311, 323], "isn": [149, 313, 347, 349, 358, 363, 376, 384, 509, 555, 556, 588, 785, 793, 794, 866, 984, 996, 1032], "sound": [149, 358], "finish": [149, 249, 978], "expos": [149, 236, 316, 318, 363, 369, 373, 390, 394, 401, 410, 412, 413, 431, 458, 547, 548, 561, 562, 563, 564, 587, 588, 596, 605, 790, 793, 794, 804, 822, 823, 824, 825, 826, 827, 908, 949, 977, 981, 983, 1011, 1013, 1015, 1019, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "breast": [149, 369, 494, 1018, 1027], "cancer": [149, 369, 494, 587, 588, 840, 1018, 1027], "569": [149, 325, 373, 494, 586, 589, 590, 592], "load_breast_canc": [149, 173, 325, 352, 381, 586, 589, 590, 592, 668, 669, 781, 981, 1027, 1028, 1033], "breast_cancer_data": 149, "_breast_cancer_dataset": 149, "wisconsin": [149, 173, 369, 494, 1018, 1027], "diagnost": [149, 173, 264, 369, 390, 494, 706, 815, 816, 981, 1001, 1002, 1018], "radiu": [149, 276, 288, 334, 373, 403, 436, 444, 682, 757, 774, 833, 834, 835, 836, 837, 841, 843, 844, 845, 847, 984, 1024, 1026, 1036], "perimet": [149, 373], "textur": [149, 373, 751, 752, 979], "compact": [149, 176, 303, 362, 373, 833, 834, 997, 1024], "concav": [149, 373], "symmetri": [149, 373, 693, 866, 869, 881, 979], "fractal": [149, 373], "worst": [149, 200, 309, 373, 403, 438, 441, 702, 722, 723, 776, 777, 780, 783, 784, 818, 981, 1005, 1022, 1035], "field": [149, 218, 373, 400, 403, 404, 411, 492, 495, 611, 977, 979, 988, 996, 1001, 1004, 1016, 1023], "se": [149, 223, 373, 393], "wdbc": [149, 373], "malign": [149, 373, 494], "benign": [149, 373, 494], "summari": [149, 317, 356, 358, 373, 388, 686, 707, 906, 979, 982, 1001, 1016], "981": [149, 373, 981], "188": [149, 157, 340, 345, 373, 382, 578], "143": [149, 173, 174, 373, 465, 466, 993, 1022, 1023], "2501": [149, 373], "163": [149, 347, 373, 989], "019": [149, 373, 382, 465], "345": [149, 373], "427": [149, 349, 373, 500, 501, 577, 578], "304": [149, 307, 373], "873": [149, 373], "757": [149, 259, 281, 373], "542": [149, 373], "135": [149, 214, 318, 373], "008": [149, 348, 373, 382], "079": [149, 330, 345, 348, 373], "41": [149, 200, 239, 356, 371, 373, 463, 486, 615, 618, 629, 652, 658, 679, 680, 693, 774, 828, 983, 987], "251": [149, 223, 313, 320, 373], "4254": [149, 373], "071": [149, 190, 210, 219, 373, 431], "027": [149, 348, 373], "058": [149, 171, 259, 299, 301, 373], "252": [149, 223, 310, 311, 373, 528, 869, 881], "291": [149, 371, 373], "664": [149, 373], "055": [149, 348, 373, 981], "208": [149, 281, 373], "357": [149, 348, 373, 494, 894], "creator": [149, 370, 373], "william": [149, 371, 373, 413, 604, 605, 608, 613, 616, 633, 981, 985, 1029, 1030, 1031, 1032, 1037, 1038], "wolberg": [149, 373], "nick": [149, 373, 1022, 1028, 1029, 1030, 1031], "olvi": [149, 373], "mangasarian": [149, 373], "donor": [149, 373], "novemb": [149, 200, 218, 373, 1027, 1028, 1030], "1995": [149, 261, 373, 401, 410, 547, 548, 823, 890, 982], "goo": [149, 373], "gl": [149, 373], "u2uwz2": [149, 373], "needl": [149, 373], "aspir": [149, 373, 376], "fna": [149, 373], "nuclei": [149, 373], "multisurfac": [149, 373], "msm": [149, 373], "bennett": [149, 373, 981], "4th": [149, 160, 373], "midwest": [149, 373], "cognit": [149, 373], "societi": [149, 373, 403, 405, 463, 468, 535, 621, 869, 881, 977, 995], "101": [149, 373, 839, 1023], "1992": [149, 371, 373, 407, 410, 561, 562, 639, 977], "exhaust": [149, 262, 313, 314, 315, 316, 317, 318, 319, 362, 373, 381, 389, 398, 403, 790, 793, 794, 804, 883, 884, 886, 977, 1016, 1018], "insepar": [149, 373], "uw": [149, 373, 1034], "ftp": [149, 373, 676, 677], "wisc": [149, 373, 888], "prog": [149, 373], "cpo": [149, 373], "nuclear": [149, 373], "tumor": [149, 373], "diagnosi": [149, 264, 373, 840], "spie": [149, 373], "1993": [149, 373, 468, 658, 679, 680, 997], "symposium": [149, 373, 403, 454], "technologi": [149, 373, 403, 1001, 1005], "1905": [149, 373], "861": [149, 373, 781, 782, 981], "870": [149, 373], "san": [149, 373, 411, 993], "jose": [149, 373, 652, 981, 1030, 1032], "ca": [149, 373, 403, 436, 901, 902, 993, 997], "prognosi": [149, 373], "570": [149, 373, 1014], "577": [149, 373], "juli": [149, 373, 412, 727, 874, 991, 1025, 1029, 1030, 1031], "august": [149, 373, 403, 505, 528, 996, 1022, 1024, 1025, 1029, 1036], "diagnos": [149, 264, 373, 384, 392, 404], "letter": [149, 160, 371, 373, 380, 411, 781, 782, 796, 812, 981], "1994": [149, 371, 373, 638], "feature_selector": 149, "ntol": 149, "468": 149, "998": [149, 985], "377": 149, "plot_select_from_model_diabet": [149, 150], "414": [150, 218, 404, 719, 749, 869, 881, 981], "auto_examples_feature_select": 150, "gpr": [151, 161, 162, 167, 490, 604, 605, 607, 608, 609, 610, 615, 616, 617, 618, 619, 1003, 1018, 1032], "co2": [151, 162, 167, 413, 490, 605, 609, 616, 617, 619, 1029], "mona": [151, 162, 167, 413, 490, 605, 609, 616, 617, 619], "loa": [151, 162, 167, 413, 490, 605, 609, 616, 617, 619], "basic": [151, 162, 165, 167, 198, 310, 339, 362, 364, 365, 376, 378, 380, 388, 390, 403, 407, 408, 410, 605, 616, 889, 901, 902, 903, 904, 970, 971, 984, 995, 1000, 1001, 1002, 1005, 1014], "introductori": [151, 162, 167, 228, 413, 605, 616, 1005], "xor": [151, 162, 167, 340, 604, 608, 616, 977, 997, 1029], "posterior": [151, 152, 153, 162, 167, 179, 261, 408, 413, 543, 544, 546, 604, 605, 607, 608, 609, 613, 616, 617, 621, 638, 639, 702, 788, 975, 1001, 1028, 1031], "iso": [151, 162, 167, 223, 604, 607, 608], "trick": [152, 235, 291, 338, 349, 361, 364, 365, 379, 388, 404, 576, 583, 637, 666, 973, 974, 985, 995, 996, 1014, 1015, 1018, 1023, 1031], "drastic": [152, 233, 269, 403, 407, 984, 994], "theorem": [152, 342, 402, 983], "period": [152, 157, 161, 380, 390, 391, 401, 413, 609, 811, 872, 1030, 1035, 1037], "reus": [152, 193, 262, 313, 349, 378, 390, 403, 404, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 628, 640, 642, 643, 646, 652, 654, 656, 660, 661, 662, 663, 670, 671, 672, 674, 850, 851, 989, 993, 1005, 1029], "training_sample_indic": 152, "training_data": 152, "training_noisy_target": 152, "newer": [152, 375, 393, 408], "expsinesquar": [152, 157, 161, 413], "emb": [152, 222, 233, 290, 369, 370, 456, 689, 978], "kernel_ridg": [152, 235, 365, 1026], "length_scal": [152, 153, 156, 157, 158, 159, 161, 413, 606, 609, 613, 615, 616, 617, 618], "tell": [152, 170, 171, 236, 261, 334, 339, 363, 371, 403, 411, 557, 573, 970, 975, 988, 1016], "1e0": [152, 235, 252, 269, 970], "kernel__length_scal": 152, "kernel__period": 152, "1e1": [152, 158, 200, 235, 334], "kernel_ridge_tun": 152, "991584977345022": 152, "7986499491396734": 152, "6072758064261095": 152, "predictions_kr": 152, "gaussianprocessregressor": [152, 157, 158, 159, 160, 161, 413, 604, 607, 608, 609, 610, 611, 615, 618, 619, 637, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "whitekernel": [152, 157, 158, 413, 605, 606, 608, 1033], "periodicity_bound": [152, 157, 161, 609], "024": 152, "kernel_": [152, 153, 154, 155, 156, 157, 158, 159, 161, 604, 605], "675": 152, "noise_level": [152, 157, 158, 606, 619], "mean_predictions_gpr": 152, "std_predictions_gpr": 152, "return_std": [152, 157, 158, 159, 161, 179, 180, 390, 546, 561, 562, 605, 607, 608, 609, 610, 619, 621, 638, 639, 853, 1029, 1030, 1034], "010": [152, 382, 989], "capac": [152, 172], "length_scale_bound": [152, 158, 159, 161, 413, 605, 609, 613, 616, 617], "attenu": 152, "534": [152, 162, 170], "plot_compare_gpr_krr": [152, 162], "arbitrarili": [153, 247, 252, 347, 390, 413, 426, 459, 476, 477, 478, 546, 548, 550, 552, 554, 556, 559, 562, 564, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 663, 664, 666, 667, 672, 673, 674, 715, 716, 717, 739, 778, 782, 826, 827, 836, 844, 851, 874, 894, 896, 899, 902, 904, 981, 984, 991, 997], "lml": [153, 154, 158, 413], "exhibit": [153, 205, 338, 347, 392, 407, 408, 410, 413, 989], "steep": [153, 171, 270, 271, 403, 407, 413, 444, 450], "laplac": [153, 413, 604, 605, 828, 829, 830, 832, 983], "319": [153, 1016], "gp_fix": 153, "gp_opt": 153, "log_marginal_likelihood": [153, 154, 156, 158, 161, 413, 604, 605, 1032], "theta": [153, 154, 156, 158, 160, 161, 237, 408, 413, 517, 530, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 686, 983, 997], "landscap": 153, "theta0": 153, "theta1": 153, "pcolor": 153, "xscale": [153, 158, 235, 796], "yscale": [153, 158, 200, 235, 347, 796], "418": [153, 162], "plot_gpc": [153, 162], "gpc_rbf_isotrop": 154, "gpc_rbf_anisotrop": 154, "m_max": 154, "plot_gpc_iri": [154, 162], "0256": 155, "dotproduct": [155, 156, 161, 413, 605, 619], "sigma_0": [155, 156, 161, 413, 608], "constantkernel": [155, 161, 413, 605, 611, 615, 618], "lim": [155, 528], "61611719": 155, "00099547": 155, "10469096": 155, "32782448": 155, "00000000": 155, "50000000": 155, "17289014": 155, "6984743": 155, "3109306": 155, "93271427": 155, "03823144": 155, "10584743": 155, "87600388": 155, "74310541": 155, "21301203": 155, "26386883": 155, "gp": [155, 160, 413, 604, 605, 616, 1028], "cb": [155, 233, 250], "widehat": 155, "mathbf": [155, 338, 408, 977, 981, 985, 986, 995], "leq": [155, 408, 410, 977, 981, 984, 995, 996, 997], "clim": 155, "clabel": [155, 211], "334": [155, 348], "plot_gpc_isoprob": [155, 162], "stationari": [156, 413, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619], "coincid": [156, 202, 413], "429": [156, 158, 349], "convergencewarn": [156, 158, 160, 161, 208, 215, 247, 298, 299, 305, 385, 390, 788, 789, 1030, 1031, 1034], "k1__constant_valu": 156, "bound": [156, 158, 160, 167, 202, 218, 228, 244, 260, 374, 383, 403, 408, 411, 413, 414, 438, 483, 496, 506, 517, 530, 589, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 626, 629, 631, 644, 648, 652, 671, 699, 728, 788, 789, 833, 834, 870, 882, 885, 886, 887, 895, 896, 897, 900, 917, 949, 977, 980, 981, 984, 993, 995, 996, 998, 1030, 1033, 1034, 1036], "100000": [156, 235, 246, 376, 607, 608, 609, 613, 614, 616, 617, 619, 882, 974, 1014, 1016], "puor_r": [156, 340], "557": [156, 162], "plot_gpc_xor": [156, 162], "rw2006": [157, 413, 604, 605], "ascent": [157, 413], "monthli": [157, 391, 981], "atmospher": 157, "ppm": 157, "mauna": 157, "observatori": 157, "hawaii": 157, "1958": [157, 408, 410, 526], "air": [157, 757], "41187": 157, "flag": [157, 239, 374, 376, 377, 379, 394, 458, 604, 605, 621, 667, 669, 721, 778, 996, 1028, 1032, 1033, 1035, 1036, 1037, 1038], "station": 157, "mlo": 157, "co2_data": 157, "to_datetim": 157, "timestamp": 157, "march": [157, 719, 749, 981, 1022, 1026, 1030, 1032, 1037], "dropna": 157, "nfrom": 157, "upcom": [157, 374], "to_numpi": 157, "rise": 157, "irregular": [157, 338, 403, 984], "long_term_trend_kernel": 157, "decai": [157, 538, 850, 851, 930, 981, 995, 1026], "seasonal_kernel": 157, "ration": [157, 617, 979], "diffus": 157, "accommod": [157, 1030], "rationalquadrat": [157, 161, 413, 610], "irregularities_kernel": 157, "shall": 157, "phenomena": 157, "noise_kernel": 157, "noise_level_bound": [157, 158, 619], "co2_kernel": 157, "subtract": [157, 170, 239, 406, 408, 437, 441, 453, 528, 638, 639, 644, 645, 648, 649, 650, 658, 659, 1029], "normalize_i": [157, 413, 605, 1036], "y_mean": [157, 158, 161, 605, 638, 639], "gaussianprocessregressorgaussianprocessregressor": 157, "futur": [157, 171, 201, 242, 316, 319, 374, 376, 378, 380, 388, 390, 391, 397, 407, 411, 490, 528, 629, 951, 981, 982, 996, 997, 1005, 1019, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "todai": [157, 388, 1016], "current_month": 157, "mean_y_pr": 157, "std_y_pr": 157, "536": [157, 281], "968": [157, 169, 259], "0367": 157, "6ppm": 157, "plot_gpr_co2": [157, 162], "target_gener": 158, "add_nois": 158, "minima": [158, 188, 408, 441, 686, 978, 1015, 1030], "y_std": [158, 161, 546, 605, 638, 639, 1035], "k1__k2__length_scal": [158, 413], "noptimum": 158, "nlog": 158, "length_scale_grid": 158, "noise_level_grid": 158, "newshap": 158, "842": [158, 162], "plot_gpr_noisi": [158, 162], "tikhonov": [159, 413, 666], "training_indic": 159, "n_restarts_optim": [159, 413, 604, 605], "mean_predict": 159, "std_predict": 159, "whenev": [159, 169, 358, 370, 384, 390, 393, 401, 476, 477, 478, 490, 622, 624, 972, 980, 1002, 1032], "noise_std": 159, "y_train_noisi": 159, "plot_gpr_noisy_target": [159, 162], "gene": [160, 370, 400, 445, 507, 587, 588, 840, 873], "among": [160, 171, 173, 176, 200, 251, 279, 356, 364, 371, 378, 390, 391, 401, 402, 406, 441, 443, 506, 513, 785, 818, 836, 841, 843, 895, 898, 901, 902, 903, 904, 970, 973, 981, 982, 988, 991, 996, 1022, 1028, 1029, 1032], "brighter": 160, "6th": 160, "haussler": 160, "1999": [160, 371, 401, 403, 405, 408, 410, 431, 444, 451, 463, 468, 528, 535, 549, 550, 553, 554, 716, 887, 895, 896, 898, 899, 987, 993], "646": 160, "technic": [160, 201, 222, 317, 371, 373, 376, 390, 410, 646, 658, 679, 680, 888, 977, 978, 984], "depart": [160, 403], "california": [160, 164, 165, 303, 309, 315, 369, 373, 484, 1018], "santa": [160, 1037], "cruz": 160, "generickernelmixin": [160, 1032], "sequencekernel": 160, "baseline_similar": 160, "baseline_similarity_bound": 160, "hyperparameter_baseline_similar": 160, "_f": [160, 977], "_g": 160, "__call__": [160, 334, 390, 411, 413, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 1029], "eval_gradi": [160, 413, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619], "is_stationari": [160, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619], "clone_with_theta": [160, 413, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619], "agct": 160, "agc": 160, "aact": 160, "taa": 160, "aaa": 160, "gaaca": 160, "training_idx": 160, "cga": 160, "taac": 160, "tcg": 160, "cttt": 160, "tgct": 160, "atag": 160, "ctc": 160, "419": [160, 171, 610], "plot_gpr_on_structured_data": [160, 162], "plot_gpr_sampl": 161, "gpr_model": 161, "y_sampl": [161, 605], "sample_i": [161, 413, 605, 1036], "single_prior": 161, "pm": [161, 171, 271, 410, 981], "dev": [161, 170, 218, 266, 271, 374, 376, 380, 382, 384, 981, 1005, 1029, 1034, 1037, 1038], "594": [161, 200], "279": [161, 977], "alpha_bound": [161, 617], "1e15": 161, "01e": 161, "799": [161, 348], "791": [161, 290, 295], "sigma_0_bound": [161, 608], "_gpr": 161, "663": [161, 887, 989, 993], "lbfg": [161, 297, 378, 642, 643, 652, 653, 663, 666, 668, 674, 681, 824, 827, 850, 851, 977, 985, 1026, 1027, 1029, 1030, 1035, 1036, 1037], "abnormal_termination_in_lnsrch": 161, "674": 161, "7957695978": 161, "947": [161, 215, 219], "matern": [161, 413, 1033, 1037], "609": [161, 348, 382], "484": [161, 179, 219], "280": [161, 162, 323, 338, 345], "plot_gpr_prior_posterior": [161, 162], "794": [162, 317, 320], "auto_examples_gaussian_process": 162, "iterativeimput": [163, 165, 166, 167, 484, 559, 574, 622, 623, 624, 633, 639, 666, 815, 836, 854, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "robin": [164, 165, 621, 971, 1028, 1031, 1036, 1037], "kneighborsregressor": [164, 238, 293, 317, 410, 564, 835, 841, 843, 844, 984, 1022, 1024, 1026, 1032, 1034, 1035, 1036, 1037, 1038], "mimic": [164, 200, 347, 808], "missforest": [164, 971], "popular": [164, 225, 371, 374, 381, 384, 388, 390, 402, 409, 410, 411, 413, 446, 456, 971, 973, 977, 979, 986, 995, 1002, 1011, 1016], "enable_iterative_imput": [164, 165, 380, 621, 971, 1031], "x_full": [164, 165, 303], "y_full": [164, 165, 303], "2k": 164, "br_estim": 164, "score_full_data": 164, "neg_mean_squared_error": [164, 165, 202, 235, 275, 816, 981, 989, 1028], "x_miss": [164, 165], "y_miss": [164, 165], "missing_sampl": [164, 165], "missing_featur": [164, 165], "score_simple_imput": 164, "missing_valu": [164, 165, 241, 390, 621, 622, 623, 624, 762, 971, 1030, 1031], "score_iterative_imput": 164, "stricter": 164, "impute_estim": 164, "__class__": [164, 200, 202, 236, 239, 263, 305, 347, 348, 349, 383], "xerr": [164, 165, 348], "236": [164, 166], "plot_iterative_imputer_variants_comparison": [164, 166], "ness": [165, 218], "auxiliari": [165, 374, 1005, 1037], "district": [165, 371], "neither": [165, 170, 313, 347, 358, 388, 431, 588, 622, 917, 984, 997], "feel": [165, 303, 375, 376, 384, 403, 440, 997], "x_diabet": [165, 1011], "y_diabet": [165, 1011], "x_california": 165, "y_california": 165, "add_missing_valu": 165, "missing_r": 165, "n_missing_sampl": 165, "x_miss_california": 165, "y_miss_california": 165, "x_miss_diabet": 165, "y_miss_diabet": 165, "knnimput": [165, 313, 621, 624, 971, 1032, 1033, 1036, 1037, 1038], "get_scores_for_imput": 165, "impute_scor": 165, "x_label": 165, "mses_california": 165, "stds_california": 165, "mses_diabet": 165, "stds_diabet": 165, "get_full_scor": 165, "full_scor": 165, "get_impute_zero_scor": 165, "fill_valu": [165, 231, 241, 314, 621, 624, 991, 1030, 1038], "zero_impute_scor": 165, "unweight": [165, 213, 457, 641, 647, 672, 701, 707, 722, 723, 731, 776, 777, 780, 781, 828, 829, 830, 831, 832, 971], "get_impute_knn_scor": 165, "knn_impute_scor": 165, "get_impute_mean": 165, "mean_impute_scor": 165, "obvious": [165, 362, 1016], "get_impute_it": 165, "n_nearest_featur": [165, 621], "sample_posterior": [165, 621, 971], "iterative_impute_scor": 165, "n_bar": 165, "xval": 165, "invert_yaxi": [165, 349], "496": [165, 166, 246, 253], "plot_missing_valu": [165, 166], "auto_examples_imput": 166, "prune": [167, 351, 357, 412, 494, 551, 552, 553, 554, 558, 559, 587, 638, 819, 901, 902, 903, 904, 984, 1003, 1018, 1022, 1025, 1032, 1033], "elast": [167, 178, 184, 191, 211, 219, 274, 402, 465, 466, 472, 495, 518, 640, 641, 646, 651, 652, 653, 654, 655, 656, 657, 662, 670, 672, 675, 678, 970, 981, 995, 1003, 1018, 1022, 1027, 1031, 1032], "gram": [167, 178, 219, 378, 408, 411, 483, 518, 542, 582, 583, 584, 585, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 658, 659, 675, 676, 677, 678, 679, 680, 760, 768, 770, 970, 991, 996, 1016, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036], "huberregressor": [167, 178, 204, 206, 219, 518, 664, 665, 666, 672, 673, 977, 1028, 1029, 1030, 1031], "aic": [167, 178, 188, 219, 251, 495, 645, 647, 648, 649, 650, 789, 854, 873, 970, 977, 1022, 1029, 1035, 1036], "bic": [167, 178, 188, 219, 412, 495, 645, 647, 648, 649, 650, 789, 854, 873, 970, 977, 980, 1022, 1029, 1035, 1036], "mnist": [167, 178, 208, 219, 281, 296, 301, 490, 565, 652, 819, 850, 873, 916, 977, 985], "20newgroup": [167, 178, 219, 483, 565, 652, 819, 977], "ordinari": [167, 178, 179, 184, 202, 203, 205, 217, 219, 316, 629, 640, 646, 648, 649, 650, 651, 666, 672, 676, 677, 681, 995, 1003, 1018], "spline": [167, 178, 219, 510, 511, 512, 666, 854, 868, 872, 1001, 1035], "ransac": [167, 178, 206, 217, 219, 518, 643, 651, 665, 672, 673], "convex": [167, 178, 219, 221, 343, 348, 403, 405, 408, 416, 440, 446, 456, 467, 469, 470, 473, 474, 475, 652, 670, 686, 977, 978, 984, 985, 995, 1035], "theil": [167, 178, 206, 219, 643, 651, 665, 672, 673], "sen": [167, 178, 206, 219, 643, 651, 665, 672, 673], "tweedi": [167, 178, 219, 458, 490, 546, 642, 663, 674, 700, 717, 738, 740, 742, 743, 745, 819, 854, 857, 858, 866, 873, 977, 1032, 1033, 1035], "insur": [167, 178, 200, 219, 458, 490, 546, 642, 663, 674, 700, 738, 743, 745, 819, 854, 857, 858, 866, 873, 977], "claim": [167, 178, 219, 376, 458, 490, 546, 642, 663, 674, 700, 738, 743, 745, 819, 854, 857, 858, 866, 873, 977], "failur": [167, 168, 170, 174, 376, 384, 651, 778, 819, 913, 914, 1004, 1005, 1035, 1036], "infer": [167, 168, 170, 174, 247, 251, 252, 261, 353, 370, 378, 388, 402, 407, 408, 490, 502, 503, 509, 528, 530, 543, 544, 547, 553, 554, 626, 629, 651, 703, 716, 734, 778, 788, 789, 796, 812, 819, 829, 867, 874, 888, 889, 901, 902, 903, 904, 944, 971, 977, 980, 981, 986, 991, 994, 997, 1001, 1002, 1010, 1023, 1027, 1028, 1033, 1036], "causal": [167, 168, 174, 651, 778, 819], "multicollinear": [167, 168, 174, 406, 494, 558, 628, 649, 819, 977, 989], "isomap": [167, 220, 223, 227, 313, 317, 410, 496, 538, 543, 560, 683, 684, 685, 686, 842, 854, 863, 886, 984, 1017, 1018, 1030, 1032, 1035, 1036, 1037, 1038], "And": [167, 220, 227, 236, 261, 347, 384, 397, 403, 407, 411, 524, 582, 583, 585, 686, 687, 977, 981, 999, 1029], "hole": [167, 220, 227, 524, 686, 687, 1036], "perplex": [167, 220, 221, 225, 227, 281, 508, 519, 530, 686, 978, 1027, 1029, 1036], "metadata": [167, 228, 244, 348, 365, 370, 371, 397, 417, 420, 423, 426, 427, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 482, 483, 490, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 937, 938, 939, 940, 941, 965, 981, 1001, 1002, 1007, 1018, 1038], "rout": [167, 228, 244, 365, 417, 420, 423, 426, 427, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 938, 939, 940, 941, 965, 1018, 1036, 1038], "johnson": [167, 228, 244, 303, 307, 368, 402, 483, 496, 869, 881, 885, 886, 887, 991, 998, 1018, 1030, 1036, 1038], "lindenstrauss": [167, 228, 244, 368, 402, 483, 496, 885, 886, 887, 998, 1018], "halv": [167, 254, 277, 398, 509, 558, 573, 790, 793, 794, 898, 1018, 1034], "det": [167, 254, 277, 376, 405, 509, 558, 692, 696, 720, 782, 819, 854, 873, 893, 928, 1034], "tsne": [167, 221, 222, 223, 225, 226, 282, 295, 317, 390, 417, 427, 490, 682, 683, 684, 837, 841, 854, 955, 978, 984, 1025, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "novelti": [167, 229, 282, 288, 295, 333, 839, 1003, 1017, 1018, 1022, 1030], "lof": [167, 229, 239, 282, 295, 557, 839, 897, 987], "boltzmann": [167, 296, 301, 496, 652, 707, 819, 849, 850, 851, 853, 879, 1017, 1018, 1024], "mlp": [167, 171, 240, 296, 298, 301, 490, 565, 819, 850, 851, 985], "semi_supervis": [167, 315, 317, 321, 322, 323, 324, 325, 326, 327, 365, 982, 994, 1023, 1028, 1029, 1036, 1037], "tie": [167, 329, 345, 388, 410, 506, 821, 898, 982, 996, 997, 1023, 1038], "unbalanc": [167, 264, 329, 345, 407, 506, 625, 898, 918, 919, 970, 995], "featurehash": [167, 346, 348, 350, 364, 371, 411, 458, 482, 575, 582, 583, 584, 585, 866, 1023, 1028, 1029, 1030, 1036, 1037], "auto_examples_python": 167, "auto_examples_jupyt": 167, "unless": [169, 236, 247, 252, 376, 378, 379, 388, 390, 401, 403, 406, 414, 431, 438, 440, 442, 444, 446, 451, 452, 455, 458, 461, 466, 483, 490, 502, 503, 525, 529, 530, 531, 533, 536, 537, 539, 540, 541, 542, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 588, 596, 604, 605, 626, 628, 633, 640, 641, 645, 646, 647, 649, 651, 652, 653, 655, 657, 659, 660, 662, 670, 673, 682, 683, 684, 685, 686, 687, 688, 703, 708, 767, 771, 774, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 835, 836, 839, 841, 843, 844, 846, 847, 850, 851, 852, 855, 878, 879, 881, 882, 883, 884, 888, 889, 901, 902, 903, 904, 909, 913, 914, 930, 949, 977, 980, 982, 1022, 1024, 1028, 1030, 1033, 1034], "willing": [169, 258], "econom": [169, 170, 261], "educ": [169, 170, 376, 710, 982], "earn": [169, 170, 391], "polici": [169, 170, 200, 218, 390, 529, 535, 977, 1037], "maker": [169, 170], "ovb": [169, 170], "parent_hourly_wag": 169, "college_degre": 169, "true_coef": [169, 184, 195], "hourly_wag": 169, "stori": [169, 261, 371, 980], "pairplot": [169, 170], "diag_kind": [169, 170], "kde": [169, 170, 285, 286, 294, 409, 838], "features_nam": [169, 1029], "regressor_with_": 169, "y_pred_with_": 169, "r2_with_abl": 169, "model_coef": 169, "intellectu": 169, "proxi": [169, 170, 408, 849, 1011, 1027], "inadvert": [169, 390], "iq": 169, "regressor_without_": 169, "y_pred_without_": 169, "r2_without_": 169, "brought": [169, 547, 548, 551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904], "unobserv": [169, 170, 408], "confound": [169, 170], "conduct": [169, 261, 413, 1036], "prohibit": [169, 407, 410, 621, 986, 994, 1029], "uneth": 169, "iv": [169, 981], "769": [169, 174, 281], "plot_causal_interpret": [169, 174], "hint": [170, 362, 377, 381, 397, 442, 981, 1014], "aris": [170, 264, 342, 363, 381, 403, 709, 977, 978, 1034], "survei": [170, 406], "1985": [170, 403, 699, 709, 779], "race": [170, 371, 1025], "occup": [170, 303], "sector": 170, "marr": 170, "not_memb": 170, "marri": 170, "freq": [170, 184, 349], "378": [170, 410, 1016, 1022], "289": [170, 352, 357], "440": 170, "411": [170, 405, 415, 467, 527], "350": 170, "018727": 170, "822097": 170, "833333": 170, "615373": 170, "379710": 170, "726573": 170, "thereaft": [170, 179], "hispan": 170, "manufactur": 170, "unmarri": 170, "dollar": [170, 371], "exploratori": [170, 1005], "emul": [170, 384], "train_dataset": [170, 370], "rangeindex": 170, "533": 170, "normalis": [170, 605, 1016], "numerical_column": [170, 172, 461], "if_binari": [170, 243, 866, 991, 1033], "prepend": [170, 1022], "exp10": 170, "ufunc": 170, "passthroughpassthroughtransformedtargetregressor": 170, "transformedtargetregressortransformedtargetregressor": 170, "ridgeridg": 170, "mae_train": 170, "mae_test": 170, "learnt": [170, 310, 358, 390, 407, 874, 970, 991], "obviou": [170, 338, 358, 362, 400, 408], "regressor_": [170, 459, 587, 588, 591], "race_hispan": 170, "013555": 170, "race_oth": 170, "009111": 170, "race_whit": 170, "022558": 170, "occupation_cler": 170, "000056": 170, "occupation_manag": 170, "090538": 170, "occupation_oth": 170, "025091": 170, "occupation_profession": 170, "071974": 170, "occupation_sal": 170, "046625": 170, "occupation_servic": 170, "091042": 170, "sector_construct": 170, "000176": 170, "sector_manufactur": 170, "031277": 170, "sector_oth": 170, "031004": 170, "marr_unmarri": 170, "032405": 170, "union_not_memb": 170, "117154": 170, "sex_mal": 170, "090808": 170, "south_y": 170, "033823": 170, "054699": 170, "035005": 170, "030867": 170, "adimension": 170, "Their": [170, 371, 373, 391, 403, 638, 1022], "visibl": [170, 171, 202, 344, 370, 376, 403, 849, 986, 1027, 1037], "gaug": 170, "decad": [170, 1002], "x_train_preprocess": 170, "multipli": [170, 204, 218, 261, 362, 385, 390, 408, 410, 411, 416, 458, 469, 509, 532, 534, 535, 541, 551, 555, 558, 640, 642, 646, 648, 652, 653, 654, 656, 662, 663, 664, 666, 670, 671, 672, 674, 680, 681, 683, 687, 757, 895, 896, 897, 898, 899, 901, 903, 919, 957, 958, 959, 970, 977, 981, 995, 1033], "coef_i": 170, "std_i": 170, "emphas": [170, 344, 382, 408, 981], "perturb": [170, 217, 300, 408, 410, 980], "caution": [170, 380, 434, 448, 1030], "repeatedkfold": [170, 407, 795, 806, 1029], "cv_model": 170, "return_estim": [170, 407, 816, 1030], "train_idx": [170, 390], "stripplot": 170, "whi": [170, 172], "collinear": [170, 173, 205, 218, 410, 561, 642, 663, 674, 866, 977, 1022], "teas": 170, "apart": [170, 316, 334, 388, 390, 404, 406, 412, 718, 996, 1005, 1030], "vice": [170, 258, 347, 403, 413, 436, 601, 602, 822, 1026], "versa": [170, 258, 347, 403, 413, 436, 601, 602, 822, 1026], "column_to_drop": 170, "said": [170, 229, 262, 371, 376, 783, 979, 987, 1007, 1014], "unchang": [170, 218, 268, 410, 427, 431, 436, 437, 438, 439, 440, 441, 443, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 686, 756, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 840, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 882, 885, 886, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 984, 1007, 1030, 1036, 1038], "neglig": [170, 984, 1025], "littl": [170, 171, 172, 173, 229, 371, 411, 456, 638, 790, 804, 930, 971, 978, 980, 996, 997, 1014, 1023, 1034], "ridgecvridgecv": 170, "alon": [170, 204, 267, 334, 390, 397, 401, 642, 663, 674, 735, 1029, 1031], "suppress": [170, 313, 362, 384, 686, 984, 1029], "themselv": [170, 303, 372, 384, 390, 394, 400, 403, 410, 411, 413, 440, 609, 783, 997, 1016, 1032], "bring": [170, 303, 408, 670, 672, 978, 1001, 1005], "entic": 170, "pursu": 170, "tempt": 170, "deflat": [170, 406, 415, 527], "presum": [170, 279, 403, 411, 828], "respond": [170, 376, 403], "366": [170, 174, 349], "plot_linear_model_coefficient_interpret": [170, 174], "complement": [171, 271, 347, 626, 627, 792, 807, 810, 819, 828, 829, 830, 831, 832, 988, 1003, 1018, 1030], "molnar": [171, 988], "christoph": [171, 408, 413, 526, 604, 605, 608, 613, 616, 788, 977, 982, 1023, 1027, 1030, 1033, 1034, 1035, 1036, 1037], "goldstein": [171, 988], "kapeln": [171, 988], "bleich": [171, 988], "pitkin": [171, 988], "peek": [171, 376, 988], "settingwithcopywarn": 171, "2284": 171, "904": [171, 259, 326, 404], "287": [171, 223, 227, 993], "1747": 171, "1729": 171, "mask_train": [171, 218], "accordingli": [171, 239, 338, 376, 380, 381, 1029, 1030, 1037], "8640": 171, "115": [171, 292, 295, 336, 345, 989], "nomin": [171, 370, 390, 391, 410, 411, 575, 576, 710, 991, 1002], "numerical_featur": [171, 309], "xtick_start": 171, "xtick_period": 171, "average_bike_rent": 171, "numeric_onli": 171, "decor": [171, 313, 376, 377, 378, 385, 796, 812, 920, 924, 925, 942, 948, 1032, 1035, 1038], "plot_partial_depend": [171, 174, 313, 314, 315, 1027, 1031, 1032, 1033, 1034, 1035, 1036], "113": [171, 382, 1025], "retain": [171, 179, 390, 403, 406, 407, 411, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 488, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 689, 690, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 866, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 994, 1022], "adopt": [171, 378, 390, 889, 981, 995, 1030, 1037], "117": [171, 1023], "strike": [171, 204], "mlp_preprocessor": 171, "quantiletransformerquantiletransform": 171, "catindex": 171, "hgbdt_preprocessor": 171, "sparse_threshold": [171, 458, 461, 1030], "passthroughpassthrough": 171, "mlp_model": 171, "hidden_layer_s": [171, 240, 297, 299, 850, 851, 985], "learning_rate_init": [171, 298, 299, 850, 851], "386": [171, 869], "forget": [171, 358, 363, 370, 380, 388, 408, 978, 1004], "poor": [171, 176, 267, 276, 325, 401, 407, 408, 684, 688, 731, 830, 833, 834, 975, 976, 978, 983, 1002, 1007, 1029, 1030, 1031, 1033, 1035], "grid_resolut": [171, 315, 332, 625, 626, 627], "features_info": 171, "hgbdt_model": 171, "62": [171, 176, 218, 255, 300, 318, 323, 358, 371, 403, 487, 488, 833, 834, 1025], "cheaper": [171, 403, 413, 667, 973, 977], "temperatur": [171, 411, 988], "wind": [171, 982], "meaningless": [171, 411, 895, 898, 1025], "celsiu": [171, 988], "interaction_cst": [171, 318, 410, 555, 556, 1037], "hgbdt_model_without_interact": 171, "histgradientboostingregressor__interaction_cst": 171, "heatmap": [171, 173, 179, 184, 272, 318, 334, 626, 988], "139": [171, 218, 281, 293, 295, 382, 410, 446, 456, 685, 689, 982], "slope": [171, 198, 202, 217, 403, 716, 741, 979, 981], "dry": 171, "wetter": 171, "spike": 171, "degrad": [171, 229, 303, 342, 348, 409], "somehow": 171, "forbidden": [171, 410], "noisili": 171, "partial_depend": [171, 626, 988, 1023, 1031, 1032, 1033, 1034, 1037, 1038], "grid_valu": [171, 627, 1038], "add_ax": [171, 225, 272], "surf": 171, "rstride": 171, "cstride": 171, "bupu": 171, "nthe": [171, 259, 356], "pretti": [171, 225, 259, 347, 362, 376, 388, 850, 851, 985, 1031], "view_init": [171, 221, 223, 225], "clb": 171, "ndepend": 171, "breiman": [172, 407, 410, 510, 511, 512, 549, 550, 558, 559, 628, 901, 902, 989, 997], "random_num": 172, "random_cat": 172, "sibsp": [172, 318], "parch": [172, 318], "categorical_encod": 172, "numerical_pip": 172, "memor": 172, "814": [172, 1014], "mdi_import": [172, 173], "sorted_importances_idx": 172, "retri": [172, 490, 1030, 1036], "classifier__min_samples_leaf": 172, "anymor": [172, 200, 263, 313, 314, 334, 358, 380, 404, 664, 1028, 1031, 1034, 1035, 1036, 1038], "810": 172, "832": [172, 410, 549, 550], "train_result": 172, "test_result": 172, "train_import": 172, "test_import": 172, "plot_permutation_import": [172, 173, 174], "contradict": [173, 1002], "spearman": [173, 629, 630, 972], "perm_sorted_idx": 173, "tree_importance_sorted_idx": 173, "tree_indic": 173, "gini": [173, 200, 218, 241, 273, 315, 547, 548, 551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904, 970, 989, 997, 1030, 1031, 1038], "dilut": [173, 373], "nevertheless": [173, 410], "squareform": 173, "spearmanr": 173, "fill_diagon": [173, 224], "distance_matrix": 173, "dist_linkag": 173, "dendro": 173, "to_list": 173, "leaf_rot": 173, "dendro_idx": 173, "ivl": 173, "cluster_id": [173, 348], "fcluster": 173, "cluster_id_to_feature_id": 173, "selected_featur": 173, "selected_features_nam": 173, "x_train_sel": 173, "x_test_sel": 173, "clf_sel": 173, "plot_permutation_importance_multicollinear": [173, 174], "721": [174, 532, 534, 541], "auto_examples_inspect": 174, "polynomialcountsketch": [176, 633, 635, 973, 1034, 1036], "covtyp": 176, "tensor": [176, 368, 399, 408, 532, 534, 541, 633, 634, 635, 1018, 1034], "sketch": [176, 364, 368, 385, 402, 633, 634, 635, 946, 1018, 1034], "daniel": [176, 318, 362, 874, 991, 1005, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1034, 1036], "lopez": 176, "sanchez": [176, 1030, 1031], "lope": 176, "usal": 176, "581": 176, "cartograph": 176, "remot": [176, 323, 376, 379], "fetch_covtyp": [176, 239, 315, 371, 1031, 1034, 1036], "5_000": 176, "mm": 176, "lsvm": 176, "lsvm_time": 176, "lsvm_score": 176, "condens": [176, 440], "ps_lsvm_time": 176, "ps_lsvm_score": 176, "ksvm": 176, "ksvm_time": 176, "ksvm_score": 176, "pham": [176, 973, 1029], "ninh": 176, "rasmu": [176, 1029], "pagh": [176, 973], "kdd": [176, 371, 401, 431, 993], "doi": [176, 200, 218, 376, 403, 670], "1145": [176, 403, 670], "2487575": 176, "2487591": 176, "csie": [176, 370, 481, 502, 503, 652], "ntu": [176, 370, 481, 502, 503, 652], "tw": [176, 370, 481, 502, 503, 652, 996], "cjlin": [176, 370, 481, 502, 503, 652, 1025], "libsvmtool": [176, 370, 481, 502, 503], "plot_scalable_poly_kernel": [176, 177], "auto_examples_kernel_approxim": 177, "ard": [179, 638, 639], "ol": [179, 190, 195, 197, 198, 206, 217, 316, 650, 977], "true_weight": 179, "ardregress": [179, 184, 639, 977, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1038], "olr": 179, "brr": 179, "_bay": 179, "renam": [179, 251, 262, 376, 380, 403, 435, 439, 441, 453, 465, 466, 472, 530, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 866, 1022, 1023, 1024, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "symlognorm": [179, 184], "linthresh": [179, 184], "10e": [179, 184], "cbar_kw": [179, 184], "seismic_r": [179, 184], "stabilis": 179, "ard_scor": 179, "scores_": [179, 180, 586, 589, 590, 592, 593, 594, 638, 639, 653, 1022, 1032], "brr_score": 179, "cutoff": [179, 935, 991, 1031], "full_data": 179, "input_featur": [179, 378, 390, 419, 424, 436, 437, 439, 441, 443, 458, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 560, 561, 562, 563, 564, 575, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 682, 683, 686, 837, 842, 845, 849, 852, 853, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 1038], "x_plot": [179, 201, 206, 235, 264, 286, 308], "y_plot": [179, 201, 206, 264], "ard_poli": 179, "brr_poli": 179, "y_ard": 179, "y_ard_std": 179, "y_brr": 179, "y_brr_std": 179, "queri": [179, 284, 294, 362, 380, 409, 414, 438, 440, 444, 451, 546, 604, 605, 622, 638, 639, 719, 749, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 981, 984, 997, 1001, 1024, 1026, 1027, 1030], "lambda_init": [179, 180, 639, 977, 1032], "intrins": [179, 390, 408, 410, 984, 989, 995, 1034], "plot_ard": [179, 219, 638], "alpha_init": [180, 639, 977, 1032], "yoshihiro": [180, 1032], "uchida": [180, 1032], "nimbus1after2a1sun7show": 180, "1234": [180, 249, 264, 376], "n_order": 180, "vander": 180, "ymean": 180, "ystd": 180, "pink": 180, "_init": 180, "lambda_": [180, 638, 639, 869, 977, 1029], "plot_bayesian_ridge_curvefit": [180, 219], "normalized_weight": 181, "x_offset": 181, "x_center": 181, "x_scale": [181, 863, 879, 991], "uncent": 181, "incorrectli": [181, 410, 411, 547, 553, 555, 727, 733, 981, 1023, 1028, 1030, 1031, 1033, 1038], "lm": 181, "98809919e": 181, "48938813e": 181, "03237920e": 181, "25349312e": 181, "53959628e": 181, "67451144e": 181, "00768662e": 181, "19112072e": 181, "07963978e": 181, "47987268e": 181, "76195467e": 181, "00393284e": 181, "07582983e": 181, "66670169e": 181, "65799352e": 181, "99891212e": 181, "58195950e": 181, "58667835e": 181, "98350372e": 181, "60836363e": 181, "00911944e": 181, "elasticnetelasticnet": 181, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [181, 219], "huber": [182, 210, 402, 410, 554, 643, 670, 672, 995, 1022, 1024, 1025, 1034], "mks542": 182, "x_outlier": [182, 214, 287, 288, 333], "y_outlier": 182, "epsilon_valu": 182, "intercept_": [182, 190, 192, 209, 237, 332, 339, 343, 378, 390, 476, 477, 478, 543, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 893, 894, 895, 896, 897, 898, 899, 975, 977, 995, 996, 1022, 1029, 1034, 1036], "coef_ridg": 182, "plot_huber_vs_ridg": [182, 219], "logreg": [183, 827], "plot_method": [183, 284, 289, 330, 332, 335, 336, 338, 625], "033": [183, 219, 989], "plot_iris_logist": [183, 219], "underdetermin": 184, "time_step": [184, 851], "anti": [184, 358, 600, 828, 983], "9502547": 184, "8059798": 184, "63394388": 184, "70359377": 184, "62241605": 184, "84077985": 184, "30506066": 184, "63327171": 184, "74495357": 184, "02456369": 184, "random_sampl": [184, 833, 834, 838], "sensor": 184, "monitor": [184, 208, 379, 390, 547, 548, 553, 554, 555, 556, 985, 1025, 1030, 1032, 1034], "superposit": 184, "tempor": [184, 1001, 1002], "y_pred_lasso": 184, "r2_score_lasso": 184, "480": [184, 348], "y_pred_ard": 184, "r2_score_ard": 184, "098": 184, "543": 184, "elasticnetcv": [184, 390, 640, 646, 654, 655, 656, 657, 675, 977, 1022, 1025, 1033, 1035, 1036], "enet": [184, 274], "y_pred_enet": 184, "r2_score_enet": 184, "nlasso": 184, "meinshausen": 184, "yu": [184, 403, 446, 456, 652, 977, 985, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "246": [184, 989, 1022], "371": [184, 219], "plot_lasso_and_elasticnet": [184, 219], "penalis": [185, 198, 215, 690], "enet_path": [185, 390, 641, 1024, 1026, 1035], "lasso_path": [185, 645, 646, 647, 648, 649, 650, 657, 676, 677, 977, 1022, 1024, 1026, 1035], "alphas_lasso": 185, "coefs_lasso": 185, "alphas_positive_lasso": 185, "coefs_positive_lasso": 185, "alphas_enet": 185, "coefs_enet": 185, "alphas_positive_enet": 185, "coefs_positive_enet": 185, "neg_log_alphas_lasso": 185, "neg_log_alphas_enet": 185, "coef_l": 185, "neg_log_alphas_positive_lasso": 185, "coef_pl": 185, "neg_log_alphas_positive_enet": 185, "coef_p": 185, "plot_lasso_coordinate_descent_path": [185, 219, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678], "sai": [186, 229, 342, 347, 348, 376, 401, 403, 404, 408, 410, 411, 440, 441, 494, 498, 504, 671, 970, 987, 994, 1005, 1013, 1014, 1016], "x_sp": 186, "sparse_lasso": 186, "dense_lasso": 186, "coeff_diff": 186, "2e": [186, 275], "080": [186, 243, 244], "022": [186, 231, 244, 989], "30e": 186, "xs_sp": 186, "tocsc": 186, "nnz": [186, 348, 371, 693], "091": 186, "56e": 186, "plot_lasso_dense_vs_sparse_data": [186, 219], "lars_path": [187, 385, 525, 531, 533, 536, 537, 539, 540, 542, 644, 645, 646, 647, 648, 649, 650, 657, 658, 659, 677, 678, 679, 680, 977, 1022, 1024, 1027, 1031, 1033], "plot_lasso_lar": [187, 219], "zht2007": 188, "lassolars": [188, 189, 412, 645, 648, 649, 977, 1022, 1029, 1031, 1035, 1036], "2173": [188, 650, 977], "2192": [188, 650, 977], "038076": [188, 189], "050680": [188, 189], "061696": [188, 189], "021872": [188, 189], "044223": [188, 189], "034821": [188, 189], "043401": [188, 189], "002592": [188, 189], "019907": [188, 189], "017646": [188, 189], "001882": [188, 189], "044642": [188, 189], "051474": [188, 189], "026328": [188, 189], "008449": [188, 189], "019163": [188, 189], "074412": [188, 189], "039493": [188, 189], "068332": [188, 189], "092204": [188, 189], "085299": [188, 189], "044451": [188, 189], "005670": [188, 189], "045599": [188, 189], "034194": [188, 189], "032356": [188, 189], "002861": [188, 189], "025930": [188, 189], "089063": [188, 189], "011595": [188, 189], "036656": [188, 189], "012191": [188, 189], "024991": [188, 189], "036038": [188, 189], "034309": [188, 189], "022688": [188, 189], "009362": [188, 189], "005383": [188, 189], "036385": [188, 189], "003935": [188, 189], "015596": [188, 189], "008142": [188, 189], "031988": [188, 189], "046641": [188, 189], "akaik": [188, 189, 251, 650, 789, 970, 977], "lasso_lars_": [188, 189], "zou_et_al_criterion_resc": 188, "noise_vari": [188, 526, 650, 977, 1036], "aic_criterion": 188, "criterion_": [188, 189, 650], "index_alpha_path_a": 188, "alphas_": [188, 189, 641, 644, 645, 647, 648, 649, 650, 655, 657, 676, 677, 1022, 1025, 1035], "lassolarsic__criterion": [188, 189], "bic_criterion": 188, "index_alpha_path_b": 188, "064": [188, 219, 382, 989], "plot_lasso_lars_": [188, 219], "n_random_featur": 189, "x_random": 189, "random_": 189, "02d": 189, "random_02": 189, "random_05": 189, "random_08": 189, "random_11": 189, "647689": 189, "234137": 189, "469474": 189, "465730": 189, "012831": 189, "412304": 189, "067528": 189, "110923": 189, "601707": 189, "057711": 189, "208864": 189, "196861": 189, "478522": 189, "057122": 189, "324084": 189, "611676": 189, "331263": 189, "185659": 189, "812526": 189, "003533": 189, "alpha_a": 189, "alpha_b": 189, "160030": 189, "5244": 189, "764779": 189, "300343": 189, "5208": 189, "250639": 189, "5212": 189, "341949": 189, "542052": 189, "4928": 189, "018900": 189, "4936": 189, "201520": 189, "034077": 189, "4869": 189, "678359": 189, "4881": [189, 1027], "952289": 189, "189631": 189, "4815": 189, "437362": 189, "4831": [189, 649], "802601": 189, "329616": 189, "4810": 189, "423641": 189, "4830": 189, "880191": 189, "306012": 189, "4803": 189, "573491": 189, "4828": 189, "121351": 189, "124225": 189, "4804": 189, "126502": 189, "4832": 189, "765671": 189, "820705": 189, "621645": 189, "4836": 189, "352124": 189, "750389": 189, "4805": 189, "012521": 189, "4841": 189, "834310": 189, "570655": 189, "290075": 189, "4846": 189, "203174": 189, "550213": 189, "4807": 189, "075887": 189, "4852": 189, "080295": 189, "358295": 189, "4806": 189, "878051": 189, "4855": 189, "973770": 189, "259297": 189, "706026": 189, "4860": 189, "893055": 189, "237703": 189, "4809": [189, 264], "440409": 189, "4866": 189, "718747": 189, "850031": 189, "989341": 189, "4867": 189, "358990": 189, "384338": 189, "4801": 189, "702266": 189, "163224": 189, "296575": 189, "4802": 189, "594754": 189, "4872": 189, "147022": 189, "031555": 189, "236720": 189, "4874": 189, "880298": 189, "618263": 189, "4798": 189, "484109": 189, "4876": 189, "218997": 189, "526599": 189, "4799": 189, "543841": 189, "370039": 189, "586798": 189, "4794": 189, "238744": 189, "4880": 189, "156252": 189, "445978": 189, "4795": 189, "589715": 189, "4885": 189, "598533": 189, "259031": 189, "4796": 189, "966981": 189, "4891": 189, "067109": 189, "032179": 189, "662409": 189, "4888": 189, "762537": 189, "019069": 189, "652739": 189, "752867": 189, "626286": 189, "4894": 189, "817724": 189, "set_xscal": [189, 205, 796], "optimist": [189, 266, 347, 358, 701, 977, 981], "badli": [189, 200, 347, 364, 873, 977, 991], "lassolarscv": [189, 412, 646, 647, 648, 650, 657, 659, 676, 677, 678, 977, 1022, 1029, 1035], "3800": 189, "mse_path_": [189, 641, 645, 647, 649, 655, 657], "cv_alphas_": [189, 645, 649, 1034], "kink": 189, "heavili": [189, 362, 363, 376, 384, 643, 649, 998], "efficaci": 189, "plot_lasso_model_select": [189, 219, 641, 647], "plot_logist": [190, 219], "axes_row": 191, "clf_l1_lr": 191, "clf_l2_lr": 191, "clf_en_lr": 191, "coef_l1_lr": 191, "coef_l2_lr": 191, "coef_en_lr": 191, "sparsity_l1_lr": 191, "sparsity_l2_lr": 191, "sparsity_en_lr": 191, "nl1_ratio": 191, "plot_logistic_l1_l2_spars": [191, 219], "995": 192, "plot_logistic_multinomi": [192, 219], "976": [192, 269], "dupr": [192, 208, 281, 283, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "m4x": [192, 216], "sag": [192, 207, 652, 653, 666, 668, 681, 977, 995, 1001, 1027, 1028, 1029, 1031, 1032], "bry": [192, 209], "plot_hyperplan": [192, 209, 237], "130": [192, 219, 382], "looser": 193, "liblinear": [193, 332, 382, 652, 653, 781, 893, 894, 895, 898, 899, 981, 996, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1038], "l1_min_c": [193, 977, 996, 1022], "intercept_sc": [193, 652, 653, 893, 894, 900, 977, 996], "coefs_": [193, 299, 850, 851, 985, 1027], "073": [193, 219, 259, 465, 466], "plot_logistic_path": [193, 219], "jointli": [194, 268, 402, 403, 408, 977], "instant": 194, "wave": [194, 376, 980], "n_task": [194, 977], "n_relevant_featur": 194, "multitasklasso": [194, 646, 654, 657, 977, 1022, 1030, 1033, 1035], "coef_lasso_": 194, "coef_multi_task_lasso_": 194, "spy": 194, "feature_to_plot": 194, "seagreen": 194, "162": [194, 219, 373], "plot_multi_task_lasso_support": [194, 219], "reg_nnl": 195, "y_pred_nnl": 195, "r2_score_nnl": 195, "nnl": [195, 651], "8225220806196525": 195, "reg_ol": 195, "y_pred_ol": 195, "r2_score_ol": 195, "7436926291700354": 195, "low_x": 195, "high_x": 195, "low_i": 195, "high_i": 195, "get_ylim": [195, 303, 304], "847222222222214": 195, "plot_nnl": [195, 219], "23786125": 196, "2548": 196, "diabetes_x": [196, 1014], "diabetes_i": [196, 1014], "diabetes_x_train": [196, 1014], "diabetes_x_test": [196, 1014], "diabetes_y_train": [196, 1014], "diabetes_y_test": [196, 1014], "regr": [196, 404, 548, 550, 559, 640, 641, 661, 826, 851, 894, 896, 899, 996, 1014], "diabetes_y_pr": 196, "plot_ol": [196, 219], "plot_ols_3d": [197, 219], "greatli": [198, 234, 318, 376, 384, 446, 984, 997, 1028, 1036], "172": [198, 216, 219, 382, 487, 488, 643, 977], "plot_ols_ridge_vari": [198, 219], "make_sparse_coded_sign": [199, 525, 531, 1036, 1038], "orthogonalmatchingpursuit": [199, 659, 679, 680, 977, 1022, 1024, 1027, 1030, 1035], "orthogonalmatchingpursuitcv": [199, 658, 1024, 1035], "512": 199, "n_nonzero_coef": [199, 520, 525, 531, 536, 542, 644, 658, 679, 680], "xw": [199, 316, 640, 641, 643, 646, 647, 648, 649, 650, 654, 655, 656, 657, 666, 675, 676, 677, 678, 977], "_0": [199, 679, 977, 981, 996], "distort": [199, 233, 373, 401, 402, 870, 882, 887, 978, 991, 993], "y_noisi": 199, "idx_r": 199, "omp_cv": 199, "154": [199, 219, 300, 645, 982], "plot_omp": [199, 219], "gbrt": [200, 410], "contract": [200, 218, 338, 363, 390, 1002], "compani": [200, 218, 403, 1005], "policyhold": [200, 218, 977], "vehicl": [200, 218], "driver": [200, 218, 1037], "exposur": [200, 218, 977], "car": 200, "accid": [200, 218], "noll": [200, 218], "salzmann": [200, 218], "wuthrich": [200, 218], "2139": [200, 218], "ssrn": [200, 218], "3164764": [200, 218], "ch": [200, 202, 218, 325, 327], "rth": [200, 218], "41214": [200, 218], "idpol": [200, 218], "claimnb": [200, 218], "vehpow": [200, 218], "vehag": [200, 218], "drivag": [200, 218], "bonusmalu": [200, 218], "vehbrand": [200, 218], "vehga": [200, 218], "b12": [200, 218], "1217": 200, "r82": 200, "77000": 200, "75000": 200, "diesel": [200, 218], "r22": 200, "09000": 200, "r72": 200, "84000": 200, "678008": 200, "6114326": 200, "00274": 200, "3317": 200, "r93": 200, "678009": 200, "6114327": 200, "9850": 200, "r11": [200, 218], "678010": 200, "6114328": 200, "1323": 200, "678011": 200, "6114329": 200, "r26": 200, "678012": 200, "6114330": 200, "678013": [200, 218], "10070308464041304": 200, "log_scale_transform": [200, 218], "linear_model_preprocessor": 200, "passthrough_numer": [200, 218], "binned_numer": [200, 218], "2e5": [200, 218], "log_scaled_numer": [200, 218], "onehot_categor": [200, 218], "imbalanc": [200, 264, 268, 270, 348, 388, 401, 407, 697, 702, 780, 791, 795, 830, 981, 983, 989, 1001], "simplist": [200, 411], "pertin": 200, "dummyregressor": [200, 218, 545, 981, 1023, 1025, 1026, 1029, 1030, 1032, 1035, 1036], "df_train": [200, 218], "df_test": [200, 218], "regressor__sample_weight": 200, "mean_absolute_error": [200, 202, 218, 981, 1023, 1025], "mean_poisson_devi": [200, 981, 1032], "score_estim": [200, 218], "n_mask": 200, "564": 200, "189": [200, 382, 890, 994], "comonli": 200, "ridge_glm": 200, "strictli": [200, 218, 236, 303, 319, 348, 381, 390, 401, 406, 408, 411, 502, 503, 529, 535, 538, 555, 556, 582, 585, 636, 664, 665, 689, 694, 732, 759, 790, 793, 794, 800, 804, 816, 842, 869, 881, 885, 886, 888, 889, 893, 894, 898, 899, 928, 970, 972, 977, 981, 991, 995, 1023, 1033, 1038], "domain": [200, 309, 390, 392, 407, 629, 715, 716, 717, 791, 792, 797, 798, 799, 977, 1002], "560": [200, 511, 512], "595": 200, "223745": 200, "597": 200, "glm": [200, 218, 314, 642, 663, 674, 977, 1022, 1033], "vanilla": [200, 399, 403, 441, 443, 454, 623], "poissonregressor": [200, 218, 314, 317, 642, 674, 977, 1033, 1036, 1037], "poisson_glm": 200, "newton": [200, 218, 300, 604, 642, 652, 653, 663, 674, 850, 851, 977, 1026, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038], "deep": [200, 378, 390, 410, 417, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 762, 788, 789, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 985, 986, 1001, 1002, 1005, 1027, 1033, 1034, 1036], "implicit": [200, 390, 410, 411, 566, 676, 677, 975, 980, 1001, 1031], "concis": [200, 376, 381, 1033, 1035], "poisson_gbrt": 200, "566": 200, "prone": [200, 248, 307, 388, 401], "set_yscal": [200, 796], "5e5": 200, "realiz": [200, 1005], "priori": [200, 217, 270, 279, 303, 390, 403, 410, 582, 588, 980, 1038], "wrongli": [200, 334], "gen_even_slic": [200, 385, 933], "_mean_frequency_by_risk_group": 200, "y_true_bin": 200, "y_pred_bin": 200, "idx_sort": 200, "sl": 200, "y_true_seg": 200, "y_pred_seg": 200, "11935": 200, "11933": 200, "11932": 200, "12196": 200, "11931": 200, "portfolio": [200, 218, 975], "riskiest": [200, 218], "safest": [200, 218, 358, 370], "irrespect": [200, 233, 270, 281, 600], "lorenz": [200, 218, 1027], "summar": [200, 252, 268, 270, 349, 376, 378, 392, 410, 515, 652, 688, 700, 701, 977, 978, 981, 987], "lorenz_curv": [200, 218], "ranked_frequ": 200, "ranked_exposur": [200, 218], "cumulated_claim": 200, "cumulated_exposur": 200, "cum_exposur": 200, "cum_claim": [200, 218], "0x7fca8353f010": 200, "occurr": [200, 309, 348, 349, 371, 376, 403, 411, 563, 564, 575, 583, 584, 611, 621, 622, 623, 624, 776, 828, 856, 983, 1023, 1028], "circumstanti": 200, "extractor": [200, 300, 364, 371, 390, 411, 497, 575, 576, 582, 583, 585, 970, 1022], "discrim": 200, "profil": [200, 362, 376, 379, 515, 518, 977, 1005], "ideal": [200, 202, 218, 258, 261, 268, 270, 271, 358, 375, 376, 380, 381, 384, 388, 390, 401, 719, 749, 970, 980, 995, 996, 1002], "meaningfulli": [200, 981], "plot_poisson_regression_non_normal_loss": [200, 219], "monomi": 201, "vandermond": [201, 991], "x_0": [201, 651], "pseudo": [201, 300, 378, 407, 415, 434, 446, 448, 456, 463, 464, 465, 467, 468, 469, 470, 527, 555, 556, 557, 621, 628, 633, 635, 636, 640, 641, 646, 647, 654, 655, 656, 657, 671, 685, 689, 793, 794, 802, 804, 842, 849, 885, 886, 890, 893, 894, 895, 898, 929, 930, 977, 993, 1027, 1036], "basis_1": 201, "basis_2": 201, "infinit": [201, 246, 264, 338, 362, 413, 440, 616, 617, 771, 788, 911, 913, 914, 973, 980, 991, 996, 1030, 1032, 1035, 1036, 1037], "malt": [201, 1035, 1036, 1037], "londschien": [201, 1035], "prepar": [201, 236, 347, 362, 378, 379, 382, 384, 997, 1005, 1030, 1038], "set_prop_cycl": 201, "teal": [201, 210, 268], "yellowgreen": [201, 203, 210, 354], "tomato": 201, "unwant": [201, 347], "oscillatori": [201, 991], "danger": [201, 407], "pft": 201, "splt": 201, "bsplines_": [201, 872], "refrain": [201, 376], "dec": [201, 671, 872, 897, 996], "31st": [201, 872], "advis": [201, 236, 358, 374, 376, 403, 411, 431, 640, 646, 648, 654, 656, 666, 681, 949, 973, 977, 983, 985, 996, 1036], "x_plot_ext": 201, "y_plot_ext": 201, "plot_polynomial_interpol": [201, 219, 868, 872], "pareto": 202, "dale": [202, 1035], "mail": [202, 308, 371, 376, 380, 384, 388, 391, 999, 1030, 1031], "ru": 202, "glemaitre58": 202, "y_true_mean": 202, "y_normal": 202, "y_pareto": 202, "huge": [202, 205, 362, 382, 621, 1025], "heavi": [202, 400, 1002], "parse_vers": [202, 664], "sp_version": [202, 664], "incompat": [202, 380, 490, 971, 1030, 1031], "older": [202, 236, 375, 380, 1025, 1032, 1034], "recent": [202, 236, 365, 374, 377, 381, 384, 390, 393, 403, 462, 532, 559, 995, 1005, 1025, 1034], "interior": [202, 664, 977, 1037], "out_bounds_predict": 202, "bool_": 202, "logical_or": [202, 208, 270, 382], "hit": [202, 382], "wider": [202, 411, 906, 977], "asymmetri": [202, 347], "linger": 202, "linear_regress": [202, 275], "quantile_regress": 202, "y_pred_lr": 202, "y_pred_qr": 202, "805": 202, "486": 202, "670": [202, 349], "cv_results_lr": 202, "cv_results_qr": 202, "test_neg_mean_squared_error": [202, 816], "690": 202, "679": [202, 893], "plot_quantile_regress": [202, 219], "robustli": [203, 402], "faulti": [203, 1022], "1903908407869": 203, "17236387": 203, "08533159": 203, "ransacregressor": [203, 206, 217, 643, 672, 673, 977, 1025, 1027, 1028, 1029, 1030, 1033, 1035, 1036], "inlier_mask": 203, "inlier_mask_": [203, 665], "outlier_mask": 203, "line_x": [203, 217], "line_i": 203, "line_y_ransac": 203, "estimator_": [203, 236, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 587, 588, 591, 665, 965, 1037], "063": [203, 219, 259, 261, 431], "plot_ransac": [203, 219], "mathcal": [204, 342, 408, 410, 621, 690, 973, 975, 977, 981, 995, 1035], "discourag": [204, 388, 393, 683], "beta_": [204, 408], "excess": [204, 440, 991, 1029], "encourag": [204, 297, 334, 375, 376, 388, 996, 1001], "kornel": [204, 1028], "kielczewski": [204, 1028], "plusnet": 204, "32634568": 204, "49665188": 204, "75747153": 204, "08699432": 204, "44381023": 204, "69892343": 204, "28808734": 204, "75949622": 204, "errors_coef": 204, "regularis": [204, 416, 467, 469], "logx": [204, 342], "gradual": [204, 850, 851, 995], "formerli": [204, 1023, 1026, 1028, 1029], "intric": [204, 506], "rapidli": [204, 263, 996, 1005, 1010], "influenti": [204, 348, 1005], "pose": [204, 269, 977, 1015], "lose": [204, 217, 349, 371, 390, 406, 411, 413, 540, 929, 930, 971, 977, 1016], "concret": [204, 377, 391, 412, 662, 668, 669, 670, 671, 885, 886, 977, 995], "431": [204, 219, 306, 311, 373], "plot_ridge_coeff": [204, 219], "practis": 205, "10x10": 205, "hilbert": [205, 859, 973, 991], "n_alpha": [205, 466, 640, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 667, 669, 675, 676, 677, 678, 1025], "209": [205, 219, 734, 869], "plot_ridge_path": [205, 219], "theilsen": 206, "lessen": [206, 652, 653], "theilsenregressor": [206, 217, 643, 665, 672, 977, 1026, 1034, 1036], "x_error": 206, "y_errors_larg": 206, "x_errors_larg": 206, "deviant": [206, 987], "legend_titl": 206, "nabsolut": 206, "nto": [206, 270], "425": [206, 219, 222, 609], "plot_robust_fit": [206, 219], "asgd": [207, 995], "rob": [207, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1034, 1037], "zinkov": [207, 1022, 1023, 1024, 1026, 1027], "heldout": 207, "squared_hing": [207, 342, 660, 670, 893, 900, 977, 996], "0e4": 207, "yy_": 207, "plot_sgd_comparison": [207, 219], "_test": [208, 305, 378, 1035], "ignore_warn": [208, 305, 1028], "load_mnist": [208, 281], "class_0": [208, 373, 504], "class_1": [208, 373, 504], "554": [208, 216, 299], "mnist_784": [208, 216, 281, 299], "fit_and_scor": 208, "train_scor": [208, 309, 342, 352, 796, 812, 816, 817, 820, 976], "estimator_dict": 208, "flush": 208, "results_df": [208, 261, 309], "group_df": 208, "653": [208, 219, 382, 605, 608, 619], "plot_sgd_early_stop": [208, 219], "ova": [209, 660, 662, 670, 995], "plot_sgd_iri": [209, 219], "ugli": [209, 289, 292, 330], "074": [209, 219, 259], "modified_huber_loss": 210, "darkorchid": 210, "plot_sgd_loss_funct": [210, 219], "l1_color": 211, "l2_color": 211, "elastic_net_color": 211, "1001": [211, 243], "rho": [211, 408, 671, 977, 995, 1023], "elastic_net": 211, "dpi": [211, 907, 1035], "elastic_net_contour": 211, "l2_contour": 211, "l1_contour": 211, "inlin": [211, 376, 377, 997], "164": [211, 219, 410], "plot_sgd_penalti": [211, 219], "ndenumer": 212, "048": [212, 219, 339, 345, 989], "plot_sgd_separating_hyperplan": [212, 219], "no_weight": 213, "samples_weight": 213, "no_weights_handl": 213, "weights_handl": 213, "061": [213, 219, 259], "plot_sgd_weighted_sampl": [213, 219], "sgdoneclasssvm": [214, 229, 316, 897, 987, 995, 1035, 1037, 1038], "plot_sgdocsvm_vs_ocsvm": [214, 219], "rc": [214, 380], "novel": [214, 287, 333, 358, 401, 970], "abnorm": [214, 229, 287, 333, 371, 486, 557, 839, 987, 1030], "y_pred_train": [214, 333], "y_pred_test": [214, 287, 333], "y_pred_outli": [214, 287, 333], "n_error_train": [214, 333], "n_error_test": [214, 287, 333], "n_error_outli": [214, 287, 333], "clf_sgd": 214, "pipe_sgd": 214, "y_pred_train_sgd": 214, "y_pred_test_sgd": 214, "y_pred_outliers_sgd": 214, "n_error_train_sgd": 214, "n_error_test_sgd": 214, "n_error_outliers_sgd": 214, "z_sgd": 214, "pubu": [214, 233, 287, 333], "darkr": [214, 287, 333], "palevioletr": [214, 287, 333], "b1": [214, 287, 333], "b2": [214, 287, 333], "blueviolet": [214, 287, 333], "262": [214, 219, 1022], "newgroups20": 215, "trim": [215, 403, 833, 834], "20newsgroup": [215, 369, 1022], "4500": 215, "130107": [215, 233, 483], "epoch": [215, 390, 530, 660, 661, 662, 670, 671, 672, 850, 851, 995, 1029, 1030, 1035], "5960": 215, "26593496": 215, "43348936": 215, "26362917": 215, "31973683": 215, "37815029": 215, "2928359": 215, "27054655": 215, "62717609": 215, "19522393": 215, "30897646": 215, "34586917": 215, "28207552": 215, "34125758": 215, "29898468": 215, "34279478": 215, "59489497": 215, "38353048": 215, "35278655": 215, "19829832": 215, "14603365": 215, "6440": 215, "36047253": 215, "1268187": 215, "10606655": 215, "17985197": 215, "5395559": 215, "07993421": 215, "06686804": 215, "21443888": 215, "11528972": 215, "2075215": 215, "10914094": 215, "11144673": 215, "13988486": 215, "09684337": 215, "26286057": 215, "11682692": 215, "55800226": 215, "17370318": 215, "11452112": 215, "901": 215, "arthur": [215, 216, 403, 441, 454, 1027, 1028, 1029, 1030, 1031, 1034, 1036], "mensch": [215, 216, 1027, 1028, 1029, 1030], "timeit": [215, 249, 382], "default_tim": [215, 249], "model_param": 215, "this_max_it": 215, "train_tim": [215, 235, 347, 348], "ndataset": [215, 305], "run_tim": [215, 216], "plot_sparse_logistic_regression_20newsgroup": [215, 219], "8253": 216, "l1_plot": 216, "plot_sparse_logistic_regression_mnist": [216, 219], "subpopul": [217, 673, 977], "residual_threshold": [217, 665, 977, 1035], "remedi": 217, "max_subpopul": [217, 673, 1036], "florian": [217, 1005, 1022, 1026, 1028, 1032], "wilhelm": [217, 1026, 1028, 1032], "indigo": 217, "433": [217, 219, 373], "plot_theilsen": [217, 219], "motor": 218, "parti": [218, 319, 363, 375, 388, 792, 799, 949, 999, 1022, 1033, 1038], "liabil": 218, "functool": 218, "mean_tweedie_devi": [218, 981, 1032], "load_mtpl2": 218, "fremtpl2freq": 218, "df_freq": 218, "fremtpl2sev": 218, "41215": 218, "df_sev": 218, "claimamount": 218, "fillna": [218, 239], "unquot": 218, "column_nam": 218, "plot_obs_pr": 218, "y_label": 218, "fill_legend": 218, "df_": 218, "tweedie_pow": 218, "d\u00b2": 218, "subset_label": 218, "score_label": [218, 267], "est_freq": 218, "est_sev": 218, "unstack": [218, 264], "fremtpl2": 218, "unreason": [218, 407], "exception": 218, "200000": 218, "column_tran": [218, 404], "purepremium": 218, "indirectli": [218, 338], "avgclaimamount": 218, "fmax": 218, "option_context": 218, "max_column": 218, "424": [218, 348], "463": 218, "27000": 218, "303": [218, 629], "404": 218, "333333": 218, "r25": 218, "1981": [218, 977], "14156": 218, "142857": 218, "4792": 218, "1456": 218, "10403": 218, "928571": 218, "10834": 218, "17474": 218, "193548": 218, "225806": 218, "r73": 218, "3986": 218, "12860": [218, 1031], "5417": 218, "seemingli": [218, 358, 388], "169504": 218, "6237": 218, "upon": [218, 226, 294, 371, 376, 388, 390, 397, 555, 556, 621, 624, 665, 782, 788, 789, 833, 834, 970, 977, 997, 1007, 1016, 1036], "glm_freq": 218, "0201": 218, "0219": 218, "1379": 218, "1378": 218, "2441": 218, "2246": 218, "surprisingli": [218, 371, 411], "bonu": [218, 376, 1011, 1016], "malu": 218, "younger": 218, "infti": [218, 413, 613, 977, 991, 1029], "gammaregressor": [218, 314, 317, 674, 977, 1033, 1036, 1037], "mask_test": 218, "glm_sev": 218, "400000e": 218, "700000e": 218, "756746e": 218, "744042e": 218, "801770e": 218, "030677e": 218, "dummy_sev": 218, "000000e": 218, "756687e": 218, "744497e": 218, "803882e": 218, "033764e": 218, "avgclaim": 218, "nbclaim": 218, "1951": 218, "1940": 218, "1978": [218, 977], "apriori": 218, "regardless": [218, 262, 263, 264, 363, 376, 403, 529, 626, 627, 652, 698, 709, 981, 993, 1030, 1037, 1038], "glm_pure_premium": 218, "999": [218, 261, 380, 410, 711, 850, 851], "scores_product_model": 218, "scores_glm_pure_premium": 218, "expand_frame_repr": 218, "690000e": 218, "420000e": 218, "669930e": 218, "617050e": 218, "640770e": 218, "640880e": 218, "7000": 218, "695740e": 218, "683980e": 218, "682880e": 218, "692270e": 218, "8000": [218, 264, 265], "046010e": 218, "040530e": 218, "037600e": 218, "045390e": 218, "9000": 218, "387580e": 218, "385000e": 218, "382120e": 218, "387830e": 218, "9900": 218, "015716e": 218, "015414e": 218, "015347e": 218, "015587e": 218, "9990": 218, "914573e": 218, "914370e": 218, "914538e": 218, "914387e": 218, "904751e": 218, "904556e": 218, "904747e": 218, "904558e": 218, "730119e": 218, "722128e": 218, "739865e": 218, "731249e": 218, "295040e": 218, "212197e": 218, "295505e": 218, "213056e": 218, "917618e": 218, "299546e": 218, "916555e": 218, "313276e": 218, "951751e": 218, "325198e": 218, "riski": 218, "operation": [218, 1005], "simpler": [218, 334, 362, 375, 403, 408, 977, 982, 1014, 1027], "develop": [218, 259, 261, 313, 319, 347, 362, 365, 371, 375, 376, 382, 388, 390, 391, 392, 394, 397, 400, 402, 405, 406, 410, 411, 417, 420, 427, 487, 790, 965, 977, 981, 984, 997, 999, 1001, 1002, 1004, 1005, 1014, 1022, 1030, 1031, 1032, 1035, 1037], "ranked_pure_premium": 218, "cumulated_claim_amount": 218, "cumulated_sampl": 218, "y_pred_product": 218, "y_pred_tot": 218, "ordered_sampl": 218, "plot_tweedie_regression_insurance_claim": [218, 219], "759": [219, 281], "auto_examples_linear_model": 219, "md": [221, 222, 223, 224, 380, 682, 686, 688, 1017, 1018, 1022, 1034, 1037], "seek": [221, 223, 225, 375, 376, 388, 391, 502, 503, 978, 1008, 1010], "ticker": [221, 223, 226, 281], "s_point": 221, "s_color": 221, "make_s_curv": [221, 226], "plot_3d": 221, "points_color": 221, "subplot_kw": [221, 285], "set_major_loc": [221, 286], "multipleloc": [221, 286], "add_2d_scatt": 221, "set_major_formatt": [221, 223, 226, 281, 286], "nullformatt": [221, 223, 226, 281], "lle": [221, 222, 223, 225, 524, 683, 687, 978, 1034], "thought": [221, 286, 390, 403, 440, 978, 982], "analys": [221, 356, 408, 793, 794, 978, 1001, 1005], "lle_standard": 221, "s_standard": 221, "lle_ltsa": 221, "ltsa": [221, 222, 223, 683, 687, 978], "s_ltsa": 221, "lle_hessian": 221, "hessian": [221, 222, 223, 410, 642, 652, 653, 663, 674, 683, 687, 977, 985, 1017, 1018, 1037], "s_hessian": 221, "lle_mod": 221, "s_mod": 221, "lle_method": 221, "tangent": [221, 338, 683, 687, 979, 1017, 1018], "eigenmap": [221, 683, 685, 687, 689, 1017, 1018, 1023], "isometr": [221, 682, 684, 685, 686, 978], "geodes": [221, 682, 978], "s_isomap": 221, "md_scale": 221, "normalized_stress": [221, 222, 223, 224, 684, 688, 978, 1037], "s_scale": 221, "laplacian": [221, 368, 400, 434, 446, 456, 614, 633, 637, 685, 689, 758, 759, 767, 889, 977, 978, 994, 1018, 1023, 1028], "s_spectral": 221, "t_sne": [221, 1030], "s_t_sne": 221, "plot_compare_method": [221, 227], "offsetbox": 222, "plot_embed": 222, "shown_imag": 222, "someth": [222, 236, 347, 376, 378, 379, 380, 384, 411, 981, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "4e": 222, "imagebox": 222, "annotationbbox": 222, "offsetimag": 222, "neighborhoodcomponentsanalysi": [222, 289, 290, 291, 984, 1031, 1036], "random_project": [222, 233, 365, 993, 998, 1023, 1028, 1038], "sparserandomproject": [222, 233, 885, 993, 1023, 1028, 1036, 1038], "embeed": 222, "n_iter_without_progress": [222, 686, 1027, 1028], "nca": [222, 289, 290, 291, 842, 984], "511": [222, 227, 320], "plot_lle_digit": [222, 227], "pole": 223, "thin": [223, 614], "earth": [223, 348, 757, 1001], "095": 223, "062": 223, "sphere_data": 223, "trans_data": 223, "2g": [223, 226, 691, 1033], "257": [223, 259], "258": 223, "plot_manifold_spher": [223, 227], "euclidean_dist": [224, 233, 378, 444, 451, 682, 755, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 1022, 1027, 1030, 1031], "finfo": [224, 465, 466, 472, 600, 644, 645, 648, 649, 650, 676, 677, 734, 1037], "x_true": 224, "dissimilar": [224, 338, 390, 400, 446, 684, 688, 978, 1028, 1038], "embedding_": [224, 390, 682, 683, 684, 685, 686], "nmd": 224, "npo": 224, "plot_md": [224, 227], "sr_point": 225, "sr_color": 225, "ambient": 225, "text2d": 225, "unrol": 225, "unnecessarili": [225, 1029, 1032], "clump": 225, "sr_lle": 225, "sr_err": 225, "locally_linear_embed": [225, 978], "sr_tsne": 225, "stretch": [225, 250], "byproduct": 225, "sh_point": 225, "sh_color": 225, "topologi": [225, 226], "sh_lle": 225, "sh_err": 225, "sh_tsne": 225, "369": [225, 227], "plot_swissrol": [225, 227], "tendenc": [226, 977, 978, 980, 983, 986], "clearer": [226, 996], "distil": 226, "pub": [226, 831, 888], "misread": 226, "057": [226, 382], "086": 226, "092": 226, "narin": [226, 1029, 1030], "kokhlikyan": [226, 1029, 1030], "plot_t_sne_perplex": [226, 227], "337": [227, 382], "auto_examples_manifold": 227, "cope": [229, 364, 371, 977], "multimod": 229, "inli": [229, 977, 987], "unimod": [229, 468], "localoutlierfactor": [229, 239, 287, 288, 317, 390, 557, 897, 987, 1029, 1030, 1032, 1036, 1037, 1038], "modal": [229, 468, 932], "hypercub": [229, 509], "decent": [229, 260, 371, 983], "handpick": 229, "absenc": [229, 264, 390, 706, 856, 980, 981], "negative_linestyl": 229, "outliers_fract": 229, "n_inlier": 229, "anomaly_algorithm": 229, "blobs_param": 229, "565": [229, 244, 261], "plot_anomaly_comparison": [229, 244], "transfus": 230, "1464": 230, "donat": 230, "cm_displai": 230, "y_score": [230, 268, 270, 390, 476, 477, 478, 701, 714, 719, 720, 732, 733, 749, 775, 781, 782, 785, 790, 793, 794, 804, 853, 981, 1028, 1036, 1038], "pos_label": [230, 239, 390, 432, 433, 692, 694, 696, 700, 701, 703, 720, 722, 723, 731, 775, 776, 777, 780, 782, 860, 877, 981, 1030, 1034, 1036], "roc_displai": 230, "previs": 230, "precision_recall_curv": [230, 268, 694, 700, 701, 720, 981, 1023, 1024, 1028, 1035, 1036, 1038], "pr_displai": 230, "easlii": 230, "535": [230, 244], "plot_display_object_visu": [230, 244], "summaris": [231, 314], "composit": [231, 314, 365, 368, 407, 652, 781, 971, 977, 990, 1018, 1023], "num_proc": [231, 314], "cat_proc": [231, 314], "feat1": [231, 314, 411], "feat3": [231, 314, 411], "feat0": [231, 314], "feat2": [231, 314, 411], "plot_estimator_represent": [231, 244], "isotonicregress": [232, 972, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1032, 1034, 1036, 1037, 1038], "ir": [232, 408, 584, 719, 749, 828, 832, 979, 981], "out_of_bound": [232, 629], "y_": [232, 247, 251, 252, 293, 378, 406, 408, 631, 642, 663, 674, 722, 723, 731, 757, 776, 777, 780, 977, 981, 1028], "linearregressionlinearregress": 232, "x_thresholds_": [232, 629, 1034], "y_thresholds_": [232, 629, 1034], "plot_isotonic_regress": [232, 244], "lemma": [233, 368, 402, 528, 535, 543, 885, 886, 887, 975, 1018, 1025], "johnson_lindenstrauss_min_dim": [233, 993, 1023], "achliopta": [233, 886, 887, 993], "_compon": [233, 530], "geq": [233, 401, 408, 410, 977, 981, 991, 995, 996], "_sampl": [233, 408, 532, 534, 541], "admiss": [233, 363], "eps_rang": 233, "min_n_compon": 233, "nn_sampl": [233, 273], "semilogi": 233, "nn_compon": [233, 234], "100k": 233, "n_components_rang": 233, "rp": 233, "projected_data": 233, "n_byte": 233, "projected_dist": 233, "min_dist": 233, "max_dist": 233, "hexbin": 233, "gridsiz": 233, "239": [233, 1022], "293": 233, "784": [233, 299], "776": 233, "268": [233, 247], "jl": [233, 886], "436": 233, "608": [233, 244], "plot_johnson_lindenstrauss_bound": [233, 244], "rbfsampler": [234, 633, 634, 636, 973, 1007, 1026, 1036, 1037], "mont": [234, 413, 605, 635, 636, 973, 986], "fourier": [234, 402, 632, 633, 634, 635, 636, 751, 752, 973], "acceler": [234, 318, 362, 388, 403, 462, 686, 891, 978, 1001, 1005, 1031, 1035, 1037], "data_train": [234, 262, 347], "targets_train": 234, "data_test": [234, 262, 347], "targets_test": 234, "kernel_svm": 234, "linear_svm": 234, "feature_map_fouri": 234, "feature_map_nystroem": [234, 633], "fourier_approx_svm": 234, "feature_map": [234, 303], "nystroem_approx_svm": 234, "kernel_svm_tim": 234, "kernel_svm_scor": 234, "linear_svm_tim": 234, "linear_svm_scor": 234, "fourier_scor": 234, "nystroem_scor": 234, "fourier_tim": 234, "nystroem_tim": 234, "feature_map__n_compon": 234, "timescal": 234, "ly": [234, 841, 843, 844, 845, 1026], "flat_grid": 234, "lv_ep": 234, "tab10": [234, 251], "144": [234, 235, 244, 261, 382, 1022], "plot_kernel_approxim": [234, 244], "krr": [235, 637, 974], "insensit": [235, 637, 670, 672, 781, 894, 974, 995, 996, 1022], "fifth": [235, 974, 1007], "kr": [235, 261, 1036], "svr_fit": 235, "kr_fit": 235, "sv_ratio": 235, "support_": [235, 341, 463, 468, 587, 588, 596, 895, 896, 897, 898, 899, 996], "y_svr": 235, "svr_predict": 235, "y_kr": 235, "kr_predict": 235, "737": [235, 518], "329": [235, 444], "sv_ind": 235, "arithmet": [235, 382, 384, 403, 545, 642, 663, 674, 698, 711, 729, 730, 750, 786, 981, 1030], "test_tim": [235, 347], "train_test_s": 235, "learningcurvedisplai": [235, 263, 318, 976, 1037, 1038], "negate_scor": [235, 796, 812], "score_typ": [235, 263, 276, 319, 796, 812, 1038], "std_display_styl": [235, 263, 796, 812], "get_legend_handles_label": [235, 263, 268], "819": [235, 244, 411], "plot_kernel_ridge_regress": [235, 244], "set_config": [236, 241, 243, 310, 314, 362, 363, 394, 404, 431, 437, 438, 441, 443, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 584, 585, 588, 604, 605, 620, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 1031, 1033, 1036, 1038], "metaestimatormixin": 236, "regressormixin": [236, 378, 390, 459, 1033], "transformermixin": [236, 281, 378, 390, 459, 1030, 1037, 1038], "metadata_rout": [236, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 584, 585, 588, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904], "metadatarout": [236, 431, 824, 825, 826, 827, 940], "methodmap": [236, 938], "get_routing_for_object": 236, "process_rout": 236, "my_group": [236, 394], "my_weight": [236, 394], "my_other_weight": [236, 394], "enable_metadata_rout": [236, 394, 431, 437, 438, 441, 443, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 584, 585, 588, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 1038], "check_metadata": 236, "obj": [236, 397, 561, 562, 571, 940, 941, 942, 947], "print_rout": 236, "get_metadata_rout": [236, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 937, 939, 940, 941, 981], "_serial": 236, "exampleclassifi": 236, "smart": [236, 437, 453, 454, 584], "accomplish": [236, 378, 401, 540, 978, 982, 984, 1005], "magic": [236, 377, 382, 413, 610, 615, 618], "set_fit_request": [236, 394, 431, 437, 438, 441, 443, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 582, 585, 588, 629, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 684, 790, 793, 794, 804, 825, 826, 828, 829, 830, 831, 832, 838, 858, 859, 872, 873, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904], "set_predict_request": [236, 437, 441, 443, 476, 477, 478, 546, 605, 629, 638, 639, 901, 902, 903, 904], "set_score_request": [236, 394, 431, 437, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 604, 605, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 835, 836, 840, 843, 844, 850, 851, 853, 888, 889, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 981], "inherit": [236, 376, 378, 389, 390, 571, 670, 922, 924, 977, 1022, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1037, 1038], "metaclassifi": [236, 237], "owner": [236, 371, 373, 937, 938], "method_map": [236, 938], "fit_param": [236, 390, 427, 431, 436, 439, 459, 526, 528, 530, 531, 533, 536, 537, 543, 561, 563, 564, 576, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 622, 624, 629, 632, 633, 634, 635, 636, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 824, 825, 826, 827, 837, 842, 845, 849, 852, 853, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 885, 886, 941, 1029, 1032, 1033, 1034, 1036, 1038], "metadatarequest": [236, 417, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 821, 822, 823, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 938, 940], "request_rout": 236, "validate_metadata": 236, "routed_param": [236, 941], "route_param": 236, "caller": [236, 404, 640, 641, 646, 654, 655, 656, 675, 883, 884, 939, 949, 957, 958, 959, 1031], "predict_param": [236, 459, 561, 562, 853, 1035], "object_nam": [236, 938, 941], "method_nam": [236, 941], "silent": [236, 411, 575, 849, 991, 1027, 1028, 1030, 1031, 1035, 1036], "bug": [236, 313, 314, 315, 316, 317, 318, 319, 365, 374, 378, 379, 381, 384, 388, 390, 999, 1002, 1022, 1023, 1024, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "notabl": [236, 303, 370, 390, 490, 721, 866, 978, 980, 984, 1026, 1029, 1036], "metaclassifiermetaclassifi": 236, "exampleclassifierexampleclassifi": 236, "typeerror": [236, 316, 381, 705, 917, 965, 1029, 1030, 1033, 1035], "got": [236, 268, 358, 381, 545, 643, 659, 1035, 1037], "sample_weight1": 236, "sample_weight2": 236, "aliased_sample_weight": 236, "alia": [236, 377, 380, 384, 390, 431, 437, 438, 441, 443, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 527, 528, 532, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 582, 584, 585, 588, 604, 605, 611, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 684, 790, 791, 792, 793, 794, 797, 799, 804, 808, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 843, 844, 850, 851, 853, 856, 858, 859, 860, 865, 872, 873, 888, 889, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 955, 987, 1002, 1022, 1036], "calle": [236, 939], "predict_log_proba": [236, 378, 390, 543, 544, 545, 547, 549, 551, 553, 558, 587, 588, 652, 653, 670, 790, 793, 794, 804, 814, 828, 829, 830, 831, 832, 850, 853, 890, 895, 898, 901, 903, 996, 1022, 1035], "meta_est": 236, "routerconsumerclassifi": 236, "add_self_request": 236, "self_request": 236, "clf_sample_weight": 236, "meta_clf_sample_weight": 236, "routerconsumerclassifierrouterconsumerclassifi": 236, "complic": [236, 297, 382, 413, 688, 984], "simplepipelin": 236, "_required_paramet": [236, 378], "transformer_": [236, 459], "child": [236, 347, 356, 363, 388, 390, 394, 403, 410, 436, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 901, 902, 903, 904, 941, 949, 997, 1029], "boilerpl": [236, 378, 1005, 1016], "exampletransform": 236, "set_transform_request": [236, 476, 477, 478, 527, 576, 582, 584, 585, 629, 856, 859, 865, 873], "metaregressor": 236, "weightedmetaregressor": 236, "__metadata_request__fit": 236, "compat": [236, 264, 281, 314, 370, 379, 385, 386, 388, 390, 393, 394, 411, 457, 463, 502, 560, 571, 579, 580, 583, 597, 608, 609, 612, 613, 614, 616, 617, 626, 627, 628, 652, 653, 667, 669, 767, 771, 791, 792, 795, 797, 798, 799, 800, 803, 805, 806, 807, 808, 809, 810, 811, 837, 838, 858, 866, 867, 905, 906, 909, 944, 978, 981, 984, 986, 1001, 1002, 1005, 1018, 1022, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "exampleregressor": 236, "commun": [236, 369, 375, 379, 381, 384, 390, 403, 410, 532, 534, 541, 686, 704, 865, 971, 978, 984, 991, 995, 999, 1001, 1005, 1030, 1031], "vendor": [236, 1027, 1030, 1031], "NOT": [236, 287, 373, 379, 800, 833, 834], "signatur": [236, 347, 348, 371, 482, 483, 551, 552, 558, 559, 588, 604, 605, 653, 667, 669, 705, 735, 796, 812, 815, 817, 820, 866, 941, 970, 1029, 1035], "029": [236, 244, 348, 989], "plot_metadata_rout": [236, 244], "theta_c": [237, 517], "reject": [237, 390, 391, 517, 665, 720, 913, 914, 977, 981, 1030], "likewis": [237, 403, 517], "surround": [237, 376, 839, 987], "cca": [237, 406, 477, 479, 1026, 1030, 1031, 1032, 1034, 1036], "onevsrestclassifi": [237, 268, 270, 279, 401, 821, 823, 893, 1007, 1023, 1024, 1026, 1028, 1029, 1035, 1036], "min_x": 237, "max_x": 237, "plot_subfigur": 237, "min_i": 237, "zero_class": 237, "one_class": 237, "nfor": 237, "plot_multilabel": [237, 244], "extratreesregressor": [238, 410, 551, 559, 560, 903, 904, 1025, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "n_face": 238, "face_id": 238, "n_pixel": [238, 259], "nn": [238, 411, 689, 1014], "y_test_predict": 238, "true_fac": 238, "completed_fac": 238, "211": [238, 244, 266, 318, 325, 869, 881], "plot_multioutput_face_complet": [238, 244], "iforest": 239, "pharuj": 239, "rajborirug": 239, "ra": 239, "kmitl": 239, "ac": [239, 524, 658, 679, 680, 977, 994, 1016], "robustscal": [239, 870, 883, 971, 991, 1027, 1028, 1030, 1032, 1033, 1034, 1038], "make_estim": 239, "iforest_kw": 239, "lof_kw": 239, "outlier_detector": 239, "perf_count": 239, "negative_outlier_factor_": [239, 288, 839, 987], "expected_n_anomali": 239, "expected_anomaly_fract": 239, "kddcup": [239, 369, 486, 1018], "inject": [239, 371, 410], "attack": [239, 371], "fetch_kddcup99": [239, 371, 1029, 1030, 1031, 1034, 1035], "percent10": [239, 486], "int32": [239, 281, 310, 376, 390, 437, 441, 443, 445, 447, 895, 896, 897, 898, 899, 946, 996, 1031, 1037, 1038], "anomaly_frac": 239, "10065": 239, "338": 239, "protocol_typ": 239, "cat_column": 239, "wilderness_area": 239, "soil_typ": 239, "x_forestcov": 239, "14302": 239, "137": [239, 382, 1023], "forestcov": 239, "usd": 239, "sqft": 239, "ames_h": 239, "div": 239, "lot_area": 239, "misc_featur": 239, "add_categori": 239, "noinfo": 239, "mas_vnr_typ": 239, "2714": 239, "categorical_columns_selector": 239, "fetal": 239, "cardiotocogram": 239, "heart": 239, "fhr": 239, "x_cardiotocographi": 239, "2126": 239, "datasets_nam": 239, "ceil": [239, 551, 552, 553, 554, 557, 558, 559, 560, 588, 665, 793, 794, 901, 902, 903, 904, 995], "dataset_nam": [239, 281], "model_idx": 239, "plot_chance_level": [239, 268, 270, 271, 694, 696, 1038], "chance_level_kw": [239, 694, 696, 1038], "privileg": [239, 384], "n_neighbors_list": [239, 283], "localoutlierfactor__n_neighbor": 239, "preprocessor_list": 239, "interquartil": [239, 871, 883], "iqr": [239, 871, 883], "75th": [239, 871], "squash": [239, 380, 413, 525, 531, 536, 542], "plot_outlier_detection_bench": [239, 244], "recalcul": [240, 242, 403, 1019, 1022], "mlpregressormlpregressor": 240, "tree_disp": 240, "mlp_disp": 240, "0x7fca557fcb10": 240, "267": [240, 244, 277, 1022], "plot_partial_dependence_visualization_api": [240, 244], "deactiv": [241, 370, 377, 382, 393, 404, 793, 794, 1036], "standard_scal": 241, "polynomialfeaturespolynomialfeatur": 241, "pcapca": 241, "svcsvc": [241, 242, 259, 261, 315], "numeric_preprocessor": 241, "imputation_mean": 241, "categorical_preprocessor": [241, 309], "imputation_const": 241, "onehot": [241, 304, 305, 404, 858, 991], "gender": [241, 866, 991], "classifier__n_estim": 241, "classifier__max_featur": 241, "classifier__max_depth": 241, "classifier__criterion": 241, "087": [241, 244, 348], "plot_pipeline_displai": [241, 244], "svc_disp": [242, 313, 1019], "rfc_disp": [242, 313, 1019], "103": [242, 244, 260, 277, 279, 281, 371, 410, 491, 549, 550, 1022], "plot_roc_curve_visualization_api": [242, 244], "transform_output": [243, 310, 462, 891, 1037, 1038], "slep018": [243, 378, 1037], "x_test_scal": 243, "894264": 243, "798301": 243, "271411": 243, "327605": 243, "244466": 243, "086944": 243, "327407": 243, "459074": 243, "660797": 243, "462234": 243, "576989": 243, "159419": 243, "933197": 243, "427329": 243, "414810": 243, "039497": 243, "275851": 243, "scaler2": 243, "x_test_np": 243, "x_test_df": 243, "feature_names_in_": [243, 310, 316, 390, 424, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 621, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 1035, 1036, 1037, 1038], "num_pip": 243, "num_col": 243, "7621951219512195": 243, "log_reg": [243, 317], "config_context": [243, 362, 363, 399, 620, 891, 1029, 1035, 1038], "reset": [243, 358, 384, 528, 670, 671, 672, 833, 834, 862, 863, 873, 1024], "1088": 243, "151101": 243, "479229": 243, "188153": 243, "393297": 243, "263234": 243, "657": [243, 261], "975455": 243, "532843": 243, "546068": 243, "1511007": 243, "47922861": 243, "18815268": 243, "39329747": 243, "26323428": 243, "97545464": 243, "53284267": 243, "54606834": 243, "plot_set_output": [243, 244], "848": 244, "auto_examples_miscellan": 244, "bayesiangaussianmixtur": [246, 247, 252, 789, 980, 1028, 1030, 1031, 1035, 1036], "weight_concentration_prior_typ": [246, 252, 788, 980, 1028], "dirichlet_distribut": [246, 788, 980, 1028], "dirichlet_process": [246, 252, 788, 980, 1028], "weight_concentration_prior": [246, 252, 788, 980], "finit": [246, 252, 362, 371, 390, 462, 532, 545, 576, 600, 603, 604, 605, 652, 721, 771, 778, 788, 814, 891, 911, 913, 914, 977, 980, 981, 1005, 1007, 1014, 1029, 1030, 1034, 1036, 1037], "covar": [246, 247, 252], "eig_val": 246, "eig_vec": 246, "unit_eig_vec": 246, "arctan2": [246, 248, 251], "56b4e9": 246, "plot_titl": 246, "weights_": [246, 788, 789, 1036], "covariances_": [246, 247, 248, 251, 252, 788, 789, 1029], "get_xaxi": [246, 291, 303], "set_tick_param": 246, "007": [246, 269, 281, 348], "labelleft": 246, "0072b2": 246, "f0e442": 246, "d55e00": 246, "mean_precision_prior": [246, 252, 788], "nprior": 246, "gamma_0": [246, 252], "reg_covar": [246, 788, 789], "init_param": [246, 249, 252, 788, 789], "concentrations_prior": 246, "plot_concentration_prior": [246, 253], "_base": [247, 378], "color_it": [247, 251, 252], "dp": [247, 252], "shouldn": [247, 252, 376], "em": [247, 248, 252, 437, 441, 453, 530, 788, 789, 980, 1036], "dpgmm": [247, 252, 1022, 1026, 1028], "149": [247, 253, 982, 1022], "plot_gmm": [247, 253], "ronweiss": 248, "make_ellips": 248, "datalim": 248, "skf": [248, 407, 809], "train_index": [248, 325, 407, 791, 792, 795, 797, 798, 799, 800, 803, 805, 806, 807, 808, 809, 810, 811], "test_index": [248, 325, 407, 791, 792, 795, 797, 798, 799, 800, 803, 805, 806, 807, 808, 809, 810, 811], "cov_typ": 248, "means_init": [248, 249, 789], "y_train_pr": 248, "train_accuraci": 248, "y_test_pr": 248, "test_accuraci": [248, 262], "141": [248, 253, 528, 893, 982], "plot_gmm_covari": [248, 253], "random_from_data": [249, 788, 789, 980], "diamond": 249, "colour": [249, 373, 411, 581, 982], "eventu": [249, 402, 403, 412, 587, 1005], "walsh": [249, 1034, 1036], "timer": [249, 382], "_samples_gener": 249, "extmath": [249, 347, 385, 447, 1022, 1023, 1028, 1029, 1032, 1036, 1037], "row_norm": 249, "x_squared_norm": [249, 454], "get_initial_mean": 249, "times_init": 249, "relative_tim": 249, "ini": 249, "init_tim": 249, "2fx": 249, "498": [249, 253], "plot_gmm_init": [249, 253], "shifted_gaussian": 250, "stretched_gaussian": 250, "score_sampl": [250, 286, 287, 288, 294, 390, 409, 463, 526, 535, 557, 671, 788, 789, 790, 793, 794, 804, 838, 839, 849, 853, 897, 987, 1025, 1030, 1032, 1034], "083": [250, 253, 259], "plot_gmm_pdf": [250, 253], "component_1": 251, "component_2": 251, "best_parameters_": 251, "gmm_bic_scor": 251, "callabl": [251, 265, 390, 407, 411, 412, 414, 415, 435, 437, 438, 439, 440, 441, 443, 444, 446, 451, 453, 454, 458, 459, 460, 461, 525, 527, 529, 531, 533, 539, 540, 551, 552, 553, 554, 555, 556, 558, 559, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 604, 605, 614, 622, 628, 633, 637, 653, 660, 665, 667, 669, 682, 685, 686, 690, 705, 713, 725, 735, 764, 767, 771, 772, 773, 774, 783, 784, 790, 793, 794, 796, 804, 812, 815, 816, 817, 818, 820, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 857, 866, 888, 889, 895, 896, 897, 898, 899, 942, 948, 951, 965, 970, 981, 991, 1022, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1038], "0x7fca8332fba0": 251, "gaussianmixturegaussianmixtur": 251, "param_n_compon": 251, "param_covariance_typ": 251, "829429": 251, "1084": 251, "038689": 251, "1114": 251, "517272": 251, "1148": 251, "512281": 251, "1179": 251, "977890": 251, "catplot": 251, "hue": [251, 261, 308, 373], "plot_gmm_select": [251, 253], "loos": [252, 258, 996, 1030], "liberti": 252, "judgment": [252, 981], "panel": [252, 286, 303, 409, 1001], "primarili": [252, 266, 376, 390, 399, 403, 939, 1005, 1031, 1032], "covariance_prior": [252, 788], "plot_gmm_sin": [252, 253], "623": [253, 830, 983], "auto_examples_mixtur": 253, "mislabel": [255, 410, 983], "imbal": [255, 264, 407, 701, 722, 723, 731, 776, 777, 780, 781, 981], "life": [255, 384, 978], "set_printopt": 255, "titles_opt": 255, "116": [255, 277, 1022], "plot_confusion_matrix": [255, 277, 313, 1032, 1033, 1034, 1035], "groupkfold": [256, 266, 394, 407, 588, 790, 793, 794, 795, 796, 797, 798, 799, 804, 808, 812, 814, 815, 816, 817, 820, 1011, 1028, 1035], "groupshufflesplit": [256, 407, 1011, 1028], "shufflesplit": [256, 263, 342, 407, 792, 798, 800, 810, 819, 1011, 1022, 1023, 1025, 1027, 1028], "stratifiedgroupkfold": [256, 1035], "stratifiedshufflesplit": [256, 334, 407, 1011, 1022, 1023, 1028, 1029, 1035], "1338": 256, "cmap_data": 256, "cmap_cv": 256, "coolwarm": [256, 331], "n_point": [256, 833, 834], "percentiles_class": 256, "perc": 256, "group_prior": 256, "visualize_group": 256, "yticklabel": [256, 347], "ngroup": 256, "nclass": 256, "plot_cv_indic": [256, 277], "tr": [256, 373, 380, 403, 405, 463, 464, 465, 466, 467, 468, 469, 470, 831], "this_cv": 256, "803": [256, 277], "plot_cv_predict": [257, 277], "fnr": [258, 692, 720], "det_curv": [258, 692, 775, 782, 981, 1034, 1035], "commonli": [258, 338, 369, 390, 403, 404, 413, 608, 751, 752, 788, 822, 865, 978, 979, 981, 982, 984, 1038], "detcurvedisplai": [258, 316, 720, 1034, 1035], "ax_roc": 258, "ax_det": 258, "feedback": [258, 375, 376, 377, 391, 1001, 1030], "plot_det": [258, 277], "n_imag": 259, "print_datafram": 259, "filtered_cv_result": 259, "mean_precis": 259, "std_precis": 259, "mean_recal": 259, "std_recal": 259, "mean_test_precis": [259, 265], "std_test_precis": 259, "mean_test_recal": 259, "std_test_recal": 259, "03f": 259, "refit_strategi": 259, "best_index": [259, 265], "precision_threshold": 259, "high_precision_cv_result": 259, "rank_test_recal": 259, "rank_test_precis": [259, 265], "best_recall_std": 259, "best_recal": 259, "best_recall_threshold": 259, "high_recall_cv_result": 259, "fastest_top_recall_high_precision_index": 259, "idxmin": 259, "854": 259, "039": [259, 301, 744, 774, 981], "780": 259, "905": 259, "889": [259, 431], "890": 259, "695": 259, "743": [259, 1014], "066": [259, 642], "028": 259, "744": [259, 281], "618": 259, "003416": 259, "877206": 259, "069196": 259, "0x7fca80cc5080": 259, "807": [259, 261], "434": [259, 277], "plot_grid_search_digit": [259, 277], "minimis": [260, 403, 407, 652, 653, 997], "219": 260, "260": [260, 1035], "york": [260, 781, 788, 971, 981, 993], "usa": [260, 371, 890, 971, 978, 993, 994], "best_index_": [260, 265, 790, 793, 794, 804], "wenhao": [260, 1030, 1031], "zhang": [260, 403, 436, 658, 673, 679, 680, 683, 687, 751, 752, 977, 978, 979, 983, 995, 1026, 1027, 1029, 1030, 1031, 1032, 1034, 1038], "wenhaoz": 260, "ucla": [260, 977], "lower_bound": 260, "best_score_idx": 260, "best_low_complex": 260, "fewest": [260, 621], "candidate_idx": 260, "param_reduce_dim__n_compon": 260, "plot_grid_search_refit_cal": [260, 277], "moon": [261, 298, 305, 347, 348, 516], "moder": [261, 376, 413, 448, 987], "352": [261, 348, 382], "repeatedstratifiedkfold": [261, 407, 805, 809, 1029], "repetit": [261, 381, 407, 805, 806, 989, 1036], "rank_test_scor": [261, 269, 790, 804, 1028], "rename_axi": 261, "9400": 261, "079297": 261, "9300": 261, "077846": 261, "3_poli": 261, "9044": [261, 1029], "098776": 261, "2_poli": 261, "6852": 261, "169106": 261, "certainti": [261, 378, 735, 981], "repreat": 261, "model_scor": [261, 279], "regex": [261, 349, 458, 460], "_test_scor": [261, 466, 588, 1035], "lineplot": 261, "set1": [261, 290, 291], "labelpad": 261, "882561": 261, "783392": 261, "351390": 261, "746492": 261, "298688": 261, "355440": 261, "nadeau": [261, 1030], "bengio": [261, 850, 851, 970, 994], "framework": [261, 362, 378, 388, 390, 397, 403, 631, 682, 788, 977, 978, 985, 999, 1002, 1005, 1022, 1028], "diebold": 261, "mariano": 261, "proven": [261, 975, 979, 1005], "replic": [261, 375, 378], "cdot": [261, 338, 400, 403, 408, 409, 413, 608, 609, 613, 616, 617, 859, 973, 975, 981, 985, 991], "sum_": [261, 270, 342, 400, 401, 403, 408, 409, 410, 532, 534, 541, 690, 748, 975, 977, 978, 981, 983, 985, 986, 988, 989, 991, 995, 996, 997], "ij": [261, 291, 400, 403, 408, 532, 534, 541, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 977, 978, 981, 983, 986, 996], "corrected_std": 261, "crossvalid": [261, 275], "corrected_var": 261, "ddof": [261, 873, 884], "compute_corrected_ttest": 261, "t_stat": 261, "p_val": 261, "model_1_scor": 261, "model_2_scor": 261, "ncorrect": 261, "227": [261, 322, 328, 403, 718], "uncorrect": [261, 589, 592], "t_stat_uncorrect": 261, "p_val_uncorrect": 261, "benavoli": 261, "colleagu": 261, "conjug": [261, 446, 456, 666, 668, 681, 689, 977], "overlin": [261, 400], "t_post": 261, "ppf": 261, "infin": [261, 342, 535, 676, 677, 706, 814, 900, 912, 984], "minu": [261, 753, 981], "better_prob": 261, "cdf": 261, "773": [261, 347, 642, 831], "essenti": [261, 318, 374, 378, 403, 407, 408, 503, 973, 981, 984, 1002, 1005, 1030], "rope": 261, "rope_interv": 261, "rope_prob": 261, "432": [261, 349, 405], "x_rope": 261, "uncertain": [261, 323, 375], "credibl": 261, "cred_interv": 261, "cred_int_df": 261, "000977": 261, "019023": 261, "005422": 261, "025422": 261, "016445": 261, "036445": 261, "bonferroni": 261, "n_comparison": 261, "pairwise_t_test": 261, "model_i": 261, "model_k": 261, "model_i_scor": 261, "model_k_scor": 261, "pairwise_comp_df": 261, "model_1": 261, "model_2": 261, "276": 261, "851": 261, "pairwise_bayesian": 261, "worse_prob": 261, "pairwise_bayesian_df": 261, "018": [261, 466], "882": 261, "dietterich": [261, 823, 982], "1998": [261, 371, 373, 408, 410, 549, 550, 823, 828, 859, 982, 983, 985, 991, 995], "bouckaert": 261, "frank": [261, 824, 982, 1027, 1031, 1032], "pacif": 261, "asia": [261, 991], "confer": [261, 371, 403, 408, 414, 433, 438, 444, 505, 529, 557, 690, 702, 719, 749, 849, 850, 851, 981, 987, 993, 997], "discoveri": [261, 371, 382, 385, 403, 410, 412, 414, 438, 505, 549, 550, 557, 586, 589, 590, 592, 593, 594, 600, 714, 733, 776, 981, 993, 1005, 1036, 1037], "corani": 261, "dem\u0161ar": 261, "zaffalon": 261, "accompani": [261, 1030], "972": [261, 277, 300, 301], "plot_grid_search_stat": [261, 277], "loader": [262, 326, 347, 369, 370, 371, 492, 493, 502, 1002, 1016, 1022, 1027, 1029, 1030, 1033], "857": [262, 348], "complementnb": [262, 347, 828, 829, 831, 832, 983, 1030, 1034, 1035, 1037], "tfidfvectorizertfidfvector": 262, "complementnbcomplementnb": 262, "vect__": 262, "clf__": 262, "parameter_grid": 262, "vect__max_df": 262, "vect__min_df": 262, "vect__ngram_rang": [262, 1016], "unigram": [262, 371, 411, 582, 583, 585, 1029], "bigram": [262, 411, 582, 583, 585, 1016], "vect__norm": 262, "clf__alpha": [262, 1016], "parallelis": [262, 462, 891, 1029], "random_search": [262, 269], "742": [262, 276, 277], "best_paramet": 262, "get_param": [262, 379, 390, 413, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 970, 1032, 1033, 1034, 1036, 1037], "816": [262, 465, 466], "709": 262, "ambigu": [262, 381, 411, 566, 706, 930, 984, 1031, 1033, 1035], "shorten_param": 262, "xanchor": 262, "yanchor": 262, "autom": [262, 380, 393, 686, 970, 977, 978, 981, 1001, 1005], "parallel_coordin": 262, "understood": [262, 376, 403, 1013], "column_result": 262, "transform_func": 262, "fromkei": [262, 908], "ngram_rang": [262, 326, 411, 582, 583, 585], "color_continuous_scal": 262, "viridis_r": 262, "slide": [262, 638, 977, 1000, 1001], "intersect": [262, 331, 400, 403, 731], "undo": [262, 863, 1026], "stronger": [262, 637, 646, 652, 653, 666, 667, 668, 669, 670, 672, 681], "plot_grid_search_text_feature_extract": [262, 277], "ax_idx": 263, "resort": [263, 371, 549, 1032], "learning_curv": [263, 318, 796, 976, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037], "return_tim": [263, 817, 1032], "test_scores_nb": 263, "fit_times_nb": 263, "score_times_nb": 263, "test_scores_svm": 263, "fit_times_svm": 263, "score_times_svm": 263, "score_tim": [263, 407, 816, 817], "inflect": 263, "plot_learning_curv": [263, 277], "class_likelihood_ratio": [264, 981, 1037], "medicin": [264, 706, 981], "medic": [264, 407, 706, 977, 1005], "truli": [264, 268, 364, 706, 981], "odd": [264, 410, 508, 706, 981, 1029, 1030], "suppos": [264, 322, 362, 363, 378, 382, 405, 410, 411, 412, 551, 555, 558, 652, 653, 660, 662, 668, 669, 670, 735, 839, 893, 895, 898, 901, 903, 919, 985, 1031, 1033], "physiolog": [264, 373, 1014], "hopefulli": [264, 384, 1022], "indirect": [264, 377, 390], "bio": 264, "pos_lr": 264, "neg_lr": 264, "raise_warn": [264, 706, 967], "positive_likelihood_ratio": [264, 706], "negative_likelihood_ratio": [264, 706], "extract_scor": 264, "test_positive_likelihood_ratio": 264, "test_negative_likelihood_ratio": 264, "718894": 264, "724619": 264, "321091": 264, "054054": 264, "108843": 264, "986989": 264, "268147": 264, "034278": 264, "most_frequ": [264, 545, 621, 624, 843, 971, 981, 1030, 1032, 1034], "undefin": [264, 390, 706, 722, 731, 734, 776, 950, 981, 1030, 1034, 1038], "373333": 264, "5557": 264, "235430": 264, "stand": [264, 349, 380, 388, 408, 525, 531, 539, 540, 590, 603, 672, 699, 711, 729, 730, 750, 779, 781, 786, 980, 981, 987], "lr_base": 264, "pos_lr_bas": 264, "pos_lr_base_std": 264, "neg_lr_bas": 264, "neg_lr_base_std": 264, "plot_indic": 264, "scoring_on_bootstrap": 264, "n_bootstrap": [264, 1023], "results_for_preval": 264, "bootstrap_indic": 264, "default_rng": 264, "2039": 264, "507943": 264, "113516": 264, "207667": 264, "009778": 264, "3419": 264, "445329": 264, "125197": 264, "198280": 264, "008907": 264, "422287": 264, "123864": 264, "192630": 264, "006340": 264, "6196": [264, 1027], "410507": 264, "163975": 264, "193761": 264, "005864": 264, "7578": [264, 1029], "335398": 264, "175224": 264, "189120": 264, "005820": 264, "8963": 264, "198284": 264, "238943": 264, "185496": 264, "005020": 264, "band": [264, 305, 991], "plot_likelihood_ratio": [264, 277], "scorer_nam": [265, 790, 804], "predefin": [265, 803, 970, 984, 1011, 1037], "403": [265, 348], "402": [265, 348], "maskedarrai": [265, 1028], "param_min_samples_split": 265, "sample_score_mean": 265, "sample_score_std": 265, "std_": [265, 1027], "rank_test_": 265, "best_scor": 265, "mean_test_": 265, "045": [265, 277, 716], "plot_multi_metric_evalu": [265, 277], "cawlei": [266, 981], "talbot": 266, "mach": [266, 401, 407, 587, 588], "2079": 266, "2107": 266, "007581": 266, "007833": 266, "num_trial": 266, "x_iri": [266, 1015], "y_iri": [266, 1015], "p_grid": 266, "non_nested_scor": 266, "nested_scor": 266, "leaveoneout": [266, 407, 1011], "leaveonegroupout": [266, 407, 791, 798, 799, 1011, 1028], "inner_cv": 266, "outer_cv": 266, "non_nest": 266, "score_differ": 266, "non_nested_scores_lin": 266, "nested_lin": 266, "difference_plot": 266, "plot_nested_cross_validation_iri": [266, 277], "permutation_test_scor": [267, 407, 1022, 1029, 1034], "plant": [267, 270, 271, 369, 981, 1018], "uncorrel": [267, 372, 522, 528, 535, 981, 1014], "n_uncorrelated_featur": 267, "x_rand": 267, "undergo": 267, "score_iri": 267, "perm_scores_iri": 267, "pvalue_iri": 267, "n_permut": [267, 407, 818], "score_rand": 267, "perm_scores_rand": 267, "pvalue_rand": 267, "evid": [267, 347, 384, 403, 407, 408, 410, 638, 788, 980], "ndata": 267, "destroi": [267, 411, 786, 862, 991], "ojala": [267, 407, 818], "garriga": [267, 407, 818], "528": [267, 277], "plot_permutation_tests_for_classif": [267, 277], "t_p": 268, "plu": [268, 373, 381, 673, 824, 827, 982, 995], "f_p": 268, "f_n": 268, "denomin": [268, 411, 416, 469, 584, 698, 750, 975], "stairstep": 268, "ap": [268, 701, 702, 981], "sum_n": [268, 701, 981], "r_n": [268, 701, 981], "p_n": [268, 701, 981], "nth": [268, 701, 981], "r_k": 268, "p_k": [268, 981], "trapezoid": [268, 700, 701, 981], "binar": [268, 270, 271, 368, 370, 402, 747, 828, 857, 858, 860, 864, 866, 877, 981, 983, 1007, 1018, 1036, 1038], "average_precision_scor": [268, 694, 700, 702, 735, 775, 781, 981, 1022, 1025, 1029, 1030, 1036, 1038], "mt19937": [268, 273, 1033], "0x7fca209b6040": 268, "precisionrecalldisplai": [268, 316, 775, 777, 780, 981, 1032, 1035, 1038], "label_binar": [268, 270, 860, 1026], "average_precis": [268, 694, 701, 735, 981], "prevalence_pos_label": [268, 694], "setup": [268, 270, 362, 374, 378, 382, 384, 984, 1008], "f_score": 268, "extens": [268, 270, 286, 362, 363, 370, 371, 374, 377, 379, 380, 384, 385, 388, 397, 403, 408, 490, 497, 528, 734, 924, 932, 978, 980, 981, 1000, 1001, 1005, 1022, 1028, 1035, 1036, 1038], "plot_precision_recal": [268, 277], "deem": [269, 270, 528, 989, 1035], "991": [269, 981], "05063247886572012": 269, "13822072286080167": 269, "987": [269, 348], "010877306503748912": 269, "9226260871125187": 269, "023": [269, 894, 989], "727148206404819": 269, "25183501383331797": 269, "993": 269, "1111111111111111": 269, "5555555555555556": 269, "n_top": 269, "param_dist": [269, 273, 315], "n_iter_search": 269, "plot_randomized_search": [269, 277], "unambigu": [270, 982, 1028], "notion": [270, 338, 348, 364, 388, 403, 408, 410, 977, 981], "scheme": [270, 286, 309, 310, 371, 390, 403, 407, 409, 411, 560, 584, 652, 653, 699, 803, 860, 861, 864, 866, 870, 874, 877, 882, 893, 898, 970, 977, 991, 995, 1022, 1030, 1033, 1034], "harder": [270, 271, 307, 371, 375, 378, 384, 403, 509, 555, 556, 1004], "bulk": [270, 414, 438], "scrutin": 270, "labelbinar": [270, 390, 734, 822, 857, 866, 877, 982, 1007, 1025, 1026, 1027, 1031, 1036], "y_onehot_test": 270, "class_id": [270, 271], "class_of_interest": 270, "nvirginica": 270, "tp_c": 270, "fn_c": 270, "fp_c": 270, "tn_c": 270, "briefli": [270, 375, 389, 410, 970, 1032], "nreceiv": 270, "micro_roc_auc_ovr": 270, "mcclish": [270, 781], "deci": 270, "1989": [270, 629, 781, 850, 851, 977, 984], "jul": 270, "fpr_grid": 270, "mean_tpr": [270, 271], "interp": [270, 271, 334], "macro_roc_auc_ovr": 270, "deeppink": 270, "aqua": 270, "role": [270, 362, 375, 388, 408, 999], "pair_list": 270, "pair_scor": 270, "label_a": 270, "label_b": 270, "a_mask": 270, "b_mask": 270, "ab_mask": 270, "a_tru": 270, "b_true": 270, "idx_a": 270, "idx_b": 270, "fpr_a": 270, "tpr_a": 270, "fpr_b": 270, "tpr_b": 270, "macro_roc_auc_ovo": 270, "ovo_tpr": 270, "pool": [270, 388, 439, 629, 950, 1002, 1033], "470": [270, 277], "plot_roc": [270, 277], "mean_fpr": 271, "viz": [271, 383], "interp_tpr": 271, "mean_auc": 271, "std_auc": 271, "std_tpr": 271, "tprs_upper": 271, "tprs_lower": 271, "119": [271, 277, 975, 1025], "plot_roc_crossv": [271, 277], "halvinggridsearchcv": [272, 273, 315, 573, 794, 970, 1034, 1036, 1037], "1e4": [272, 653, 673, 887, 993], "gsh": 272, "gsh_time": 272, "gs_time": 272, "make_heatmap": 272, "is_sh": 272, "make_cbar": 272, "param_c": [272, 790], "param_gamma": [272, 790, 804], "sh": [272, 380, 384, 970], "scores_matrix": 272, "pivot_t": 272, "aggfunc": 272, "0e": [272, 543, 544], "get_xticklabel": 272, "rotation_mod": 272, "cbar_ax": 272, "plot_successive_halving_heatmap": [272, 277], "rsh": [273, 315], "0x7fca55e84240": 273, "_distn_infrastructur": 273, "rv_discrete_frozen": 273, "0x7fca88e01010": 273, "0x7fca83207d50": 273, "halvingrandomsearchcvhalvingrandomsearchcv": 273, "params_str": 273, "drop_dupl": 273, "n_resources_": [273, 793, 794, 970], "nn_candid": 273, "n_candidates_": [273, 793, 794, 970], "n_iterations_": [273, 793, 794], "multialign": 273, "035": [273, 277], "plot_successive_halving_iter": [273, 277], "n_samples_train": [274, 895, 896, 897, 898, 899], "n_samples_test": [274, 895, 896, 897, 898, 899, 984, 991], "train_error": 274, "test_error": 274, "i_alpha_optim": 274, "alpha_optim": 274, "00020991037201085544": 274, "plot_train_error_vs_test_error": [274, 277], "nonlinear": [275, 316, 638, 682, 683, 687, 690, 859, 977, 978, 986, 991], "true_fun": 275, "polynomial_featur": 275, "plot_underfitting_overfit": [275, 277], "validationcurvedisplai": [276, 976, 1038], "subset_mask": 276, "isin": [276, 323], "param_rang": [276, 319, 342, 812, 820, 976, 1038], "plot_validation_curv": [276, 277], "auto_examples_model_select": 277, "yeast": [279, 824], "2417": 279, "jaccard": [279, 400, 444, 451, 693, 697, 713, 722, 727, 731, 771, 772, 773, 787, 984, 1030, 1031], "preced": [279, 363, 376, 481, 981, 1022], "adam": [279, 298, 850, 851, 985, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "kleczewski": [279, 1029, 1030], "jaccard_scor": [279, 697, 722, 727, 787, 981, 1031, 1034], "classifierchain": [279, 390, 825, 827, 1029, 1034, 1037], "40597": 279, "wrapper": [279, 281, 382, 385, 407, 413, 538, 614, 665, 893, 997, 1001, 1026, 1034], "base_lr": [279, 824], "y_pred_ovr": 279, "ovr_jaccard_scor": 279, "y_pred_chain": 279, "chain_jaccard_scor": 279, "y_pred_ensembl": 279, "ensemble_jaccard_scor": 279, "x_po": 279, "704": [279, 280, 347], "plot_classifier_chain_yeast": [279, 280], "auto_examples_multioutput": 280, "kneighborstransform": [281, 283, 313, 845, 984, 1032, 1036, 1037], "nmslib": 281, "pynndesc": 281, "pip": [281, 313, 314, 315, 316, 317, 318, 319, 363, 374, 376, 380, 382, 393, 997], "pynndescenttransform": 281, "csr_matrix": [281, 314, 434, 438, 446, 490, 528, 538, 551, 552, 553, 554, 557, 558, 559, 560, 582, 587, 588, 708, 819, 868, 895, 896, 898, 899, 901, 902, 903, 904, 982, 991, 995, 996, 997, 1037], "nmslibtransform": 281, "sw": 281, "n_samples_fit_": [281, 835, 836, 837, 839, 841, 843, 844, 845], "cosinesimil": 281, "nmslib_": 281, "adddatapointbatch": 281, "createindex": 281, "n_samples_transform": [281, 837, 845], "thread": [281, 314, 317, 374, 388, 390, 403, 410, 825, 826, 947, 948, 949, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "num_thread": 281, "knnquerybatch": 281, "benchmark": [281, 315, 348, 349, 362, 369, 371, 376, 388, 393, 396, 401, 462, 509, 891], "mnist_10000": 281, "mnist_20000": 281, "20_000": 281, "tsne_param": 281, "barnes_hut": [281, 686, 1029, 1030], "parallel_batch_queri": 281, "msg": [281, 965], "transformer_nam": 281, "longest": 281, "fit_dur": 281, "transform_dur": 281, "315": [281, 373], "823": 281, "884": 281, "733": 281, "448": 281, "numba": [281, 1002], "cold": 281, "nearestneighbor": [281, 317, 393, 403, 414, 438, 440, 442, 455, 682, 683, 687, 835, 836, 837, 839, 843, 844, 845, 984, 1022, 1026, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "i_ax": 281, "828": 281, "955": [281, 407, 648], "brute": [281, 388, 398, 407, 414, 438, 440, 444, 451, 626, 627, 682, 683, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 988, 1018, 1026, 1030, 1034, 1037, 1038], "spent": [281, 309, 377, 382, 817, 1037], "approximate_nearest_neighbor": [281, 295], "slow": [283, 303, 347, 362, 370, 374, 376, 408, 411, 441, 693, 867, 868, 872, 895, 898, 930, 978, 984, 1002, 1015, 1029], "temporarydirectori": [283, 313], "graph_model": 283, "classifier_model": 283, "sklearn_graph_cache_": 283, "tmpdir": [283, 313], "full_model": 283, "classifier__n_neighbor": 283, "grid_model": 283, "836": [283, 295], "plot_caching_nearest_neighbor": [283, 295], "beforehand": [284, 997], "entitl": [284, 441, 605, 835], "knn__weight": 284, "unifom": 284, "382": [284, 295], "plot_classif": [284, 295], "79269019073225": 285, "kerneldens": [285, 286, 294, 409, 1024, 1030, 1031, 1035, 1036, 1037], "new_data": [285, 378], "4x11": 285, "real_data": 285, "set_clim": 285, "plot_digits_kde_sampl": [285, 295], "block": [286, 303, 317, 371, 373, 376, 381, 384, 390, 400, 403, 406, 409, 446, 447, 456, 467, 473, 474, 482, 483, 505, 507, 689, 949, 984, 986], "wildli": [286, 980], "kd": [286, 403, 409, 984, 1030, 1031, 1032], "jakevdp": [286, 294], "aaaaff": [286, 289], "tophat": [286, 409, 833, 834, 838], "log_den": 286, "x_src": 286, "format_func": 286, "ih": 286, "epanechnikov": [286, 409, 833, 834, 838], "funcformatt": 286, "nullloc": 286, "true_den": 286, "415": [286, 295], "plot_kde_1d": [286, 295], "plot_lof_novelty_detect": [287, 295], "471": [287, 295, 373], "x_inlier": 288, "n_error": 288, "x_score": [288, 476, 477, 478, 479], "legend_handl": 288, "handlerpathcollect": 288, "update_legend_marker_s": 288, "update_from": 288, "set_siz": 288, "handler_map": 288, "update_func": 288, "056": [288, 295, 348, 354, 357, 989], "plot_lof_outlier_detect": [288, 295], "cmap_light": [289, 292], "ffaaaa": 289, "aaffaa": 289, "cmap_bold": [289, 292], "00ff00": 289, "614": [289, 295], "plot_nca_classif": [289, 295], "neighborhoodcomponentanalysi": 290, "dim_reduction_method": 290, "acc_knn": 290, "x_embed": [290, 291, 686, 690, 842, 984], "ntest": 290, "plot_nca_dim_reduct": [290, 295], "logsumexp": [291, 1029], "get_yaxi": [291, 303], "link_thickness_i": 291, "diff_embed": 291, "dist_embed": 291, "einsum": 291, "exp_dist_embed": 291, "relate_point": 291, "pt_i": 291, "pt_j": 291, "102": [291, 295, 382, 1014, 1024], "plot_nca_illustr": [291, 295], "8133333333333334": 292, "nearestcentroid": [292, 347, 982, 984, 1022, 1026, 1029, 1034, 1037], "darkblu": 292, "shrink_threshold": [292, 840, 984, 1022, 1034], "plot_nearest_centroid": [292, 295], "barycent": [293, 1022], "plot_regress": [293, 295], "geospati": [294, 409], "haversin": [294, 409, 693, 755, 757, 984, 1031, 1034], "latitud": [294, 303, 371, 492, 693, 757], "longitud": [294, 303, 371, 492, 693, 757], "xtrain": 294, "ytrain": 294, "radian": [294, 693, 757], "land_mask": 294, "ball_tre": [294, 414, 438, 444, 451, 682, 683, 835, 836, 837, 838, 839, 841, 843, 844, 845, 984, 1022], "ocean": 294, "712": [294, 295], "plot_species_kd": [294, 295], "815": 295, "auto_examples_neighbor": 295, "combat": [297, 408], "lesser": [297, 390, 436, 535, 977], "curvatur": 297, "plot_mlp_alpha": [297, 301], "bfg": [298, 604, 605, 642, 643, 652, 663, 666, 668, 674, 681, 984, 985, 1037], "980000": 298, "096950": 298, "momentum": [298, 850, 851, 985], "049530": 298, "nesterov": [298, 850, 851, 985, 1038], "049540": 298, "360000": 298, "978444": 298, "860000": 298, "503452": 298, "504185": 298, "045311": 298, "956038": 298, "243802": 298, "992766": 298, "041297": 298, "993879": 298, "042898": 298, "638843": 298, "855465": 298, "912632": 298, "290584": 298, "909293": 298, "318387": 298, "991653": 298, "045934": 298, "840000": 298, "601052": 298, "940000": 298, "157334": 298, "154453": 298, "500000": 298, "692470": 298, "689143": 298, "689751": 298, "150527": 298, "850000": 298, "341523": 298, "336188": 298, "335919": 298, "689015": 298, "830000": 298, "512595": 298, "513034": 298, "930000": 298, "170087": 298, "schedul": [298, 363, 670, 671, 672, 850, 851, 995, 1005, 1029], "nesterovs_momentum": [298, 850, 851], "invscal": [298, 670, 671, 672, 850, 851, 995], "plot_arg": 298, "plot_on_dataset": 298, "nlearn": 298, "loss_": [298, 553, 850, 851, 985, 1036], "loss_curve_": [298, 850, 851], "data_set": 298, "get_lin": 298, "plot_mlp_training_curv": [298, 301], "28x28": 299, "throw": [299, 385, 912, 1026, 1029, 1030, 1031, 1032, 1036], "infrastructur": [299, 319, 999, 1001, 1002], "44139186": 299, "19174891": 299, "13983521": 299, "11378556": 299, "09443967": 299, "07846529": 299, "06506307": 299, "05534985": 299, "986429": 299, "953061": 299, "plot_mnist_filt": [299, 301], "greyscal": 300, "bernoulli": [300, 411, 412, 828, 829, 830, 831, 832, 849, 850, 851, 856, 977, 991, 1003, 1018, 1022], "bernoullirbm": [300, 850, 851, 986, 991, 1024, 1025, 1034, 1036], "yann": [300, 1022, 1024], "dauphin": [300, 1024], "gabriel": [300, 1030, 1031, 1032, 1035, 1036], "synnaev": 300, "convolv": 300, "minmax_scal": [300, 303, 863, 1027, 1030], "nudge_dataset": 300, "1px": 300, "direction_vector": 300, "apply_along_axi": 300, "feature_rang": [300, 863, 879, 991, 1024, 1034], "cg": [300, 652, 653, 666, 668, 681, 977, 1026, 1027, 1029, 1033, 1035, 1036], "rbm": [300, 849, 850, 851, 986], "rbm_features_classifi": 300, "6000": [300, 621], "raw_pixel_classifi": 300, "181": [300, 382], "plot_rbm_logistic_classif": [300, 301], "auto_examples_neural_network": 301, "incom": [303, 371, 434], "unscal": [303, 308, 977, 981, 1030, 1036], "unterthin": [303, 1025, 1026, 1027], "medinc": [303, 315, 371], "houseag": [303, 315, 371], "averoom": [303, 315, 371], "room": [303, 371, 381, 403, 1004], "avebedrm": [303, 371], "bedroom": [303, 371], "aveoccup": [303, 315, 371], "features_idx": 303, "quantile_rang": [303, 871, 883, 1028], "yeo": [303, 307, 869, 881, 991, 1030, 1036, 1038], "cox": [303, 307, 869, 881, 991, 1030, 1038], "plasma": 303, "plasma_r": 303, "create_ax": 303, "bottom_h": 303, "left_h": 303, "rect_scatt": 303, "rect_histx": 303, "rect_histi": 303, "ax_scatt": 303, "ax_histx": 303, "ax_histi": 303, "ax_scatter_zoom": 303, "ax_histx_zoom": 303, "ax_histy_zoom": 303, "rect_colorbar": 303, "ax_colorbar": 303, "plot_distribut": 303, "hist_nbin": 303, "x0_label": 303, "x1_label": 303, "hist_x1": 303, "hist_x0": 303, "aesthet": [303, 997, 1027], "tick_bottom": 303, "tick_left": 303, "outward": 303, "ec": [303, 524], "make_plot": 303, "item_idx": 303, "ax_zoom_out": 303, "ax_zoom_in": 303, "zoom_in_percentile_rang": 303, "cutoffs_x0": 303, "cutoffs_x1": 303, "non_outliers_mask": 303, "colorbarbas": 303, "OR": [303, 403, 414, 438, 1033], "indistinguish": 303, "quadrant": 303, "630": [303, 311, 717], "plot_all_sc": [303, 311], "straightforward": [304, 375, 408, 1005], "anywher": 304, "qinhanmin2005": 304, "sina": [304, 1035], "rnd": 304, "enc": [304, 306, 317, 319, 866, 867, 991], "x_bin": 304, "line_bin": 304, "plot_discret": [304, 311], "get_nam": 305, "broader": [305, 977], "logisticregression__c": 305, "linearsvc__c": 305, "kbinsdiscretizer__n_bin": 305, "gradientboostingclassifier__learning_r": 305, "svc__c": [305, 853], "cm_piyg": 305, "piyg": 305, "b30065": 305, "178000": 305, "est_idx": 305, "plot_discretization_classif": [305, 311], "centers_0": 306, "centers_1": 306, "x_list": 306, "grid_encod": 306, "stripe": 306, "plot_discretization_strategi": [306, 311], "powertransform": [307, 870, 881, 971, 991, 1030, 1033, 1036, 1038], "johnwon": 307, "weibul": 307, "bimod": [307, 409], "ineffect": [307, 991, 1030, 1031], "eric": [307, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "ericchang2017": 307, "northwestern": [307, 652], "contact": [307, 388, 1001], "font_siz": 307, "bc": 307, "qt": [307, 870], "x_lognorm": [307, 991], "x_chisq": 307, "chisquar": 307, "x_weibul": 307, "x_gaussian": 307, "x_uniform": 307, "loc_a": 307, "loc_b": 307, "105": 307, "x_a": 307, "x_b": 307, "x_bimod": 307, "d81b60": 307, "0188ff": 307, "ffc107": 307, "b7a2ff": 307, "2ec5ac": 307, "figaspect": 307, "axes_idx": 307, "axes_list": 307, "x_trans_bc": 307, "lmbda_bc": 307, "lambdas_": [307, 869, 1035, 1038], "x_trans_yj": 307, "lmbda_yj": 307, "x_trans_qt": 307, "ax_origin": 307, "ax_bc": 307, "ax_yj": 307, "ax_qt": 307, "x_tran": [307, 319, 378, 399, 436, 458, 869, 874, 881, 991], "meth_nam": 307, "lmbda": 307, "plot_map_data_to_norm": [307, 311], "involv": [308, 310, 313, 334, 338, 362, 364, 371, 376, 380, 390, 391, 406, 413, 693, 821, 822, 978, 982, 984, 988, 996, 1001, 1005, 1014, 1030], "kneighbor": [308, 317, 835, 836, 837, 839, 841, 984, 1026, 1031, 1035, 1036, 1037, 1038], "obatin": 308, "tyler": [308, 1029, 1035, 1036, 1037], "lanigan": [308, 1029], "tylerlanigan": 308, "sebastian": [308, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "raschka": [308, 1027, 1028, 1029, 1030, 1031, 1034], "sebastianraschka": 308, "alcohol": [308, 373], "malic": [308, 373], "acid": [308, 373], "scaled_x_train": 308, "x_plot_scal": 308, "fit_and_plot_model": 308, "scaled_pca": 308, "x_train_transform": [308, 358, 407], "x_train_std_transform": 308, "first_pca_compon": 308, "target_class": 308, "repercuss": 308, "logisticregressioncv": [308, 390, 394, 652, 977, 982, 1026, 1027, 1028, 1030, 1031, 1032, 1036, 1037], "unscaled_clf": 308, "scaled_clf": 308, "y_pred_scal": 308, "y_proba_sc": 308, "0824": 308, "vastli": 308, "plot_scaling_import": [308, 311], "targetencod": [309, 310, 390, 866, 867, 971, 991, 1001, 1038], "review": [309, 362, 371, 378, 379, 380, 381, 382, 388, 391, 407, 408, 529, 535, 981, 991, 1008], "wine_review": 309, "42074": 309, "countri": [309, 978], "provinc": 309, "region_1": 309, "region_2": 309, "wineri": 309, "tremend": [309, 410], "variet": 309, "hail": 309, "martha": 309, "vineyard": 309, "235": 309, "napa": 309, "vallei": 309, "cabernet": 309, "sauvignon": 309, "heitz": 309, "spain": 309, "ripe": 309, "aroma": 309, "blackberri": 309, "cassi": 309, "carodorum": 309, "selecci\u00f3n": 309, "reserva": 309, "northern": 309, "toro": 309, "tinta": 309, "bodega": 309, "carmen": 309, "rodr\u00edguez": 309, "watson": [309, 404], "honor": 309, "late": [309, 364], "harvest": 309, "knight": 309, "sonoma": 309, "blanc": 309, "macaulei": 309, "oak": 309, "reserv": [309, 555, 556, 1005, 1007], "oregon": 309, "willamett": 309, "pinot": 309, "noir": 309, "ponzi": 309, "franc": [309, 757], "b\u00e9gude": 309, "aft": [309, 1025], "br\u00fblade": 309, "provenc": 309, "bandol": 309, "one_hot": 309, "max_categori": [309, 317, 319, 866, 867, 991, 1036, 1038], "target_typ": [309, 874, 917, 944], "evaluate_model_and_stor": 309, "rmse_test_scor": 309, "rmse_train_scor": 309, "rmse_test_mean": 309, "rmse_test_std": 309, "rmse_train_mean": 309, "rmse_train_std": 309, "nuniqu": 309, "14810": 309, "1236": 309, "632": 309, "455": 309, "workaround": [309, 376, 790, 804], "high_cardinality_featur": 309, "low_cardinality_featur": 309, "mixed_encoded_preprocessor": 309, "high_cardin": 309, "low_cardin": 309, "mixed_pip": 309, "passthroughpassthroughhigh_cardinalityindex": 309, "targetencodertargetencod": 309, "low_cardinalityindex": 309, "mixed_target": 309, "name_to_color": 309, "rmse_": 309, "_mean": 309, "_std": 309, "explod": 309, "unrel": [309, 363, 381, 384, 411, 509], "plot_target_encod": [309, 311], "near_uniqu": 310, "50_000": [310, 348], "n_categori": [310, 829, 867, 991], "kbin": [310, 318], "x_inform": 310, "permuted_categori": 310, "x_shuffl": 310, "catastroph": [310, 756, 1002], "x_near_unique_categori": 310, "assembl": [310, 349, 853], "raw_model": 310, "0049896314219657345": 310, "00457762158140973": 310, "model_with_cf": 310, "cf": [310, 403, 406, 436, 694, 977, 991, 1002], "8000184677460298": 310, "7927845601690923": 310, "coefs_cf": 310, "target_encod": 310, "x_train_no_cf_encod": 310, "x_test_no_cf_encod": 310, "model_no_cf": 310, "858486250088675": 310, "6338211367110835": 310, "coefs_no_cf": 310, "plot_target_encoder_cross_v": [310, 311], "580": [311, 348, 833, 834], "auto_examples_preprocess": 311, "announc": [313, 314, 315, 316, 317, 318, 319, 380], "latest": [313, 314, 315, 316, 317, 318, 319, 374, 376, 380, 382, 384, 997, 999, 1036], "upgrad": [313, 314, 315, 316, 317, 318, 319, 393, 1002, 1022, 1027, 1030], "conda": [313, 314, 315, 316, 317, 318, 319, 363, 376, 377, 379, 380, 382, 384, 393, 396, 997], "forg": [313, 314, 315, 316, 317, 318, 319, 363, 377, 379, 380, 384, 393], "plot_roc_curv": [313, 1032, 1034], "plot_precision_recall_curv": [313, 1032, 1034, 1035], "stackingclassifi": [313, 358, 390, 410, 562, 1032, 1033, 1034, 1035, 1036, 1037], "_class": [313, 981], "9473684210526315": 313, "radiusneighborstransform": [313, 837, 984, 1032, 1034, 1036, 1037], "sklearn_cache_": 313, "isomap__n_neighbor": 313, "nan_euclidean_dist": [313, 755, 971, 1032], "ccp_alpha": [313, 352, 551, 552, 553, 554, 558, 559, 901, 902, 903, 904, 997, 1032], "tree_": [313, 352, 356, 838, 901, 902, 903, 904], "node_count": [313, 352, 356, 901, 902, 903, 904], "check_estim": [313, 378, 390, 925, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037], "pytest": [313, 363, 374, 376, 378, 379, 393, 396, 924, 925, 1032, 1035], "estimator_check": [313, 378, 390, 1029, 1030, 1032, 1033, 1036, 1037, 1038], "parametrize_with_check": [313, 378, 924, 1032, 1033], "test_sklearn_compatible_estim": [313, 925], "ovo": [313, 781, 821, 895, 898, 981, 982, 996], "decision_function_shap": [313, 343, 895, 898, 996, 1027, 1028, 1031, 1032], "9965333333333333": 313, "plot_release_highlights_0_22_0": [313, 320], "await": 314, "lam": [314, 315, 1033], "35776189065725794": 314, "42425183539869415": 314, "openmp": [314, 374, 379, 388, 390, 403, 410, 949, 1033, 1035, 1038], "6560362663398502": 314, "10k": [314, 441], "monotoinc": 314, "gbdt_cst": 314, "999791942438998": 314, "706": [314, 320], "plot_release_highlights_0_23_0": [314, 320], "art": [315, 382, 643, 686, 1001, 1005], "footprint": [315, 318, 362, 364, 403, 408, 549, 550, 557, 1024, 1027, 1028, 1033, 1034, 1037], "yarowski": [315, 890, 994], "selftrainingclassifi": [315, 325, 326, 327, 994, 1034], "random_unlabeled_point": [315, 888, 889, 890], "self_training_model": [315, 890], "selftrainingclassifierselftrainingclassifi": 315, "linear_baselin": 315, "7137": 315, "decisiontreeregressordecisiontreeregressor": 315, "effort": [315, 376, 382, 1001, 1005, 1033, 1035], "951": [315, 320], "plot_release_highlights_0_24_0": [315, 320], "l2_regular": [316, 410, 555, 556], "max_bin": [316, 317, 410, 555, 556], "quantileregressor": [316, 977, 981, 1035, 1036, 1037], "min_": [316, 403, 410, 863, 977, 991, 995, 996, 997], "sum_i": [316, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 972, 973, 977, 979, 981, 986], "pb_q": [316, 977], "_1": [316, 338, 405, 408, 411, 525, 531, 532, 534, 539, 540, 541, 640, 641, 646, 647, 648, 649, 650, 654, 655, 656, 657, 675, 676, 677, 678, 759, 977, 979, 981, 996], "get_feature_nam": [316, 1030, 1031, 1033, 1034, 1035], "pet": [316, 781, 981], "dog": [316, 317, 319, 576, 776, 874, 991], "fish": 316, "pet_cat": 316, "pet_dog": 316, "pet_fish": 316, "plot_": [316, 393], "plot_release_highlights_1_0_0": [316, 320], "x_1d": 317, "hist_quantil": 317, "log_reg_input_featur": 317, "gather": [317, 319, 384, 391, 402, 403, 991, 1005], "min_frequ": [317, 319, 866, 867, 991, 1036, 1038], "rabbit": [317, 319, 991], "snake": [317, 319, 576, 874, 991], "infrequent_categories_": [317, 319, 866, 867, 874, 991], "x0_cat": [317, 991], "x0_rabbit": [317, 991], "x0_infrequent_sklearn": [317, 991], "refactor": [317, 1022, 1024, 1025, 1026, 1032, 1035, 1036, 1037], "radius_neighbor": [317, 841, 843, 844, 845, 1026, 1031, 1032, 1034, 1035, 1036, 1037], "pairwise_distances_argmin_min": [317, 772, 1025, 1030, 1036, 1037, 1038], "radiusneighborsclassifi": [317, 835, 836, 841, 844, 982, 984, 1022, 1024, 1028, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "radiusneighborsregressor": [317, 835, 836, 841, 843, 984, 1022, 1024, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "trustworthi": [317, 1030, 1031, 1036, 1037, 1038], "labelpropag": [317, 324, 889, 890, 982, 994, 1023, 1028, 1029, 1032, 1033, 1034, 1036, 1037, 1038], "labelspread": [317, 322, 323, 324, 326, 327, 888, 890, 982, 994, 1023, 1028, 1029, 1032, 1033, 1036, 1037, 1038], "blog": [317, 362, 376, 382, 384, 391, 1033], "cython": [317, 362, 363, 365, 374, 376, 379, 385, 388, 393, 396, 399, 403, 410, 502, 991, 992, 995, 996, 1001, 1002, 1022, 1025, 1026, 1028, 1034, 1037, 1038], "readili": [317, 408, 997, 1005], "true_w": 317, "true_h": 317, "x_reconstruct": [317, 476, 477, 478, 577], "00364": 317, "divis": [317, 403, 411, 584, 585, 588, 706, 707, 722, 723, 731, 739, 776, 777, 780, 981, 1015, 1026, 1030, 1031, 1034, 1038], "bisect_km": 317, "plot_release_highlights_1_1_0": [317, 320], "video": [318, 365, 370, 379, 497, 982, 1005, 1008], "sepal_col": 318, "petal_col": 318, "x_out": [318, 857, 866, 867], "114": [318, 1022], "052506": 318, "592373": 318, "189830": 318, "973554": 318, "416010": 318, "630382": 318, "107": [318, 403, 888, 982, 1024], "765012": 318, "362176": 318, "021849": 318, "788808": 318, "hist_no_interact": 318, "v1": [318, 370, 393, 749, 788, 789, 828, 829, 830, 832, 1034, 1037, 1038], "liac": [318, 370, 376, 490, 1037, 1038], "arff": [318, 376, 490, 1034, 1037, 1038], "ticket": [318, 376], "cabin": 318, "boat": 318, "allen": [318, 1025, 1027, 1029, 1032], "elisabeth": 318, "walton": 318, "24160": 318, "3375": 318, "b5": 318, "loui": [318, 1027, 1028, 1032, 1034, 1036, 1038], "mo": [318, 1033], "allison": 318, "hudson": 318, "9167": 318, "113781": 318, "151": [318, 382, 410, 993], "5500": [318, 682, 978], "c22": 318, "c26": 318, "montreal": 318, "pq": 318, "chestervil": 318, "ON": 318, "helen": 318, "lorain": 318, "joshua": [318, 371, 1024, 1025, 1027, 1028, 1034, 1037, 1038], "creighton": 318, "bessi": 318, "waldo": 318, "compliant": [318, 376], "cupi": [318, 399], "gpu": [318, 399, 985, 1002, 1016], "changelog": [318, 380, 390], "763": [318, 320], "plot_release_highlights_1_2_0": [318, 320], "throughout": [319, 358, 390, 621, 791, 850, 851, 1007, 1025, 1030], "codebas": [319, 358, 376, 377, 378, 411, 1022, 1028], "ongo": [319, 377, 391], "incorpor": [319, 376, 404, 410, 980, 1001, 1005], "contrib": [319, 376, 378, 384, 388, 390, 403, 1001, 1002, 1038], "adpot": 319, "true_label": [319, 322, 323], "non_noisy_label": 319, "9751818034688537": 319, "encodings_": [319, 874, 991], "validation_curv": [319, 342, 812, 976, 1029, 1030, 1031, 1034, 1038], "geomspac": 319, "make_low_rank_matrix": [319, 518], "46858513287221665": 319, "037": [319, 320, 703], "plot_release_highlights_1_3_0": [319, 320], "auto_examples_release_highlight": 320, "semisupervis": [322, 390], "clai": [322, 323, 324, 327, 1022], "woolam": [322, 323, 324, 327, 1022], "n_total_sampl": [322, 323], "n_labeled_point": [322, 323], "unlabeled_set": 322, "everyth": [322, 358, 380, 382, 388, 458, 936, 1001, 1002, 1022], "lp_model": [322, 323], "predicted_label": [322, 323], "transduction_": [322, 323, 324, 888, 889, 890], "_plot": 322, "0x7fcadd758410": 322, "pred_entropi": [322, 323], "label_distributions_": [322, 323, 888, 889, 1033], "uncertainty_index": [322, 323], "image_index": [322, 323], "plot_label_propagation_digit": [322, 328], "max_iter": 323, "______________________________________________________________________": 323, "330": 323, "unlabeled_indic": 323, "transduc": 323, "delete_indic": 323, "183": [323, 382, 982, 1022], "nfit": 323, "delete_index": 323, "367": [323, 328, 348, 410, 1022], "plot_label_propagation_digits_active_learn": [323, 328], "label_spread": 324, "labelspreadinglabelspread": 324, "output_label": 324, "output_label_arrai": 324, "outer_numb": 324, "inner_numb": 324, "plot_label_propagation_structur": [324, 328], "breast_canc": 325, "augment": [325, 624, 875, 1005], "oliv": [325, 327, 1030, 1031, 1033, 1034, 1035], "rausch": [325, 327, 1030, 1031, 1034], "rauscho": [325, 327], "ethz": [325, 327], "total_sampl": [325, 530], "base_classifi": [325, 327, 994], "x_valu": 325, "99999": 325, "amount_label": 325, "amount_iter": 325, "self_training_clf": 325, "skfold": 325, "y_test_tru": 325, "labeled_iter_": [325, 890], "return_count": [325, 348, 845], "capsiz": 325, "twinx": 325, "821": [325, 328], "plot_self_training_varying_threshold": [325, 328], "2823": 326, "2117": 326, "441": 326, "758": 326, "1676": 326, "1108": 326, "847": 326, "tfidftransform": [326, 348, 349, 411, 483, 585, 1016, 1029, 1030, 1036, 1038], "sdg_param": 326, "vectorizer_param": 326, "selftrain": 326, "st_pipelin": 326, "ls_pipelin": 326, "eval_and_print_metr": 326, "y_mask": 326, "x_20": 326, "y_20": 326, "plot_semi_supervised_newsgroup": [326, 328], "y_rand": 327, "y_30": 327, "y_50": 327, "ls30": 327, "ls50": 327, "ls100": 327, "st30": 327, "st50": 327, "rbf_svc": [327, 996], "color_map": 327, "plot_semi_supervised_versus_svm_iri": [327, 328], "249": 328, "auto_examples_semi_supervis": 328, "my_kernel": [330, 996], "plot_custom_kernel": [330, 345], "2x2": [331, 403, 747], "136": [331, 345], "plot_iris_svc": [331, 345], "convention": [332, 390, 889], "support_vector_indic": 332, "plot_linearsvc_support_vector": [332, 345], "plot_oneclass": [333, 345], "265": [333, 345, 728, 828, 832, 983], "midpoint": 334, "blink": 334, "act": [334, 347, 376, 389, 409, 410, 707, 722, 723, 731, 776, 777, 780, 868, 872, 978, 981, 984, 996, 1030], "spuriou": [334, 384, 991, 1035, 1036, 1037], "c_rang": 334, "gamma_rang": 334, "midpointnorm": 334, "masked_arrai": [334, 790, 804], "x_2d": 334, "y_2d": 334, "cheat": [334, 985, 995, 1024], "c_2d_rang": 334, "gamma_2d_rang": 334, "bright": 334, "brutal": 334, "552": [334, 345], "plot_rbf_paramet": [334, 345], "046": [335, 345], "plot_separating_hyperplan": [335, 345], "plain": [336, 413, 651, 995], "plot_separating_hyperplane_unbalanc": [336, 345], "n_samples_1": [336, 996], "n_samples_2": [336, 996], "clusters_std": 336, "wclf": 336, "wdisp": 336, "surface_": [336, 625], "blown": 337, "score_mean": 337, "score_std": 337, "plot_svm_anova": [337, 345], "outermost": 338, "hinge_loss": [338, 981, 1026, 1034, 1035], "enrich": 338, "plot_training_data_with_decision_boundari": 338, "cosine_similar": [338, 753, 758, 979, 1027], "untransform": [338, 458, 461, 992], "polynom": 338, "funcion": 338, "bend": 338, "tanh": [338, 770, 850, 851, 979, 996], "hyperbol": [338, 636, 850, 851, 979, 985], "generaliz": [338, 410], "comprehens": [338, 411, 751, 752, 979, 1005, 1030], "plot_svm_kernel": [338, 345], "plot_svm_margin": [339, 345], "fignum": 339, "unreg": 339, "perpendicular": 339, "yy_down": 339, "yy_up": 339, "nusvc": [340, 362, 896, 982, 996, 1022, 1023, 1024, 1027, 1030, 1032, 1033, 1034, 1036], "plot_svm_nonlinear": [340, 345], "svr_rbf": 341, "svr_lin": 341, "svr_poli": 341, "kernel_label": 341, "model_color": 341, "setdiff1d": 341, "313": [341, 345, 1014], "plot_svm_regress": [341, 345], "omega": [342, 406, 975], "dependen": 342, "reparametr": 342, "model_l1": 342, "shuffle_param": 342, "best_c": 342, "idxmax": 342, "train_size_idx": 342, "results_sc": 342, "c_scale": 342, "best_c_scal": 342, "somewhat": [342, 358, 364, 376, 378, 408, 410, 895, 898, 977, 996, 997], "dantzig": 342, "model_l2": 342, "703": [342, 345, 401, 507], "plot_svm_scale_c": [342, 345], "break_ti": [343, 895, 898, 996, 1032], "accent": [343, 582, 583, 585, 1032], "661": [343, 345], "plot_svm_tie_break": [343, 345], "emphasi": [344, 406, 895, 896, 897, 898, 899, 988, 1001], "subtl": [344, 358, 980, 1002], "plot_decision_funct": 344, "sample_weight_last_ten": 344, "sample_weight_const": 344, "clf_no_weight": 344, "clf_weight": 344, "368": [344, 345], "plot_weighted_sampl": [344, 345], "auto_examples_svm": 345, "size_mb": 347, "utf": [347, 349, 411, 481, 497, 576, 582, 583, 585], "load_dataset": 347, "sublinear_tf": [347, 408, 411, 584, 585], "duration_train": 347, "duration_test": 347, "data_train_size_mb": 347, "data_test_size_mb": 347, "2034": [347, 371], "98mb": 347, "1353": 347, "87mb": 347, "238": 347, "698mb": 347, "7831": 347, "563mb": 347, "ridgeclassifi": [347, 362, 666, 667, 669, 977, 982, 1027, 1031, 1035, 1036, 1037], "sparse_cg": [347, 666, 668, 681, 977, 1023, 1029, 1031, 1032, 1036, 1038], "rarer": [347, 349, 411], "deeper": [347, 997], "plot_feature_effect": 347, "average_feature_effect": 347, "top5": 347, "top_indic": 347, "predictive_word": 347, "bar_siz": 347, "y_loc": 347, "keyword": [347, 370, 376, 378, 381, 383, 390, 403, 414, 417, 432, 438, 439, 444, 446, 451, 458, 461, 490, 497, 529, 532, 534, 553, 554, 561, 562, 563, 564, 614, 622, 625, 626, 633, 637, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 682, 686, 691, 692, 693, 694, 695, 696, 767, 771, 772, 773, 774, 783, 784, 796, 812, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 853, 857, 925, 927, 948, 970, 978, 981, 984, 994, 1022, 1026, 1028, 1029, 1030, 1032, 1034, 1036, 1037, 1038], "keith": [347, 1022, 1027], "atheist": 347, "orbit": [347, 348], "caltech": 347, "expectedli": 347, "pollut": [347, 721, 778, 981, 987], "sender": [347, 371], "livesei": 347, "solntz": 347, "wpd": 347, "sgi": 347, "jon": [347, 1029, 1032, 1033, 1035, 1036], "nntp": [347, 371, 1016], "1qlettinn8oi": 347, "cco": 347, "allan": [347, 401, 1034], "schneider": [347, 1035], "me": 347, "instinct": 347, "happi": [347, 388, 391, 808, 809], "listen": 347, "murder": 347, "voluntari": 347, "disregard": [347, 390, 411, 426, 459, 476, 477, 478, 546, 548, 550, 552, 554, 556, 559, 562, 564, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 715, 716, 717, 778, 826, 827, 836, 844, 851, 862, 863, 869, 870, 873, 878, 881, 882, 884, 894, 896, 899, 902, 904, 981, 1030], "beings": 347, "bahavior": 347, "theirs": 347, "mimicri": 347, "imit": 347, "parrot": 347, "polli": 347, "pulchritud": 347, "anim": [347, 411], "kill": 347, "Or": [347, 356, 407, 408, 866, 981, 987, 995], "sigh": 347, "wonder": 347, "bahaviour": 347, "believ": [347, 348, 384, 388, 1005], "primat": 347, "arbitarili": 347, "poster": [347, 375, 376, 1015], "weren": [347, 867, 1031], "slai": 347, "mate": 347, "ritual": 347, "whatnot": 347, "aren": [347, 371, 380, 393, 402, 719, 749, 986, 1032, 1034], "ye": [347, 384, 390, 860, 877, 977], "gorilla": 347, "dolphin": 347, "platypu": 347, "writer": 347, "launch": [347, 348, 393, 1005], "custom_nam": 347, "clf_descr": 347, "rocchio": [347, 840], "397": [347, 371], "000515": 347, "5316": 347, "0577": 347, "000455": 347, "000519": 347, "752": 347, "0417": 347, "0305": 347, "000312": 347, "0168": 347, "000317": 347, "762": 347, "00164": 347, "00109": 347, "748": [347, 382], "00131": 347, "779": 347, "training_tim": 347, "txt": [347, 370, 487, 497], "curs": [347, 348, 403, 409, 983, 984, 1010, 1015], "harm": [347, 378, 411, 786], "672": [347, 350], "plot_document_classification_20newsgroup": [347, 350], "discov": [348, 403, 408, 411, 414, 438, 442, 1007, 1037], "category_s": 348, "true_k": 348, "3387": 348, "evaluations_std": 348, "fit_and_evalu": 348, "evaluation_std": 348, "score_valu": 348, "std_score": [348, 1035], "collis": [348, 349, 411, 576, 583], "x_tfidf": 348, "7929": [348, 1029], "prod": [348, 615], "phenomenon": [348, 991], "cluster_s": 348, "2050": 348, "711": 348, "446": [348, 719, 749, 981], "1689": 348, "638": [348, 382], "3384": 348, "1887": 348, "311": 348, "332": [348, 881], "1688": 348, "454": 348, "973": [348, 407], "628": 348, "351": 348, "redo": 348, "x_lsa": 348, "explained_vari": [348, 981], "271": 348, "416": [348, 732, 981], "320": [348, 371, 970, 995, 1022], "minibatch_kmean": 348, "347": 348, "374": 348, "original_space_centroid": 348, "order_centroid": 348, "ve": [348, 376, 411, 1004, 1005, 1016, 1029], "shuttl": 348, "bibl": 348, "sparciti": 348, "lsa_vector": 348, "x_hashed_lsa": 348, "359": 348, "310": 348, "df_std": 348, "speak": [348, 362, 376, 995], "safer": [348, 358, 374, 403, 407, 1022], "387": [348, 350, 1022], "plot_document_clust": [348, 350], "18000": [349, 371], "raw_data": 349, "data_size_mb": 349, "3803": 349, "245mb": 349, "anyth": [349, 380, 382, 390, 394, 407, 945, 1036], "unicod": [349, 411, 481, 497, 576, 582, 583, 585, 946, 1022, 1030, 1034], "charact": [349, 376, 381, 390, 411, 497, 502, 503, 582, 583, 585, 905, 986, 1016, 1022, 1035, 1037], "underscor": [349, 378, 390, 965, 1013, 1022, 1032, 1035], "tok": [349, 411], "findal": 349, "token_freq": 349, "dict_count_vector": 349, "47928": 349, "vocabulary_": [349, 411, 575, 582, 585, 1016, 1022], "19145": 349, "n_nonzero_column": 349, "43873": 349, "inact": [349, 370, 376], "47668": 349, "input_typ": [349, 411, 458, 576], "408": 349, "y_po": 349, "downsid": 349, "featureheash": 349, "implicitli": [349, 385, 410, 591, 626, 627, 872, 971, 973, 988, 991, 996], "token_pattern": [349, 411, 582, 583, 585], "47885": 349, "443": 349, "plot_hashing_vs_dict_vector": [349, 350], "605": 350, "auto_examples_text": 350, "parameter": [352, 413, 608, 609, 616, 617, 788, 789, 977, 978, 986, 991, 997], "weakest": [352, 997], "cost_complexity_pruning_path": [352, 901, 902, 903, 904], "drawstyl": [352, 694], "3272984419327777": 352, "plot_cost_complexity_prun": [352, 357], "ryb": 353, "pairidx": 353, "borderpad": 353, "handletextpad": 353, "plot_iris_dtc": [353, 357], "plot_tre": [353, 356, 997, 1031, 1033, 1034, 1035, 1037, 1038], "plot_tree_regress": [354, 357], "regr_3": 355, "y_3": 355, "plot_tree_regression_multioutput": [355, 357], "decision_path": [356, 551, 552, 558, 559, 560, 901, 902, 903, 904, 1028, 1033], "compute_node_depth": 356, "children_left": 356, "children_right": 356, "n_node_sampl": 356, "weighted_n_node_sampl": 356, "travers": [356, 984, 988], "n_node": [356, 435, 439, 457, 551, 552, 558, 559, 560, 901, 902, 903, 904, 935], "node_depth": 356, "is_leav": 356, "pop": [356, 388, 908, 1011, 1030], "visit": [356, 376, 988], "node_id": [356, 905, 907], "is_split_nod": 356, "children": [356, 403, 410, 435, 439, 457, 560, 1026], "800000011920929": 356, "950000047683716": 356, "n_output": [356, 390, 410, 420, 426, 427, 431, 436, 439, 459, 463, 476, 477, 478, 526, 528, 530, 531, 533, 536, 537, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 576, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 622, 624, 627, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 664, 666, 667, 668, 669, 670, 672, 673, 715, 716, 721, 738, 739, 741, 743, 744, 746, 747, 778, 781, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 840, 842, 843, 844, 849, 850, 851, 852, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 885, 886, 888, 889, 893, 894, 895, 896, 898, 899, 901, 902, 903, 904, 919, 952, 981, 982, 997, 1029, 1032], "node_index": 356, "node_ind": 356, "leaf_id": 356, "sample_id": [356, 371, 491], "threshold_sign": 356, "inequ": [356, 390, 403, 437, 441, 453, 693, 978, 979, 984], "common_nod": 356, "common_node_id": 356, "051": [356, 357, 466], "plot_unveil_tree_structur": [356, 357], "auto_examples_tre": 357, "x_test_transform": [358, 407], "standard_norm": 358, "unfair": 358, "x_select": 358, "gbc": 358, "x_train_select": 358, "x_test_select": 358, "tip": [358, 361, 365, 376, 379, 382, 398, 411, 528, 535, 639, 686, 977, 1003, 1017, 1018, 1020, 1025], "glossari": [358, 365, 376, 378, 382, 402, 414, 415, 431, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 461, 463, 466, 468, 482, 485, 486, 489, 491, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 578, 588, 596, 601, 602, 604, 605, 621, 626, 628, 633, 634, 635, 636, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 686, 687, 688, 689, 695, 767, 771, 774, 784, 788, 789, 790, 792, 793, 794, 795, 796, 802, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 835, 836, 838, 839, 841, 842, 843, 844, 846, 847, 849, 850, 851, 852, 855, 858, 870, 874, 882, 885, 886, 888, 889, 893, 894, 895, 898, 901, 902, 903, 904, 929, 930, 952, 955, 970, 971, 977, 1007, 1030], "mtrand": 358, "_rand": 358, "85418642": 358, "79084103": 358, "13077794": 358, "11915045": 358, "56479934": 358, "70814003": 358, "25291366": 358, "55212743": 358, "18197458": 358, "37845099": 358, "mutat": [358, 1030], "debug": [358, 363, 377, 379, 382, 390, 392, 621, 892, 947, 1001, 1016, 1030, 1034], "govern": [358, 362, 365, 376, 390, 999, 1005], "implic": [358, 376], "rf_123": 358, "rf_inst": 358, "didn": [358, 390, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "strict": [358, 374, 390, 408, 497, 529, 582, 583, 585, 977, 1022, 1031, 1034], "pervas": [358, 376], "unlucki": 358, "lucki": 358, "fairer": 358, "temptat": [358, 376], "throughput": [361, 1001, 1018, 1025], "switch": [361, 672, 698, 711, 730, 748, 750, 786, 833, 834, 929, 930, 981, 984, 1018, 1022], "offlin": [362, 376], "bottleneck": [362, 382, 410, 442, 850, 851], "hurt": [362, 528, 1030], "toolkit": [362, 1001, 1005], "branch": [362, 374, 376, 379, 380, 403, 410, 436, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 901, 902, 903, 904, 906, 984, 988, 997], "sklearn_assume_finit": 362, "assume_finit": [362, 363, 462, 891], "assert_all_finit": [362, 385, 462], "nm": 362, "csc": [362, 388, 390, 411, 545, 547, 548, 664, 686, 860, 862, 868, 873, 876, 878, 884, 909, 913, 914, 944, 956, 957, 959, 960, 961, 962, 984, 991, 1030, 1031, 1033, 1036], "32bit": [362, 946], "speedup": [362, 408, 410, 644, 648, 651, 1022, 1023, 1024, 1025, 1037], "multithread": [362, 403, 893, 894, 895, 896, 897, 898, 899], "bla": [362, 363, 374, 377, 382, 1022, 1030, 1031, 1033, 1034], "sparsity_ratio": 362, "gbt": 362, "speedi": 362, "packet": 362, "reuter": [362, 371], "carefulli": [362, 408, 996], "spawn": [362, 388, 790, 804, 814, 815, 816, 1033], "gil": [362, 363, 377, 949, 1025, 1030, 1031, 1034, 1035], "ought": 362, "lapack": [362, 363, 374, 526, 529, 535, 682, 1037], "dgemm": 362, "show_vers": [362, 374, 376, 384, 393, 1030], "atla": [362, 374], "rebuild": [362, 397, 411, 436], "openbla": [362, 363, 374, 388, 949, 1035], "mkl": [362, 363, 374, 388, 949, 1022], "veclib": [362, 388], "osx": 362, "nouri": [362, 1023, 1025], "instruct": [362, 376, 377, 378, 379, 380, 381, 384, 388, 389, 497, 582, 583, 585, 1007, 1016, 1022], "ubuntu": [362, 374, 382, 384], "1gb": 362, "mib": [362, 462, 891], "working_memori": [362, 363, 462, 774, 891, 1030], "adher": [362, 378, 390, 924, 925, 1022, 1023], "pairwise_distances_chunk": [362, 771, 1030, 1033], "facilit": [362, 390, 397, 1001, 1002, 1028, 1031], "moment": [362, 408, 413, 434, 609, 617, 850, 851, 945, 985, 986], "000024": 362, "027400": 362, "mileag": 362, "deploi": [362, 392, 397, 1002, 1005], "upstream": [362, 376, 380, 384, 388, 991, 1031], "lighter": [362, 694, 696, 775, 782, 1038], "threadpoolctl": [363, 374, 393, 396], "subsect": [363, 376, 402], "worker": [363, 390, 411, 947, 948, 949, 1037], "14228": 363, "loki": [363, 949, 981, 1030, 1033], "duplic": [363, 375, 376, 390, 403, 414, 438, 442, 443, 509, 629, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 817, 864, 967, 984, 1022, 1025, 1034, 1036, 1038], "memmap": [363, 371, 390, 408, 502, 528, 1030], "1mb": [363, 1027], "parallel_backend": [363, 414, 431, 438, 440, 442, 444, 446, 451, 452, 455, 458, 461, 466, 525, 529, 530, 531, 533, 536, 537, 539, 540, 542, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 588, 596, 604, 626, 628, 633, 641, 645, 647, 649, 651, 652, 653, 655, 657, 659, 660, 662, 670, 673, 682, 683, 684, 685, 686, 687, 688, 767, 771, 774, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 835, 836, 839, 841, 843, 844, 846, 847, 852, 855, 888, 889, 1030], "exclus": [363, 388, 390, 408, 410, 621, 622, 624, 970, 977, 981, 982, 1005, 1029, 1033], "omp_num_thread": 363, "my_script": 363, "algebra": [363, 374, 379, 388, 408, 411, 456, 859, 991], "bli": [363, 374, 388], "mkl_num_thread": 363, "openblas_num_thread": 363, "blis_num_thread": 363, "bash": [363, 384], "zsh": 363, "termin": [363, 381, 382, 384, 393, 403, 442, 455, 547, 548, 552, 553, 554, 557, 559, 660, 661, 662, 670, 672, 850, 851, 902, 904, 987, 997], "prompt": [363, 374, 376, 393, 396, 411, 1007], "pypi": [363, 374, 376, 378, 380, 382, 393, 997, 1030, 1034, 1036, 1037], "channel": [363, 371, 374, 388, 393, 411, 487, 488, 577, 578, 580, 581], "subscript": [363, 1035], "max_thread": [363, 377], "n_cpu": [363, 390], "lib": [363, 374, 393, 1001], "_num_thread": 363, "singleton": [363, 798, 916, 1035, 1038], "aforement": [363, 982], "global_random_se": 363, "fixtur": [363, 376], "build_numb": 363, "disrupt": 363, "config": [363, 376, 377, 384, 620, 1030], "contributor": [363, 379, 380, 381, 384, 388, 390, 981, 999, 1002, 1023, 1024, 1025], "encount": [363, 374, 397, 403, 410, 411, 490, 555, 556, 575, 828, 829, 830, 832, 866, 956, 991, 995, 1001, 1004, 1005, 1016, 1030, 1033], "watch": 363, "annoi": 363, "test_your_test_nam": 363, "skip": [363, 376, 378, 385, 399, 411, 462, 562, 640, 641, 646, 654, 655, 656, 665, 675, 891, 1016, 1026, 1029, 1032, 1034, 1036, 1038], "global_dtyp": 363, "boundscheck": [363, 377], "segfault": [363, 377, 1022, 1030, 1035], "posix": [363, 388], "pairwisedistancesreduct": 363, "adequ": [363, 382, 561, 1007, 1035], "drive": [364, 408, 409, 543, 995, 1005, 1016], "passiveaggressiveregressor": [364, 977, 1023, 1026, 1029, 1030, 1033, 1035], "maxabsscal": [364, 857, 878, 971, 991, 1027, 1030, 1031, 1032, 1033, 1038], "routin": [364, 370, 373, 376, 377, 378, 379, 384, 388, 390, 412, 666, 668, 681, 895, 896, 897, 898, 899, 978, 984, 991, 992, 995, 1001, 1005, 1022, 1036, 1037, 1038], "passiveaggress": [364, 411, 660], "fledg": [364, 411], "naivebay": 364, "dramat": 364, "welcom": [365, 375, 376, 384, 391, 1002, 1004], "roadmap": [365, 999], "persist": [365, 384, 388, 408, 440, 604, 605, 849, 986, 1001, 1018, 1028, 1031], "miscellan": [365, 369, 370, 1028, 1029, 1036, 1037], "craft": [365, 379], "curat": [365, 376, 379, 380], "fetcher": [369, 1027, 1029, 1038], "linnerrud": [369, 1018], "covertyp": [369, 485, 1018], "rcv1": [369, 491, 1018, 1027], "svmlight": [369, 481, 502, 503, 1018, 1022, 1023, 1029, 1031], "jpeg": [370, 371, 487, 488], "publish": [370, 371, 378, 380, 384, 390, 993, 1002, 1034], "creativ": 370, "spare": [370, 668, 669], "pyplpt": 370, "load_svmlight_fil": [370, 1022, 1023, 1028, 1029, 1030, 1037], "test_dataset": 370, "everybodi": [370, 376], "upload": [370, 374, 380, 388, 665], "mice": [370, 621, 971], "brain": 370, "miceprotein": 370, "1080": [370, 403], "sc": [370, 403], "clara": [370, 1034], "higuera": 370, "katheleen": 370, "gardin": 370, "krzysztof": 370, "cio": 370, "protein": 370, "cite": [370, 403, 999], "kj": [370, 983], "critic": [370, 376, 389, 397, 410, 686, 978, 981, 989, 996, 1005, 1033], "syndrom": 370, "plo": [370, 601, 602], "ONE": [370, 601, 602], "e0129126": 370, "40966": 370, "upload_d": 370, "08t16": 370, "17928620": 370, "file_id": 370, "default_target_attribut": 370, "row_id_attribut": 370, "mouseid": 370, "ignore_attribut": 370, "genotyp": 370, "cc18": 370, "study_135": 370, "study_98": 370, "study_99": 370, "md5_checksum": 370, "3c479a6885bfa0438971388283a1ce32": 370, "websit": [370, 371, 373, 376, 391, 985, 995, 1005, 1016, 1023, 1024, 1025], "4550": 370, "17t14": 370, "1804243": 370, "pone": 370, "0129126": 370, "openml100": 370, "study_14": 370, "study_34": 370, "earliest": [370, 978], "iris_61": 370, "iris_969": 370, "iris_version_3": 370, "vanschoren": [370, 1034], "rijn": [370, 1030], "bischl": 370, "torgo": 370, "acm": [370, 371, 403, 414, 438, 444, 451, 454, 505, 557, 670, 719, 749, 839, 981, 984, 987, 993], "sigkdd": [370, 371, 505, 670, 874, 991, 993], "newslett": 370, "legaci": [370, 380, 390, 949, 1022, 1029, 1034], "my": [370, 376, 381, 384, 490], "columnar": [370, 458, 1001], "usabl": [370, 376, 378, 390, 397, 411, 790, 949, 1022, 1029, 1036, 1037], "io": [370, 373, 374, 376, 380, 382, 384, 390, 397, 686, 1001, 1020], "json": [370, 376, 393], "sql": 370, "smoothli": 370, "manipul": [370, 399, 501, 949, 1001, 1028], "mat": [370, 411], "load_fil": [370, 371, 1016, 1024, 1036], "audio": [370, 497], "wish": [370, 376, 383, 385, 393, 403, 644, 645, 648, 649, 650, 658, 659, 930, 1008, 1016, 1029], "imageio": 370, "wavfil": 370, "wav": 370, "hdf5": 370, "h5py": 370, "pytabl": 370, "april": [371, 658, 679, 680, 1026, 1034], "AT": [371, 489], "laboratori": [371, 1001], "cambridg": [371, 408, 584, 828, 832, 977, 979, 983], "facial": 371, "glass": 371, "upright": 371, "frontal": 371, "movement": 371, "credit": [371, 384, 410, 977, 1005], "18846": [371, 482, 483], "20news_hom": 371, "newsgroups_train": 371, "11314": 371, "1073": 371, "20new": [371, 1016], "34118": 371, "01327": 371, "newsgroups_test": 371, "vectors_test": 371, "class_prior": [371, 828, 829, 830, 832, 1023, 1026], "fit_prior": [371, 828, 829, 830, 832], "88213": 371, "suspici": 371, "show_top10": 371, "top10": 371, "affili": 371, "abund": 371, "clue": [371, 384, 978], "bare": [371, 978, 1016], "quotat": 371, "77310": 371, "76995": 371, "cleveland": 371, "indian": 371, "leagu": 371, "team": [371, 379, 388, 390, 999, 1001, 1005, 1022], "ohio": 371, "spark": [371, 1002], "death": 371, "floyd": [371, 682, 978], "reckon": 371, "coloni": 371, "paul": [371, 1025, 1028, 1029, 1030, 1031, 1035, 1036], "dolan": 371, "nicknam": 371, "tribe": 371, "theme": [371, 1022], "mlb": [371, 864], "inappropri": [371, 407, 413, 703, 811], "nlp": [371, 408, 411, 828, 832, 979, 1005], "cultur": 371, "inflammatori": 371, "famou": [371, 373, 410, 996], "internet": [371, 381, 991, 1014], "offici": [371, 378, 390, 393, 487, 491, 1001, 1016, 1030, 1031, 1034], "verif": [371, 981, 1005], "identif": [371, 376, 491, 970, 1008], "viola": [371, 1030], "opencv": 371, "detector": [371, 390, 839], "5749": [371, 487, 488], "13233": [371, 487, 488], "5828": [371, 487, 488], "200m": 371, "lfw_home": 371, "rectangular": [371, 390, 930, 1002], "1140": 371, "fetch_lfw_pair": [371, 1027, 1037], "lfw_pairs_train": 371, "subdivid": [371, 413], "10_fold": [371, 487], "gari": [371, 1029], "huang": [371, 652, 1028, 1033], "manu": 371, "ramesh": [371, 1005, 1025, 1028, 1032], "tamara": 371, "berg": [371, 1023, 1024, 1034], "erik": [371, 1005, 1025], "miller": [371, 1030, 1031, 1035], "massachusett": 371, "amherst": 371, "30m": 371, "seven": [371, 974], "homepag": [371, 524, 997], "581012": [371, 485], "newswir": 371, "ltd": [371, 1005], "804414": [371, 491], "47236": [371, 491], "fetch_rcv1": [371, 1027, 1031], "v2": [371, 491, 658, 679, 680, 977], "chronolog": [371, 491], "23149": [371, 491, 1036], "781265": [371, 491], "lyrl2004": [371, 491], "2286": 371, "810596": 371, "2287": 371, "2288": 371, "uint32": [371, 491], "gmil": 371, "381327": 371, "ccat": 371, "e11": 371, "ecat": 371, "m11": 371, "656": 371, "lewi": [371, 1029, 1033], "yang": [371, 403, 408, 528, 633, 1028, 1029, 1032, 1034, 1035, 1036, 1038], "rose": 371, "361": [371, 410, 549, 550], "cup": [371, 981], "tcpdump": 371, "darpa": 371, "intrus": 371, "mit": [371, 382, 403, 413, 604, 605, 608, 613, 616, 637, 660, 661, 670, 830, 974], "lincoln": 371, "unrealist": 371, "sa": [371, 486], "logged_in": 371, "smtp": [371, 486], "resp": [371, 410, 591, 788, 789, 995, 1030], "4898431": [371, 486], "976158": 371, "699691": 371, "619052": 371, "95373": 371, "kddcup99": [371, 486], "richard": [371, 412, 652, 1023, 1032, 1034, 1036, 1037], "lippmann": 371, "hain": 371, "jonathan": [371, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1038], "korba": 371, "da": [371, 1037, 1038], "yamanishi": 371, "takeuchi": 371, "miln": 371, "discount": [371, 403, 719, 749, 1029, 1032], "sixth": 371, "press": [371, 403, 408, 413, 414, 438, 584, 604, 605, 608, 613, 616, 637, 828, 832, 974, 977, 979, 983], "household": 371, "statlib": 371, "dcc": 371, "ltorgo": 371, "cal_hous": 371, "1990": 371, "censu": 371, "bureau": 371, "resid": 371, "vacat": 371, "pace": 371, "kellei": [371, 1024, 1025], "ronald": [371, 985, 1025, 1035], "barri": [371, 1030], "autoregress": 371, "297": 371, "hyperspher": [372, 1001], "interleav": [372, 516], "simplif": [372, 375, 381, 1022, 1028], "realiti": 372, "make_sparse_uncorrel": 372, "make_friedman1": [372, 410, 533, 537, 587, 588, 626], "make_friedman2": [372, 605, 607, 608, 609, 610, 611, 615, 618, 619], "reciproc": [372, 981], "make_friedman3": 372, "7826": 373, "4194": 373, "9490": 373, "9565": 373, "fisher": [373, 410, 498, 630, 1001], "michael": [373, 401, 403, 444, 622, 631, 685, 788, 971, 977, 1005, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1036, 1037], "marshal": 373, "arc": [373, 410], "1988": 373, "sir": 373, "referenc": [373, 376, 378, 384, 390, 885, 886, 984, 1029, 1035], "duda": [373, 975], "hart": [373, 975, 1030], "taxonom": 373, "annual": [373, 403, 719, 749, 890, 981, 994], "eugen": [373, 1023, 1028], "179": [373, 382, 410, 1022], "1936": 373, "john": [373, 411, 530, 702, 728, 762, 868, 895, 896, 898, 899, 971, 977, 981, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1035, 1037, 1038], "wilei": [373, 971], "1950": [373, 981], "1973": [373, 401], "scene": [373, 984, 986, 1035], "q327": 373, "d83": 373, "son": [373, 971], "isbn": [373, 403, 977], "22361": 373, "218": [373, 465, 709, 779], "dasarathi": 373, "1980": 373, "nose": [373, 1025, 1029], "pami": [373, 403, 718], "gate": [373, 1035], "1972": 373, "mlc": 373, "cheeseman": 373, "autoclass": 373, "conceptu": [373, 410, 979], "alpaydin": 373, "boun": 373, "nist": [373, 981], "bitmap": 373, "preprint": 373, "32x32": 373, "nonoverlap": 373, "4x4": [373, 408, 411], "garri": 373, "candela": 373, "dimmick": 373, "geist": 373, "grother": 373, "janet": 373, "handprint": 373, "nistir": 373, "5469": 373, "kaynak": 373, "msc": 373, "graduat": 373, "bogazici": 373, "cascad": 373, "kybernetika": 373, "ken": [373, 1016, 1024, 1031], "tang": [373, 1032, 1033, 1034], "ponnuthurai": 373, "suganthan": 373, "yao": [373, 1028, 1029, 1030, 1031, 1038], "kai": [373, 557, 987, 1029], "dimensionalityreduct": 373, "nanyang": 373, "technolog": 373, "claudio": [373, 1036, 1037], "gentil": [373, 1034], "linnerud": [373, 499], "men": 373, "club": 373, "waist": 373, "puls": 373, "chin": [373, 1026], "situp": 373, "tenenhau": 373, "pratiqu": 373, "alcalin": 373, "magnesium": 373, "phenol": 373, "nonflavanoid": 373, "proanthocyanin": 373, "od280": 373, "od315": 373, "class_2": [373, 504], "1680": 373, "chemic": 373, "grown": [373, 410, 547, 548, 549, 550, 551, 552, 558, 559, 901, 902, 903, 904, 997], "itali": 373, "cultiv": 373, "thirteen": 373, "constitu": 373, "forina": 373, "parvu": 373, "pharmaceut": 373, "food": 373, "brigata": 373, "salerno": 373, "16147": 373, "genoa": 373, "lichman": 373, "irvin": 373, "aeberhard": 373, "cooman": 373, "vel": 373, "rep": 373, "dept": 373, "cook": [373, 1022, 1028], "north": [373, 403], "queensland": 373, "submit": [373, 374, 375, 378, 379, 380, 381, 384, 390, 391], "technometr": [373, 405, 463, 468, 987], "rda": 373, "1nn": 373, "THE": 373, "OF": 373, "chemometr": 373, "272": [374, 393, 395, 396], "wheel": [374, 376, 380, 393, 1032, 1034, 1036], "quickest": 374, "registri": [374, 393, 1001], "uninstal": 374, "git": [374, 378, 380, 382, 384, 1004, 1022, 1038], "fork": [374, 376, 380, 384, 388], "miniforge3": [374, 384], "miniforg": [374, 384, 393], "env": [374, 384, 393], "newli": [374, 389, 410, 457, 988, 1028, 1029, 1037], "virtualenv": [374, 376, 393], "python3": [374, 393], "venv": [374, 393], "pep517": [374, 376], "dev0": [374, 380], "pyx": [374, 376, 377, 382, 384], "pxd": [374, 376], "sklearn_fail_no_openmp": 374, "checkout": [374, 376, 380, 384], "cumbersom": 374, "reinstal": [374, 393], "setuptool": 374, "unix": [374, 411], "makefil": 374, "studio": [374, 1005], "vs_buildtool": 374, "desktop": 374, "screenshot": 374, "secondli": [374, 388, 403, 410, 651, 977, 1016], "architectur": [374, 378, 384, 388, 393, 397, 462, 891, 985, 999, 1005, 1022], "cmd": 374, "powershel": 374, "struct": [374, 390, 1025], "calcsiz": 374, "distutils_use_sdk": 374, "x86": 374, "buildtool": 374, "vc": 374, "vcvarsal": 374, "bat": 374, "x64": 374, "clang": [374, 377], "confusingli": 374, "usr": 374, "gcc": [374, 377, 382, 388], "libomp": [374, 1034], "silicon": 374, "m1": 374, "januari": [374, 376, 1022, 1023, 1032, 1034, 1037], "arm64": [374, 379], "llvm": 374, "toolchain": 374, "xcode": 374, "conflict": [374, 376, 380, 384, 393, 1029, 1030], "condarc": 374, "channel_prior": 374, "echo": [374, 380], "cxx": 374, "cflag": 374, "cxxflag": 374, "ldflag": 374, "subfold": [374, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 1035], "fopenmp": [374, 377], "export": [374, 377, 378, 393, 397, 905, 906, 997, 1001, 1004, 1031], "cppflag": 374, "xpreprocessor": 374, "wl": 374, "rpath": 374, "lomp": 374, "sudo": [374, 393], "apt": [374, 384, 393], "pip3": [374, 393], "pythonx": 374, "site": [374, 376, 379, 384, 393, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 1005, 1030], "precompil": 374, "arm": [374, 376, 384, 970], "cython3": 374, "cento": 374, "yum": 374, "devel": 374, "gnu": 374, "port": [374, 393, 1032], "pkg": 374, "build_ext": [374, 382], "build_clib": 374, "linker": [374, 377], "sysconfig": 374, "counterpart": [374, 970, 978, 996, 1011], "get_config_var": 374, "sklearn_build_parallel": 374, "tracker": [375, 379, 384, 388, 391, 393, 397, 999, 1002], "prioriti": [375, 626, 821, 822, 1002, 1025], "guidelin": [375, 379, 381, 382, 384, 402, 403, 410], "reformul": 375, "xyz": 375, "someestim": 375, "glanc": 375, "relabel": [375, 808, 809, 890], "stall": [375, 379], "sprint": [375, 376, 999, 1022], "unfinish": [375, 376], "supersed": [375, 1027], "overflow": [375, 384, 388, 1025, 1029, 1030, 1031, 1032, 1033, 1035], "submitt": 375, "strive": [375, 391, 1005], "expertis": [375, 376, 388], "unclear": [375, 376, 495], "pleasant": [375, 1005], "chime": 375, "permiss": [375, 380, 391, 393, 1005, 1037], "matthew": [375, 381, 530, 736, 1022, 1025, 1029, 1031, 1035, 1036], "rocklin": [375, 381], "acknowledg": [375, 603], "struggl": [375, 391, 403], "everyon": [376, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "underrepres": 376, "merit": [376, 380, 391], "teach": 376, "priceless": 376, "abid": 376, "codeofconduct": 376, "hesit": 376, "typo": [376, 391, 394, 1022], "send": [376, 403, 415, 527], "valuabl": [376, 971, 1005], "burden": [376, 865, 1002], "slep": [376, 390, 999], "templat": [376, 380, 381, 390, 391, 551, 552, 557, 558, 559, 560, 1001], "ecosystem": [376, 971, 1000, 1005], "numpydoc": [376, 390, 393, 396], "compli": [376, 390, 924, 1002], "fulfil": [376, 403, 410, 790, 793, 794, 804, 853, 857, 977], "anyon": [376, 391, 1005], "gist": [376, 384, 1004], "repo": [376, 380, 1002], "feasibl": [376, 862, 863, 873], "traceback": [376, 381, 384, 388, 462, 1004], "doubt": [376, 377, 380, 977, 987, 1001], "companion": [376, 991], "transcript": 376, "inclus": [376, 378, 384, 444, 450, 747, 779, 981, 982, 1022, 1036], "yourlogin": 376, "ruff": [376, 393, 396], "mypi": [376, 380, 393, 396, 1033], "synchron": [376, 411], "my_featur": 376, "commit": [376, 380, 384, 1004, 1022, 1023, 1024, 1025], "modified_fil": 376, "committ": [376, 1022], "modif": [376, 406, 410, 411, 440, 994], "approv": [376, 391, 410], "mrg": [376, 384], "incomplet": [376, 393, 403, 699, 786, 971, 978, 1016, 1026, 1028], "wip": [376, 384, 393], "matur": [376, 1001, 1002], "broad": [376, 390, 1001], "collabor": 376, "_logist": 376, "doctest": [376, 390, 1008, 1022], "test_logist": [376, 384], "rst": [376, 380, 384, 1016, 1022, 1027], "test_common": [376, 384], "caught": [376, 384, 397], "submodul": [376, 380, 382, 402, 973, 979, 1022], "intricaci": 376, "narr": [376, 390, 652, 893, 898, 1022, 1023], "unittest": 376, "tests_for_packag": 376, "static": [376, 378, 382, 384, 640, 641, 646, 647, 654, 655, 656, 657], "astropi": 376, "linux": [376, 378, 379, 384, 1001, 1022], "circleci": 376, "gh": 376, "lint": [376, 384], "nogil": [376, 377], "cpython": [376, 377, 382, 1037], "pyodid": [376, 949], "sklearn_run_float32_test": 376, "lengthi": [376, 388], "etiquett": 376, "she": [376, 883, 884, 1032], "he": [376, 719, 749, 850, 851, 883, 884, 981, 1016, 1029, 1036, 1037], "shorten": [376, 996, 1035], "leader": [376, 1005], "grab": 376, "familiar": [376, 409, 1030], "acquaint": 376, "experienc": 376, "abandon": 376, "someon": [376, 380, 390, 1022], "glad": 376, "restructuredtext": 376, "some_param": 376, "hello": [376, 384, 942], "goodby": 376, "liter": [376, 380, 1005], "array_paramet": 376, "list_param": 376, "typed_ndarrai": 376, "multioutput_arrai": 376, "bracket": [376, 977], "delimit": [376, 987, 1037], "colon": 376, "selectfpr": [376, 412, 586, 589, 592, 593, 594, 600, 1038], "defer": 376, "backtick": [376, 381], "nowadai": 376, "dropdown": 376, "syntax": [376, 381, 384, 404, 462, 852, 853, 891, 970, 1007, 1033, 1035], "pragmat": 376, "bibliograph": 376, "arxiv": [376, 456], "_my": 376, "ref": [376, 383, 384, 874, 971, 1028], "currentmodul": 376, "succeed": 376, "editor": [376, 384, 388], "_build": 376, "viewabl": 376, "pillow": [376, 393, 396], "sphinxext": [376, 393, 396], "opengraph": [376, 393, 396], "copybutton": [376, 393, 396], "vast": 376, "examples_pattern": 376, "your_regex_goes_her": 376, "no_mathjax": 376, "latexpdf": 376, "stone": [376, 901, 902, 997], "subdirectori": 376, "subpackag": [376, 380, 999, 1026, 1031], "cleanup": [376, 1022], "charg": 376, "test_requiring_mpl_fixtur": 376, "hang": [376, 1004, 1032, 1033], "fruit": [376, 982], "asv": 376, "asv_benchmark": 376, "airspe": 376, "veloc": 376, "publicli": [376, 1032], "zero_on": [376, 1023], "example_funct": 376, "exampleestim": 376, "_n_cluster": 376, "versionchang": 376, "meet": [376, 388, 391, 412, 566, 597, 850, 851, 890, 981, 994, 1005, 1030, 1031, 1032], "nit": 376, "retract": 376, "grammar": 376, "disambigu": [376, 821, 890, 994, 1037], "Will": [376, 491, 528, 621, 638, 639, 640, 646, 650, 651, 654, 655, 656, 657, 658, 659, 667, 669, 701, 708, 781, 858, 862, 866, 872, 873, 1025, 1026, 1028, 1030], "clariti": [376, 384], "unhelp": 376, "extran": 376, "rewritten": [376, 643, 1024, 1026], "generos": 376, "reward": 376, "heard": 376, "enemi": 376, "courtesi": 376, "justifi": [376, 382, 401, 559], "occas": 376, "deserv": [376, 382], "digest": [376, 1037], "overwhelm": 376, "sheer": [376, 1005], "myself": 376, "trickiest": 376, "buri": 376, "mixin": [376, 390, 418, 419, 420, 421, 422, 424, 425, 426, 427, 595, 924, 1024, 1033, 1037], "grep": 376, "delai": [376, 490, 790, 804, 814, 815, 949, 1036, 1037], "some_funct": [376, 920], "some_iter": 376, "flavor": [376, 984], "pointer": [376, 384, 436, 1031], "mandatori": [376, 411], "favorit": [376, 388, 1005], "Being": [376, 390, 391, 397, 977, 984], "killer": [376, 1005], "blame": 376, "migrat": [376, 1022], "ignorerevsfil": 376, "rev": [376, 601, 602], "ruin": 376, "maco": [377, 379, 393, 1030, 1034, 1036], "sklearn_enable_debug_cython_direct": 377, "scratch": [377, 436, 981, 1024], "gdb": [377, 379, 1004], "entrypoint_to_bug_reproduc": 377, "cdef": 377, "state_to_print": 377, "test_val": 377, "unifi": [377, 385, 388, 389, 410, 631, 1001, 1022], "fuse": [377, 1028, 1038], "shell": [377, 384, 388, 1007, 1016], "cythonx": 377, "language_level": 377, "wraparound": 377, "initializedcheck": 377, "nonecheck": 377, "cdivis": 377, "recompil": [377, 382, 393], "pep073": 377, "pathwai": 377, "memoryview": 377, "cnp": 377, "lightweight": [377, 790, 804, 814, 815, 1001], "virtual": [377, 393, 407, 1005], "enter": [377, 380, 403, 436, 988], "prang": 377, "void": 377, "my_func": [377, 382], "st\u00e9fan": 377, "benhel": 377, "_cython_bla": 377, "protect": [377, 380, 947], "_openmp_help": 377, "cimport": [377, 385, 1030], "omp_get_max_thread": 377, "prolifer": 378, "predomin": [378, 1023], "overrid": [378, 411, 440, 444, 451, 536, 542, 582, 583, 585, 587, 588, 591, 650, 658, 679, 680, 796, 812, 835, 836, 837, 839, 841, 843, 844, 845, 1022, 1030, 1032, 1036, 1038], "creation": [378, 505, 506, 507, 509, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 650, 833, 834, 1005, 1029, 1030, 1031, 1035], "optimis": [378, 403, 984, 1025, 1035, 1037], "param1": [378, 1013], "param2": [378, 1013], "param3": 378, "postpon": [378, 380], "requisit": 378, "liner": [378, 819], "ipython": [378, 381, 382, 384, 1008, 1016], "session": [378, 382, 388, 393, 1000, 1005, 1016], "trainabl": 378, "trail": [378, 965], "overridden": [378, 390, 413, 536, 542, 610, 615, 618, 688, 1030, 1031], "n_features_in_": [378, 390, 424, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 621, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 1033, 1035, 1037], "slep010": [378, 1033], "duck": [378, 390, 1032], "check_x_i": [378, 385, 1026, 1030, 1031, 1036], "check_arrai": [378, 385, 462, 528, 891, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "templateclassifi": 378, "demo_param": 378, "myestim": 378, "subestim": 378, "my_extra_param": 378, "my_estim": [378, 404], "subestimator__c": 378, "subestimator__class_weight": 378, "subestimator__du": 378, "subestimator__fit_intercept": 378, "subestimator__intercept_sc": 378, "subestimator__l1_ratio": 378, "subestimator__max_it": 378, "subestimator__multi_class": 378, "subestimator__n_job": 378, "subestimator__penalti": 378, "subestimator__random_st": 378, "subestimator__solv": 378, "subestimator__tol": 378, "subestimator__verbos": 378, "subestimator__warm_start": 378, "__c": 378, "__class_weight": 378, "unpack": 378, "easiest": [378, 384, 404, 978], "__repr__": [378, 1002, 1031], "setattr": 378, "deepcopi": 378, "__sklearn_clone__": [378, 428, 1038], "frozen": 378, "frozentransform": 378, "fitted_transform": [378, 458], "__getattr__": 378, "_estimator_typ": [378, 390, 1027], "clustermixin": 378, "is_classifi": [378, 390], "programmat": [378, 493, 1031], "_get_tag": [378, 1033], "allow_nan": [378, 912, 914, 1038], "array_api_support": [378, 399], "binary_onli": [378, 1032, 1033], "multioutput_onli": 378, "no_valid": 378, "non_determinist": [378, 1036], "primari": [378, 390, 408, 509, 988, 1005], "_safe_split": 378, "preserves_dtyp": 378, "poor_scor": 378, "requires_fit": 378, "requires_positive_x": [378, 1032, 1037], "requires_i": [378, 1033], "requires_positive_i": 378, "_skip_test": 378, "_xfail_check": 378, "check_nam": 378, "xfail": [378, 384], "skiptestwarn": 378, "x_type": 378, "2darrai": 378, "signifi": [378, 403, 575, 801, 986], "1dlabel": 378, "2dlabel": 378, "_more_tag": 378, "mymultioutputestim": 378, "ridgeregress": 378, "idiosyncrat": 378, "onetoonefeaturemixin": [378, 427], "classnameprefixfeaturesoutmixin": [378, 427, 1037], "auto_wrap_output_kei": 378, "mytransform": 378, "__init_subclass__": 378, "ownership": 378, "pep8": [378, 380, 384], "indent": [378, 947], "nsampl": [378, 788, 789], "statement": [378, 381, 384, 388, 390, 408, 999, 1016], "flow": 378, "client": [378, 949], "corollari": 378, "foo": [378, 575, 985], "baz": [378, 575], "pyflak": 378, "asanyarrai": 378, "hadamard": 378, "choose_random_sampl": 378, "freestand": 378, "unmodifi": [378, 390], "random_state_": [378, 530, 621, 842, 1036], "gaussiannois": 378, "quasi": [378, 850, 851, 977], "assert_allclos": 378, "rtol": [378, 833, 834, 838], "atol": [378, 666, 668, 833, 834, 838], "checklist": 379, "unclaim": 379, "workflow": [379, 380, 389, 407], "markdown": 379, "saniti": [379, 857, 981, 1022, 1023], "outdat": 379, "diff": [379, 981], "valgrind": 379, "platform": [379, 388, 390, 391, 397, 1001, 1005, 1027, 1030, 1031, 1033, 1035, 1036], "x86_64": [379, 393], "yep": 379, "gperftool": 379, "debugg": [379, 384], "gprof": 379, "callgrind": 379, "kcachegrind": 379, "warm": [379, 390, 525, 531, 537, 539, 540, 604, 647, 653, 660, 662, 670, 671, 672, 977, 1002, 1032, 1034, 1036], "homebrew": [379, 393], "freebsd": 379, "rrrcn": 380, "pep101": 380, "build_tool": 380, "blocker": 380, "mileston": 380, "maint_tool": 380, "sort_whats_new": 380, "whats_miss": 380, "fixm": [380, 390], "feedstock": 380, "recip": [380, 978, 1005], "yaml": 380, "whats_new": [380, 384], "v0": [380, 465, 466, 472, 506, 582, 583, 585, 790, 804, 852, 855, 1023, 1030, 1031, 1032], "freez": [380, 393, 397, 1002, 1005, 1030], "0rc1": 380, "__version__": 380, "draft": [380, 391], "rebas": 380, "bugfix": [380, 1022, 1036], "backport": [380, 385, 1029], "maint": 380, "enh": 380, "blindli": 380, "invit": 380, "cherri": 380, "shortlog": 380, "f2": [380, 982], "sed": [380, 1022], "front": [380, 1029], "rc1": 380, "suffix": [380, 816, 981, 1032], "brows": 380, "3a": 380, "22wheel": 380, "pyproject": 380, "toml": 380, "oldest": [380, 490], "abi": 380, "acronym": 380, "deliveri": 380, "whl": 380, "22publish": 380, "went": [380, 981], "bot": [380, 986, 1036], "sync": 380, "testpypi": 380, "tarbal": [380, 1037], "wheelhouse_upload": 380, "twine": 380, "rrr": 380, "symlink": 380, "latestst": 380, "tmp": 380, "ln": [380, 977, 985, 991], "versionwarn": 380, "secur": [380, 390, 1001, 1002, 1005, 1018], "twitter": 380, "linkedin": 380, "authorship": 380, "permalink": 380, "_hist_gradient_boost": 380, "_iter": 380, "pickl": [380, 390, 397, 411, 582, 583, 585, 833, 834, 1001, 1002, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "checker": [380, 813], "type_check": 380, "test_enable_hist_gradient_boost": 380, "enable_hist_gradient_boost": [380, 1031], "enable_my_experimental_featur": 380, "indefinit": 380, "incentiv": 380, "workabl": 381, "stackoverflow": [381, 384, 388, 1004], "blogpost": 381, "mcve": [381, 384, 388], "my_data": 381, "with_mean": [381, 873, 884, 991, 1030, 1035], "default_scor": 381, "other_scor": 381, "scrollbar": 381, "tripl": 381, "fenc": 381, "qualifi": 381, "a674e682c281": 381, "lda_featur": 381, "lda_model": 381, "n_topic": [381, 530, 1029], "minimalist": [381, 411, 1004], "continuous_featur": 381, "positive_featur": 381, "invest": [382, 1005], "idiom": 382, "crunch": 382, "performancetip": 382, "reimplement": [382, 390, 1028, 1032], "spottabl": 382, "amen": [382, 413, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 970], "cpp": 382, "engag": [382, 391], "tent": 382, "somewher": [382, 981, 1016], "prun": 382, "14496": [382, 1031], "ncall": 382, "tottim": 382, "percal": 382, "cumtim": 382, "lineno": 382, "042": 382, "_nls_subproblem": 382, "1263": 382, "_po": 382, "047": 382, "_initialize_nmf": 382, "_spars": 382, "_neg": 382, "hotspot": 382, "16159": [382, 1033], "840": 382, "2833": 382, "_dotbla": 382, "651": 382, "036": [382, 466], "1397": 382, "2780": 382, "167": [382, 1022], "1542": 382, "043": 382, "2734": 382, "fromnumer": 382, "1185": 382, "lapack_lit": 382, "dgesdd": 382, "rewrit": [382, 997, 1015, 1022], "shallow": [382, 410, 555, 556, 908], "4x": [382, 1037], "line_profil": 382, "wire": [382, 528, 535], "profile_default": 382, "ipython_config": 382, "terminalipythonapp": 382, "interactiveshellapp": 382, "lprun": 382, "qtconsol": 382, "_nmf": 382, "73153": 382, "h_init": 382, "5863": 382, "nl": 382, "175": [382, 991], "112141": 382, "2336": 382, "wtv": 382, "176": [382, 826, 982, 989], "16144": 382, "336": [382, 991], "wtw": 382, "177": 382, "1880": 382, "195133": 382, "305": 382, "grad": [382, 1005], "495761": 382, "777": 382, "proj_gradi": 382, "2449": 382, "1474": 382, "4474": 382, "inner_it": 382, "83833": 382, "hn": 382, "194239": 382, "48858": 382, "150407": 382, "gradd": 382, "193": [382, 410, 709, 779, 994], "515390": 382, "dqd": 382, "pin": 382, "memory_profil": [382, 393, 396], "memit": 382, "mprun": 382, "1e7": 382, "402344": 382, "standalon": [382, 652, 893, 1004], "bianp": 382, "reactiv": 382, "conda_prefix": 382, "pydebug": 382, "extra_cflag": 382, "dpy_debug": 382, "num_cor": 382, "dbg": 382, "fortun": [382, 410, 1016, 1035, 1036], "my_fil": 382, "callgrin": 382, "prof": 382, "encapsul": [383, 404, 417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904], "artist": [383, 432, 626, 692, 694, 695, 696, 796, 812, 907], "classmethod": [383, 432, 625, 626, 691, 692, 693, 694, 695, 696, 796, 812], "line_": [383, 432, 692, 694, 695, 696, 796, 812], "gridspecfromsubplotspec": 383, "subplot_spec": 383, "get_subplotspec": 383, "ax_top_left": 383, "ax_top_right": 383, "ax_bottom": 383, "bounding_ax_": [383, 626], "lines_": [383, 626, 796, 812], "contours_": [383, 626], "advic": [384, 413, 616, 617], "forth": 384, "userscript": 384, "tampermonkei": 384, "greasemonkei": 384, "shortcut": [384, 413], "pr_number": 384, "navig": [384, 1024], "overlai": [384, 626], "codecov": 384, "test_sparsifi": 384, "pdb": 384, "ipdb": [384, 1016], "pdbcl": 384, "terminalpdb": 384, "lf": 384, "ff": 384, "tb": [384, 565, 566, 567, 568, 569, 570, 571, 572], "runxfail": 384, "werror": 384, "mailman": 384, "listinfo": 384, "crowd": [384, 391, 978, 1002, 1004], "imped": 384, "attent": [384, 601, 602, 995], "pytb": 384, "stdin": [384, 1016], "perman": 384, "25163598": 384, "issuenumb": 384, "1506": 384, "volunt": 384, "establish": [384, 388, 391, 971], "clarifi": [384, 391, 784], "regression_test": 384, "0008": 384, "patienc": [384, 390], "crop": [384, 1037], "manifest": [384, 978, 984], "fault": [384, 1030, 1032, 1034], "glibc": 384, "uniniti": 384, "trace": [384, 403, 416, 467, 469, 470, 473, 474, 475, 683, 687, 978, 1033], "supp": 384, "readm": [384, 411, 487], "my_test_script": 384, "mobil": 384, "deploy": [384, 1001, 1002, 1005], "scalewai": 384, "aw": 384, "graviton": 384, "laptop": [384, 462, 891, 1036, 1037, 1038], "workstat": 384, "qemu": 384, "docker": [384, 397, 1035, 1036], "multiarch": 384, "ppc64le": 384, "filesystem": [384, 393, 1035], "pushd": 384, "wget": 384, "aarch64": 384, "arm64v8": 384, "mount": 384, "pwd": 384, "reinit": 384, "bashrc": 384, "ephemer": 384, "evolv": [385, 1037], "as_float_arrai": 385, "column_or_1d": [385, 1033, 1037], "multitarget": 385, "multi_output": [385, 913], "safe_index": [385, 1032], "check_memori": [385, 390, 1029], "5488135": 385, "71518937": 385, "60276338": 385, "54488318": 385, "has_fit_paramet": 385, "randomized_range_find": [385, 1023, 1028], "arrayfunc": 385, "cholesky_delet": 385, "min_po": 385, "least_angl": 385, "fast_logdet": 385, "safe_sparse_dot": [385, 1032], "weighted_mod": 385, "sample_without_replac": [385, 1028], "n_popul": [385, 950], "sparsefunc": [385, 1035], "mean_variance_axi": [385, 1028, 1035], "sparsefuncs_fast": 385, "inplace_csr_row_normalize_l1": 385, "inplace_csr_row_normalize_l2": 385, "inplace_csr_column_scal": 385, "sort_graph_by_row_valu": [385, 1037], "single_source_shortest_path_length": 385, "dijkstra": [385, 682, 978], "graph_shortest_path": [385, 1035], "all_estim": [385, 1032, 1033, 1037], "all_displai": [385, 1037], "all_funct": [385, 1037], "is_multilabel": 385, "dict_learn": [385, 525, 531, 540, 1023, 1030, 1032, 1035, 1036, 1038], "gen_batch": [385, 934], "safe_mask": 385, "safe_sqr": 385, "murmurhash3_32": 385, "murmurhash3_x86_32": [385, 946], "cryptograph": 385, "lookup": [385, 946, 1031], "bloom": [385, 946], "384616559": 385, "3910350737": 385, "murmurhash": 385, "graphical_lasso": [385, 465, 466, 1030, 1038], "kit": 388, "toolbox": [388, 1001, 1005], "multilay": [388, 979], "kera": [388, 1001], "forese": 388, "redesign": [388, 1022], "pystruct": [388, 1001], "ssvm": 388, "seqlearn": 388, "4143": 388, "meanwhil": [388, 996], "pipegraph": 388, "squared_loss": [388, 1035], "undertak": 388, "slowli": [388, 390, 538, 930], "ordinarili": [388, 390], "corrobor": 388, "proof": [388, 410, 887, 993], "road": 388, "bridg": [388, 978, 1001], "reproduct": [388, 977, 1004], "guidanc": [388, 413], "gitter": [388, 999, 1029, 1030], "value_kei": [388, 908], "levenshtein": 388, "dna": [388, 622, 971], "rna": 388, "pain": 388, "suppli": [388, 403, 640, 913, 914, 984, 1005, 1026, 1028, 1030, 1035], "leven": 388, "acctcctagaag": 388, "acctactagaagtt": 388, "gaatattaggccga": 388, "lev_metr": 388, "multiprocess": [388, 390, 947, 949, 984, 1022, 1030, 1036], "exec": 388, "nvidia": 388, "cuda": [388, 399], "reiniti": 388, "culprit": 388, "refus": [388, 883, 884], "forkserv": 388, "joblib_start_method": 388, "set_start_method": 388, "dozen": [389, 413], "leakag": [389, 390, 404, 1018], "disclos": 389, "entail": [389, 871, 873, 995], "r_squar": 389, "searchcv": [389, 1037], "tacit": 390, "inconsist": [390, 397, 411, 502, 503, 570, 895, 898, 917, 987, 996, 1018, 1022, 1027, 1028, 1029, 1030, 1032, 1035, 1037, 1038], "elsewher": [390, 456, 457, 465, 466, 472], "formal": [390, 391, 403, 410, 833, 834, 978, 981, 982, 985], "thereof": 390, "transduct": [390, 403, 888, 889, 1002], "position": 390, "serial": [390, 937, 1001, 1002, 1018, 1022, 1030, 1034], "unpickl": [390, 397, 570, 833, 834, 1028, 1034, 1038], "pep257": 390, "nuanc": 390, "flaw": [390, 410], "terminologi": [390, 1030], "est1": [390, 626], "est2": [390, 626], "exemplifi": 390, "_score": [390, 790, 804, 816, 981, 1022, 1035], "_loss": [390, 981], "divers": [390, 410], "abstract": [390, 408, 413, 612, 762, 1001, 1022], "descriptor": [390, 502, 503], "hoc": 390, "spectral_embed": [390, 978, 1023, 1026, 1028, 1030, 1032, 1035, 1036, 1037], "maxabs_scal": [390, 862, 1030], "astrai": 390, "readthedoc": 390, "entireti": 390, "shield": 390, "n_target": [390, 406, 476, 477, 478, 479, 518, 550, 605, 637, 640, 641, 644, 645, 646, 647, 648, 650, 651, 654, 655, 656, 657, 658, 659, 665, 666, 667, 668, 669, 675, 676, 677, 678, 679, 680, 681, 982, 1034, 1036, 1038], "synonym": [390, 835, 836, 837, 843, 844, 845], "themat": 390, "alphanumer": [390, 582, 583, 585], "statistician": [390, 873], "prescrib": 390, "baggingclassifi": [390, 410, 550, 903, 971, 1025, 1028, 1029, 1030, 1033, 1037, 1038], "estimator__max_depth": [390, 970], "improp": [390, 1029], "pairwise_kernel": [390, 413, 446, 637, 758, 859, 979, 1022, 1029], "redundantli": 390, "distancemetr": [390, 409, 984, 1030, 1034, 1035, 1036], "di": [390, 403, 408, 525, 531, 658, 679, 680, 886, 1026, 1035], "vectori": [390, 1032], "noun": 390, "venu": [390, 1004], "broadli": [390, 403], "consolid": [390, 391, 1022], "coo": [390, 547, 548, 686, 860, 909, 913, 914, 984, 1023], "lil": [390, 547, 548, 860, 909, 935, 984], "csgraph": [390, 1035], "absent": [390, 411, 747, 814], "densifi": [390, 408, 652, 653, 660, 662, 670, 671, 672, 893, 971, 1024], "lossili": 390, "unnorm": [390, 530, 978, 1028, 1029], "encompass": [390, 444, 450, 549, 550, 978], "is_regressor": 390, "get_n_split": [390, 791, 792, 795, 797, 798, 799, 800, 803, 805, 806, 807, 808, 809, 810, 811], "estimatorcv": [390, 1002], "loo": [390, 798, 1033], "router": [390, 394, 938, 939, 940, 941], "metadta": 390, "type_of_target": [390, 860, 874, 982, 1036, 1037], "hashabl": [390, 861, 864, 992], "labelencod": [390, 563, 867, 992, 1022, 1030, 1037, 1038], "canonic": 390, "xxx": 390, "everywher": 390, "multilabelbinar": [390, 822, 857, 866, 982, 1007, 1025, 1027, 1028, 1030, 1031], "nonetheless": [390, 981], "wherein": 390, "amber": 390, "return_cov": [390, 561, 562, 605, 853], "test_idx": 390, "_idx": 390, "label1": 390, "label2": 390, "class_label": [390, 551, 555, 558, 652, 653, 660, 662, 668, 669, 670, 901, 903, 919, 996], "bincount": [390, 407, 551, 555, 558, 652, 653, 660, 662, 668, 669, 670, 893, 895, 898, 901, 903, 918, 919, 1029], "rebalanc": 390, "compute_class_weight": [390, 1025, 1036], "check_cv": [390, 1027], "obei": [390, 979], "triangl": [390, 408, 437, 441, 453, 693, 979, 984], "concurr": [390, 411, 947, 1034, 1036], "unset": [390, 1030], "get_scor": [390, 726, 1029, 1038], "check_scor": 390, "uppercas": [390, 1035], "unavail": [390, 652, 653, 942, 1029, 1035], "deadlock": 391, "meritocrat": 391, "somebodi": 391, "unanim": 391, "emeritu": [391, 999], "recant": 391, "outreach": 391, "brand": [391, 393], "social": [391, 403, 1005], "authorit": 391, "strateg": 391, "entiti": [391, 719, 749], "duti": 391, "resign": 391, "occasion": [391, 720, 1031], "escal": 391, "fallback": [391, 393, 821, 822, 981], "hereaft": 391, "lazi": [391, 411, 995, 1026], "opinion": 391, "slep020": 391, "veto": 391, "appeal": 391, "revis": [391, 664], "slep000": 391, "insuffici": [392, 980, 1015], "afraid": 393, "64bit": [393, 1022], "miniconda": 393, "administr": 393, "dnf": 393, "pacman": 393, "raspberri": 393, "lock": [393, 396, 947, 949], "py3": 393, "apk": 393, "bind": [393, 1022, 1029, 1030], "buster": 393, "fedora30": 393, "pkgsrc": 393, "py39": 393, "intelex": [393, 1001], "oned": 393, "sklearnex": 393, "plugin": 393, "appdata": 393, "usernam": 393, "windowsapp": 393, "oserror": [393, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492], "errno": 393, "pythonsoftwarefound": 393, "7_qbz5n2kfra8p0": 393, "localcach": 393, "python37": 393, "292": [393, 410, 728], "data_nam": 393, "australian": 393, "data_vers": 393, "lift": 393, "regedit": 393, "menu": 393, "hkey_local_machin": 393, "currentcontrolset": 393, "longpathsen": 393, "broken": [393, 407, 593, 594, 629, 714, 909, 981, 997, 1025, 1029, 1030, 1031, 1033, 1036], "set_": 394, "_request": 394, "weighted_acc": 394, "sample_weigh": 394, "sel": [394, 412], "scoring_weight": 394, "fitting_weight": 394, "hasn": 394, "retrain": [397, 1002, 1038], "inconsistentversionwarn": [397, 1038], "simplefilt": 397, "model_from_prevision_vers": 397, "original_sklearn_vers": [397, 570], "untrust": 397, "malici": 397, "unsupport": [397, 487, 1030, 1035], "inadvis": 397, "immut": 397, "snapshot": [397, 553, 554, 1002], "portabl": [397, 1001], "alex": [397, 411, 996, 1022, 1025, 1030, 1032, 1033, 1034, 1036, 1037, 1038], "gaynor": 397, "sio": 397, "get_untrusted_typ": 397, "unknown_typ": 397, "exchang": [397, 1004], "markup": 397, "pmml": [397, 1001], "onnx": [397, 1001, 1002], "xml": 397, "sklearn2pmml": [397, 1001], "affero": 397, "gplv3": 397, "datastructur": [399, 1030, 1034], "namespac": 399, "array_api": 399, "x_np": 399, "y_np": 399, "x_cu": 399, "y_cu": 399, "devic": [399, 407, 576, 1001], "array_api_dispatch": [399, 462, 891], "_estimator_with_converted_arrai": 399, "transfer": [399, 977, 1002], "_array_api": 399, "cupy_to_ndarrai": 399, "lda_np": 399, "torch": 399, "x_torch": 399, "y_torch": 399, "array_api_compat": 399, "submatrix": [400, 418, 445, 447], "unusu": [400, 987, 991, 1030], "submatric": 400, "bipartit": [400, 447, 505, 986], "subgraph": 400, "a_n": 400, "lceil": [400, 987], "log_2": [400, 557, 987], "rceil": [400, 987], "bmatrix": 400, "u_2": 400, "u_": [400, 476, 477, 478], "n_column": [400, 445, 447], "inderjit": [400, 447], "spectralbiclust": [400, 447, 1024, 1028, 1029, 1033], "blockwis": [400, 977], "bistochast": [400, 445], "l_": [400, 605, 646, 734, 981], "k_": [400, 413, 610, 613, 615, 618, 767, 991], "u_1": 400, "v_1": 400, "v_2": 400, "v_": [400, 411], "kluger": [400, 445, 507], "yuval": [400, 445], "microarrai": [400, 445, 507, 622, 971], "cap": [400, 403, 748, 981, 1031], "hochreit": [400, 713], "hungarian": [400, 713], "bodenhof": [400, 713], "fabia": [400, 713], "acquisit": [400, 713], "murphi": [401, 637, 974], "discriminatori": 401, "wilk": 401, "tricki": [401, 978], "logit": [401, 413, 652, 653, 977], "f_i": 401, "train_set": 401, "test_set": 401, "disjoint": [401, 403, 404, 431, 698, 724, 748, 750, 978], "platt": [401, 431, 895, 896, 898, 899, 996], "_i": [401, 410, 972, 977, 981, 985, 996], "_j": [401, 972], "f_j": [401, 989], "meteorologi": 401, "climatologi": 401, "precipit": 401, "wea": 401, "640": [401, 484, 500, 501, 577, 578, 970], "1990a": 401, "menon": 401, "ak": [401, 1036, 1037], "jiang": [401, 1026, 1033], "xj": 401, "vembu": 401, "ohno": 401, "machado": [401, 716], "710": 401, "kull": [401, 981], "silva": [401, 682, 978, 1033, 1035], "filho": 401, "flach": [401, 981], "mario": [401, 1026, 1028, 1036, 1037, 1038], "w\u00fcthrich": 401, "merz": 401, "2023": [401, 1037, 1038], "actuari": 401, "refurbish": 402, "rough": [402, 987, 1009], "uniti": 402, "lipschitz": [402, 993], "usecas": 403, "mu_j": 403, "coher": 403, "elong": 403, "lloyd": [403, 437, 441, 443, 453, 1036, 1037], "distant": [403, 686, 703, 984], "sergei": [403, 1024, 1028, 1029, 1030, 1031, 1032], "vassilvitskii": [403, 441, 454], "eighteenth": 403, "siam": [403, 407, 446, 454, 456, 529, 535], "industri": [403, 1001], "predetermin": [403, 978], "scullei": 403, "19th": 403, "exemplar": [403, 434, 448, 1015], "sent": [403, 822], "leftarrow": [403, 985, 995], "foral": [403, 413, 607], "neq": [403, 981, 983, 991], "notin": 403, "hill": [403, 442, 455, 1032], "climb": [403, 442, 455], "maxima": 403, "x_j": [403, 413, 608, 609, 613, 616, 617, 619, 972, 973, 977, 984, 996, 997], "dictat": 403, "solvabl": 403, "stella": [403, 446, 456], "jianbo": [403, 446, 456, 685], "shi": [403, 446, 456, 685], "anil": [403, 446, 456], "daml": [403, 446, 456], "victor": [403, 446, 456, 1029, 1032], "minden": [403, 446, 456], "lex": [403, 446, 456], "ying": [403, 446, 456, 1036], "adjac": [403, 408, 446, 456, 579, 580, 629, 685, 689, 935, 978, 984, 1015], "adjacency_matrix": 403, "ulrik": [403, 446, 456, 685], "von": [403, 446, 456, 685, 1001, 1029, 1030], "luxburg": [403, 446, 456, 685], "jitendra": [403, 446, 456, 685], "malik": [403, 446, 456, 685], "walk": [403, 409, 1025], "marina": 403, "meila": 403, "ng": [403, 408, 685, 839, 985, 987, 1033], "jordan": [403, 408, 685, 788, 1032, 1033, 1036, 1037], "yair": [403, 685], "precondit": [403, 446, 456, 689, 997, 1038], "zhuzhunashvili": [403, 456], "forbid": [403, 410], "macroscop": 403, "occupi": [403, 981], "manhattan": [403, 435, 439, 444, 451, 693, 755, 764, 771, 772, 773, 840, 979, 984, 1026, 1031, 1038], "bisecting_strategi": [403, 437], "largest_clust": [403, 437], "biggest_inertia": [403, 437], "biggest": [403, 406, 408, 437], "steinbach": [403, 1037], "karypi": 403, "vipin": 403, "egin": 403, "minnesota": 403, "june": [403, 978, 1028, 1038], "weblog": 403, "abirami": 403, "mayilvahanan": 403, "emerg": [403, 1005], "ijet": 403, "jian": 403, "xinyu": 403, "gou": 403, "baod": 403, "hebei": 403, "knee": 403, "triangular": [403, 457, 605, 978], "whichev": [403, 410, 440, 538, 555, 556, 627, 644, 648, 650, 658, 676, 677, 691], "conjunct": [403, 588, 790, 793, 794, 796, 804, 812, 814, 815, 816, 817, 820, 948, 971, 977, 1037], "extract_dbscan": 403, "radius_neighbors_graph": [403, 414, 438, 835, 836, 837, 839, 841, 843, 844, 845, 846, 984, 1026, 1031, 1034], "ester": [403, 414, 438], "kriegel": [403, 414, 438, 444, 451, 839, 987], "sander": [403, 414, 438, 440, 444, 451, 839, 987, 1031, 1032], "xu": [403, 406, 414, 438, 995, 1035, 1036], "portland": [403, 414, 438], "aaai": [403, 414, 438, 828, 983], "226": [403, 414, 438], "revisit": [403, 414, 438], "schubert": [403, 414, 438, 444, 1026, 1027, 1030, 1031, 1033, 1034, 1035, 1036], "tod": [403, 414, 438], "lj2017": 403, "d_c": 403, "x_p": [403, 977], "d_m": 403, "x_q": 403, "g_": 403, "varepsilon": [403, 995, 996], "cm2013": 403, "mst": 403, "minimum_cluster_s": 403, "campello": [403, 440], "moulavi": [403, 440], "pei": [403, 1029], "tseng": 403, "cao": 403, "motoda": 403, "pakdd": 403, "lectur": [403, 638, 973, 1000], "7819": [403, 1029], "berlin": [403, 408, 529, 690, 719, 749, 981], "heidelberg": [403, 408, 529, 690, 719, 749, 981], "mcinn": [403, 1028, 1029, 1030, 1032, 1033, 1038], "heali": 403, "icdmw": 403, "max_ep": [403, 444, 449, 451], "nearbi": [403, 984], "cluster_hierarchy_": [403, 444], "planar": 403, "peripheri": 403, "wall": 403, "ankerst": [403, 444, 451], "mihael": [403, 444, 451], "marku": [403, 444, 451, 1030, 1032, 1033, 1034], "breunig": [403, 444, 451, 839, 987], "han": [403, 436, 444, 451, 1022, 1030, 1031, 1035], "j\u00f6rg": [403, 444, 451, 1030], "sigmod": [403, 444, 451, 839, 987], "cft": 403, "lossi": 403, "subclust": [403, 436], "till": [403, 436, 781, 981], "temporarili": [403, 1027], "farthest": 403, "brc": [403, 436], "tian": [403, 436, 1027, 1028, 1029], "raghu": [403, 436], "ramakrishnan": [403, 436], "maron": [403, 436], "livni": [403, 436], "sfu": [403, 436], "coursecentr": [403, 436], "459": [403, 436], "zhang96": [403, 436], "roberto": [403, 436], "perdisci": [403, 436], "jbirch": [403, 436], "java": [403, 436, 1001], "satisfi": [403, 644, 648, 693, 711, 729, 730, 833, 834], "labels_pr": [403, 698, 699, 708, 709, 711, 724, 729, 730, 748, 750, 779, 786], "unadjust": [403, 981, 1034], "swap": [403, 408, 710, 729, 960, 961, 1022], "ri": [403, 699, 779], "c_2": [403, 978], "unord": [403, 410, 991], "esp": [403, 1022], "hubert": [403, 699, 709, 779], "arabi": [403, 699, 709, 779], "steinlei": [403, 699], "psycholog": [403, 699, 710], "agreement": [403, 698, 710, 748, 750, 786, 981], "22504": 403, "10526": 403, "u_i": [403, 476, 477, 478, 748], "v_j": [403, 748, 986], "veb2009": 403, "a_i": 403, "b_j": 403, "yat2016": 403, "average_method": [403, 698, 750, 1030], "vinh": [403, 698], "veb2010": 403, "strehl": 403, "joydeep": 403, "583": [403, 1014], "1162": 403, "153244303321897735": 403, "epp": [403, 698], "bailei": [403, 698], "26th": [403, 719, 749, 981], "1553374": 403, "1553511": 403, "9781605585161": 403, "csail": [403, 660, 661, 670, 830], "volume11": 403, "vinh10a": 403, "algesheim": 403, "tesson": 403, "30750": 403, "1038": 403, "srep30750": 403, "rosenberg": [403, 711, 730, 786], "hirschberg": [403, 711, 730, 786], "b2011": 403, "homogeneity_completeness_v_measur": [403, 1031], "n_k": [403, 544], "n_c": [403, 653], "julia": [403, 711, 730, 786], "media": [403, 1005], "hila": 403, "becker": [403, 1005, 1025, 1034], "fowlkes_mallows_scor": [403, 981, 1028, 1030], "fmi": [403, 724], "fp": [403, 706, 712, 724, 775, 776, 777, 780, 981], "fn": [403, 706, 712, 724, 775, 776, 777, 780, 981, 982], "47140": 403, "fowkl": [403, 724], "1983": [403, 724, 873], "tandfonlin": 403, "01621459": 403, "10478008": 403, "kmeans_model": 403, "1987": [403, 601, 602, 783, 784], "calinski_harabasz_scor": [403, 1030], "dispers": [403, 704, 718, 977], "561": 403, "n_e": 403, "mathrm": [403, 405, 408, 412, 977, 997], "b_k": 403, "w_k": [403, 977], "c_q": 403, "n_q": 403, "c_e": 403, "cali\u0144ski": 403, "1974": [403, 411, 704], "dendrit": [403, 704], "davies_bouldin_scor": [403, 1030], "6619": 403, "bould": 403, "c_i": [403, 984], "c_j": [403, 986], "s_i": [403, 991], "diamet": 403, "nonneg": [403, 408, 447, 532, 534, 541, 870], "s_j": 403, "max_": [403, 981], "1979": [403, 718, 762], "halkidi": 403, "batistaki": 403, "yanni": 403, "vazirgianni": 403, "michali": 403, "145": 403, "contingency_matrix": [403, 748, 1030], "pair_confusion_matrix": [403, 1034], "permit": [404, 461, 582, 583, 585, 790, 793, 794, 804, 815, 854, 855, 981, 982, 983, 1028], "clf__c": 404, "pca1": [404, 419], "svm1": 404, "77484909e": 404, "07058917e": 404, "pca2": [404, 419], "svm2": 404, "raw_target_regr": 404, "bypass": [404, 593, 640, 646, 901, 902, 903, 904], "check_invers": [404, 459, 857, 991, 1030, 1036, 1037], "linear_pca": 404, "make_union": [404, 852, 1025, 1029], "unreli": 404, "citi": [404, 411, 460, 1016], "london": [404, 411, 460], "sallisaw": [404, 460], "bow": 404, "moveabl": 404, "feast": 404, "grape": 404, "wrath": 404, "expert_r": 404, "user_r": 404, "city_categori": 404, "title_bow": 404, "city_london": 404, "city_pari": 404, "city_sallisaw": 404, "507": 404, "301": [404, 995], "ignored_new_col": 404, "estimator_html_repr": [404, 1033, 1034, 1035, 1036], "shrunk_covari": 405, "sigma_": [405, 638, 639, 1035], "365": [405, 467], "wiesel": [405, 416, 469], "eldar": [405, 416, 469], "hero": [405, 416, 469], "5016": [405, 416, 469], "5029": [405, 416, 469], "_k": [405, 975, 977], "glasso": [405, 472], "biostatist": [405, 472], "uncommon": [405, 652, 893, 996], "downweight": [405, 530], "driessen": [405, 463, 468, 987], "fastmcd": [405, 463, 468], "raw_location_": [405, 463, 468], "raw_covariance_": [405, 463, 468], "multidimension": [406, 682, 684, 686, 688, 978, 984], "plsw2a": 406, "u_k": [406, 408], "v_k": [406, 408, 525, 531, 539, 540], "x_k": [406, 408, 975, 984], "y_k": [406, 991], "xi_k": 406, "omega_k": [406, 975], "gamma_k": 406, "delta_k": 406, "nipal": [406, 477, 478], "xp": [406, 868], "x_rotations_": [406, 476, 477, 478], "y_rotations_": [406, 476, 477, 478], "ty": 406, "x_weights_": [406, 476, 477, 478, 479], "y_weights_": [406, 476, 477, 478, 479], "yv": 406, "tx": 406, "pls1": [406, 478], "pls2": [406, 478], "tx_k": [406, 975], "ty_k": 406, "ja": [406, 1029], "wegelin": 406, "methodolog": [407, 1004], "academ": [407, 1005], "commerci": [407, 1005], "flowchart": [407, 1009], "f1_macro": [407, 981, 1026], "custom_cv_2fold": 407, "custom_cv": 407, "9333": 407, "scorer1_nam": 407, "scorer2_nam": 407, "return_indic": [407, 816, 1038], "precision_macro": [407, 1011], "recall_macro": [407, 981], "test_precision_macro": 407, "test_recall_macro": 407, "prec_macro": 407, "rec_macro": 407, "test_prec_macro": 407, "test_rec_macro": 407, "train_prec_macro": 407, "train_rec_macro": 407, "undistinguish": 407, "kf": [407, 795], "12883823": 407, "rkf": [407, 805], "weigh": [407, 1029], "caveat": [407, 413], "part3": 407, "spector": 407, "submodel": 407, "kohavi": 407, "jnt": 407, "bharat": [407, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "rao": [407, 1034, 1037], "fung": 407, "rosal": 407, "witten": 407, "leavepout": [407, 798, 1011], "ss": 407, "gkf": 407, "sgkf": [407, 808], "suboptim": [407, 694, 696, 775, 782, 984, 1030, 1038], "leavepgroupsout": [407, 792, 1011, 1028], "n_group": [407, 799, 1011, 1028], "lpgo": [407, 799], "gss": [407, 792], "withheld": 407, "predefinedsplit": [407, 1011, 1026], "test_fold": [407, 803], "train_indx": 407, "test_indx": 407, "autocorrel": 407, "superset": [407, 811, 981], "surplu": 407, "tscv": [407, 811], "inbuilt": 407, "some_integ": 407, "n_cv": [407, 431], "isotropi": 408, "alik": [408, 979], "halko": [408, 529, 535, 538, 929, 930], "szlam": [408, 929, 930], "disadvantag": [408, 413, 977, 978, 985, 995, 996, 997], "parsimoni": [408, 991], "jen09": 408, "mrl09": 408, "ell_1": [408, 977], "underset": [408, 977, 984, 997], "operatornam": [408, 734, 977, 981, 997], "fro": [408, 532, 534, 541, 687, 977], "gentli": 408, "spirit": 408, "mairal": [408, 525, 531], "bach": [408, 525, 530, 531, 532, 652, 977], "ponc": [408, 525, 531], "sapiro": [408, 525, 531], "jenatton": 408, "obozinski": 408, "scholkopf1997": 408, "bakir2003": 408, "smola": [408, 411, 529, 859, 991, 996], "klau": [408, 529, 859], "eigendecompos": 408, "eigensolv": [408, 446, 456, 529, 538, 689, 978], "eigsh": [408, 529, 1028, 1029], "lehoucq": 408, "sorensen": 408, "lsa": [408, 538, 1024], "synonymi": 408, "polysemi": 408, "lsi": 408, "sigma_k": [408, 975], "columnwis": 408, "sublinear": [408, 584, 585], "use_idf": [408, 411, 584, 585, 1016], "textual": [408, 997, 1031], "man": [408, 584, 762, 828, 832, 979, 981, 983], "prabhakar": 408, "raghavan": [408, 584, 828, 832, 979, 981, 983], "hinrich": 408, "sch\u00fctze": [408, 584, 979, 981, 983], "transform_method": 408, "split_cod": 408, "dictionarylearn": [408, 531, 533, 534, 536, 537, 538, 539, 540, 1023, 1027, 1029, 1032, 1035, 1036, 1037, 1038], "overcomplet": 408, "mammalian": 408, "cortex": 408, "inpaint": 408, "h_i": [408, 986], "psi": 408, "sim": [408, 1014], "wh_i": 408, "ww": 408, "superflu": 408, "psi_1": 408, "psi_2": 408, "psi_n": 408, "superimpos": 408, "plug": [408, 977, 1005, 1016], "wh": [408, 532, 534, 541], "hoyer": [408, 1025], "nndsvd": [408, 532, 534, 541, 1031, 1034], "nndsvdar": [408, 532, 534, 541, 1031], "elementwis": [408, 532, 534, 541], "_featur": [408, 532, 534, 541], "kl": [408, 978, 1030], "itakura": [408, 532, 534, 541, 1029], "saito": [408, 532, 534, 541, 1029], "w_new": 408, "forget_factor": [408, 532], "lee": [408, 1022, 1023, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1037], "seung": 408, "boutsidi": 408, "gallopoulo": 408, "cichocki": [408, 532, 534, 541], "phan": 408, "fevott": [408, 532, 534, 541], "idier": [408, 532, 534, 541], "lefevr": [408, 532], "corpora": 408, "hoffman": [408, 530, 1027, 1034], "unshad": 408, "beta_k": 408, "eta": [408, 530, 670, 671, 672, 985, 995, 1027], "topic_word_prior": [408, 530], "theta_d": 408, "doc_topic_prior": [408, 530], "z_": 408, "w_": [408, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 977, 981, 983, 986], "elbo": 408, "overset": [408, 988], "e_": 408, "blei": [408, 530, 788], "wang": [408, 530, 673, 683, 687, 719, 749, 977, 978, 981, 1025, 1027, 1028, 1029, 1030, 1034, 1037, 1038], "paislei": [408, 530], "kaiser": [408, 526], "talli": 409, "disproportion": 409, "41075698": 409, "41076071": 409, "rho_k": 409, "unsmooth": 409, "scott": [409, 838, 1022, 1023, 1028, 1030, 1031, 1032, 1037, 1038], "silvermann": 409, "propto": [409, 983], "2h": 409, "angular": [409, 686, 757], "contin": [409, 708, 991], "semin": 410, "friedman2001": 410, "lightgbm": [410, 555, 556, 1001, 1031, 1038], "8965": 410, "absolute_error": [410, 552, 554, 556, 559, 665, 902, 904, 1035], "grower": [410, 555, 556], "missing": [410, 621, 622, 624, 1031], "fisher1958": 410, "loan": [410, 528, 977, 1005], "mayer2022": 410, "mayer": [410, 1034, 1036], "bourassa": 410, "hoesli": 410, "scognamiglio": 410, "valuat": 410, "tianqi": 410, "guestrin": 410, "ke": [410, 1033, 1034], "boostingdecis": 410, "913": [410, 553], "nr": 410, "f_m": 410, "h_m": 410, "f_": [410, 629, 981], "l_m": 410, "taylor": [410, 1030, 1032, 1033, 1036], "g_i": [410, 643], "sum_m": 410, "softmax": [410, 555, 652, 653, 977, 984, 985], "superior": 410, "ineffici": [410, 437, 568, 821, 822, 984, 986], "htf": 410, "r2007": 410, "friedman2002": 410, "1189": 410, "1232": 410, "b1998": 410, "decoupl": [410, 983], "cancel": [410, 411, 756], "b2001": 410, "bear": [410, 1001], "geurt": [410, 549, 550, 551, 552, 559, 560, 903, 904], "ernst": [410, 551, 552, 559, 560, 903, 904], "wehenkel": [410, 551, 552, 559, 560, 903, 904], "l2014": 410, "lieg": 410, "flavour": 410, "b1999": 410, "b1996": 410, "h1998": 410, "lg2012": 410, "bootstrap_featur": [410, 549, 550], "844": [410, 549, 550], "346": [410, 495, 549, 550], "w2": 410, "w3": 410, "lr__c": 410, "rf__n_estim": 410, "w1992": 410, "knr": 410, "stack_method": [410, 561], "286": 410, "225": 410, "stack_method_": [410, 561, 562], "final_layer_rfr": 410, "final_layer_gbr": 410, "final_lay": 410, "multi_layer_regressor": 410, "wolpert": [410, 561, 562], "241": [410, 561, 562], "freund": [410, 547, 548], "fs1995": 410, "w_1": [410, 977, 985], "w_2": [410, 977, 985], "w_n": 410, "w_i": [410, 972, 981], "reappli": 410, "zzrh2009": 410, "d1997": 410, "dubai": 411, "francisco": [411, 993], "movi": [411, 1008], "movie_entri": 411, "thriller": [411, 864], "drama": 411, "000e": 411, "003e": 411, "011e": 411, "974e": 411, "unseen_featur": [411, 575], "speech": [411, 981], "chunker": 411, "pos_window": 411, "pos_vector": 411, "1x6": 411, "part_of_speech": 411, "token_featur": 411, "isupp": 411, "uppercase_initi": 411, "all_uppercas": 411, "raw_x": [411, 576], "pos_tagg": 411, "murmurhash3": [411, 576, 583, 946], "weinberg": 411, "modulo": [411, 1033], "kilian": [411, 1037, 1038], "anirban": 411, "dasgupta": [411, 440, 887, 993], "langford": [411, 682, 978], "josh": [411, 1029], "attenberg": 411, "multitask": [411, 982], "punctuat": [411, 582, 583, 585], "diminish": 411, "4x9": 411, "build_analyz": [411, 582, 583, 585, 1032], "interrog": 411, "bigram_vector": 411, "cool": [411, 1022], "feature_index": 411, "him": 411, "constru": 411, "nqy18": 411, "smooth_idf": [411, 584, 585], "_n": [411, 981], "textbook": [411, 584], "6x3": 411, "81940995": 411, "57320793": 411, "47330339": 411, "88089948": 411, "58149261": 411, "81355169": 411, "term1": 411, "term2": 411, "term3": 411, "0986": [411, 857], "573": 411, "8473": 411, "8515": [411, 1029], "5243": 411, "85151335": 411, "52433293": 411, "55422893": 411, "83236428": 411, "63035731": 411, "77630514": 411, "idf_": [411, 584, 585, 1030], "western": 411, "europ": [411, 991], "koi8": 411, "russian": 411, "modern": [411, 462, 497, 584, 684, 688, 723, 891, 978, 1001, 1002, 1038], "unicodedecodeerror": [411, 582, 583, 585], "told": 411, "troubleshoot": [411, 999], "chardet": 411, "chardetect": 411, "damag": 411, "sloppili": 411, "ftfy": 411, "mish": 411, "mash": 411, "text1": 411, "sei": 411, "mir": 411, "gegr": 411, "xc3": 411, "xbc": 411, "x9ft": 411, "mein": 411, "sauerkraut": 411, "text2": 411, "holdselig": 411, "sind": 411, "dein": 411, "ger": 411, "xfcche": 411, "text3": 411, "xff": 411, "xfea": 411, "x00u": 411, "x00f": 411, "x00": 411, "x00l": 411, "xfc": 411, "x00g": 411, "x00e": 411, "x00n": 411, "x00d": 411, "x00a": 411, "x00h": 411, "x00r": 411, "x00z": 411, "x00i": 411, "x00b": 411, "x00c": 411, "x00t": 411, "x00o": 411, "spolski": 411, "nnmf": [411, 1017, 1018, 1022], "phrase": 411, "misspel": 411, "rescu": 411, "resili": 411, "wprd": 411, "ngram_vector": 411, "char_wb": [411, 582, 583, 585], "rd": 411, "wo": 411, "wp": [411, 651, 665], "char": [411, 582, 583, 585, 1022], "jumpi": 411, "fox": [411, 1038], "1x4": 411, "umpi": 411, "1x5": 411, "mpy": 411, "fo": 411, "paragraph": [411, 497, 1016], "barrier": 411, "hv": 411, "4x10": 411, "discrep": [411, 1016, 1026], "4x1048576": 411, "collid": 411, "ingest": 411, "spend": 411, "my_token": 411, "lowercas": [411, 419, 436, 437, 439, 441, 443, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 582, 583, 585, 633, 634, 635, 636, 682, 683, 686, 837, 842, 845, 849, 854, 859, 885, 886, 1035], "lucen": 411, "build_preprocessor": [411, 582, 583, 585, 1032], "whitespac": 411, "fanci": 411, "lemmat": 411, "nltk": [411, 1000, 1001], "word_token": 411, "wordnetlemmat": 411, "lemmatoken": 411, "wnl": 411, "british": 411, "spell": 411, "to_british": 411, "1or": 411, "bt": 411, "1er": 411, "ing": 411, "ation": 411, "1z": 411, "ogu": 411, "og": 411, "customvector": 411, "asian": 411, "one_imag": [411, 578], "fake": 411, "assert_array_equ": 411, "patchextractor": [411, 1038], "five_imag": 411, "variancethreshold": [412, 858, 971, 1025, 1032, 1035, 1038], "selectfdr": [412, 586, 590, 592, 593, 594, 600, 1026, 1028, 1029, 1038], "selectfw": [412, 586, 589, 590, 593, 594, 600, 1038], "genericunivariateselect": [412, 589, 590, 592, 593, 594, 596, 1036, 1038], "r_regress": [412, 600, 1035, 1036], "nonparametr": [412, 413, 601, 602], "bewar": 412, "importance_gett": [412, 587, 588, 591, 1034], "unimport": 412, "lsvc": 412, "baraniuk": 412, "isr": 412, "ist": 412, "utl": 412, "aguiar": 412, "cs_note": 412, "ferri": [412, 981], "versatil": [413, 996, 1005], "optima": 413, "markov": [413, 605, 986, 1001, 1022], "nuisanc": 413, "one_vs_on": [413, 604, 982], "ingredi": 413, "duv2014": 413, "theta_l": 413, "x_bound": [413, 611], "operand": 413, "k1__": 413, "k2__": 413, "constant_valu": [413, 607, 611], "constant_value_bound": [413, 605, 607, 611], "k1__k1__constant_valu": 413, "value_typ": [413, 611], "n_element": [413, 611], "k2__length_scal": 413, "k1": [413, 615, 618], "k1__k1": 413, "k1__k1__constant_value_bound": 413, "k1__k2": 413, "k1__k2__length_scale_bound": 413, "k2": [413, 615, 618], "k2__length_scale_bound": 413, "69314718": [413, 606, 991], "30258509": 413, "interoper": [413, 999, 1002, 1018], "pairwisekernel": 413, "_valu": [413, 607], "_level": [413, 619], "k_1": [413, 615, 618], "k_2": [413, 615, 618], "__add__": [413, 618], "__mul___": 413, "__pow__": [413, 610], "2l": [413, 616], "bigg": [413, 613], "bessel": [413, 613], "rightarrow": [413, 613, 985], "quad": [413, 984, 995], "tfrac": 413, "3l": 413, "pp84": 413, "x_d": [413, 608], "inhomogen": [413, 608], "expon": [413, 610, 670, 671, 672, 802, 850, 851, 868, 970], "carl": [413, 604, 605, 608, 613, 616], "rasmussen": [413, 604, 605, 608, 613, 616], "duvenaud": [413, 616, 617], "cookbook": [413, 616, 617], "minkowski": [414, 438, 444, 451, 682, 693, 771, 772, 773, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 984, 1022, 1025, 1036, 1037, 1038], "metric_param": [414, 438, 440, 444, 451, 682, 686, 835, 836, 837, 838, 839, 841, 843, 844, 845, 846, 847, 1026, 1029, 1036], "leaf_siz": [414, 438, 440, 444, 451, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845], "kd_tree": [414, 438, 444, 451, 682, 683, 835, 836, 837, 838, 839, 841, 843, 844, 845, 984, 1035], "balltre": [414, 438, 440, 444, 451, 682, 683, 693, 835, 836, 837, 838, 839, 841, 843, 844, 845, 846, 847, 978, 1022, 1024, 1026, 1030, 1035, 1038], "ckdtree": [414, 438, 1024], "inhibit": [414, 438], "core_sampl": 414, "n_core_sampl": [414, 438], "attract": [414, 438, 975, 984, 1001], "fun": [415, 527, 1005], "logcosh": [415, 527], "fun_arg": [415, 527], "w_init": [415, 527], "whiten_solv": [415, 527, 1037], "return_x_mean": 415, "compute_sourc": 415, "return_n_it": [415, 448, 453, 472, 539, 540, 640, 641, 646, 647, 654, 655, 656, 657, 675, 676, 677, 678, 679, 680, 681, 688, 1036], "cube": [415, 527], "my_g": [415, 527], "x_mean": 415, "AS": 415, "fortran": [415, 535, 640, 641, 646, 647, 654, 655, 656, 657, 659, 675, 678, 679, 680, 913, 914, 1022, 1025, 1026, 1030], "hyvarinen": [415, 527], "oja": [415, 527], "430": [415, 527], "shrunk_cov": [416, 473, 475], "eq": [416, 469, 715, 716, 717], "subobject": [417, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 686, 788, 789, 790, 793, 794, 804, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904], "row_ind": [418, 445, 447], "intp": [418, 445, 447], "col_ind": [418, 445, 447], "get_submatrix": [418, 445, 447], "pca0": 419, "_n_features_out": 419, "class_name0": [419, 436, 437, 439, 441, 443, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 633, 634, 635, 636, 682, 683, 686, 837, 842, 845, 849, 859, 885, 886], "class_name1": [419, 436, 437, 439, 441, 443, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 633, 634, 635, 636, 682, 683, 686, 837, 842, 845, 849, 859, 885, 886], "class_name2": [419, 436, 437, 439, 441, 443, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 633, 634, 635, 636, 682, 683, 686, 837, 842, 845, 849, 859, 885, 886], "feature_names_out": [419, 424, 436, 437, 439, 441, 443, 458, 476, 477, 478, 479, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 560, 561, 562, 563, 564, 575, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 621, 622, 623, 624, 629, 632, 633, 634, 635, 636, 682, 683, 686, 837, 842, 845, 849, 852, 853, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 885, 886, 1036], "harsh": [420, 431, 463, 543, 544, 545, 547, 549, 551, 553, 555, 558, 561, 563, 604, 652, 660, 662, 668, 669, 670, 821, 822, 823, 824, 828, 829, 830, 831, 832, 835, 840, 843, 850, 888, 889, 893, 895, 898, 901, 903, 1032, 1034, 1037], "n_samples_fit": [426, 459, 476, 477, 478, 548, 550, 552, 554, 556, 559, 562, 564, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 682, 826, 827, 835, 836, 837, 839, 841, 843, 844, 845, 851, 894, 896, 899, 902, 904], "uniform_averag": [426, 459, 476, 477, 478, 548, 550, 552, 554, 556, 559, 562, 564, 605, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 673, 715, 716, 721, 738, 739, 741, 743, 744, 746, 778, 826, 827, 836, 844, 851, 894, 896, 899, 902, 904, 981, 1031], "n_features_new": [427, 436, 439, 526, 528, 530, 531, 533, 536, 537, 543, 561, 563, 564, 576, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 622, 624, 629, 632, 633, 634, 635, 636, 842, 849, 856, 857, 858, 859, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 885, 886], "base_clf": 431, "calibrated_clf": 431, "927": 431, "x_calib": 431, "y_calib": 431, "prob_tru": [432, 433], "prob_pr": [432, 433], "ref_lin": 432, "alexandru": 433, "22nd": 433, "525": [433, 622, 971], "convergence_it": [434, 448], "hardcod": [434, 448, 1030], "affinity_matrix_": [434, 446, 685], "cluster_center_indic": [434, 448], "compute_full_tre": [435, 439, 1026], "compute_dist": [435, 439, 1034], "inferior": [435, 439, 1033], "n_leaves_": [435, 439], "n_connected_components_": [435, 439, 1031], "branching_factor": 436, "compute_label": [436, 443], "promot": [436, 702, 1001, 1033, 1035], "redistribut": 436, "overwritten": [436, 526, 527, 528, 530, 535, 542, 601, 602, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 666, 668, 673, 675, 676, 677, 678, 680, 949, 951, 1035], "root_": 436, "_cfnode": 436, "cftree": 436, "dummy_leaf_": 436, "subcluster_labels_": 436, "centroids_": [436, 440, 840], "copy_x": [437, 441, 453, 529, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 666, 668, 673, 675, 676, 677, 678, 679, 1024, 1030, 1031], "k_init": [437, 453], "sse": 437, "bisect_mean": 437, "denser": 438, "pooling_func": [439, 1030], "xred": [439, 1038], "cluster_selection_epsilon": 440, "max_cluster_s": 440, "cluster_selection_method": 440, "eom": 440, "store_cent": 440, "kdtree": [440, 444, 451, 682, 683, 833, 835, 836, 837, 838, 839, 841, 843, 844, 845, 1024, 1026, 1030, 1034, 1035, 1038], "neighbour": [440, 456, 686, 986], "medoid": 440, "overwrit": [440, 490, 625, 1007, 1022, 1033, 1038], "medoids_": 440, "zimek": 440, "chaudhuri": 440, "jaskowiak": 440, "malzer": 440, "baum": 440, "hybrid": [440, 643, 1001], "dbscan_clust": 440, "border": [440, 1032], "unclust": 440, "socg2006": 441, "min_bin_freq": [442, 455], "cluster_al": [442, 455], "get_bin_se": 442, "orphan": [442, 455, 1022], "reassignment_ratio": 443, "eec": [443, 635], "tuft": 443, "dscullei": 443, "fastkmean": 443, "55102041": 443, "48979592": 443, "06896552": 443, "set_partial_fit_request": [443, 528, 532, 660, 662, 670, 671, 672, 821, 822, 825, 826, 828, 829, 830, 831, 832, 850, 873], "cluster_method": 444, "predecessor_correct": [444, 450], "unprocess": [444, 582, 583, 585], "heap": 444, "braycurti": [444, 451, 693, 771, 772, 773, 984], "canberra": [444, 451, 693, 771, 772, 773, 984], "chebyshev": [444, 451, 693, 771, 772, 773, 984], "dice": [444, 451, 693, 771, 772, 773, 984], "kulsinski": [444, 451, 693, 771, 772, 773], "rogerstanimoto": [444, 451, 693, 771, 772, 773, 984], "russellrao": [444, 451, 693, 771, 772, 773, 984], "seuclidean": [444, 451, 693, 771, 772, 773, 840, 984, 1030, 1033, 1034], "sokalmichen": [444, 451, 693, 771, 772, 773, 984], "sokalsneath": [444, 451, 693, 771, 772, 773, 984], "yule": [444, 451, 771, 772, 773], "manhattan_dist": [444, 451, 682, 755, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 1022, 1032, 1037, 1038], "minkowski_dist": [444, 451, 682, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847], "l_p": [444, 451, 682, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847], "upward": [444, 450], "successor": [444, 450, 997, 1001], "predecessor_": [444, 451], "erich": [444, 1026, 1027, 1030, 1031, 1033, 1034, 1035, 1036], "gertz": 444, "lernen": 444, "wissen": 444, "daten": [444, 1030, 1031], "analysen": 444, "lwda": 444, "318": 444, "n_best": 445, "n_svd_vec": [445, 447], "mini_batch": [445, 447], "n_row_clust": [445, 447, 507], "n_column_clust": [445, 447, 507], "ncv": [445, 447], "n_oversampl": [445, 447, 535, 538, 930, 1036], "kernel_param": [446, 529, 633, 637], "precomputed_nearest_neighbor": [446, 685], "eigen": [446, 543, 667, 685, 689, 975, 1028, 1031], "dist_matrix": 446, "541": [446, 456], "csc_matrix": [446, 551, 552, 557, 558, 559, 560, 870, 901, 902, 903, 904, 971, 991, 997, 1027], "best_n_it": 453, "n_local_tri": 454, "n_seed": 455, "multigrid": 456, "eigendecomposit": [456, 667, 685, 689, 859], "multiscal": 456, "preliminari": 456, "heapq": 457, "topolog": [457, 1001], "n_connected_compon": 457, "n_leav": [457, 901, 902, 903, 904], "transformers_": 458, "remaining_column": 458, "named_transformers_": 458, "sparse_output_": [458, 545], "output_indices_": [458, 1035], "datatyp": [458, 460, 1029, 1032], "norm1": 458, "norm2": 458, "text_preprocess": 458, "num_preprocess": 458, "x_t": [458, 621, 852], "sum_n_compon": [458, 852], "y_hat": 459, "90453403": 460, "50755672": 460, "30151134": 460, "print_changed_onli": [462, 891, 1031, 1033, 1034], "pairwise_dist_chunk_s": [462, 891], "enable_cython_pairwise_dist": [462, 891], "skip_parameter_valid": [462, 891, 1038], "cache_s": [462, 891, 895, 896, 897, 898, 899, 996], "get_config": [462, 774, 891, 948, 1037], "offset_": [463, 557, 671, 839, 897, 1030], "raw_support_": [463, 468], "dist_": [463, 468], "true_cov": [463, 465, 466], "7411": [463, 468, 1028], "2535": [463, 468], "0813": [463, 468], "0427": [463, 468], "correct_covari": [463, 468], "rvd": [463, 468], "covariance_correct": [463, 468], "comp_cov": [463, 464, 465, 466, 467, 468, 469, 470], "get_precis": [463, 464, 465, 466, 467, 468, 469, 470, 526, 528, 535], "getter": [463, 464, 465, 466, 467, 468, 469, 470, 587, 588, 591], "is_inli": [463, 557, 839], "reweight_covari": [463, 468], "rvdriessen": [463, 468], "location_reweight": [463, 468], "covariance_reweight": [463, 468], "support_reweight": [463, 468], "negative_mahal_dist": 463, "7569": 464, "2818": 464, "3928": 464, "0622": [464, 470], "0193": [464, 470], "enet_tol": [465, 466, 472, 1027], "220446049250313e": [465, 466, 472, 644, 645, 648, 649, 650, 676, 677], "graphlasso": [465, 1027, 1030], "costs_": [465, 466, 1038], "dual_gap": [465, 466, 472, 640, 641, 646, 647, 654, 655, 656, 657, 675, 678], "return_cost": [465, 466, 472], "049": 465, "364": [465, 466, 1023], "093": [465, 1027], "n_refin": 466, "graphlassocv": [466, 1024, 1030], "dualiti": [466, 977], "094": 466, "block_siz": [467, 473, 474, 1026], "4406": 467, "1616": 467, "0595": 467, "0075": [467, 535], "rouseeuw1984": 468, "butlerdavi": 468, "butler": [468, 1025, 1033, 1034], "davi": [468, 718, 981, 1026], "jhun": 468, "1385": 468, "7533": [469, 1029], "2763": 469, "3964": 469, "7833": 469, "2431": 469, "3889": 469, "0195": 469, "7387": 470, "2536": 470, "4110": 470, "cov_init": [472, 1038], "graph_lasso": [472, 1030], "x_loadings_": [476, 477, 478], "y_loadings_": [476, 477, 478], "plssvd": [476, 477, 1003, 1018, 1034, 1036], "x_c": [476, 477, 479, 988], "y_c": [476, 477, 479], "y_reconstruct": [476, 477, 478], "x_scores_": [478, 1034], "y_scores_": [478, 1034], "y_transform": 479, "data_hom": [480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 1029, 1038], "zero_bas": [481, 502, 503], "query_id": [481, 502, 503], "grok": 481, "qid": [481, 502, 503, 1023, 1028], "download_if_miss": [482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 1029], "stopword": [483, 1016], "target_column": [483, 484, 490], "494021": 486, "slice_": [487, 488, 1037], "195": [487, 488], "unrestrict": 487, "2914": 488, "5748": 488, "pathlik": [490, 1038], "n_retri": [490, 1036], "read_csv_kwarg": [490, 1038], "timeout": [490, 947, 1036], "412": [490, 977], "ith": [490, 767, 771, 829, 850, 851, 866, 867], "1592": 492, "1212": 492, "1624": 492, "620": 492, "data_filenam": [495, 499], "target_filenam": [495, 499], "container_path": 497, "load_cont": 497, "allowed_extens": 497, "container_fold": 497, "category_1_fold": 497, "file_1": 497, "file_2": 497, "file_42": 497, "category_2_fold": 497, "file_43": 497, "file_44": 497, "image_nam": 500, "first_img_data": 501, "backup": [502, 1022], "instantan": 502, "mycach": 502, "get_data": 502, "mysvmlightfil": 502, "xn": 503, "yn": [503, 982, 983], "q1": 503, "qn": 503, "yi": [503, 983, 1026, 1030, 1031, 1034], "qi": [503, 1034], "triplet": 503, "minval": [505, 507], "maxval": [505, 507], "seventh": [505, 993], "269": 505, "274": 505, "return_cent": [506, 1033], "basri": 507, "gerstein": 507, "716": 507, "flip_i": 509, "interdepend": 509, "polytop": 509, "guyon": [509, 587, 588, 981], "madelon": 509, "1991": [510, 511, 512], "12000": 514, "effective_rank": [515, 518], "tail_strength": [515, 518], "bell": [515, 1030, 1032, 1034, 1035], "fat": [515, 518], "crawl": [515, 922], "return_ind": 517, "4967": 518, "1382": 518, "6476": 518, "523": 518, "2341": 518, "4694": 518, "5425": 518, "579": 518, "7674": [518, 1029], "4017": 518, "data_transpos": [520, 1036, 1038], "norm_diag": 521, "make_spd_matrix": 521, "celeux": 522, "el": [522, 1035, 1037, 1038], "anbari": 522, "marin": 522, "frequentist": 522, "n_dim": [523, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619], "marsland": 524, "vuw": 524, "nz": 524, "marslast": 524, "ch6": 524, "code_init": [525, 539], "dict_init": [525, 531, 539, 540], "callback": [525, 531, 533, 539, 540, 842, 947, 1002, 1038], "split_sign": [525, 531, 536], "transform_max_it": [525, 531, 532, 536, 1032], "_fro": [525, 531, 539, 540, 640, 641, 646, 654, 655, 656, 675], "lasso_cd": [525, 531, 536, 542], "invok": [525, 531, 533, 539, 540, 561, 563, 564, 814, 890, 1034], "error_": [525, 537], "minibatchsparsepca": [525, 527, 531, 534, 536, 537, 539, 540, 1022, 1023, 1033, 1035, 1036, 1037, 1038], "sierra": [525, 531], "icml09": [525, 531], "x_hat": [525, 531], "noise_variance_init": 526, "quartimax": [526, 1034], "loglike_": 526, "barber": 526, "bishop": [526, 528, 535, 734, 788, 977, 982, 996], "get_covari": [526, 528, 535], "unmixing_matrix": 527, "whitening_": 527, "kpca": [527, 528, 529, 1017, 1018, 1022], "set_inverse_transform_request": [527, 575, 860, 873], "unsaf": 528, "singular_values_": [528, 535, 538, 1029], "var_": [528, 831, 873, 1035], "miketip": [528, 535], "mppca": [528, 535], "n_samples_seen_": [528, 862, 863, 873, 1030], "batch_size_": 528, "ross": [528, 601, 602, 997, 1036, 1037], "vision": [528, 751, 752, 973, 977, 979, 997, 1001, 1005, 1023], "toronto": [528, 638, 849], "dross": 528, "ivt": 528, "rosslimlinyang_ijcv": 528, "karhunen": 528, "loev": 528, "levi": [528, 1029], "lindenbaum": 528, "1371": 528, "1374": 528, "abstain": 528, "holub": 528, "opportun": [528, 995], "golub": [528, 831, 873], "x_spars": [528, 952, 955], "sigma2": [528, 535], "x_origin": [528, 533, 535, 537, 538, 624, 885, 886], "check_input": [528, 542, 640, 641, 646, 654, 655, 656, 675, 681, 901, 902, 903, 904, 1030], "remove_zero_eig": [529, 1024, 1031], "x_fit_": [529, 637], "eigenvalues_": [529, 1035], "eigenvectors_": [529, 1035], "dual_coef_": [529, 637, 895, 896, 897, 898, 899, 996, 1026], "x_transformed_fit_": 529, "gamma_": [529, 1038], "nathan": [529, 1030, 1034, 1037], "gunnar": [529, 930], "tropp": [529, 535], "288": [529, 535], "vladimir": [529, 930, 977, 1032, 1036], "rokhlin": [529, 535, 930], "tygert": [529, 535, 930], "learning_decai": 530, "evaluate_everi": 530, "perp_tol": 530, "mean_change_tol": 530, "max_doc_update_it": 530, "kappa": [530, 710], "tau_0": 530, "pseudocount": [530, 1030], "exp_dirichlet_component_": 530, "n_batch_iter_": 530, "bound_": 530, "doc_topic_prior_": 530, "topic_word_prior_": 530, "franci": [530, 652, 977, 1028], "onlineldavb": 530, "chong": 530, "00360392": 530, "25499205": 530, "0036211": 530, "64236448": 530, "09541846": 530, "15297572": 530, "00362644": 530, "44412786": 530, "39568399": 530, "003586": 530, "vb": 530, "sub_sampl": 530, "doc_topic_distr": [530, 1029], "052": 531, "fresh_restart": 532, "fresh_restarts_max_it": 532, "_w": [532, 534, 541], "_ratio": [532, 534, 541], "_h": [532, 534, 541], "fresh": [532, 1002, 1032], "reconstruction_err_": [532, 534], "andrzej": [532, 534, 541], "anh": [532, 534, 541], "ieic": [532, 534, 541], "708": [532, 534, 541, 743], "waspa": 532, "ridge_alpha": [533, 537, 1029], "power_iteration_norm": [535, 538, 929, 930, 1036], "500x500": 535, "lu": [535, 538, 929, 930, 1028, 1029, 1030, 1031, 1038], "n_samples_": 535, "royal": [535, 621, 869, 881, 995], "methodologi": [535, 866, 971, 981, 1005], "622": 535, "9924": 535, "30061": 535, "54980": 535, "00755": 535, "99244": 535, "ascontiguousarrai": 535, "sparse_encod": [536, 644, 645, 646, 647, 648, 649, 650, 657, 658, 659, 676, 677, 678, 679, 680, 1022, 1029, 1030, 1032, 1036], "u_init": 537, "v_init": 537, "9666": 537, "oversampl": [538, 1022], "indeterminaci": 538, "x_dens": 538, "0157": 538, "0512": 538, "0499": 538, "0479": 538, "0453": 538, "2102": 538, "2410": 538, "5981": 538, "5420": 538, "4486": 538, "3288": 538, "method_max_it": [539, 540, 1032], "dict_learning_onlin": [539, 1023, 1032, 1035, 1036], "return_cod": 540, "iter_offset": [540, 1036], "return_inner_stat": [540, 1036], "inner_stat": [540, 1036], "update_h": 541, "_n_compon": 541, "hal": [541, 652, 751, 752, 979], "copy_cov": 542, "orthogonal_mp": [542, 658, 659, 680, 977], "sum_k": [543, 997], "prior_k": 543, "c_k": 543, "priors_": [543, 544], "scalings_": [543, 544], "xbar_": 543, "reg_param": 544, "scaling_": 544, "colinear": 544, "rotations_": 544, "n_classes_": [545, 547, 549, 551, 553, 558, 604, 821, 822, 901, 903, 1023, 1032, 1034], "class_prior_": [545, 831], "n_outputs_": [545, 546, 551, 552, 558, 559, 560, 850, 851, 901, 902, 903, 904], "constant_": 546, "dummy_regr": 546, "base_estimator_": [547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 604, 890, 1037], "983": [547, 721], "dok": [547, 548, 860, 1035], "staged_decision_funct": [547, 553, 555], "staged_scor": [547, 548], "7972": 548, "9771": 548, "estimators_samples_": [549, 550, 557, 1028, 1030, 1033], "estimators_features_": [549, 550, 557], "oob_decision_function_": [549, 551, 558], "oob_prediction_": [550, 552, 559], "8720": [550, 1030], "min_weight_fraction_leaf": [551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904, 997, 1025, 1028, 1029], "min_impurity_decreas": [551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904, 997, 1029], "shannon": [551, 558, 901, 903, 978, 997], "unlimit": [551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904], "n_t": [551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904], "n_t_r": [551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904], "right_impur": [551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904], "n_t_l": [551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904], "left_impur": [551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904], "balanced_subsampl": [551, 558, 1030], "subtre": [551, 552, 553, 554, 558, 559, 901, 902, 903, 904, 997], "extratreeclassifi": [551, 560, 904, 982, 1026, 1031, 1032, 1033, 1035, 1036, 1037], "unprun": [551, 552, 558, 559, 901, 902, 903, 904], "x_leav": [551, 552, 553, 554, 558, 559, 560, 901, 902, 903, 904], "n_nodes_ptr": [551, 552, 558, 559, 560], "friedman_ms": [552, 553, 554, 559, 902, 904, 997, 1038], "extratreeregressor": [552, 557, 560, 903, 987, 1031, 1032, 1033, 1035, 1036, 1037], "2727": 552, "dummyestim": [553, 554], "eras": [553, 554, 640, 646, 652, 654, 656, 660, 661, 662, 670, 671, 672, 850, 851], "oob_scores_": [553, 554, 1038], "init_": [553, 554], "init_estim": [553, 554], "max_features_": [553, 554, 591, 901, 902, 903, 904, 1036], "_fit_stag": [553, 554], "crossentropi": 555, "deepest": [555, 556, 1033], "no_interact": [555, 556, 1037], "do_early_stopping_": [555, 556], "n_trees_per_iteration_": [555, 556], "validation_score_": [555, 556], "is_categorical_": [555, 556], "n_trees_per_iter": 555, "max_samples_": 557, "fei": [557, 987], "ting": [557, 987, 1030, 1031], "ming": [557, 987, 1026, 1030, 1031, 1032, 1036], "zhou": [557, 633, 889, 987, 1030, 1038], "zhi": [557, 987], "hua": [557, 987], "icdm": [557, 987], "eighth": [557, 987], "tkdd": 557, "n_left": 557, "32987858": 559, "n_out": 560, "one_hot_encoder_": 560, "moosmann": 560, "trigg": 560, "juri": 560, "random_tre": 560, "x_sparse_embed": 560, "randomtreesembedding_": 560, "final_estimator_": [561, 562], "named_estimators_": [561, 562, 563, 564, 1030, 1032], "named_estim": [561, 562, 563, 564], "parameter_nam": [561, 562, 563, 564], "new_valu": [561, 562, 563, 564], "linearsvr": [562, 899, 996, 1026, 1028, 1033, 1038], "flatten_transform": [563, 1029], "le_": 563, "eclf1": 563, "array_equ": [563, 1029], "eclf2": 563, "eclf3": 563, "maj": 563, "probabilities_or_label": 563, "n_regressor": 564, "r1": 564, "r3": 564, "er": 564, "add_not": [565, 566, 567, 568, 569, 570, 571, 572], "with_traceback": [565, 566, 567, 568, 569, 570, 571, 572], "__traceback__": [565, 566, 567, 568, 569, 570, 571, 572], "current_sklearn_vers": 570, "repr": [571, 1033, 1034, 1036], "linter": 573, "flake8": 573, "spam": [575, 703, 734, 828, 981, 983, 1005], "comparis": [575, 576, 582, 583, 585], "feature_names_": 575, "xa": 575, "dict_typ": 575, "conform": [575, 622, 821, 822, 981, 1001, 1002, 1029, 1035], "1048576": [576, 583], "non_neg": [576, 1029], "eleph": 576, "bird": [576, 712, 747, 981], "patch_height": [577, 578, 581], "patch_width": [577, 578, 581], "img_height": 577, "img_width": 577, "pe": 577, "pe_tran": 577, "263758": 577, "image_height": [577, 578, 581], "image_width": [577, 578, 581], "n_channel": [577, 578, 581], "n_patch": [577, 578, 581], "272214": 578, "243": 578, "215": 578, "244": 578, "n_z": 579, "return_a": [579, 580, 947, 1025], "_coo": [579, 580], "image_s": 581, "strip_acc": [582, 583, 585], "nfkd": [582, 583, 585, 1032], "unicodedata": [582, 583, 585], "regexp": [582, 583, 585], "min_n": [582, 583, 585, 1022], "max_n": [582, 583, 585, 1022], "fixed_vocabulary_": [582, 585], "stop_words_": [582, 585], "delattr": [582, 585, 1034], "vectorizer2": 582, "raw_docu": [582, 585], "get_stop_word": [582, 583, 585], "x_inv": [582, 585], "con": 583, "yates2011": 584, "baeza": [584, 723, 1025], "yate": [584, 723], "ribeiro": [584, 723, 1035], "neto": [584, 723], "addison": [584, 723], "weslei": [584, 723], "mrs2008": 584, "tfid": 584, "22314355": 584, "51082562": 584, "91629073": 584, "_check_stop_list": 585, "pvalu": [586, 589, 590, 592, 593, 594, 818], "k_best": [586, 890, 994], "fdr": 586, "fwe": 586, "iff": [586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 864], "retent": [586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "n_selected_featur": [586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "n_original_featur": [586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "attrgett": [587, 591], "barnhil": [587, 588], "vapnik": [587, 588], "389": [587, 588, 1016], "422": [587, 588, 719, 749, 981], "n_subsets_of_featur": 588, "narrai": 588, "benjamini": [589, 1028, 1029], "hochberg": [589, 1028, 1029], "false_discovery_r": 589, "norm_ord": [591, 1029], "threshold_": [591, 1029], "3252302": 591, "83462377": 591, "49750423": 591, "55245": 591, "half_cal": 591, "half_selector": 591, "unspecifi": [593, 594, 792, 978], "_get_support_mask": 595, "n_features_to_select_": 596, "variances_": 597, "weed": 598, "p_valu": [598, 599, 600], "f_statist": [599, 600], "force_finit": [600, 603, 721, 778, 981, 1036], "pearson": [600, 603, 1035], "discrete_featur": [601, 602], "essenc": [601, 602, 736, 978, 981], "kraskov": [601, 602], "stogbauer": [601, 602], "grassberg": [601, 602], "phy": [601, 602], "kozachenko": [601, 602], "leonenko": [601, 602], "probl": [601, 602], "peredachi": [601, 602], "correlation_coeffici": 603, "fmin_l_bfgs_b": [604, 605], "max_iter_predict": 604, "copy_x_train": [604, 605], "one_vs_rest": [604, 982], "compoundkernel": [604, 1036], "obj_func": [604, 605], "initial_theta": [604, 605], "theta_opt": [604, 605], "func_min": [604, 605], "_posterior_mod": 604, "log_marginal_likelihood_value_": [604, 605], "9866": [604, 613, 616], "83548752": 604, "03228706": 604, "13222543": 604, "79064206": 604, "06525643": 604, "14410151": 604, "clone_kernel": [604, 605, 1032], "n_kernel_param": [604, 605], "log_likelihood_gradi": [604, 605], "x_train_": 605, "y_train_": 605, "3680": [605, 608, 619], "592": [605, 608, 619, 988], "y_cov": 605, "n_samples_x": [605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 767, 768, 769, 770, 771, 772, 773, 774], "requires_vector_input": [606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619], "51292546": 606, "09861229": [606, 991], "n_samples_i": [606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 767, 768, 769, 770, 771, 772, 773, 774], "n_kernel": 606, "k_gradient": [606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619], "k_diag": [606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619], "hyperparameter_constant_valu": 607, "3696": 607, "606": [607, 823, 982], "hyperparameter_sigma_0": 608, "edward": [608, 613, 616, 1025, 1030, 1031, 1032, 1033, 1037], "hyperparameter_length_scal": [609, 613, 616, 617], "hyperparameter_period": 609, "0144": 609, "457": 609, "3894": 609, "3467": 609, "namedtupl": [611, 939, 1038], "maxsiz": 611, "mat\u00e9rn": 613, "appr": 613, "8513": 613, "0368": 613, "1117": 613, "8086": [613, 1029], "0693": 613, "1220": 613, "gamma_bound": 614, "pairwise_kernels_kwarg": 614, "additive_chi2": [614, 632, 758, 767], "pairwise_kernel_funct": [614, 637, 767], "hyperparameter_gamma": 614, "9733": [614, 617], "8880": 614, "05663": 614, "05532": 614, "8676": [614, 1029], "07073": 614, "06165": 614, "__mul__": 615, "8354": [616, 1029], "03228": 616, "1322": 616, "7906": [616, 643], "0652": 616, "1441": 616, "hyperparameter_alpha": 617, "8881": 617, "0566": 617, "05518": 617, "8678": 617, "0707": 617, "0614": 617, "hyperparameter_noise_level": 619, "initial_strategi": 621, "imputation_ord": [621, 1032], "skip_complet": 621, "min_valu": [621, 1033, 1034], "max_valu": [621, 1033, 1034], "keep_empty_featur": [621, 622, 624, 971, 1037], "nullabl": [621, 622, 623, 624, 1033, 1037], "na": [621, 622, 623, 624, 762, 771, 911, 913, 914, 1032, 1033, 1036, 1037, 1038], "known_val": 621, "Nearness": 621, "arab": 621, "broadcast": 621, "missingind": [621, 622, 624, 971, 1030, 1031, 1032, 1036, 1038], "initial_imputer_": 621, "imputation_sequence_": 621, "feat_idx": 621, "neighbor_feat_idx": 621, "n_features_with_missing_": 621, "indicator_": [621, 622, 624], "knp": 621, "stef": [621, 971], "buuren": [621, 971], "karin": [621, 971], "groothui": [621, 971], "oudshoorn": [621, 971], "buck": 621, "1960": [621, 710], "imp_mean": [621, 624], "9584": [621, 1029], "nan_euclidean": [622, 755, 771], "_pairwise_cal": 622, "kwd": [622, 764, 767, 771, 774, 783, 784], "olga": [622, 971], "troyanskaya": [622, 971], "cantor": [622, 971], "gavin": [622, 971], "sherlock": [622, 971], "pat": [622, 971], "botstein": [622, 971], "russ": [622, 971], "altman": [622, 971], "bioinformat": [622, 971], "520": [622, 842, 971, 984], "n_output_featur": 622, "error_on_new": 623, "features_": [623, 971], "n_missing_featur": 623, "x2_tr": 623, "n_features_with_miss": 623, "statistics_": 624, "n_features_missing_ind": 624, "x_imput": 624, "n_features_out": 624, "quadcontourset": 625, "quadmesh": 625, "feature_1": [625, 906], "feature_2": 625, "nicer": 625, "pd_result": 626, "target_idx": 626, "decil": [626, 1033], "is_categor": 626, "pdp": [626, 988, 1036], "nonexist": 626, "deciles_vlines_": 626, "vlines_": 626, "deciles_hlines_": 626, "bars_": 626, "heatmaps_": 626, "pdp_lim": 626, "ice_lines_kw": 626, "pd_line_kw": 626, "contour_kw": 626, "disp1": 626, "disp2": 626, "pdp_line_kw": 626, "bar_kw": 626, "heatmap_kw": 626, "seq": 627, "n_values_feature_j": 627, "bre": [628, 997], "4666": 628, "2211": 628, "x_min_": 629, "x_max_": 629, "n_threshold": [629, 720, 775, 782], "stepwis": [629, 648, 649, 650, 676, 677, 977], "increasing_": 629, "isotonic_regress": [629, 1035], "secondari": [629, 1026], "leeuw": 629, "1977": 629, "nilotp": [629, 631], "chakravarti": [629, 631], "308": 629, "pava": 629, "hornik": 629, "mair": 629, "kruskal": [629, 684, 688, 978], "psychometrica": 629, "iso_reg": 629, "8628": 629, "7256": 629, "isotonicregression0": 629, "increasing_bool": 630, "fisher_transform": 630, "sample_step": 632, "sample_interv": 632, "sample_interval_": [632, 1038], "skewedchi2sampl": [632, 633, 634, 635, 973, 1029, 1036, 1037], "chi2_kernel": [632, 636, 751, 758, 979, 1023], "additive_chi2_kernel": [632, 752, 758, 973], "vedaldi": [632, 973], "zisserman": [632, 973, 981], "chi2sampl": 632, "9499": 632, "component_indices_": [633, 1035], "normalization_": 633, "additivechi2sampl": [633, 634, 635, 636, 751, 752, 973, 1036, 1038], "kernel_metr": [633, 634, 635, 636], "seeger": 633, "mahdavi": 633, "jin": [633, 1033, 1034], "data_transform": 633, "9987": 633, "fft": 634, "indexhash": 634, "bithash": 634, "indexhash_": 634, "bithash_": 634, "kitchen": [635, 973], "sink": [635, 973], "random_offset_": [635, 636], "random_weights_": [635, 636], "rahimi": [635, 973], "benjamin": [635, 1024, 1025, 1033, 1034, 1035, 1036, 1037, 1038], "recht": [635, 973], "berkelei": [635, 901, 902], "brecht": 635, "rah": 635, "rbf_featur": [635, 973], "skewed": [636, 1029], "secant": 636, "fuxin": 636, "catalin": 636, "ionescu": [636, 973, 1032], "cristian": 636, "sminchisescu": [636, 973], "chi2_featur": 636, "2c": [637, 646, 666, 667, 668, 669, 681, 973], "492": [637, 974, 1014], "493": [637, 893, 974], "alpha_1": [638, 639, 977], "alpha_2": [638, 639, 977], "lambda_1": [638, 639, 977], "lambda_2": [638, 639, 977], "threshold_lambda": 638, "x_offset_": [638, 639, 1034], "x_scale_": [638, 639, 1034], "mackai": [638, 639, 977], "ashra": 638, "salakhutdinov": [638, 842, 984], "utstat": 638, "rsalakhu": 638, "sta4273": 638, "lecture2": 638, "computed_scor": 639, "appendix": [639, 670, 977, 991], "wipf": [639, 977], "nagarajan": [639, 977], "2_2": [640, 641, 646, 647, 648, 649, 650, 654, 655, 656, 657, 666, 675, 676, 677, 678], "glmnet": [640, 641, 1022], "sparse_coef_": [640, 646, 654, 656, 1022], "dual_gap_": [640, 641, 646, 647, 654, 655, 656, 657, 1035], "max_j": [640, 646], "w_j": [640, 646, 981, 995], "ext": 640, "83816048": 640, "55968825": 640, "451": 640, "coef_init": [640, 641, 646, 647, 654, 655, 656, 657, 660, 662, 670, 671, 672, 675, 678], "mono": [640, 641, 646, 647, 654, 655, 656, 657, 675, 678], "_21": [640, 641, 646, 647, 654, 655, 656, 657, 675, 678], "sum_j": [640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 977, 981, 986], "alpha_min": [640, 641, 644, 646, 647, 648, 650, 654, 655, 656, 657, 675, 676, 677, 678], "alpha_max": [640, 641, 646, 647, 654, 655, 656, 657, 675, 678], "ndim": [640, 641, 646, 647, 654, 655, 656, 657, 675, 678, 913, 914], "multitaskelasticnet": [640, 641, 646, 655, 656, 657, 675, 977, 1022, 1029, 1030, 1033, 1035], "multitaskelasticnetcv": [640, 641, 646, 654, 656, 657, 675, 977, 1025, 1032, 1033, 1035], "l1_ratio_": [641, 653, 655], "n_l1_ratio": [641, 653, 655, 1025], "unpen": [642, 663, 674, 977], "raphson": [642, 663, 674], "g_j": [642, 663, 674], "896": 642, "483": 642, "795": 642, "pg_i": 643, "scale_": [643, 862, 863, 871, 873, 883, 991, 1027], "outliers_": 643, "elvezio": [643, 977], "ronchetti": [643, 977], "concomit": [643, 977], "owen": [643, 1031, 1032], "statweb": [643, 676, 677], "hhu": [643, 1031], "284": 643, "806": 643, "7200": 643, "4923": 643, "1698": 643, "0106": 643, "9221": 643, "0226": 643, "fit_path": [644, 648, 649, 650, 676, 677], "coef_path_": [644, 645, 648, 649, 977], "active_": [644, 645, 648, 649], "larscv": [644, 659, 676, 677, 1029, 1035], "1111": [644, 650], "max_n_alpha": [645, 649], "n_cv_alpha": [645, 649], "cv_alpha": [645, 649], "lassolar": [645, 646, 647, 649, 650, 657, 658, 659, 676, 677, 678, 977, 1014, 1022, 1023, 1025, 1029, 1032, 1033, 1035], "9996": 645, "2961": 645, "3996": 645, "2_f": 646, "_11": 646, "4951": 647, "2_fro": [647, 656, 657, 678], "coef_path": [647, 657, 678], "46874778": [647, 657, 678], "2159048": [647, 657, 678], "4425765": [647, 657, 678], "23689075": [647, 657, 678], "coef_path_lar": [647, 657, 678], "coef_path_continu": [647, 657, 678], "interp1d": [647, 657, 678], "46915237": [647, 657, 678], "23668876": [647, 657, 678], "congruenc": [648, 649, 650, 676, 677], "fragil": 649, "3972": 649, "2222": 650, "rank_": 651, "singular_": 651, "maxent": [652, 653, 977], "primal": [652, 653, 671, 893, 894, 995, 996], "synthetic_feature_weight": [652, 653], "ciyou": 652, "byrd": 652, "jorg": [652, 1025, 1034, 1036], "noced": 652, "lui": [652, 1023, 1025, 1026, 1030], "iem": 652, "lbfgsb": 652, "schmidt": [652, 977, 1025], "le": [652, 861, 972, 977, 984, 992, 994, 1030, 1034, 1035], "roux": [652, 977, 994], "00860051": 652, "defazio": [652, 977], "lacost": [652, 977], "hsiang": [652, 1026], "fu": [652, 1026], "fang": [652, 1029, 1030], "lan": [652, 1037, 1038], "chih": [652, 1027], "jen": [652, 1030], "maxent_du": 652, "cs_": 653, "l1_ratios_": 653, "coefs_paths_": [653, 1032], "coefs_path": 653, "n_l1_ratios_": 653, "w_ij": 654, "eps_": [654, 656], "45663524": 654, "45612256": 654, "0872422": 654, "fro_2": [655, 657], "multitasklassocv": [655, 1025, 1032, 1033, 1035], "52875032": 655, "46958558": 655, "00166409": 655, "60809415": 656, "94592424": 656, "41888636": 656, "87382323": 656, "9994": 657, "5713": 657, "153": 657, "7971": 657, "9015": [657, 1030], "n_nonzero_coefs_": [658, 659], "orthogonal_mp_gram": [658, 659, 679, 1036], "mallat": [658, 679, 680, 977], "3397": [658, 679, 680], "3415": [658, 679, 680], "papier": [658, 679, 680], "mallatpursuit93": [658, 679, 680], "rubinstein": [658, 679, 680], "zibulevski": [658, 679, 680], "elad": [658, 679, 680], "technion": [658, 679, 680, 977], "ronrubin": [658, 679, 680, 977], "ksvd": [658, 679, 680, 977], "9991": [658, 659, 1030], "3854": [658, 659], "previous_loss": [660, 661, 662, 671], "pa": [660, 661, 890, 977, 981, 994], "preset": [660, 662, 670, 985], "t_": [660, 661, 662, 670, 671, 672, 850, 851, 995], "loss_function_": [660, 662, 670, 671], "volume7": [660, 661], "crammer06a": [660, 661], "crammer": [660, 661, 728, 977, 981, 996], "dekel": [660, 661, 977], "keshat": [660, 661, 977], "shalev": [660, 661, 977, 995], "shwartz": [660, 661, 977, 995], "singer": [660, 661, 728, 977, 981, 995, 996], "26642044": 660, "45070924": 660, "67251877": 660, "64185414": 660, "84127814": 660, "intercept_init": [660, 662, 670, 672], "y_all": [660, 662, 670, 821, 822, 850], "epsilon_insensit": [661, 670, 672, 894, 977, 995], "squared_epsilon_insensit": [661, 670, 672, 894, 977, 1028], "48736655": 661, "18818427": 661, "59122734": 661, "94731329": 661, "02306214": 661, "eta0": [662, 670, 671, 672, 995], "lossfunct": [662, 670, 671, 1031], "therein": 662, "939": [662, 1011], "990": [663, 981], "088": [663, 989], "676": 663, "solver_opt": 664, "ipm": 664, "linprog": [664, 977], "is_data_valid": [665, 977], "is_model_valid": [665, 977], "max_trial": [665, 977], "max_skip": 665, "stop_n_inli": [665, 977], "stop_scor": [665, 977], "stop_prob": 665, "mad": [665, 1028], "costlier": 665, "n_trials_": 665, "n_skips_no_inliers_": 665, "n_skips_invalid_data_": 665, "n_skips_invalid_model_": 665, "sri": [665, 977, 1029, 1030], "bmva": 665, "bmvc": [665, 977], "paper355": 665, "9885": 665, "9417": 665, "15000": [666, 681, 850, 851], "btol": [666, 668], "gcv_mode": [667, 1024], "store_cv_valu": [667, 669, 1030, 1033], "alpha_per_target": [667, 1034], "cv_values_": [667, 669], "ridgeclassifiercv": [667, 668, 781, 981, 982, 1030, 1032, 1033, 1035, 1036], "5166": 667, "gcv": [667, 669], "9595": 668, "9630": 669, "power_t": [670, 671, 672, 850, 851, 995], "best_loss": [670, 672], "leon": [670, 671, 672, 1022], "bottou": [670, 671, 672, 985, 995], "pow": [670, 671, 672, 850, 851], "dl": 670, "775047": 670, "775151": 670, "justif": 670, "volume2": 670, "zhang02c": 670, "offset_init": 671, "unshifft": 671, "n_subsampl": [673, 919], "breakdown_": 673, "n_subpopulation_": 673, "xin": [673, 977, 1030], "dang": [673, 977], "hanxiang": [673, 977], "peng": [673, 977, 1028, 1029, 1030, 1032, 1034], "xueqin": [673, 977], "hepe": [673, 977], "olemiss": 673, "xdang": 673, "mtse": 673, "9884": 673, "5871": 673, "coeff": 674, "839": 674, "599": 674, "copy_gram": [676, 677, 680], "return_path": [676, 677, 679, 680], "lars_path_gram": [676, 977, 1031], "tib": [676, 677], "xgamma": 679, "norms_squar": 680, "copy_xi": 680, "return_intercept": [681, 1031], "linearoper": 681, "_preprocess_data": 681, "path_method": [682, 978], "neighbors_algorithm": [682, 683], "arnoldi": [682, 683, 687], "fw": 682, "warshal": [682, 978], "kernel_pca_": 682, "nbrs_": [682, 683], "dist_matrix_": 682, "tenenbaum": [682, 978], "reconstruction_error": 682, "frobenius_norm": 682, "d_fit": 682, "x_fit": 682, "n_queri": [682, 835, 836, 837, 839, 841, 843, 844, 845], "hessian_tol": [683, 687], "modified_tol": [683, 687], "reconstruction_error_": 683, "rowei": [683, 687, 842, 978, 984], "saul": [683, 687, 978, 1029, 1030, 1032], "2323": [683, 687, 978], "donoho": [683, 687, 978], "grime": [683, 687, 978], "natl": [683, 687, 978], "acad": [683, 687, 978], "5591": [683, 687, 978], "mlle": [683, 687, 978], "zha": [683, 687, 978], "shanghai": [683, 687, 978], "univ": [683, 687, 978], "406": [683, 687, 978], "immers": [684, 688], "nonmetr": [684, 688, 978], "smacof": [684, 1037], "stress": [684, 688, 978, 1037], "stress_": 684, "dispar": [684, 688, 978], "dissimilarity_matrix_": 684, "psychometrika": [684, 688, 978], "1964": [684, 688, 869, 881, 978], "borg": [684, 688, 978], "groenen": [684, 688, 978], "affinity_matrix": 685, "n_neighbors_": [685, 839], "early_exagger": 686, "min_grad_norm": [686, 1028], "der": [686, 690, 978, 1025, 1026, 1030], "maaten": [686, 690, 978], "bhtsne": [686, 1029], "opentsn": 686, "abort": 686, "pdist": [686, 771, 774], "pairwise_distance_funct": [686, 690, 771, 774, 984], "barn": [686, 978, 1027, 1029, 1032], "hut": [686, 978, 1027, 1029, 1032], "nlogn": 686, "kl_divergence_": [686, 1029], "learning_rate_": [686, 851], "hinton": [686, 842, 849, 850, 851, 978, 984, 985, 986], "2579": 686, "2605": 686, "lvdmaaten": [686, 1029], "oct": [686, 762, 978, 984], "3221": [686, 978], "3245": [686, 978], "jmlr_2014": 686, "belkina": [686, 978], "ciccolella": [686, 978], "anno": [686, 978], "halpert": [686, 978], "spidlen": [686, 978], "snyder": [686, 978], "cappion": [686, 978], "kobak": [686, 1035], "beren": 686, "transcriptom": 686, "guttman": 688, "norm_laplacian": 689, "drop_first": 689, "nk": 690, "2n": [690, 973, 985], "3k": 690, "cosine_dist": [690, 755, 984, 1028], "jarkko": 690, "venna": 690, "samuel": [690, 1005, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "kaski": 690, "icann": 690, "verlag": 690, "485": 690, "twelfth": 690, "pmlr": 690, "384": [690, 894], "391": 690, "im_": 691, "axesimag": 691, "text_": 691, "include_valu": 691, "values_format": [691, 1032], "im_kw": [691, 1036], "text_kw": [691, 1037], "get_metr": 693, "euclideandist": 693, "manhattandist": 693, "chebyshevdist": 693, "minkowskidist": [693, 1035], "seuclideandist": 693, "mahalanobisdist": 693, "haversinedist": 693, "arcsin": [693, 757], "hammingdist": 693, "n_unequ": 693, "n_tot": 693, "canberradist": 693, "braycurtisdist": 693, "abbrevi": 693, "ntt": 693, "ntf": 693, "nft": 693, "nff": 693, "nneq": 693, "jaccarddist": 693, "matchingdist": 693, "dicedist": 693, "kulsinskidist": [693, 1038], "rogerstanimotodist": 693, "russellraodist": 693, "sokalmichenerdist": 693, "sokalsneathdist": 693, "pyfunc": [693, 984], "pyfuncdist": 693, "metric_obj": 693, "chance_level_": [694, 696, 1038], "drop_intermedi": [694, 696, 775, 782, 1038], "errors_lines_": 695, "with_error": 695, "scatter_": 695, "balanced_accuracy_scor": [697, 780, 981, 1030], "imperfectli": [697, 727, 981], "label_tru": [698, 711, 730, 748, 750, 786], "upperlimit": 698, "nat": [698, 748, 750, 1036], "expected_ri": 699, "discord": 699, "hubert1985": 699, "1007": 699, "2fbf01908075": 699, "steinley2004": 699, "wk": 699, "rand_index": 699, "adjusted_rand_index": 699, "chacon": 699, "chac\u00f3n": 699, "rastrojo": 699, "balanced_accuraci": [702, 981, 1030], "brodersen": 702, "ong": 702, "stephan": [702, 1025, 1031, 1032, 1034], "buhmann": 702, "20th": 702, "3121": 702, "kelleh": [702, 981], "aoif": [702, 981], "arci": [702, 981], "y_true_categor": [703, 981], "calinski": [704, 1028], "harabasz": 704, "allow_non": 705, "thrown": [705, 1031, 1032], "tn": [706, 712, 981], "negative_class": 706, "zebra": 706, "output_dict": [707, 1030, 1034], "zero_divis": [707, 722, 723, 731, 776, 777, 780, 1032, 1034, 1038], "precision_recall_fscore_support": [707, 722, 723, 777, 780, 981, 1026, 1030, 1032, 1038], "multilabel_confusion_matrix": [707, 722, 723, 731, 777, 780, 981, 1031], "conting": [708, 709, 724, 748, 1028], "n_classes_tru": [708, 748], "n_classes_pr": [708, 748], "cohen": [710, 1030], "p_o": 710, "p_e": 710, "artstein": 710, "poesio": 710, "linguist": [710, 890, 994], "555": 710, "596": 710, "label_pr": [711, 729, 730, 748, 750, 786], "ant": [712, 747, 981], "a_row": 713, "a_column": 713, "b_row": 713, "b_column": 713, "tsoumaka": [714, 727, 733, 981], "kataki": [714, 727, 733, 981], "vlahava": [714, 733, 981], "handbook": [714, 733, 981], "667": [714, 733, 981], "685": [714, 733, 981], "raw_valu": [715, 716, 721, 738, 739, 741, 743, 744, 746, 778, 981, 1030, 1033], "wainwright": [715, 716, 717], "su": [715, 716, 717], "statlearnspars": [715, 716, 717], "764": [715, 981], "691": 715, "8125": 715, "57142857": 715, "d2": 716, "d2_absolute_error_scor": [716, 981, 1036], "koenker": [716, 977], "roger": [716, 1029, 1030, 1034], "jos\u00e9": [716, 1025, 1035], "772": 716, "bouldin": 718, "farther": 718, "log_bas": 719, "ignore_ti": [719, 749], "ndcg": [719, 749, 981, 1029], "ndcg_score": [719, 981, 1029, 1032, 1037, 1038], "sharper": 719, "discounted_cumulative_gain": 719, "dcg": [719, 749, 981, 1029], "jarvelin": [719, 749, 981], "kekalainen": [719, 749, 981], "colt": [719, 749, 981], "mcsherri": [719, 749, 981], "najork": [719, 749, 981], "european": [719, 749, 981], "421": [719, 749, 981], "groud": [719, 749], "true_relev": [719, 749], "imperfect": [721, 778, 981, 1024], "variance_weight": [721, 778, 981], "n_unique_label": [722, 723, 731, 776, 777, 780, 945], "fbeta_scor": [722, 735, 776, 981, 1024, 1025, 1026, 1027, 1032, 1038], "undefinedmetricwarn": [722, 723, 776, 777, 780, 1031], "y_true_empti": 722, "y_pred_empti": [722, 723], "66666667": [722, 775, 843, 991], "328": 723, "fowlk": [724, 1028], "mallow": [724, 1028], "get_scorer_nam": [725, 981, 1036], "forgiv": 727, "upperbound": 727, "grigorio": 727, "ioanni": 727, "wareh": 727, "septemb": [727, 981, 1022, 1025, 1028, 1030, 1035, 1038], "pred_decis": [728, 981, 1035], "disagre": [728, 988], "kobi": 728, "yoram": 728, "AND": 728, "denero": 728, "gluster": 729, "v_measur": [729, 786], "6666": [731, 981, 1028], "5833": [731, 981], "lrap": [732, 981], "21616": 734, "needs_proba": [735, 1031], "needs_threshold": [735, 981], "ftwo_scor": [735, 981], "mcc": [736, 981, 1036], "baldi": 736, "brunak": 736, "chauvin": 736, "andersen": [736, 1036], "nielsen": [736, 1030], "gorodkin": 736, "jurman": 736, "riccadonna": 736, "furlanello": 736, "cen": 736, "mape": [739, 981], "3273": 739, "5515": 739, "6198": 739, "112589990684262": 739, "0568": 740, "4260": [742, 745], "612": 743, "822": 743, "41666667": 743, "825": 743, "msle": [744, 981], "rmsle": 744, "00462428": 744, "08377444": 744, "samplewis": [747, 981], "mcm": [747, 981], "mcm_": 747, "multi_confus": 747, "normalized_discounted_cumulative_gain": 749, "dcg_score": [749, 981, 1029, 1032], "kernel_matrix": [751, 752, 759, 769], "marszalek": [751, 752, 979], "lazebnik": [751, 752, 979], "schmid": [751, 752, 979], "ouvert": [751, 752, 979], "00171412": [751, 752, 979], "dense_output": [754, 760, 886, 931, 1030], "linear_kernel": [754, 758, 979, 1030], "haversine_dist": [755, 1031], "y_norm_squar": 756, "x_norm_squar": [756, 1027], "paired_dist": [756, 762, 771, 1026], "41421356": [756, 762, 984], "lon": 757, "ezeiza": 757, "airport": 757, "bueno": 757, "argentina": 757, "gaull": 757, "bsa": 757, "83333": 757, "5166646": 757, "0083899664": 757, "53844117956": 757, "bsas_in_radian": 757, "paris_in_radian": 757, "6371000": 757, "kilomet": 757, "11099": 757, "54035582": 757, "polynomial_kernel": [758, 979], "rbf_kernel": [758, 979, 1026], "laplacian_kernel": [758, 979, 1027], "sigmoid_kernel": [758, 979], "sum_over_featur": [761, 1022, 1037], "componentwis": 761, "sq": 762, "dixon": [762, 1032, 1033], "cybernet": 762, "ieeexplor": 762, "4310090": 762, "filter_param": 767, "jth": [767, 771], "force_all_finit": [771, 911, 913, 914, 1033, 1036], "distance_metr": [771, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847], "metric_kwarg": [772, 773], "reduce_func": [774, 1033], "d_chunk": 774, "sought": 774, "neigh": [774, 835, 836, 837, 839, 841, 843, 844, 845], "gen": 774, "probas_pr": 775, "warn_for": 776, "shantanu": 776, "godbol": 776, "sunita": 776, "sarawagi": 776, "pig": 776, "948": [778, 981], "max_fpr": [781, 981, 1030], "provost": [781, 981], "ceder": [781, 981], "stern": [781, 981], "fawcett": [781, 782, 981], "generalis": [781, 981, 1002], "multioutputclassifi": [781, 822, 824, 826, 981, 1029, 1031, 1032, 1033, 1034, 1038], "n_samples_a": [783, 784], "favour": [783, 978, 980, 1031], "mean_prior": 788, "degrees_of_freedom_prior": 788, "verbose_interv": [788, 789], "wishart": 788, "emipr": 788, "precisions_": [788, 789], "precisions_cholesky_": [788, 789, 1036], "converged_": [788, 789], "lower_bound_": [788, 789, 1030], "weight_concentration_prior_": 788, "weight_concentration_": 788, "mean_precision_prior_": 788, "mean_precision_": 788, "mean_prior_": 788, "degrees_of_freedom_prior_": 788, "degrees_of_freedom_": 788, "covariance_prior_": 788, "hagai": 788, "attia": 788, "bgm": 788, "n_dimens": [788, 789], "log_prob": [788, 789], "weights_init": 789, "precisions_init": [789, 1036, 1038], "gm": 789, "pre_dispatch": [790, 796, 804, 812, 814, 815, 816, 817, 820, 947, 1025], "error_scor": [790, 793, 794, 796, 804, 812, 815, 816, 817, 820, 970, 1026, 1030, 1034, 1037], "explos": [790, 804, 814, 815, 816], "fitfailedwarn": [790, 793, 794, 796, 804, 812, 815, 816, 817, 820], "param_kernel": [790, 804], "param_degre": 790, "split0_test_scor": [790, 804, 1028], "rank_t": 790, "split1_test_scor": [790, 804], "split0_train_scor": [790, 804, 1028], "split1_train_scor": [790, 804], "mean_train_scor": [790, 804, 1028], "std_train_scor": [790, 804, 1028], "split0_test_precis": [790, 804], "mean_train_precis": [790, 804], "best_estim": [790, 793, 794, 804], "scorer_": [790, 793, 794, 804], "n_splits_": [790, 793, 794, 804], "refit_time_": [790, 793, 794, 804, 1030], "multimetric_": [790, 793, 794, 804], "parametergrid": [790, 1024, 1030], "split2_test_scor": 790, "num_sampl": [790, 804, 1037], "stratif": [791, 792, 798, 799, 808, 809, 810, 952, 1031], "group_kfold": 791, "set_split_request": [791, 792, 797, 799, 808], "aggressive_elimin": [793, 794, 970], "r0": [793, 794], "replai": [793, 794], "n_remaining_candidates_": [793, 794], "n_candid": [793, 794, 970], "max_resources_": [793, 794], "min_resources_": [793, 794], "n_required_iterations_": [793, 794], "n_possible_iterations_": [793, 794], "exceed": [793, 794, 1028], "n_unique_tick": [796, 817], "n_tick": [796, 812, 817, 820], "neg_": [796, 812, 1028], "errorbar_": [796, 812], "errorbarcontain": [796, 812], "line2d": [796, 812], "fill_between_": [796, 812], "polycollect": [796, 812], "exploit_incremental_learn": [796, 817], "log_scal": [796, 1038], "fill_between_kw": [796, 812], "errorbar_kw": [796, 812], "predispatch": [796, 812, 817, 820], "negat": [796, 812, 981], "combinator": 800, "lpo": 800, "param_list": 802, "rounded_list": 802, "89856": 802, "923223": 802, "878964": 802, "038159": 802, "parametersampl": [804, 1024, 1030, 1034], "2652124": 805, "rskf": 806, "36851234": 806, "sizeabl": [807, 810], "sad": [808, 809], "sss": 810, "logistic_regress": 812, "n_valu": [812, 820, 1030], "checked_cv": 813, "3315057": [815, 816], "08022103": [815, 816], "03531816": [815, 816], "test_r2": 816, "test_auc": 816, "train_r2": 816, "train_auc": 816, "3635": 816, "3573": 816, "6114": 816, "28009951": 816, "3908844": 816, "22784907": 816, "train_sizes_ab": 817, "train_size_ab": 817, "cv_train_scor": 817, "cv_test_scor": 817, "permutation_scor": 818, "pairwise_indices_": 821, "outputcodeclassifi": [821, 822, 1029, 1034, 1038], "label_binarizer_": 822, "multilabel_": [822, 1027], "onevsoneclassifi": [822, 823, 1023, 1025, 1026, 1028, 1029, 1031, 1034, 1036], "code_s": [823, 982], "code_book_": 823, "bakiri": [823, 982], "pict": [823, 982], "order_": [824, 827], "regressorchain": [824, 826, 1030, 1033, 1037], "jess": [824, 982, 1035], "pfahring": [824, 982], "geoff": [824, 982], "holm": [824, 982], "eib": [824, 982], "8387": 824, "9431": 824, "4576": 824, "8878": 824, "3684": 824, "2640": 824, "0321": 824, "9935": 824, "0625": 824, "y_decis": 824, "partial_fit_param": [825, 826], "load_linnerud": [826, 1028, 1033], "force_alpha": [828, 829, 830, 832, 1037], "lidston": [828, 829, 830, 832, 983], "class_count_": [828, 829, 830, 831, 832], "class_log_prior_": [828, 829, 830, 832], "feature_count_": [828, 830, 832], "feature_log_prob_": [828, 829, 830, 832], "categoricalnb": [828, 830, 831, 832, 983, 1032, 1033, 1034, 1035, 1037], "renni": [828, 830, 983, 1030], "schuetz": [828, 832], "htmledit": [828, 832, 979], "mccallum": [828, 983], "nigam": [828, 983], "metsi": [828, 983], "androutsopoulo": [828, 983], "palioura": [828, 983], "cea": [828, 983], "predict_joint_log_proba": [828, 829, 830, 831, 832, 1037], "min_categori": [829, 1034], "category_count_": 829, "n_categories_": 829, "mirror": [830, 970], "mahout": 830, "weka": 830, "feature_all_": 830, "shih": [830, 983], "teevan": [830, 983], "karger": [830, 983], "616": [830, 983, 991], "jrenni": 830, "icml03": 830, "var_smooth": [831, 1030], "stan": 831, "levequ": [831, 873], "cstr": 831, "epsilon_": 831, "theta_": [831, 983], "clf_pf": 831, "distancemetric64": [833, 834], "valid_metr": [833, 834, 984, 1038], "19662693": [833, 834], "29473397": [833, 834], "tree_copi": [833, 834], "query_radiu": [833, 834], "count_onli": [833, 834], "kernel_dens": [833, 834], "94114649": [833, 834], "83281226": [833, 834], "2071716": [833, 834], "two_point_correl": [833, 834], "get_arrai": [833, 834], "get_n_cal": [833, 834], "n_call": [833, 834], "get_tree_stat": [833, 834], "tree_stat": [833, 834], "breadth_first": [833, 834, 838], "return_log": [833, 834], "k_true": [833, 834], "k_ret": [833, 834], "breadth": [833, 834, 838, 1005, 1024], "dualtre": [833, 834], "sort_result": [833, 834, 841, 843, 844, 845, 1034], "radii": [833, 834], "reset_n_cal": [833, 834], "effective_metric_": [835, 836, 837, 839, 841, 843, 844, 845, 984], "callbl": 835, "effective_metric_params_": [835, 836, 837, 839, 841, 843, 844, 845], "outputs_2d_": [835, 843, 1032], "nearest_neighbor_algorithm": [835, 843, 844], "333": 835, "n_index": [835, 836, 837, 839, 841, 843, 844], "neigh_dist": [835, 836, 837, 839, 841, 843, 844, 845], "neigh_ind": [835, 836, 837, 839, 841, 843, 844, 845], "nearest_neighbors_algorithm": [836, 841], "nearer": [837, 845, 984], "x_dist_graph": 837, "silverman": [838, 1037], "binarytre": [838, 1026, 1030, 1034], "bandwidth_": 838, "log_dens": 838, "52955942": 838, "51462041": 838, "60244657": 838, "logprob": 838, "negative_outlier_factor": 839, "9821": 839, "0370": 839, "3697": 839, "shifted_opposite_lof_scor": 839, "opposite_lof_scor": 839, "wminkowski": [840, 1034, 1036], "narasimhan": 840, "chu": [840, 1038], "shrunken": [840, 1022], "6567": 840, "6572": 840, "nbr": [841, 984], "neighborsclassifi": [841, 843, 844, 845, 1022], "n_features_a": 842, "n_features_b": 842, "goldberg": [842, 984], "neighbourhood": [842, 984], "513": [842, 984], "ncanip": 842, "neighbourhood_components_analysi": 842, "961904": 842, "outlier_label": [843, 1032], "outlier_label_": 843, "33333333": [843, 991], "x_cluster": 845, "warn_when_not_sort": 848, "efficiencywarn": [848, 1037], "sml": [849, 986], "pcd": [849, 986], "sweep": 849, "gibb": [849, 986, 1001], "intercept_hidden_": 849, "intercept_visible_": 849, "h_samples_": 849, "osindero": [849, 986], "teh": [849, 986], "1527": 849, "1554": 849, "absp": 849, "fastnc": 849, "tieleman": [849, 986], "v_new": 849, "pseudo_likelihood": 849, "relu": [850, 851], "beta_1": [850, 851], "beta_2": [850, 851], "max_fun": [850, 851, 1032], "n_layer": [850, 851], "neuron": [850, 851, 979, 985], "tan": [850, 851, 985, 1029], "rectifi": [850, 851], "kingma": [850, 851, 985], "diederik": [850, 851, 985, 1037], "jimmi": [850, 851, 985, 1028, 1030], "effective_learning_r": [850, 851], "best_loss_": [850, 851, 1037], "best_validation_score_": [850, 851, 1037], "validation_scores_": [850, 851, 1037], "intercepts_": [850, 851, 985], "n_layers_": [850, 851], "out_activation_": [850, 851], "geoffrei": [850, 851, 985, 1033, 1034, 1035, 1036, 1038], "connectionist": [850, 851], "glorot": [850, 851], "xavier": [850, 851, 1030, 1031, 1032, 1034, 1035], "yoshua": [850, 851, 994], "feedforward": [850, 851], "kaim": [850, 851], "delv": [850, 851], "imagenet": [850, 851], "961": 850, "log_y_prob": 850, "named_transform": [852, 1037], "transform_list": 852, "s__p": 853, "n_transformed_featur": 853, "predict_log_proba_param": 853, "y_log_proba": 853, "predict_proba_param": 853, "analyst": 856, "x_tr": [856, 862, 865, 866, 867, 871, 873, 876, 878, 879, 883, 884], "accept_spars": [857, 913, 914, 1029], "inv_kw_arg": 857, "pickleabl": [857, 1028], "6931": 857, "3862": 857, "n_bins_": 858, "int_": 858, "regener": 858, "xinv": 858, "tild": [859, 989, 991], "k_fit_rows_": 859, "k_fit_all_": 859, "1299": [859, 991], "1319": [859, 991], "n_samples1": 859, "n_samples2": 859, "k_new": 859, "neg_label": [860, 877], "y_type_": 860, "sparse_input_": 860, "lb": [860, 992], "tokyo": [861, 992], "amsterdam": [861, 992], "linearili": [862, 863], "max_abs_": 862, "x_std": [863, 879, 991], "data_min_": [863, 1027], "data_max_": [863, 1027], "data_range_": [863, 1027], "unwieldi": 864, "fi": 864, "comedi": 864, "y_indic": 864, "yt": 864, "ands": 864, "feature_name_combin": [866, 1038], "categories_": [866, 867, 874, 991, 1030, 1037], "unregular": [866, 889, 1014, 1031], "intact": [866, 1016], "infrequ": [866, 867, 874, 981, 1022, 1036, 1037, 1038], "infrequent_if_exist": [866, 991], "x_6": 866, "x_7": 866, "drop_idx_": [866, 1033, 1037], "drop_idx": 866, "gender_femal": 866, "gender_mal": 866, "group_1": 866, "group_2": 866, "group_3": 866, "drop_enc": [866, 991], "drop_binary_enc": 866, "custom_combin": 866, "custom_fnames_enc": 866, "x0_str_femal": 866, "x0_str_male": 866, "x1_int_1": 866, "x1_int_2": 866, "x1_int_3": 866, "oh": [866, 1032], "infrequent_sklearn": [866, 991], "n_encoded_featur": [866, 867], "bpo": 867, "43475": 867, "lenient": [867, 1002], "min_degre": [868, 1035], "max_degre": [868, 1035], "powers_": 868, "n_output_features_": 868, "nystrom": [868, 1031, 1032], "featurewis": 869, "power_transform": [869, 882, 1030], "biometrika": [869, 881], "954": [869, 881], "959": [869, 881], "707": [869, 881], "ignore_implicit_zero": [870, 882], "landmark": [870, 882, 991], "n_quantiles_": 870, "quantiles_": [870, 991, 1032], "references_": 870, "with_cent": [871, 883], "with_scal": [871, 883], "unit_vari": [871, 883, 1034], "quartil": 871, "q_min": [871, 883], "q_max": [871, 883], "center_": 871, "robust_scal": [871, 882, 1030], "interquartile_rang": 871, "bspline": 872, "n_features_out_": 872, "with_std": [873, 884, 991, 1030], "n_samples_seen": 873, "5a": 873, "randal": [873, 1026, 1036], "247": 873, "mic": [874, 991], "target_mean_": [874, 991], "sphx_glr_auto_examples_preprocessing_plot_target_encoder_cross_v": 874, "target_type_": 874, "micci": [874, 991], "barreca": [874, 991], "newsl": [874, 991], "enc_auto": 874, "enc_high_smooth": 874, "enc_low_smooth": 874, "ahead": 877, "return_norm": [880, 1029], "notimplementederror": [880, 1029], "compute_inverse_compon": [885, 886, 993], "inverse_components_": [885, 886, 993, 1036], "2759": [885, 886], "afor": [885, 886], "baserandomproject": [885, 886], "ping": [886, 993, 1028, 1029], "density_": 886, "gaussianrandomproject": [886, 993, 1023, 1036, 1038], "church": [886, 993], "kdd06_rp": 886, "cgi": 886, "uoa": 886, "gr": 886, "opta": 886, "0182": 886, "e2": [887, 977], "93lindenstrauss_lemma": 887, "sanjoi": [887, 993], "anupam": [887, 993, 1037], "gupta": [887, 993, 1029, 1030, 1033, 1034, 1035, 1036, 1038], "elementari": [887, 993], "11841": [887, 993], "1112658": [887, 993], "7894": [887, 993], "9868": [887, 993], "steadi": [888, 889], "xiaojin": 888, "zoubin": 888, "ghahramani": 888, "cmu": 888, "cald": 888, "carnegi": 888, "mellon": 888, "jerryzhu": 888, "label_prop_model": [888, 889], "clamp": [889, 994], "dengyong": 889, "bousquet": 889, "navin": 889, "lal": 889, "schoelkopf": 889, "termination_condition_": 890, "no_chang": 890, "all_label": 890, "33rd": [890, 994], "acl": [890, 994, 995], "stroudsburg": [890, 994], "196": [890, 994], "crammer_sing": [893, 982, 996, 1022], "seldom": 893, "w_x_1": [893, 894], "w_x_n": [893, 894], "w_intercept": [893, 894], "readonli": [893, 894, 1035, 1037, 1038], "raw_coef_": [893, 894], "smo": [893, 894], "526": 893, "1693": 893, "unsur": 894, "582": 894, "522": 894, "class_weight_": [895, 896, 897, 898, 899, 1037], "n_sv": [895, 896, 897, 898, 899, 996, 1032], "fit_status_": [895, 896, 897, 898, 899], "n_support_": [895, 896, 897, 898, 899, 996, 1032], "proba_": [895, 898, 1033], "probb_": [895, 898, 1033], "shape_fit_": [895, 896, 897, 898, 899], "n_dimensions_of_x": [895, 896, 897, 898, 899], "7798": 897, "0547": 897, "0556": 897, "0561": 897, "7332": 897, "unshift": 897, "impract": 898, "tube": [899, 996], "_tree": [901, 902, 903, 904, 1023, 1025], "decision_tree_learn": [901, 902, 997], "olshen": [901, 902, 997], "wadsworth": [901, 902, 997], "belmont": [901, 902, 997], "cutler": [901, 902], "cc_home": [901, 902], "htm": [901, 902], "ccp_path": [901, 902, 903, 904], "get_depth": [901, 902, 903, 904, 1031], "get_n_leav": [901, 902, 903, 904, 1031], "set_predict_proba_request": [901, 903], "extra_tre": [903, 904], "8947": 903, "decision_tre": [905, 906, 907, 997], "out_fil": [905, 997], "leaves_parallel": 905, "special_charact": [905, 997], "fontnam": [905, 1035], "helvetica": [905, 907], "graphviz": [905, 997], "postscript": 905, "tpng": 905, "paint": [905, 907], "dot_data": [905, 997], "digraph": 905, "show_weight": 906, "feature_0": 906, "unrepresent": 908, "keyerror": [908, 1032], "popitem": 908, "lifo": 908, "input_nam": [912, 914, 944, 1036], "accept_large_spars": [913, 914, 1030], "ensure_2d": [913, 914], "allow_nd": [913, 914], "ensure_min_sampl": [913, 914], "ensure_min_featur": [913, 914], "y_numer": 913, "bsr": [913, 914, 1035], "x_convert": 913, "y_convert": 913, "array_convert": 914, "min_val": 917, "max_val": 917, "include_boundari": [917, 1036], "y_org": 918, "class_weight_vect": 918, "king": 918, "zen": 918, "sample_weight_vect": 919, "parenthes": 920, "type_filt": 922, "generate_onli": [924, 1032], "checks_gener": 924, "test_check_estim": 925, "check_estimators_fit_returns_self": 925, "array_lik": 928, "logdet": 928, "slogdet": 928, "6375861597263857": 928, "flip_sign": 930, "svd_lapack_driv": 930, "gesdd": 930, "p5": 930, "transposit": 930, "gesvd": 930, "conquer": 930, "unitari": 930, "vh": 930, "dot_product": 931, "deweight": 932, "min_batch_s": 933, "n_pack": [933, 934], "path_length": 935, "sliceabl": 936, "methodmetadatarequest": 937, "routemappingpair": 938, "routing_info": 938, "methodpair": 939, "other_param": 941, "truthi": 942, "helloifeven": 942, "_x_is_even": 942, "say_hello": 942, "temp_fold": 947, "max_nbyt": 947, "1m": 947, "mmap_mod": 947, "dispatch_next": 947, "dispatch_one_batch": 947, "unprotect": 947, "prefetch": 947, "print_progress": 947, "inner_max_num_thread": 949, "backend_param": 949, "parallel_config": 949, "register_parallel_backend": [949, 1030], "dask": [949, 1002, 1030], "localclust": 949, "workload": [949, 1001], "register_rai": 949, "backend_nam": 949, "oversubscript": [949, 1036], "threadpool": 949, "effective_n_job": 949, "tracking_select": 950, "reservoir_sampl": 950, "reservoir": 950, "make_default": 951, "parallelbackendbas": 951, "resampled_arrai": 952, "3x2": [952, 955], "shuffled_arrai": 955, "last_mean": 956, "last_var": 956, "last_n": 956, "return_sum_weight": 962, "sum_weight": 962, "all_or_ani": [965, 1032], "is_fit": 965, "eg": 965, "substitut": [965, 1002, 1028], "raise_except": 967, "array_sym": 967, "is_paramet": 969, "enclos": 970, "set_stat": 970, "bergstra": [970, 1022, 1023], "tournament": 970, "dispos": [970, 1016], "n_resources_i": 970, "n_resources_0": 970, "n_candidates_i": 970, "n_candidates_0": 970, "r_0": 970, "n_resourc": 970, "983667": 970, "951958": 970, "947958": 970, "961009": 970, "955989": 970, "jamieson": 970, "talwalkar": 970, "desalvo": 970, "rostamizadeh": 970, "hyperband": 970, "bandit": 970, "multimetr": [970, 1032, 1037], "calibrated_forest": 970, "select__k": 970, "model__estimator__max_depth": 970, "imp": 971, "sophist": [971, 983], "14338": 971, "13286": 971, "15611": 971, "amelia": 971, "scientist": [971, 1005], "roderick": 971, "rubin": 971, "1986": [971, 997], "ol2001": 971, "mask_missing_values_onli": 971, "mask_al": 971, "rr2007": 973, "2x_iy_i": 973, "vz2010": 973, "vvz2010": 973, "prod_i": 973, "ls2010": 973, "c_0": [973, 979], "tensorsketch": 973, "pp2013": 973, "wikic": 973, "ccf2002": 973, "mercer": 973, "langl": [973, 981, 995, 996], "rangl": [973, 981, 995, 996], "y_j": [973, 981, 983, 996], "obviat": 973, "dagm": 973, "vempati": 973, "jawahar": 973, "charikar": 973, "farach": 973, "colton": 973, "m2012": 974, "mu_k": 975, "cst": 975, "omega_": 975, "k0": 975, "h_l": 975, "extrema": 975, "honei": 975, "stork": 975, "dilemma": 976, "valid_scor": 976, "w_0": 977, "w_p": 977, "34545455": 977, "13636": [977, 1031], "rifkin": 977, "lippert": 977, "2n_": 977, "softw": 977, "kim": [977, 1030, 1031, 1032, 1036], "koh": [977, 1005], "lustig": 977, "boyd": 977, "gorinevski": 977, "c_p": 977, "cherkasski": 977, "yunqian": 977, "1691": 977, "1714": 977, "ell_2": 977, "equiangular": 977, "weisberg": 977, "ell_0": [977, 981], "_coef": 977, "mp": 977, "ell_": 977, "posteriori": [977, 983], "radford": 977, "neal": [977, 1035], "50000013": 977, "49999993": 977, "lambda_i": [977, 991], "srikantan": 977, "tristan": 977, "fletcher": [977, 1022, 1026], "nomenclatur": [977, 1028], "deliber": 977, "overparameter": 977, "ldot": [977, 981, 983, 985, 995], "w_l": 977, "min_w": 977, "iverson": 977, "hood": [977, 996], "broyden": 977, "goldfarb": 977, "shanno": 977, "shortcom": 977, "statsmodel": [977, 1001], "aaron": [977, 1025, 1026, 1027, 1032], "simon": [977, 1005, 1025, 1026, 1035, 1036, 1037, 1038], "93fletcher": 977, "93goldfarb": 977, "93shanno_algorithm": 977, "noah": 977, "multirespons": 977, "edm": 977, "agricultur": 977, "rainfal": 977, "paid": 977, "bernouli": 977, "fraud": [977, 1005], "cash": 977, "fraudul": [977, 1005], "interrupt": 977, "drug": 977, "cure": 977, "entertain": 977, "mccullagh": 977, "nelder": 977, "boca": 977, "raton": 977, "chapman": 977, "hall": [977, 1029, 1033], "crc": 977, "31760": 977, "j\u00f8rgensen": 977, "monografia": 977, "matem\u00e1tica": 977, "2463": 977, "4337": 977, "7638": 977, "disappear": [977, 1022], "photogrammetr": 977, "hypothes": 977, "paradigm": 977, "cartographi": 977, "fischler": 977, "boll": 977, "sunglok": 977, "choi": 977, "taemin": 977, "wonpil": 977, "93sen_estim": 977, "binom": 977, "infeas": [977, 984, 986], "k\u00e4rkk\u00e4inen": 977, "\u00e4yr\u00e4m\u00f6": 977, "h_": 977, "oarc": 977, "dae": 977, "bassett": 977, "jr": 977, "econometrica": 977, "econometr": 977, "portnoi": 977, "hare": 977, "tortois": 977, "paraboloid": 977, "w_3": 977, "w_4": 977, "w_5": 977, "z_1": 977, "z_2": 977, "z_3": 977, "z_4": 977, "z_5": 977, "streamlin": 977, "gotten": [977, 991], "necess": [978, 984], "strife": 978, "mother": 978, "baloo": 978, "song": 978, "jungl": 978, "rubric": 978, "defici": [978, 995], "hlle": 978, "revolv": 978, "belkin": 978, "niyogi": 978, "1373": 978, "1396": 978, "molecul": 978, "jk": 978, "delta_": 978, "c_1": 978, "disentangl": 978, "legitim": 978, "die": 978, "noisier": 978, "5415": 978, "brief": 979, "num_featur": [979, 1037], "quantum": 979, "nutshel": 979, "36787944": 979, "89483932": 979, "58364548": 979, "51341712": 979, "83822343": 979, "7768366": 979, "facil": 980, "equi": 980, "agnost": [980, 989], "cue": 980, "came": 980, "quicker": 980, "unpract": 980, "analogi": [980, 981], "top_k_accuraci": 981, "top_k_accuracy_scor": [981, 1034, 1036], "neg_brier_scor": [981, 1032], "f1_micro": [981, 1026], "f1_weight": [981, 1026], "f1_sampl": 981, "neg_log_loss": 981, "roc_auc_ovr": [981, 1032], "roc_auc_ovo": [981, 1032], "roc_auc_ovr_weight": [981, 1032], "roc_auc_ovo_weight": [981, 1032], "explained_variance_scor": [981, 1025, 1029, 1036], "max_error": [981, 1031], "neg_mean_squared_log_error": 981, "mean_squared_log_error": [981, 1029, 1035], "neg_median_absolute_error": 981, "neg_mean_poisson_devi": 981, "neg_mean_gamma_devi": 981, "mean_gamma_devi": [981, 1032], "d2_pinball_scor": [981, 1036], "d2_tweedie_scor": [981, 1035], "invalidparametererror": 981, "_error": 981, "my_custom_loss_func": 981, "693": 981, "protocol": [981, 1025, 1038], "custom_scoring_funct": 981, "custom_scorer_modul": 981, "confusion_matrix_scor": 981, "test_tp": 981, "test_fn": 981, "untru": 981, "dividend": 981, "divisor": 981, "quotient": 981, "texttt": 981, "youden": 981, "informed": 981, "mosley2013": 981, "kelleher2015": 981, "guyon2015": 981, "urbanowicz2015": 981, "escalant": 981, "escalera": 981, "maci\u00e0": [981, 1035, 1037], "saeed": 981, "statnikov": 981, "viega": 981, "chalearn": 981, "automl": [981, 1001], "ijcnn": 981, "moslei": 981, "ijcv": 981, "urbanowicz": 981, "exstrac": 981, "evol": 981, "intel": [981, 1001], "cohen_kappa_scor": [981, 1027, 1029], "4285714285714286": 981, "manning2008": 981, "everingham2010": 981, "davis2006": 981, "flach2015": 981, "everingham": 981, "gool": 981, "winn": 981, "pascal": 981, "voc": 981, "goadrich": 981, "y_l": 981, "_l": 981, "emptyset": 981, "f_beta": 981, "ne": [981, 984], "1738": 981, "matthews_corrcoef": [981, 1022, 1028, 1029, 1036], "t_k": [981, 997], "ik": 981, "ki": 981, "kk": 981, "auroc": 981, "ht2001": 981, "fc2009": 981, "pd2000": 981, "f2006": 981, "f2001": 981, "inner_clf": 981, "c\u00e8sar": 981, "hernandez": 981, "orallo": 981, "modroiu": 981, "wikipediadet2017": 981, "martin1997": 981, "navratil2007": 981, "consult": 981, "encyclopedia": 981, "utc": 981, "php": [981, 1001], "detection_error_tradeoff": 981, "oldid": 981, "798982054": 981, "doddington": 981, "kamm": 981, "ordowski": 981, "przybocki": 981, "navractil": 981, "klusacek": 981, "acoust": 981, "icassp": 981, "honolulu": 981, "232": 981, "brier1950": 981, "p_i": [981, 984], "bella2012": 981, "flach2008": 981, "bella": 981, "hern\u00e1ndez": 981, "ram\u00edrez": 981, "quintana": 981, "khosrow": 981, "pour": 981, "hershei": 981, "edson": [981, 1027], "matsubara": 981, "dagstuhl": 981, "seminar": 981, "schloss": 981, "leibniz": 981, "zentrum": 981, "lr_": 981, "brenner": 981, "gefel": 981, "coverage_error": [981, 1026, 1036], "label_ranking_average_precision_scor": [981, 1026, 1030, 1031, 1037], "label_ranking_loss": [981, 1027], "grade": 981, "unalt": 981, "epsilon_i": 981, "908": 981, "925": [981, 1011], "7083": 981, "log_": 981, "growth": [981, 1027, 1028], "commod": 981, "mapd": 981, "2e6": 981, "2666": 981, "y_n": [981, 985, 995], "elicit": 981, "2500": 981, "mean_pinball_loss_95p": 981, "skill": 981, "mcfadden": 981, "d2_tweedie_score_15": 981, "d2_pinball_score_08": 981, "heteroschedast": 981, "homoschedast": 981, "pear": 982, "y_dens": 982, "y_spars": 982, "advoc": 982, "elabor": 982, "financ": 982, "f3": 982, "y3": 982, "multi_target_forest": 982, "75474165": 982, "03498585": 982, "03812219": 982, "12165031": 982, "12914884": 982, "46081961": 982, "8948621": 982, "44373091": 982, "88978285": 982, "62745778": 982, "02891072": 982, "48204257": 982, "03260883": 982, "34867495": 982, "52003279": 982, "92529176": 982, "25719016": 982, "84253": 982, "25193977": 982, "16443186": 982, "12274212": 982, "170388": 982, "80956739": 982, "16979946": 982, "72667194": 982, "50941682": 982, "50447799": 982, "37967282": 982, "15699552": 982, "72850319": 982, "prod_": 983, "downarrow": 983, "spite": 983, "famous": 983, "serious": 983, "flair": 983, "2_y": 983, "mu_i": 983, "sigma_i": [983, 991], "theta_i": 983, "cnb": 983, "mnb": 983, "inventor": 983, "alpha_i": [983, 996], "cj": [983, 1025, 1026, 1027, 1028, 1029], "summat": [983, 985], "min_c": 983, "t_i": 983, "poorest": 983, "n_i": [983, 991], "satellit": 984, "kdt": 984, "farawai": 984, "invent": 984, "orthotrop": 984, "bentlei": 984, "1975": 984, "omohundro": 984, "characteris": 984, "unaffect": 984, "amort": 984, "cache_path": 984, "gettempdir": 984, "unsort": [984, 1023, 1026, 1030], "5807": 984, "nca_pip": 984, "96190476": 984, "limits_": 984, "lx": 984, "x_m": 985, "leftmost": 985, "w_1x_1": 985, "w_2x_2": 985, "w_mx_m": 985, "backpropag": 985, "b_1": 985, "b_2": 985, "z_l": 985, "dfrac": [985, 991], "nabla": 985, "deduct": 985, "rumelhart": 985, "jiquan": 985, "ngiam": 985, "chuan": 985, "yifan": 985, "carolin": 985, "suen": 985, "backprop": [985, 995], "lecun": [985, 995], "orr": [985, 995], "strai": 986, "v_ih_j": 986, "b_iv_i": 986, "c_jh_j": 986, "h_j": 986, "v_i": 986, "b_i": 986, "sum_h": 986, "fantasi": 986, "particl": 986, "thoroughli": 986, "hereund": 987, "1443": 987, "1471": 987, "outlying": 987, "h2009": 988, "g2015": 988, "absurd": 988, "m2019": 988, "bike": 988, "mc_clf": 988, "466": 988, "624": 988, "overlaid": 988, "obscur": [988, 1038], "cice": [988, 1036], "pd_": 988, "dx_c": 988, "footnot": [988, 1001], "opaqu": 989, "x_val": 989, "y_val": 989, "356": 989, "probe": 989, "204": [989, 994], "050": 989, "r_multi": 989, "081": 989, "1013": 989, "866": 989, "726": 989, "298": 989, "376": 989, "i_j": 989, "min_max_scal": 991, "x_train_minmax": 991, "x_test_minmax": 991, "max_abs_scal": 991, "x_train_maxab": 991, "x_test_maxab": 991, "unintention": 991, "kernelcenter": [991, 1032, 1036, 1038], "semidefinit": [991, 996], "scholkopf1998": 991, "1_": 991, "x_train_tran": 991, "x_test_tran": 991, "8pt": 991, "x_normal": 991, "firefox": 991, "chrome": 991, "safari": 991, "africa": 991, "dragon": 991, "lexicon": 991, "par": 991, "tau": 991, "l_i": 991, "pargent": 991, "pfister": 991, "2671": 991, "2692": 991, "infant": 991, "kid": 991, "teen": 991, "adult": 991, "senior": [991, 1005], "citizen": 991, "retbin": 991, "x_1x_2": 991, "x_1x_3": 991, "x_2x_3": 991, "x_1x_2x_3": 991, "rung": 991, "eiler": 991, "marx": 991, "perperogl": 991, "sauerbrei": 991, "abrahamowicz": 991, "bmc": 991, "methodol": 991, "38629436": 991, "sixteenth": 993, "uai": 993, "craig": [993, 1025, 1030], "boutili": 993, "mois\u00e9": 993, "goldszmidt": 993, "morgan": [993, 997, 999], "kaufmann": [993, 997, 1034], "ella": 993, "bingham": 993, "heikki": 993, "mannila": 993, "245": [993, 1024], "explic": 993, "3947": 993, "671": 993, "687": 993, "kenneth": [993, 1022, 1023, 1028, 1029, 1036, 1037], "12th": 993, "296": 993, "x_new_invers": 993, "x_new_again": 993, "delalleau": 994, "aistat": 994, "gatsbi": 994, "ucl": 994, "uk": [994, 1016], "fullpap": 994, "xi_i": 995, "slack": 995, "t_0": 995, "l\u00e9on": [995, 1036, 1037, 1038], "_init_t": 995, "basesgd": 995, "eta_0": 995, "_t": 995, "svmsgd": 995, "pegaso": 995, "srebro": 995, "tsuruoka": 995, "tsujii": 995, "ananiad": 995, "afnlp": 995, "lin_clf": 996, "grasp": [996, 1002], "sv": 996, "builtin": 996, "qp": 996, "linear_svc": 996, "gram_train": 996, "gram_test": 996, "zeta": 996, "zeta_i": 996, "textrm": [996, 1014], "q_": 996, "equiv": 996, "reparameter": 996, "wu": [996, 1026, 1034], "weng": 996, "1005": 996, "rong": 996, "aug": 996, "1871": 996, "1874": 996, "ofmulticlass": 996, "fitter": 997, "pariti": 997, "multiplex": 997, "export_graphviz": [997, 1027, 1029, 1035, 1037, 1038], "export_text": [997, 1031, 1038], "dumont": 997, "subwindow": 997, "dichotomis": 997, "quinlan": 997, "multiwai": 997, "proprietari": 997, "ruleset": 997, "q_m": 997, "n_m": 997, "t_m": 997, "setminu": 997, "mk": 997, "_m": 997, "ge0": 997, "widetild": 997, "tradition": 997, "t_t": 997, "eff": 997, "predictive_analyt": 997, "artwork": 999, "fund": 999, "spotifi": 999, "betawork": 999, "evernot": 999, "aweb": 999, "yhat": 999, "rangespan": 999, "birchbox": 999, "bestofmedia": 999, "phimeca": 999, "howaboutw": 999, "peerindex": 999, "datarobot": 999, "okcupid": 999, "love": [999, 1016], "publica": 999, "machinali": 999, "solido": 999, "infonea": 999, "dataiku": 999, "otto": 999, "zopa": 999, "bnp": 999, "pariba": 999, "cardif": 999, "post1": [999, 1020], "foot": 1000, "gear": 1000, "neuroimag": [1000, 1005], "astronom": 1000, "pycon": 1000, "thirti": 1000, "nyc": [1000, 1005], "sister": 1001, "sklearn_panda": 1001, "sklearn_xarrai": 1001, "xarrai": 1001, "autoviml": 1001, "tpot": 1001, "featuretool": 1001, "neuraxl": 1001, "neat": [1001, 1022], "checkpoint": 1001, "funki": 1001, "saver": 1001, "evalml": 1001, "mlflow": 1001, "lifecycl": [1001, 1002], "neptun": 1001, "mlop": 1001, "sacr": 1001, "dtreeviz": 1001, "eli5": 1001, "yellowbrick": 1001, "deap": 1001, "evolutionari": 1001, "interchang": 1001, "skop": [1001, 1018], "jpmml": 1001, "porter": 1001, "transpil": 1001, "javascript": 1001, "m2cgen": 1001, "dart": 1001, "haskel": 1001, "rust": 1001, "treelit": 1001, "micromlgen": 1001, "microml": 1001, "microcontrol": 1001, "emlearn": 1001, "c99": 1001, "arima": 1001, "sktime": 1001, "skforecast": 1001, "tslearn": 1001, "hmmlearn": 1001, "pomegran": 1001, "crfsuit": 1001, "skorch": 1001, "scikera": 1001, "scikit_learn": 1001, "feder": 1001, "mlxtend": 1001, "lego": 1001, "subsembl": 1001, "lightn": 1001, "sdca": 1001, "adagrad": 1001, "svrg": 1001, "gplearn": 1001, "genet": 1001, "multilearn": 1001, "seglearn": 1001, "fastfm": 1001, "kmode": 1001, "sphereclust": 1001, "mise": 1001, "giotto": 1001, "tda": 1001, "pymc": 1001, "censor": 1001, "lightfm": 1001, "openrec": 1001, "gensim": 1001, "nilearn": 1001, "neuro": 1001, "astroml": 1001, "astronomi": 1001, "dissemin": 1001, "chines": 1001, "persian": 1001, "spanish": 1001, "korean": 1001, "disclaim": 1001, "promis": 1002, "eleven": 1002, "incept": 1002, "scala": 1002, "reinforc": 1002, "era": 1002, "7242": 1002, "12147": 1002, "5523": 1002, "10733": 1002, "13902": [1002, 1032], "12800": 1002, "12866": 1002, "15550": 1002, "5853": 1002, "11805": 1002, "15319": 1002, "11977": 1002, "12852": [1002, 1032], "13911": [1002, 1032], "amput": 1002, "6284": 1002, "beginn": 1002, "priorit": [1002, 1029], "4497": 1002, "7646": 1002, "6425": 1002, "6424": 1002, "8480": 1002, "6231": 1002, "8100": 1002, "6599": 1002, "6715": 1002, "14582": 1002, "3855": 1002, "13227": 1002, "6323": 1002, "14180": [1002, 1033], "9173": 1002, "13146": [1002, 1032], "8614": 1002, "7608": 1002, "5082": 1002, "8243": 1002, "searchgrid": 1002, "6929": 1002, "__array_function__": [1002, 1032], "etl": [1002, 1005], "8370": 1002, "6451": 1002, "8157": 1002, "7382": 1002, "drift": 1002, "11047": [1002, 1032], "9326": 1002, "slep011": 1002, "1626": 1002, "10463": 1002, "id3": [1003, 1018], "cart": [1003, 1018], "touch": 1004, "savetxt": 1004, "cloneabl": 1004, "datafil": 1004, "printabl": 1004, "indispens": 1005, "stephen": [1005, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1035], "simmon": 1005, "vp": 1005, "athena": 1005, "music": 1005, "bernhardsson": 1005, "pariet": [1005, 1022], "lear": 1005, "visag": 1005, "fantast": 1005, "startup": 1005, "bitli": 1005, "chartbeat": 1005, "digg": [1005, 1029], "poncho": 1005, "gilad": 1005, "lotan": 1005, "chief": 1005, "chat": 1005, "bread": 1005, "butter": 1005, "chaumond": [1005, 1030], "offic": 1005, "ayzenshtat": [1005, 1030], "undergrad": 1005, "professor": 1005, "hotel": 1005, "destin": 1005, "agent": 1005, "melani": [1005, 1029, 1030], "awesom": 1005, "stuff": 1005, "randomizedpca": [1005, 1022, 1024, 1025, 1027, 1028, 1029], "boston": 1005, "mdbecker": 1005, "pydata_2013": 1005, "ninja": 1005, "thorough": 1005, "notch": 1005, "production": 1005, "greg": [1005, 1028, 1029, 1031, 1032], "lamp": 1005, "founder": 1005, "prototyp": 1005, "jurgen": 1005, "director": 1005, "commerc": 1005, "inventori": 1005, "bertin": 1005, "mahieux": 1005, "invalu": 1005, "vijai": [1005, 1025], "surrog": 1005, "traine": 1005, "impress": 1005, "traffic": 1005, "tenur": 1005, "matchmak": 1005, "weitzenfeld": 1005, "tweet": 1005, "ferenc": 1005, "huszar": 1005, "shop": 1005, "ourselv": 1005, "jeremi": [1005, 1027, 1028, 1029, 1030, 1033, 1034], "achin": 1005, "ceo": 1005, "marketplac": 1005, "frid": [1005, 1025], "radar": 1005, "partnership": 1005, "lebourgeoi": 1005, "charron": [1005, 1025, 1026, 1033, 1034, 1035], "cornerston": 1005, "sheep": 1005, "featureforg": 1005, "rafael": [1005, 1023, 1024, 1026, 1029], "carrascosa": [1005, 1026], "law": 1005, "semiconductor": 1005, "fab": [1005, 1032, 1033], "bleed": 1005, "chip": 1005, "smartphon": 1005, "automobil": 1005, "trent": [1005, 1028], "mcconaghi": 1005, "rapid": 1005, "immens": 1005, "thorsten": 1005, "kranz": 1005, "coma": 1005, "dss": 1005, "douetteau": 1005, "b2c": 1005, "retail": 1005, "palladium": 1005, "rammig": [1005, 1028], "peer": 1005, "lend": 1005, "billion": 1005, "gbp": 1005, "grate": 1005, "vlasio": [1005, 1029], "vasilei": [1005, 1029], "petfood": 1005, "cocoa": 1005, "worldwid": 1005, "toolset": 1005, "equip": 1005, "fitzk": 1005, "sr": 1005, "fondat": 1005, "s\u00e9bastien": [1005, 1028, 1030], "conort": 1005, "salmon": 1007, "nine": 1007, "sentiment": 1008, "cli": 1008, "doctest_mod": 1008, "hardest": 1009, "tightli": 1010, "knit": 1010, "x_fold": 1011, "array_split": 1011, "y_fold": 1011, "934": 1011, "train_indic": 1011, "test_indic": 1011, "963": 1011, "922": 1011, "930": 1011, "96388889": 1011, "92222222": 1011, "9637883": 1011, "93036212": 1011, "96578289": 1011, "92708922": 1011, "96681476": 1011, "96362897": 1011, "93192644": 1011, "0077": 1011, "00375": 1011, "lfw_": 1012, "_lfw": 1012, "gerhard_schroed": 1012, "donald_rumsfeld": 1012, "tony_blair": 1012, "colin_powel": 1012, "george_w_bush": 1012, "282": [1012, 1022], "estimated_param_": 1013, "iris_x": 1014, "iris_i": 1014, "iris_x_train": 1014, "iris_y_train": 1014, "iris_x_test": 1014, "iris_y_test": 1014, "pave": 1014, "paltri": 1014, "exabyt": 1014, "30349955": 1014, "237": 1014, "63931533": 1014, "510": 1014, "53060544": 1014, "73698041": 1014, "13170937": 1014, "81458798": 1014, "84845219": 1014, "60648906": 1014, "51961675": 1014, "09517222": 1014, "585": 1014, "5854": 1014, "5855": 1014, "occam": 1014, "razor": 1014, "best_alpha": [1014, 1022], "025118864315095794": 1014, "508": 1014, "knew": 1015, "taxonomist": 1015, "face_compress": 1015, "x_approx": 1015, "images_approx": 1015, "18565811e": 1015, "19346747e": 1015, "43026679e": 1015, "text_analyt": 1016, "skeleton": [1016, 1025], "sklearn_tut_workspac": 1016, "cp": 1016, "work_directori": 1016, "tutorial_hom": 1016, "fetch_data": 1016, "lang": 1016, "newsweed": 1016, "netnew": 1016, "bydat": 1016, "twenty_train": 1016, "holder": 1016, "2257": 1016, "sd345": 1016, "collier": 1016, "laserjet": 1016, "iii": [1016, 1036], "hampton": 1016, "4gb": 1016, "count_vect": 1016, "x_train_count": 1016, "35788": 1016, "4690": 1016, "downscal": 1016, "tf_transform": 1016, "x_train_tf": 1016, "tfidf_transform": 1016, "x_train_tfidf": 1016, "na\u00efv": 1016, "docs_new": 1016, "opengl": 1016, "x_new_count": 1016, "x_new_tfidf": 1016, "text_clf": 1016, "twenty_test": 1016, "docs_test": 1016, "8348": 1016, "9101": [1016, 1030], "1502": 1016, "353": 1016, "tfidf__use_idf": 1016, "searcher": 1016, "gs_clf": 1016, "workspac": 1016, "fear": 1016, "fire": 1016, "exercise_xx_script": 1016, "arg1": 1016, "arg2": 1016, "arg3": 1016, "mortem": 1016, "exercise_01_language_train_model": 1016, "exercise_02_senti": 1016, "movie_review": 1016, "txt_sentoken": 1016, "cpickl": 1016, "polar": 1016, "subtleti": 1018, "subscrib": 1020, "gzip": 1022, "bzip2": 1022, "decompress": 1022, "auc_scor": [1022, 1024], "kernc": [1022, 1036, 1037], "led": 1022, "probabilisticpca": [1022, 1025], "hmm": [1022, 1023, 1024, 1025, 1027], "gaussianhmm": 1022, "multinomialhmm": 1022, "n_gram_rang": 1022, "alexi": [1022, 1025, 1026, 1029], "mignon": [1022, 1025, 1026, 1029], "subhodeep": [1022, 1023, 1024], "moitra": [1022, 1023, 1024], "yannick": [1022, 1024], "schwartz": [1022, 1024, 1036], "duckworth": 1022, "benediktsson": [1022, 1023, 1024], "marko": [1022, 1031, 1032, 1038], "burjek": 1022, "pinto": 1022, "abraham": [1022, 1023, 1028, 1032], "hoenig": 1022, "flyingimmidev": 1022, "francoi": [1022, 1035], "savard": 1022, "hann": 1022, "schulz": 1022, "welind": 1022, "companioni": 1022, "brandyn": 1022, "bussonni": [1022, 1034], "matthia": [1022, 1024, 1025, 1028, 1029, 1030, 1034, 1037], "pierr": [1022, 1030, 1031, 1033, 1035, 1037], "astolfi": 1022, "huiginn": 1022, "goodman": [1022, 1027], "ludwig": 1022, "schwardt": 1022, "hervieu": 1022, "sergio": [1022, 1024, 1025, 1034, 1037], "medina": [1022, 1024], "sheerman": 1022, "buguen": 1022, "seq_dataset": [1022, 1032], "weight_vector": [1022, 1032], "reuben": 1022, "costin": 1022, "_basehmm": 1022, "neighborsregressor": 1022, "gone": [1022, 1023], "vbgmm": [1022, 1026, 1028], "_pvalu": 1022, "charset": [1022, 1024], "test_fract": 1022, "train_fract": 1022, "198": 1022, "marek": 1022, "fcostin": 1022, "adrien": 1022, "gaidon": 1022, "joona": 1022, "sillanp\u00e4\u00e4": 1022, "mccarthi": [1022, 1030], "roi": [1022, 1036], "hyunjin": 1022, "ibay": 1022, "scheidegg": 1022, "clair": 1022, "revillet": 1022, "conrad": [1022, 1023, 1037], "meng": [1022, 1023, 1026, 1028, 1029], "xinfan": [1022, 1023, 1026], "udi": 1022, "weinsberg": 1022, "janso": 1022, "palafox": 1022, "overwrite_": 1022, "copy_": 1022, "buffer_mb": 1022, "sparse_encode_parallel": 1022, "accident": [1022, 1026, 1031], "basedictionarylearn": 1022, "sparsecodingmixin": 1022, "fast_svd": 1022, "arnold": [1022, 1023], "bala": [1022, 1025], "subrahmanyam": [1022, 1025], "varanasi": [1022, 1025], "draxu": 1022, "eickenberg": [1022, 1024, 1025, 1026, 1027], "bogdan": 1022, "trach": 1022, "f\u00e9lix": [1022, 1024, 1025, 1026, 1030], "antoin": [1022, 1024, 1025, 1026, 1029], "fortin": [1022, 1024, 1025, 1026], "manuel": [1022, 1026, 1030, 1031, 1034, 1035], "caicedo": 1022, "carvaj": 1022, "tiziano": 1022, "zito": [1022, 1035], "jean": [1022, 1025, 1026, 1027, 1028, 1029, 1035], "kossaifi": [1022, 1026, 1027], "thumbnail": 1022, "mldata": [1022, 1030], "pietro": [1022, 1025], "berk": 1022, "macosx": 1022, "xarg": 1022, "bscikit": 1022, "cross_val": 1022, "bcross_val": 1022, "lurk": 1022, "l1_distanc": 1022, "168": 1022, "andi": [1022, 1029], "amit": [1022, 1036, 1037], "salvator": [1022, 1036, 1037], "masecchia": 1022, "schut": 1022, "metaireau": [1022, 1025], "bryan": [1022, 1025, 1031, 1032, 1035], "silverthorn": 1022, "minwoo": 1022, "luca": [1022, 1032, 1033, 1034, 1035], "wiman": 1022, "schl\u00fcter": [1022, 1030], "malet": 1022, "miott": [1022, 1025], "feth": 1022, "arezki": 1022, "yamin": 1022, "notes_neighbor": 1022, "netbsd": 1022, "kamel": 1022, "ibn": 1022, "hassen": 1022, "derouich": 1022, "virgilefritsch": 1022, "example_gaussian_process_plot_gp_regress": 1022, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1022, "tast": 1022, "2x": 1022, "10x": 1022, "200x": 1022, "ann": [1022, 1034, 1036], "laur": 1022, "fouqu": 1022, "ronan": [1022, 1025, 1030], "amicel": [1022, 1025], "osendorf": [1022, 1023], "gmmhmm": [1022, 1023], "latex": 1022, "mlcomp": 1022, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1022, "pybrain": 1022, "rokem": [1022, 1028], "100x": [1022, 1025], "obsolet": [1022, 1038], "attrselect": 1022, "unmaintain": 1022, "lite": 1022, "filo": [1022, 1025], "mailhot": 1022, "huard": 1022, "dave": [1022, 1029, 1030, 1036, 1038], "morril": 1022, "schofield": 1022, "travi": [1022, 1030], "oliph": 1022, "pearu": 1022, "peterson": [1022, 1024], "0d": 1023, "marchman": [1023, 1024], "hrishikesh": [1023, 1024], "huilgolkar": [1023, 1024], "bastiaan": [1023, 1024], "diego": [1023, 1024], "molla": [1023, 1024], "cunha": [1023, 1024], "almeida": [1023, 1024, 1035], "rolando": [1023, 1024], "espinoza": [1023, 1024], "fuent": [1023, 1024], "beauchamp": [1023, 1026], "longstand": [1023, 1029], "shaun": 1023, "jackman": 1023, "winterman": 1023, "seberg": 1023, "n_atom": 1023, "label_propag": 1023, "learn_rat": 1023, "basegradientboost": 1023, "mean_square_error": 1023, "gmm_": 1023, "eig_tol": 1023, "chunk_siz": 1023, "zero_one_scor": 1023, "aymer": 1023, "masurel": 1023, "syhw": [1023, 1024], "corei": [1023, 1030, 1031], "lynch": [1023, 1029], "shu": [1023, 1026, 1030], "tadej": [1023, 1024], "jane\u017e": [1023, 1024], "caje": 1023, "tiago": [1023, 1027], "nune": 1023, "cow": 1023, "anz": 1023, "jauvin": 1023, "jacqu": [1023, 1025], "kvam": [1023, 1025], "doug": [1023, 1024, 1034], "coleman": [1023, 1024], "dickerson": 1023, "approximateident": 1023, "veronda": 1023, "matti": [1023, 1026, 1027], "lyra": [1023, 1026, 1027], "mikhail": [1023, 1024, 1025, 1028, 1029, 1037, 1038], "korobov": [1023, 1024, 1025, 1028, 1029], "alejandro": [1023, 1028], "weinstein": 1023, "deil": [1023, 1033, 1034], "nizhibitski": 1023, "coelho": [1023, 1025, 1026, 1030], "miroslav": [1023, 1024, 1027], "batchkarov": [1023, 1027], "pavel": [1023, 1031], "bob": [1023, 1029], "dengemann": 1023, "emanuel": 1023, "x006": 1023, "justin": [1024, 1030, 1034], "stochastic_gradi": [1024, 1025, 1031], "crombach": 1024, "sheet": 1024, "jaccard_similarity_scor": [1024, 1026, 1031], "jochen": 1024, "wersd\u00f6rfer": 1024, "sinayev": 1024, "unpleas": 1024, "novic": 1024, "tini": [1024, 1037], "hyperlink": 1024, "luessi": 1024, "philipp": [1024, 1025, 1028, 1037], "gervai": [1024, 1025], "cleverless": 1024, "nosetest": 1024, "compute_import": 1024, "return_model": [1024, 1026], "itergrid": 1024, "tacitli": 1024, "charset_error": 1024, "precompute_gram": 1024, "2224": 1024, "jim": 1024, "holmstr\u00f6m": 1024, "steven": [1024, 1025, 1027, 1029, 1030, 1035, 1037, 1038], "gryze": [1024, 1027], "sergeyf": 1024, "ben": [1024, 1025, 1026, 1029, 1030, 1031, 1034], "speer": 1024, "federico": [1024, 1025, 1030, 1031, 1036], "vaggi": [1024, 1025], "raul": [1024, 1025], "garreta": [1024, 1025], "gei": 1024, "flaxman": [1024, 1026], "denton": 1024, "cockburn": 1024, "dougal": [1024, 1026, 1027, 1029, 1030, 1031, 1032], "sutherland": [1024, 1026, 1027, 1029, 1030, 1031, 1032], "ian": [1024, 1026, 1031, 1032, 1034, 1037, 1038], "ozsvald": 1024, "johann": [1024, 1025, 1030, 1032, 1033, 1036], "sch\u00f6nberger": [1024, 1025], "szabo": [1024, 1025], "roland": [1024, 1025], "imran": [1024, 1025, 1026], "haqu": [1024, 1025, 1026], "karayev": 1024, "jamestwebb": [1024, 1025], "abhijeet": 1024, "kolh": 1024, "velkov": 1024, "fazlul": 1024, "shahriar": 1024, "felix": [1024, 1029, 1030, 1032, 1034, 1035, 1036], "brockherd": 1024, "harikrishnan": 1024, "jack": [1024, 1027, 1035, 1036, 1037, 1038], "hale": [1024, 1036], "jakemick": 1024, "mcdermott": 1024, "zwinck": 1024, "vredevoogd": [1024, 1025], "pati": 1024, "ekman": [1024, 1028], "shubernetskii": 1024, "naoki": [1024, 1034], "orii": 1024, "seamu": 1024, "absher": 1024, "feldman": [1024, 1029, 1030, 1031, 1032], "stefano": 1024, "lattarini": 1024, "steve": [1024, 1026, 1030, 1035, 1037], "koch": [1024, 1030, 1031, 1033, 1034], "sturla": 1024, "molden": 1024, "jarosch": 1024, "nikolai": [1025, 1026, 1027, 1028, 1030, 1031, 1036, 1038], "mayorov": [1025, 1026, 1027, 1028], "msvc": 1025, "mingw": 1025, "resourcewarn": 1025, "calvin": [1025, 1026], "gile": [1025, 1026], "billing": [1025, 1026, 1027], "safe_realloc": 1025, "bradshaw": [1025, 1026, 1029], "pico": [1025, 1026], "restor": [1025, 1030, 1031, 1032, 1033, 1037], "raff": 1025, "__array__": [1025, 1032], "jeffrei": [1025, 1028], "blackburn": [1025, 1028], "danni": [1025, 1026, 1027], "sullivan": [1025, 1026, 1027], "wignal": [1025, 1026, 1032, 1033], "grid_tograph": 1025, "gracefulli": [1025, 1026], "gaussianprocess": 1025, "novak": 1025, "tulloch": [1025, 1026], "wardagglomer": 1025, "wardclust": 1025, "mean_l1_ratio": 1025, "phlypo": 1025, "312": 1025, "bommarito": [1025, 1026], "brook": [1025, 1026, 1034], "osborn": [1025, 1026], "eltermann": 1025, "bwignal": 1025, "ankit": [1025, 1032, 1034, 1036], "agraw": [1025, 1030, 1036, 1037], "carei": [1025, 1026, 1027, 1028, 1029], "ugurthemast": [1025, 1026], "schumach": [1025, 1026, 1027], "baptist": [1025, 1033], "lagard": 1025, "rajat": [1025, 1032], "khanduja": 1025, "pascual": 1025, "ignacio": 1025, "rossi": 1025, "s\u00e4ger": [1025, 1028], "ilambharathi": [1025, 1026], "kanniah": [1025, 1026], "sdenton4": 1025, "alyssa": [1025, 1029], "amo": 1025, "waterland": 1025, "murad": 1025, "maud": 1025, "karol": 1025, "pysniak": 1025, "cgohlk": [1025, 1026], "jacobsen": 1025, "collin": 1025, "kaushik94": 1025, "erwin": 1025, "marsi": 1025, "csytraci": 1025, "lk": 1025, "laurent": [1025, 1026, 1029, 1030, 1037, 1038], "direr": [1025, 1026, 1029, 1030], "shilt": 1025, "yoshiki": [1025, 1028], "v\u00e1zquez": 1025, "yung": [1025, 1028], "siang": 1025, "liau": 1025, "abhishek": [1025, 1026, 1032, 1036, 1038], "thakur": [1025, 1026], "rohit": [1025, 1026, 1030, 1031], "sivaprasad": [1025, 1026], "amormachin": 1025, "oscar": [1025, 1029], "carlsson": 1025, "nanta": 1025, "nardelli": 1025, "jess010": 1025, "kowalski87": 1025, "clegg": 1025, "ralf": [1025, 1028, 1029, 1037, 1038], "gommer": [1025, 1028, 1029, 1037, 1038], "rupesh": 1025, "srivastava": [1025, 1037], "ryan": [1025, 1028, 1030, 1031], "skipper": [1025, 1027, 1028], "seabold": [1025, 1027, 1028], "stefan": [1025, 1026, 1030, 1032], "walt": [1025, 1026, 1030], "riddel": [1025, 1027, 1029], "valentin": [1025, 1027, 1037, 1038], "haenel": 1025, "myer": [1025, 1029], "yoni": 1025, "meshulam": 1025, "yuri": [1025, 1027], "zaytsev": 1025, "adrinjalali": [1025, 1034], "ai8rahim": 1025, "alemagnani": 1025, "chalmerlow": 1025, "dziki": 1025, "dro\u017cd\u017c": 1025, "matrixorz": 1025, "popo": 1025, "samuela": 1025, "fran\u00e7oi": 1025, "boulogn": 1025, "ethan": [1025, 1028], "guilherm": 1025, "trein": 1025, "heuer": 1025, "ivicajov": 1025, "rouli": 1025, "eduardo": [1025, 1027, 1035, 1036], "ari\u00f1o": 1025, "rubia": 1025, "jell": 1025, "zijlstra": 1025, "eddi": 1025, "jansson": [1025, 1037], "ca\u00f1ardo": 1025, "alastuei": 1025, "joseph": [1025, 1026, 1027, 1028, 1034, 1036, 1037], "perla": 1025, "ricardo": [1025, 1035, 1036], "kenta": 1025, "sato": 1025, "medri": 1025, "luce": 1025, "pierron": 1025, "danielweitzenfeld": 1025, "thompson": [1025, 1037, 1038], "brett": [1025, 1027, 1028, 1029, 1030, 1037], "feurer": [1025, 1030], "earl": 1025, "hank": 1025, "orr\u00f9": 1025, "lunt": 1025, "kearn": 1025, "pawe\u0142": [1025, 1029, 1034, 1035], "mandera": 1025, "zambelli": 1025, "staubda": 1025, "dedupl": 1026, "heilman": [1026, 1027], "precompute_dist": [1026, 1033], "lshforest": [1026, 1029], "qiang": 1026, "luo": 1026, "clemen": 1026, "brunner": 1026, "matteo": [1026, 1028, 1036], "visconti": 1026, "oleggio": 1026, "castello": 1026, "linkage_tre": 1026, "jatin": [1026, 1028], "shah": [1026, 1027, 1028, 1034], "saurabh": [1026, 1027, 1028, 1029, 1030, 1034], "jha": [1026, 1032, 1036], "blanchard": [1026, 1027], "michal": [1026, 1029, 1035, 1036], "romaniuk": 1026, "gilmor": 1026, "stapl": 1026, "hedyati": 1026, "antoni": [1026, 1028, 1034, 1037], "parel": 1026, "herv\u00e9": 1026, "bredin": 1026, "hasil": 1026, "sharma": [1026, 1028, 1030, 1031, 1033, 1034, 1036], "ducktyp": 1026, "download_20newsgroup": 1026, "friend": 1026, "cathi": [1026, 1032], "deng": [1026, 1027, 1028], "dawson": 1026, "garret": 1026, "hanna": [1026, 1027, 1033], "wallach": [1026, 1027], "yan": [1026, 1034], "artem": [1026, 1029], "sobolev": 1026, "fit_ovr": 1026, "predict_ovr": 1026, "predict_proba_ovr": 1026, "fit_ovo": 1026, "predict_ovo": 1026, "fit_ecoc": 1026, "predict_ecoc": 1026, "lamond": 1026, "outweigh": 1026, "thresh": 1026, "akshai": [1026, 1029, 1034], "akshayah3": 1026, "aldrian": 1026, "obaja": 1026, "ander": [1026, 1032], "aagaard": 1026, "cranenburgh": 1026, "walker": 1026, "banilo": [1026, 1027], "barmalei": [1026, 1027], "benedikt": 1026, "koehler": 1026, "bhsu": 1026, "bori": [1026, 1034, 1038], "feld": [1026, 1038], "borja": 1026, "ayerdi": 1026, "boyuan": [1026, 1027, 1028], "brent": [1026, 1030, 1031], "pedersen": [1026, 1038], "celeo": 1026, "chebee7i": 1026, "stade": 1026, "schuldt": 1026, "christof": [1026, 1027], "angermuel": [1026, 1027], "daiki": 1026, "aminaka": 1026, "danfrankj": 1026, "dmitrij": 1026, "milajev": 1026, "floydsoft": 1026, "garrett": 1026, "gpassino": 1026, "gwulf": [1026, 1027], "hampu": 1026, "bengtsson": 1026, "harri": [1026, 1028, 1034, 1035], "mavroforaki": [1026, 1028], "helder": [1026, 1035, 1036], "herv": 1026, "hugu": 1026, "salamin": 1026, "ism": 1026, "dlabal": 1026, "javier": 1026, "l\u00f3pez": [1026, 1030, 1031, 1034], "pe\u00f1a": 1026, "jdcaballero": 1026, "jeff": [1026, 1028, 1035, 1036], "hammerbach": 1026, "helmu": 1026, "kaicheng": 1026, "markham": [1026, 1033, 1034], "lagacheri": 1026, "leepei": 1026, "loic": [1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "estev": [1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "luka": [1026, 1033], "michelbach": 1026, "krell": [1026, 1028], "ku": [1026, 1027], "mateusz": [1026, 1033, 1034], "susik": 1026, "mehdi": [1026, 1035], "cherti": 1026, "mlg": 1026, "montecchio": 1026, "okal": 1026, "billi": 1026, "\u00f3scar": [1026, 1027, 1028, 1029], "n\u00e1jera": [1026, 1027, 1028, 1029], "puggioni": 1026, "pratap": [1026, 1029, 1036], "vardhan": 1026, "pvnguyen": 1026, "queqichao": 1026, "rahiel": 1026, "kasim": 1026, "mason": 1026, "saket": [1026, 1027, 1034], "choudhari": [1026, 1027, 1036, 1038], "sam": [1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037], "nichol": 1026, "sethdandridg": 1026, "sinhrk": [1026, 1027], "snuderl": 1026, "ott": 1026, "tjoa": 1026, "swu": 1026, "zimmer": [1026, 1036], "tejesh95": 1026, "terrycojon": 1026, "delteil": 1026, "toma": 1026, "kazmar": 1026, "trevorstephen": [1026, 1028], "tttthomasssss": 1026, "tzu": 1026, "kuo": 1026, "ugurcaliskan": 1026, "vinayak": [1026, 1027, 1028, 1030, 1031, 1037, 1038], "mehta": [1026, 1027, 1028, 1030, 1031, 1032, 1033, 1037, 1038], "vjacheslav": 1026, "murashkin": 1026, "wadawson": 1026, "x0l": 1026, "6147": 1027, "presort": [1027, 1032], "5857": 1027, "mcculloh": [1027, 1028], "6258": 1027, "giorgio": [1027, 1028, 1029], "patrini": [1027, 1028, 1029], "joe": 1027, "jevnik": 1027, "labelkfold": [1027, 1028], "labelshufflesplit": [1027, 1028], "mcfee": [1027, 1028], "3659": 1027, "4738": 1027, "projectedgradientnmf": 1027, "nls_max_it": 1027, "erick": 1027, "moodi": 1027, "4025": 1027, "mean_shift": [1027, 1030], "martino": 1027, "sorbaro": 1027, "cori": 1027, "konstantin": [1027, 1028, 1029], "shmelkov": 1027, "backlink": 1027, "jaidev": 1027, "deshpand": [1027, 1028], "dictlearn": 1027, "kashif": 1027, "rasul": [1027, 1029, 1030], "galvez": 1027, "sonni": 1027, "hu": [1027, 1030, 1032], "santi": [1027, 1029, 1030], "villalba": [1027, 1030, 1034], "5186": 1027, "stolbunov": 1027, "booster": 1027, "graham": [1027, 1028], "clenaghan": [1027, 1028], "clyde": 1027, "subproblem": 1027, "forestclassifi": 1027, "ankur": [1027, 1038], "ankan": 1027, "henri": [1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037], "5431": 1027, "buddha": 1027, "prakash": [1027, 1029, 1035], "5182": 1027, "lamb": [1027, 1035], "5282": 1027, "5355": 1027, "5360": 1027, "4478": 1027, "5337": 1027, "4362": 1027, "5495": 1027, "elvi": [1027, 1028, 1029], "dohmatob": [1027, 1028, 1029], "data_min": 1027, "data_max": 1027, "data_rang": 1027, "_learntselectormixin": 1027, "gradientboost": 1027, "metatransfom": 1027, "load_lfw_pair": 1027, "wardagglom": 1027, "residues_": 1027, "indicator_matrix_": 1027, "adithya": 1027, "ganesh": 1027, "akitti": 1027, "alexei": 1027, "grigorev": 1027, "ali": [1027, 1030, 1031, 1034, 1035, 1037, 1038], "baharev": 1027, "ando": 1027, "saaba": 1027, "anish": [1027, 1028], "anthoni": [1027, 1029, 1030], "erling": 1027, "rouvinen": 1027, "rachez": [1027, 1028], "benjaminirv": 1027, "naul": [1027, 1028], "gohlk": 1027, "bourguignat": 1027, "cindi": [1027, 1035], "sridharan": 1027, "kronovet": 1027, "data1010": 1027, "dotson": 1027, "djipei": [1027, 1028], "dmitri": [1027, 1029, 1030, 1031, 1035, 1038], "spikhalskii": 1027, "donn": 1027, "duart": [1027, 1035, 1037], "caro": 1027, "larson": [1027, 1031, 1032, 1034, 1036], "fernando": [1027, 1034], "carrillo": 1027, "eckert": 1027, "zalkow": 1027, "ganiev": [1027, 1028, 1029], "ibraim": [1027, 1028, 1029], "giorgiop": 1027, "gryllo": [1027, 1030], "prokopi": [1027, 1030], "hsuan": 1027, "tien": 1027, "ishank": [1027, 1028, 1029], "gulati": [1027, 1028, 1029], "jeffrey04": [1027, 1028], "jfraj": 1027, "jiali": 1027, "mei": [1027, 1032], "kirkham": [1027, 1028, 1030], "wittenau": 1027, "loyal": 1027, "jungkook": 1027, "park": [1027, 1032, 1034, 1037, 1038], "kamalakerdadi": [1027, 1028], "kyler": 1027, "lilian": [1027, 1028], "besson": [1027, 1028], "tiao": [1027, 1028], "marktab": 1027, "spacek": 1027, "martinbpr": [1027, 1028], "martinosorb": 1027, "maryanmorel": [1027, 1028], "masafumi": 1027, "oyamada": 1027, "krump": 1027, "kolganov": 1027, "mbilling": 1027, "mhg": 1027, "patterson": 1027, "omer": 1027, "katz": [1027, 1034, 1035], "pauli": 1027, "virtanen": 1027, "fischer": [1027, 1028], "pianomania": 1027, "preston": [1027, 1028, 1029], "parri": [1027, 1028, 1029], "rohan": [1027, 1028, 1030, 1031, 1035], "ramanath": 1027, "bansod": [1027, 1028, 1029], "scls19fr": 1027, "saeger": [1027, 1028, 1029], "shivan": 1027, "sornarajah": 1027, "simonpl": 1027, "sseg": 1027, "hoover": [1027, 1028, 1029, 1031], "seguin": 1027, "theodor": 1027, "vasiloudi": 1027, "freita": [1027, 1029, 1030], "pereira": [1027, 1030, 1031], "timothi": [1027, 1035], "hopper": 1027, "tokoroten": 1027, "vstolbunov": 1027, "wangz10": 1027, "yucheng": 1027, "zhauniarovich": 1027, "zac": 1027, "stewart": [1027, 1032, 1035, 1037], "zhai_pro": 1027, "zichen": 1027, "7946": 1028, "8355": 1028, "9010": 1028, "8040": 1028, "9149": 1028, "aman": [1028, 1029, 1030, 1036, 1037], "dalmia": [1028, 1029, 1030], "nate": [1028, 1029, 1035], "guerin": [1028, 1029], "lebedev": [1028, 1029], "utilis": 1028, "6497": 1028, "7724": 1028, "bing": [1028, 1029], "explained_variance_ratio": 1028, "7632": 1028, "jpfrancoia": [1028, 1029], "7676": 1028, "moham": [1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "affan": 1028, "7756": 1028, "7786": 1028, "srivatsan": [1028, 1029, 1032], "7799": 1028, "7490": [1028, 1029], "6282": 1028, "7301": 1028, "6178": 1028, "7680": 1028, "n_iters_": 1028, "7553": 1028, "ekaterina": [1028, 1029, 1030, 1031, 1033, 1038], "krivich": [1028, 1029, 1031], "5874": 1028, "7593": 1028, "7594": 1028, "7660": 1028, "7750": 1028, "7732": 1028, "artsion": 1028, "lieu": [1028, 1029], "grid_scores_": [1028, 1034, 1035], "leaveonelabelout": 1028, "leaveplabelout": 1028, "plural": 1028, "mean_tim": 1028, "std_time": 1028, "3204": 1028, "5291": 1028, "sounder": 1028, "7295": 1028, "5299": 1028, "bravi": 1028, "fouchet": 1028, "calinski_harabaz_scor": [1028, 1030], "harabaz": 1028, "6586": 1028, "4294": 1028, "6667": 1028, "6954": 1028, "unveil": 1028, "yelit": 1028, "basebag": [1028, 1030], "staub": 1028, "5805": 1028, "5251": 1028, "imacul": 1028, "1000x": 1028, "arfa": 1028, "6691": 1028, "6913": 1028, "5762": 1028, "utkarsh": [1028, 1029, 1030, 1031], "upadhyai": [1028, 1029, 1030, 1031], "6846": 1028, "5929": 1028, "podshumok": [1028, 1029], "6173": 1028, "ryad": 1028, "zenin": 1028, "devashish": 1028, "asish": [1028, 1029], "dowl": 1028, "6697": 1028, "ori": 1028, "ziv": 1028, "sear": 1028, "merritt": 1028, "7325": 1028, "7239": 1028, "hong": [1028, 1030, 1034, 1035, 1036, 1038], "guangguo": 1028, "jensen": [1028, 1034], "7419": 1028, "gregori": [1028, 1032, 1033, 1034, 1035], "stupp": [1028, 1029], "bernardo": 1028, "stein": 1028, "sparse_func": [1028, 1034], "incr_mean_variance_axi": [1028, 1034], "7049": 1028, "7152": 1028, "load_boston": [1028, 1030, 1035], "7154": 1028, "manvendra": [1028, 1029], "singh": [1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "5540": 1028, "7248": 1028, "6764": 1028, "wenhua": 1028, "6817": 1028, "6902": 1028, "leonieborn": 1028, "5141": 1028, "4995": 1028, "5012": 1028, "_transform_select": 1028, "7194": 1028, "caio": [1028, 1030, 1032], "oliveira": [1028, 1030, 1032, 1036], "6182": 1028, "6121": 1028, "6472": 1028, "7350": 1028, "russel": [1028, 1029], "smith": [1028, 1029, 1030, 1031, 1032, 1034], "7159": 1028, "yichuan": [1028, 1029], "5460": 1028, "document_clust": 1028, "7353": 1028, "_search": 1028, "_check_param_grid": 1028, "xrang": 1028, "7323": 1028, "viacheslav": 1028, "kovalevskyi": 1028, "7101": 1028, "residual_metr": 1028, "6651": 1028, "reorgan": 1028, "7187": 1028, "7260": 1028, "sebasti\u00e1n": 1028, "vanrel": 1028, "leaveplabelsout": 1028, "6660": 1028, "unprefix": 1028, "7261": 1028, "aditya": [1028, 1030, 1031, 1032, 1036, 1037], "joshi": [1028, 1030, 1036], "loginov": 1028, "minyushkin": 1028, "rudi": 1028, "abadi": [1028, 1029], "saint": 1028, "alexfield": 1028, "alvaro": [1028, 1030], "ulloa": 1028, "alyssaq": 1028, "amlan": 1028, "kar": 1028, "giessel": 1028, "jackson": [1028, 1029, 1031], "murrai": [1028, 1029], "arafat": 1028, "archit": 1028, "asnt": 1028, "b0noi": 1028, "behzad": 1028, "tabibian": 1028, "kratzwald": 1028, "bhargav": 1028, "mangipudi": 1028, "blakeflei": 1028, "brandon": [1028, 1029, 1036, 1037], "carter": [1028, 1029, 1037], "camilo": 1028, "lamu": 1028, "carol": [1028, 1029], "Willing": [1028, 1029], "cass": 1028, "ceshin": 1028, "truong": 1028, "codevig": 1028, "shiebler": 1028, "hnyk": [1028, 1029], "elli": [1028, 1031], "nicholson": [1028, 1029, 1030], "thaler": 1028, "warshaw": 1028, "lasagna": 1028, "deborah": [1028, 1029], "definitelyuncertain": 1028, "didi": [1028, 1029, 1030, 1031], "zev": [1028, 1029, 1030, 1031], "dsquareindia": 1028, "edwinensa": 1028, "elia": 1028, "kuth": 1028, "fabio": 1028, "ticconi": 1028, "fisach": 1028, "donovan": 1028, "ghg": 1028, "giovanni": [1028, 1030], "cherubin": 1028, "lanzani": 1028, "glenn": 1028, "qian": [1028, 1033], "mohr": 1028, "govin": 1028, "vatsan": 1028, "reda": 1028, "gustav": 1028, "m\u00f6rtberg": 1028, "halwai": 1028, "harizo": [1028, 1029], "rajaona": [1028, 1029], "hashcode55": 1028, "hdmetor": 1028, "hobson": 1028, "lane": 1028, "bown": 1028, "igor": [1028, 1029, 1035], "andriushchenko": [1028, 1029], "inki": 1028, "hwang": 1028, "isaac": [1028, 1029, 1031, 1032], "sijaranamu": 1028, "iver": 1028, "jordal": 1028, "jackmartin": 1028, "fiedler": 1028, "routlei": 1028, "zike": 1028, "janna": 1028, "brettingen": 1028, "jarfa": 1028, "laska": 1028, "jblackburn": 1028, "levesqu": 1028, "hintz": 1028, "jeremynixon": 1028, "jeroen": 1028, "jessica": 1028, "jill": 1028, "j\u00eann": 1028, "vie": 1028, "jia": 1028, "jiyuan": 1028, "johannah": 1028, "boersma": 1028, "moeller": 1028, "striebel": [1028, 1029], "joncral": 1028, "jordi": 1028, "munoz": [1028, 1034], "jrfiedler": 1028, "juliankahnert": 1028, "juliathebrav": 1028, "kaichogami": 1028, "lyon": [1028, 1029], "kingjr": 1028, "kjell": 1028, "krishna": [1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037], "kalyan": 1028, "krishnakalyan3": 1028, "kvle": 1028, "putnam": 1028, "ldavid": 1028, "leig": 1028, "leightonzhang": 1028, "leland": [1028, 1029, 1030, 1032, 1033, 1038], "liang": [1028, 1033, 1034], "hsieh": 1028, "lizsz": 1028, "l\u00e9oni": 1028, "born": 1028, "maniteja": [1028, 1029, 1030], "nandana": [1028, 1029, 1030], "marco": [1028, 1030, 1031, 1035, 1036, 1037], "bao": [1028, 1036], "szepieniec": 1028, "madsen": [1028, 1030], "massil": 1028, "matheu": 1028, "duboi": [1028, 1030], "moroz": 1028, "scherer": 1028, "michiaki": 1028, "ariga": 1028, "moussa": 1028, "taifi": 1028, "mrandrewandrad": 1028, "mridul": 1028, "seth": 1028, "nadya": 1028, "naoya": [1028, 1029, 1030, 1031], "kanai": [1028, 1029, 1030], "nickledav": 1028, "nico": [1028, 1035], "ningchi": 1028, "nlathia": 1028, "okbalefthand": 1028, "okhlopkov": [1028, 1029], "pano": 1028, "lourida": 1028, "strickland": 1028, "perrin": 1028, "letelli": 1028, "pestrickland": 1028, "practicalswift": 1028, "qimu": 1028, "zheng": [1028, 1029, 1034], "rachit": [1028, 1034, 1037], "kansal": 1028, "ramana": [1028, 1029], "randi": 1028, "olson": 1028, "lutz": [1028, 1032, 1035], "schucker": 1028, "jain": [1028, 1029, 1030, 1034, 1036, 1037], "ruifeng": [1028, 1029, 1034], "r\u00e9my": 1028, "l\u00e9one": 1028, "saihttam": 1028, "saiw": 1028, "yeung": 1028, "shleifer": [1028, 1029], "sartaj": 1028, "sasank": 1028, "chilamkurthi": 1028, "seal": 1028, "shagun": 1028, "sodhani": 1028, "shanmuga": 1028, "shashank": [1028, 1034], "shekhar": 1028, "shawpan": 1028, "shengxiduan": 1028, "shota": 1028, "shuckle16": 1028, "smedbergm": 1028, "srvanrel": 1028, "leriqu": [1028, 1030], "taranjeet": 1028, "themrmax": [1028, 1029], "hallock": 1028, "moreau": [1028, 1029, 1030, 1031, 1032], "tkammi": 1028, "toastedcornflak": [1028, 1029], "tomdlt": 1028, "toshihiro": [1028, 1029, 1035], "kamishima": [1028, 1029], "tracer0tong": 1028, "hauck": 1028, "vo": [1028, 1036], "varun": [1028, 1029, 1030, 1036, 1037], "jewalikar": 1028, "vikram": [1028, 1037, 1038], "villu": 1028, "ruusmann": 1028, "walter": 1028, "waterponei": [1028, 1029], "wenjian": 1028, "welch": 1028, "wyseguy7": 1028, "xyguo": [1028, 1030], "yanlend": 1028, "yen": [1028, 1029], "yenchenlin": 1028, "yoav": 1028, "zivori": 1028, "10723": [1029, 1030], "9623": 1029, "undocu": 1029, "deleteri": 1029, "9677": 1029, "ashutosh": [1029, 1030, 1032, 1034], "correlation_model": 1029, "regression_model": 1029, "belatedli": 1029, "9717": 1029, "9693": 1029, "steingold": [1029, 1030], "9711": 1029, "goncalo": [1029, 1030], "rodrigu": [1029, 1030, 1035], "9641": 1029, "bourbeau": [1029, 1030, 1031], "9865": 1029, "sachin": [1029, 1030, 1036], "kelkar": [1029, 1030, 1032], "9922": 1029, "charli": [1029, 1030, 1038], "brummitt": [1029, 1030], "9945": 1029, "9830": 1029, "9600": 1029, "kerimov": [1029, 1030], "9593": 1029, "reiichiro": [1029, 1030], "nakano": [1029, 1030], "9604": 1029, "interim": 1029, "9558": 1029, "9847": 1029, "joan": [1029, 1030, 1031, 1032], "massich": [1029, 1030, 1031, 1032], "oli": 1029, "blum": 1029, "9697": 1029, "9750": 1029, "9788": 1029, "9815": 1029, "9802": 1029, "vrishank": [1029, 1030], "bhardwaj": [1029, 1030], "nagarjuna": [1029, 1030], "nathaniel": [1029, 1030, 1032], "diegodlh": [1029, 1030], "jkleint": [1029, 1030], "oliblum90": [1029, 1030], "pasbi": [1029, 1030], "lawson": [1029, 1030, 1031], "nielsenmarkus11": [1029, 1030], "excit": 1029, "cautiou": 1029, "min_impurity_split": 1029, "7823": [1029, 1030], "8446": 1029, "5279": 1029, "8363": 1029, "5295": 1029, "7388": 1029, "userguid": 1029, "7655": 1029, "karan": [1029, 1030, 1031], "desai": [1029, 1031, 1034, 1035, 1037, 1038], "7739": 1029, "gasquez": 1029, "8120": 1029, "neeraj": 1029, "gangwar": 1029, "7548": 1029, "9206": 1029, "7441": 1029, "6101": 1029, "8698": 1029, "7794": 1029, "herilalaina": [1029, 1030, 1032], "rakotoarison": [1029, 1030, 1032], "5036": 1029, "4939": 1029, "esuli": [1029, 1034], "n_skips_": 1029, "7914": 1029, "horrel": 1029, "8591": 1029, "hadrien": [1029, 1032], "7838": 1029, "8835": 1029, "8061": 1029, "cordier": 1029, "6288": 1029, "9145": 1029, "reddi": [1029, 1030, 1031, 1036], "chinthala": 1029, "7721": 1029, "crall": [1029, 1035], "7685": 1029, "tommi": [1029, 1030, 1031], "l\u00f6fstedt": 1029, "9277": 1029, "hongkahjun": 1029, "7089": 1029, "randomized_svd_low_rank": 1029, "9067": 1029, "6181": 1029, "wendling": 1029, "8065": 1029, "lejeun": 1029, "7567": 1029, "jay": 1029, "doepk": 1029, "7573": 1029, "romain": [1029, 1034], "brault": 1029, "5229": 1029, "7990": 1029, "8586": 1029, "7723": 1029, "8028": 1029, "booth": 1029, "8005": 1029, "7863": 1029, "7506": 1029, "5991": 1029, "8845": 1029, "8053": 1029, "8282": 1029, "8117": 1029, "9259": 1029, "8094": 1029, "8335": 1029, "poughon": 1029, "7880": 1029, "karnofski": 1029, "8931": 1029, "attractador": [1029, 1030], "8002": 1029, "8549": 1029, "zerodivisionerror": [1029, 1032, 1038], "7501": 1029, "dominik": [1029, 1038], "krzeminski": 1029, "7970": 1029, "8006": 1029, "p\u00f6lsterl": [1029, 1032, 1035], "8936": 1029, "8672": 1029, "mike": 1029, "benfield": 1029, "broke": 1029, "8068": 1029, "5732": 1029, "ytrue": 1029, "ypred": 1029, "8087": 1029, "7983": 1029, "8512": 1029, "8251": 1029, "aivision2020": 1029, "5814": 1029, "7849": 1029, "jair": 1029, "montoya": 1029, "martinez": 1029, "randomizedlasso": 1029, "5359": 1029, "9302": 1029, "8160": 1029, "8224": 1029, "gedeck": 1029, "vathsala": [1029, 1030, 1031, 1032], "achar": [1029, 1030, 1031, 1032], "9022": 1029, "mehmet": [1029, 1035], "basbug": 1029, "9024": 1029, "8973": 1029, "paulo": [1029, 1035, 1037], "haddad": 1029, "unmeaning": 1029, "6573": 1029, "quazi": [1029, 1030], "marufur": 1029, "rahman": [1029, 1030, 1034], "baselabelpropag": 1029, "9239": 1029, "andr": [1029, 1036], "ambrosio": 1029, "boechat": 1029, "early_exager": 1029, "assertionerror": 1029, "8992": 1029, "7954": 1029, "foreman": 1029, "9105": 1029, "9108": 1029, "8306": 1029, "7872": 1029, "_c_step": 1029, "3367": 1029, "steward": 1029, "8768": 1029, "detomaso": 1029, "6507": 1029, "jayzed82": 1029, "6126": 1029, "7814": 1029, "7702": 1029, "9219": 1029, "7771": 1029, "ang": 1029, "randomizedlogisticregress": 1029, "8259": 1029, "mandatorili": 1029, "7565": 1029, "8181": 1029, "basesearchcv": [1029, 1030], "8344": 1029, "eriksson": 1029, "7661": 1029, "8295": 1029, "batula": 1029, "dylan": [1029, 1032], "werner": [1029, 1034], "meier": 1029, "7365": 1029, "aleksandr": 1029, "sandrovskii": 1029, "5697": 1029, "stijn": 1029, "tonk": 1029, "6250": 1029, "8093": 1029, "bull": 1029, "9507": 1029, "7356": 1029, "dingwal": 1029, "_check_target": 1029, "8377": 1029, "5211": 1029, "rhinehart": 1029, "8159": 1029, "8198": 1029, "fetch_": 1029, "7944": 1029, "7825": 1029, "kathleen": 1029, "7376": 1029, "7331": 1029, "yangarbit": 1029, "__getstate__": [1029, 1037], "obstruct": 1029, "8316": 1029, "holger": 1029, "8010": 1029, "7986": 1029, "najera": 1029, "9289": 1029, "makedir": 1029, "9284": 1029, "sebastin": [1029, 1030], "alert": 1029, "lgtm": 1029, "9278": 1029, "heli": 1029, "8449": 1029, "9078": 1029, "purport": 1029, "sergul": [1029, 1030, 1033], "aydor": [1029, 1030, 1033], "8922": 1029, "8137": 1029, "8139": 1029, "8995": 1029, "2879": 1029, "7459": 1029, "7812": 1029, "9100": 1029, "8481": 1029, "8174": 1029, "tahar": 1029, "zanouda": 1029, "8854": 1029, "8874": 1029, "7998": 1029, "jiacheng": 1029, "argpartit": 1029, "frombuffer_empti": 1029, "in1d": 1029, "rankdata": 1029, "safe_copi": 1029, "eig": 1029, "fast_dot": 1029, "pinvh": [1029, 1031], "graph_laplacian": 1029, "sparsetool": 1029, "connected_compon": 1029, "check_decision_proba_consist": 1029, "shubham": [1029, 1032], "9019": 1029, "baseensembl": [1029, 1032], "7464": 1029, "rishikesh": 1029, "taehoon": [1029, 1030], "aashil": 1029, "balakumaran": [1029, 1030], "manoharan": [1029, 1030], "petrov": [1029, 1030, 1038], "minghui": [1029, 1030], "jc": [1029, 1030], "alexandercbooth": 1029, "chkoar": 1029, "aarshai": [1029, 1030], "gilliam": 1029, "subramanyam": 1029, "clement": [1029, 1030, 1034], "joudet": [1029, 1030], "robl": 1029, "kati": 1029, "luangkot": 1029, "lacchia": 1029, "akshay0724": 1029, "omtcyfz": 1029, "rickiepark": 1029, "jbdelafoss": 1029, "vivek": [1029, 1030, 1031], "elliott": 1029, "ldirer": 1029, "sid": 1029, "kapur": 1029, "midina": 1029, "mikebenfield": 1029, "sourav": [1029, 1032], "aseem": 1029, "bansal": 1029, "aishwaryark": 1029, "howel": 1029, "dokato": 1029, "kathi": [1029, 1032], "ferria": 1029, "nikita": [1029, 1030, 1032, 1035, 1036, 1037], "basil": 1029, "beirouti": 1029, "possa": 1029, "bednar": 1029, "janin": 1029, "harper": 1029, "artsiom": 1029, "ligo": 1029, "rahn": [1029, 1032], "seanpwilliam": 1029, "julian": [1029, 1030], "kuhlmann": [1029, 1030], "aubert": 1029, "j\u00f6rn": 1029, "hee": [1029, 1032], "shivamgargsya": [1029, 1033, 1035], "kat": 1029, "hempstalk": 1029, "kaushik": [1029, 1036, 1037, 1038], "lakshmikanth": 1029, "kennedi": [1029, 1032], "yap": 1029, "kiril": [1029, 1030, 1032, 1034], "bobyrev": 1029, "imbert": [1029, 1031, 1034, 1036], "lera": 1029, "douillard": 1029, "mainak": 1029, "tobychees": [1029, 1030], "manraj": 1029, "marc": [1029, 1031, 1032, 1038], "meketon": 1029, "marcofalk": 1029, "gilch": 1029, "mehul": 1029, "ahuja": [1029, 1036, 1037], "goetz": [1029, 1030], "dezub": 1029, "baumgartn": 1029, "vibrantabhi19": 1029, "golubin": 1029, "milen": 1029, "paskov": 1029, "antonin": 1029, "carett": 1029, "morikko": 1029, "mrmjauh": 1029, "nalepa": 1029, "namiya": 1029, "narinek": [1029, 1030], "angu": [1029, 1030, 1036], "nicol": 1029, "vavrova": 1029, "nitish": 1029, "pandei": [1029, 1034], "daniil": 1029, "olegovich": 1029, "craze": 1029, "om": 1029, "parmind": 1029, "patrick": [1029, 1030, 1035, 1036], "carlson": 1029, "ganssl": 1029, "lorek": 1029, "pete": [1029, 1033, 1034], "bachant": 1029, "csizsek": 1029, "jong": 1029, "puneet": 1029, "mathur": [1029, 1031, 1032, 1037, 1038], "quentin": [1029, 1030, 1031, 1038], "hibon": 1029, "1kastner": 1029, "rameshwar": [1029, 1030], "bhaskaran": [1029, 1030], "rebecca": 1029, "bilbro": 1029, "remi": 1029, "rampin": 1029, "pratik": 1029, "agarw": [1029, 1030, 1032], "sailesh": [1029, 1030], "choyal": [1029, 1030], "samson": 1029, "samu\u00ebl": 1029, "weber": 1029, "sarah": [1029, 1031, 1034], "abhyudai": 1029, "sharan": [1029, 1030], "yalburgi": [1029, 1030], "willduan": 1029, "siddharth": [1029, 1033], "almer": 1029, "theofilo": 1029, "papapanagiot": 1029, "alison": 1029, "boucher": 1029, "folkman": 1029, "jung": [1029, 1033, 1037], "shenoi": 1029, "vilhelm": [1029, 1030], "ehrenheim": [1029, 1030], "alan": [1029, 1030, 1033, 1035, 1036], "yee": [1029, 1030], "warut": [1029, 1030], "vijitbenjaronk": [1029, 1030], "yuichi": 1029, "fujikawa": 1029, "affanv14": 1029, "andreh7": 1029, "bradi": 1029, "salz": 1029, "campustrampu": 1029, "agamemnon": [1029, 1030, 1031, 1032, 1034, 1035], "krasouli": [1029, 1030, 1031, 1032, 1034, 1035], "ditenberg": 1029, "elena": 1029, "sharova": 1029, "filipj8": [1029, 1030], "fukatani": 1029, "guiniol": 1029, "guoci": 1029, "hakaa1": [1029, 1030], "xhy": 1029, "jakirkham": [1029, 1030, 1031, 1037, 1038], "jaroslaw": 1029, "jeroko": 1029, "jmontoyam": 1029, "josephsalmon": [1029, 1030, 1031], "jschendel": [1029, 1030], "leereev": 1029, "hahn": [1029, 1030], "mathurinm": [1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "mehak": 1029, "sachdeva": 1029, "mlewis1729": 1029, "mlliou112": 1029, "mthorrel": [1029, 1032], "ndingwal": 1029, "nuff": 1029, "plagre": 1029, "pldtc325": 1029, "breno": [1029, 1030], "olsen": 1029, "alfano": 1029, "burn": [1029, 1030], "polmauri": 1029, "charlton": 1029, "austin": 1029, "chayant": 1029, "t15h": 1029, "chinmaya": 1029, "pancholi": 1029, "danielsen": 1029, "chung": [1029, 1030], "pravarmahajan": [1029, 1030], "dariu": [1029, 1030], "morawiec": [1029, 1030], "haberth\u00fcr": 1029, "heryanto": 1029, "kirkbi": [1029, 1030], "rashchedrin": 1029, "gertrud": 1029, "devansh": [1029, 1030], "dickson": 1029, "baxlei": 1029, "don86": 1029, "klarup": 1029, "elizabeth": [1029, 1031, 1034], "ferriss": 1029, "ellen": 1029, "egli": 1029, "chieh": [1029, 1030], "chou": [1029, 1030], "grzegorz": [1029, 1032], "szpak": [1029, 1032], "zxcvbniu": 1029, "icyblad": 1029, "ilya": 1029, "laughlin": 1029, "iv\u00e1n": [1029, 1035], "vall\u00e9": 1029, "aur\u00e9lien": [1029, 1030, 1031, 1035, 1036], "bellet": [1029, 1030, 1031], "mahapatra": 1029, "bundl": [1030, 1031], "indexerror": [1030, 1031], "11756": [1030, 1031], "14237": [1030, 1031], "schuder": [1030, 1031, 1032], "13903": [1030, 1031], "13124": [1030, 1031], "13772": [1030, 1031], "vya": [1030, 1031, 1032], "12949": 1030, "prabakaran": [1030, 1031, 1034, 1036, 1037], "kumaresshan": [1030, 1031, 1034], "12946": 1030, "tallott": 1030, "13276": 1030, "13005": 1030, "13312": 1030, "11295": 1030, "vacaliuc": [1030, 1031], "13046": 1030, "12360": 1030, "aakanksha": 1030, "13134": 1030, "sandro": [1030, 1037], "casagrand": [1030, 1031], "12881": 1030, "13165": 1030, "13221": 1030, "bertrandhaut": [1030, 1031], "raghunathan": [1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "dowon": [1030, 1031], "aria": [1030, 1031, 1037], "fibins": [1030, 1031], "finn": [1030, 1031], "shea": [1030, 1031], "joaak": [1030, 1031], "m\u00e9hault": [1030, 1031], "kms15": [1030, 1031], "kossori": [1030, 1031], "aruku": [1030, 1031], "lakshya": [1030, 1031, 1032], "ib\u00e1\u00f1ez": [1030, 1031, 1034], "gorelli": [1030, 1031, 1035, 1037], "marcogorelli": [1030, 1031], "mferrari3": [1030, 1031], "micka\u00ebl": [1030, 1031], "schoentgen": [1030, 1031], "pavlo": [1030, 1031], "kalli": [1030, 1031], "glaser": [1030, 1031], "pierretallott": [1030, 1031, 1032], "kapoor": [1030, 1031], "sandrocasagrand": [1030, 1031], "tashai": [1030, 1031], "vishaal": [1030, 1031], "zhuyi": [1030, 1031], "ziji": [1030, 1031], "zj": [1030, 1031], "poh": [1030, 1031], "12704": 1030, "12701": 1030, "12685": 1030, "12699": 1030, "adanhawth": [1030, 1031], "stine": [1030, 1031], "feda": [1030, 1031], "curic": [1030, 1031], "jeremiedbb": [1030, 1031, 1032], "katrin": [1030, 1031], "leinweb": [1030, 1031], "muhammad": [1030, 1031, 1035], "hassaan": [1030, 1031], "rafiqu": [1030, 1031], "paczuski": [1030, 1031], "waterburi": [1030, 1031], "shivam": [1030, 1031, 1032], "kotwalia": [1030, 1031], "12159": 1030, "12105": 1030, "11912": 1030, "12304": 1030, "12339": 1030, "12246": 1030, "10811": 1030, "feldbauer": [1030, 1031, 1032, 1033, 1036], "12441": 1030, "12517": 1030, "12234": 1030, "12165": 1030, "12388": 1030, "connor": [1030, 1035], "tann": [1030, 1035], "12393": 1030, "12122": 1030, "sharedmem": 1030, "12518": 1030, "12481": 1030, "12612": 1030, "12211": 1030, "lisa": [1030, 1031, 1033, 1034, 1036, 1037], "hannel": [1030, 1031], "melissa": 1030, "ferrari": 1030, "12451": 1030, "12171": 1030, "12365": 1030, "_encod": 1030, "12514": 1030, "12522": 1030, "12471": 1030, "marzinotto": [1030, 1031], "12317": 1030, "12338": 1030, "bauk": [1030, 1031], "12625": 1030, "sklearn_site_joblib": 1030, "12350": 1030, "12467": 1030, "unvendor": 1030, "12345": 1030, "navarret": [1030, 1031, 1032], "benjastudio": [1030, 1031], "cheuk": [1030, 1031], "connossor": [1030, 1031], "levinson": [1030, 1031], "kieker": [1030, 1031], "kataev": [1030, 1031], "dillon": [1030, 1031, 1032], "gardner": [1030, 1031], "vukolov": [1030, 1031], "caselli": [1030, 1031], "gauravahlawat": [1030, 1031], "gustavo": [1030, 1031, 1036], "haroldfox": [1030, 1031], "jacklangerman": [1030, 1031], "jacopo": [1030, 1031], "notarstefano": [1030, 1031], "janvanrijn": [1030, 1031], "jdethuren": [1030, 1031], "koen": [1030, 1031], "kushal": [1030, 1031], "chauhan": [1030, 1031, 1037, 1038], "jie": [1030, 1031, 1034], "lili": [1030, 1031], "xiong": [1030, 1031, 1036], "liam": [1030, 1031], "melsyt": [1030, 1031], "nichola": [1030, 1031, 1033], "shebanov": [1030, 1031], "oleksandr": [1030, 1031, 1032, 1033, 1036], "pavlyk": [1030, 1031, 1032, 1033], "hausamann": [1030, 1031], "pulkit": [1030, 1031, 1033], "maloo": [1030, 1031], "batista": [1030, 1031, 1035], "radostin": [1030, 1031], "stoyanov": [1030, 1031], "ramil": [1030, 1031], "nugmanov": [1030, 1031], "rebekah": [1030, 1031, 1032], "roopam": [1030, 1031], "tiernei": [1030, 1031, 1032], "sylvainlan": [1030, 1031, 1032, 1033, 1034], "takingitcasu": [1030, 1031], "tulio": [1030, 1031], "xing": [1030, 1031], "zach": [1030, 1031, 1036], "mountain": 1030, "sorri": 1030, "basemultilayerperceptron": [1030, 1032], "11924": 1030, "macbook": 1030, "9354": 1030, "9372": 1030, "astel": 1030, "10933": 1030, "hansen": 1030, "10471": 1030, "gaurav": [1030, 1031, 1032, 1033, 1034, 1036], "dhingra": [1030, 1031, 1034], "8003": 1030, "jo\u00ebl": 1030, "billaud": 1030, "10059": 1030, "braun": 1030, "9612": 1030, "jonatan": 1030, "samoocha": 1030, "8129": 1030, "margeta": 1030, "k_means_elkan": 1030, "11353": 1030, "11901": 1030, "9875": 1030, "9012": 1030, "11315": 1030, "9041": 1030, "9858": 1030, "artiem": 1030, "krinitsyn": 1030, "9908": 1030, "8617": 1030, "maskani": [1030, 1032, 1033, 1034], "filali": 1030, "konstantino": 1030, "katriopla": 1030, "10774": 1030, "catalfo": 1030, "10795": 1030, "takeshi": [1030, 1035, 1036, 1037], "yoshizawa": 1030, "11082": 1030, "sadhana": 1030, "srinivasan": [1030, 1033], "9731": 1030, "10045": 1030, "fetch_mldata": 1030, "11466": 1030, "6374": 1030, "normalize_compon": [1030, 1032], "11585": 1030, "ivan": [1030, 1031, 1034, 1037], "panico": [1030, 1034], "11420": 1030, "6452": 1030, "walli": 1030, "gauz": 1030, "9492": 1030, "8484": 1030, "9886": 1030, "underflow": [1030, 1035], "10142": 1030, "5956": 1030, "_class_mean": 1030, "_class_cov": 1030, "10898": 1030, "nanxin": 1030, "9832": 1030, "11951": 1030, "r\u00fcdiger": [1030, 1031, 1033], "busch": [1030, 1031, 1033], "9707": 1030, "wan": 1030, "7071": 1030, "9157": 1030, "11176": 1030, "forsyth": 1030, "11542": 1030, "anna": 1030, "9524": 1030, "9723": 1030, "10908": 1030, "10899": 1030, "melderi": 1030, "10101": 1030, "10\u2079": 1030, "9147": 1030, "clae": 1030, "fredrik": 1030, "mannbi": 1030, "10441": 1030, "mayur": 1030, "kulkarni": 1030, "6689": 1030, "nihar": 1030, "sheth": 1030, "11293": 1030, "9656": 1030, "greenhal": 1030, "n_features_to_comput": 1030, "9222": 1030, "hoh": 1030, "9234": 1030, "andrewww": 1030, "8075": 1030, "11211": 1030, "9484": 1030, "dalla": 1030, "card": 1030, "9043": 1030, "10112": 1030, "logistic_regression_path": [1030, 1031], "11724": 1030, "9939": 1030, "westov": 1030, "10998": 1030, "vazelh": [1030, 1031, 1032], "10071": 1030, "10153": 1030, "d\u00f6pfert": 1030, "10095": 1030, "cv_valu": 1030, "10297": 1030, "mabel": [1030, 1034], "10581": 1030, "yacin": 1030, "mazari": 1030, "10687": 1030, "10836": 1030, "aishwarya": 1030, "10397": 1030, "10992": 1030, "11327": 1030, "11905": 1030, "9837": 1030, "10593": 1030, "10610": 1030, "8554": 1030, "9775": 1030, "10827": 1030, "osa": 1030, "8066": 1030, "10587": 1030, "3840": 1030, "niederb\u00fchl": 1030, "9521": 1030, "11124": 1030, "arya": 1030, "11160": 1030, "barkhorn": 1030, "11679": 1030, "pacha": 1030, "10845": 1030, "perez": [1030, 1037], "parra": 1030, "toledano": 1030, "10999": 1030, "memoryerror": [1030, 1034], "11135": 1030, "10377": 1030, "9786": 1030, "10093": 1030, "alexryndin": 1030, "9772": 1030, "9515": 1030, "liddel": 1030, "manh": 1030, "dao": 1030, "9851": 1030, "10280": 1030, "10336": 1030, "haoran": 1030, "basemixtur": [1030, 1031], "10740": 1030, "10869": 1030, "g\u00e9ron": 1030, "9686": 1030, "11310": 1030, "_fit_and_scor": 1030, "11576": 1030, "ronsin": [1030, 1031], "_run_search": 1030, "9599": 1030, "11006": 1030, "11557": 1030, "boucaud": 1030, "iid": 1030, "9085": 1030, "10677": 1030, "zhdanovich": 1030, "10982": 1030, "juliet": 1030, "lawton": 1030, "10928": 1030, "solutu": 1030, "immensu": 1030, "9257": 1030, "8190": 1030, "alcorn": 1030, "9681": 1030, "mottl": [1030, 1031], "10005": 1030, "10346": 1030, "tobia": [1030, 1035, 1037], "10887": 1030, "11136": 1030, "4394": 1030, "9579": 1030, "kober": 1030, "9655": 1030, "bjerr": 1030, "11556": 1030, "11774": 1030, "9456": 1030, "unexpectedli": 1030, "9304": 1030, "11144": [1030, 1031], "9151": 1030, "10521": 1030, "7668": 1030, "9647": 1030, "10195": 1030, "10192": 1030, "11272": 1030, "11467": 1030, "11505": 1030, "giusepp": [1030, 1031], "costa": [1030, 1035], "10210": 1030, "11520": 1030, "11011": 1030, "11005": 1030, "11308": 1030, "11206": 1030, "11306": 1030, "10437": 1030, "lucija": 1030, "gregov": 1030, "10452": 1030, "10181": 1030, "nirvan": [1030, 1034], "anjirbag": 1030, "9399": 1030, "10913": 1030, "rodrigo": 1030, "agundez": 1030, "10458": 1030, "9816": 1030, "newei": 1030, "11042": 1030, "11235": 1030, "active_features_": 1030, "feature_indices_": 1030, "n_values_": 1030, "9726": 1030, "10829": 1030, "gilberto": 1030, "olimpio": 1030, "10655": 1030, "python2": 1030, "10412": 1030, "jiongyan": 1030, "9497": 1030, "8361": 1030, "neo": 1030, "_criterion": 1030, "classificationcriterion": 1030, "regressioncriterion": 1030, "10325": 1030, "camil": [1030, 1038], "stap": 1030, "basedecisiontre": [1030, 1031, 1034], "10536": 1030, "ohayon": [1030, 1031, 1038], "11464": 1030, "stott": 1030, "10663": 1030, "10229": 1030, "11553": 1030, "10881": 1030, "sevin": 1030, "ridge_regress": [1030, 1031, 1037], "10306": 1030, "siebert": 1030, "11741": 1030, "11166": 1030, "pypy3": 1030, "v5": 1030, "11010": 1030, "lami": 1030, "11596": 1030, "marcu": 1030, "voss": 1030, "9569": 1030, "12462": 1030, "zachariah": 1030, "10474": 1030, "10500": 1030, "9701": 1030, "9378": 1030, "check_set_param": 1030, "7738": 1030, "alvin": 1030, "chiang": 1030, "8102": 1030, "ankita": 1030, "sinha": 1030, "check_methods_subset_invari": [1030, 1036], "10428": 1030, "check_sample_weights_pandas_seri": 1030, "11558": 1030, "211217613": 1030, "absolutelynowarranti": 1030, "richi": 1030, "halford": [1030, 1037, 1038], "adelr": 1030, "adityadaflapurkar": 1030, "aidan": 1030, "fitzgerald": 1030, "aishgrt1": 1030, "akash": 1030, "shivram": 1030, "lenail": [1030, 1034], "egg": 1030, "diaz": 1030, "amanda": [1030, 1033, 1034, 1035, 1036], "aniruddha": 1030, "annaayzenshtat": 1030, "antonio": [1030, 1032], "quinonez": 1030, "anubhav": 1030, "marwaha": 1030, "arik": 1030, "pamnani": 1030, "ozga": 1030, "arunava": 1030, "geron": [1030, 1035, 1036], "ayush": [1030, 1035], "bangda": 1030, "bastian": 1030, "venthur": 1030, "benn": 1030, "koonc": 1030, "cclauss": 1030, "chadi": 1030, "kamar": 1030, "holdgraf": 1030, "hirsch": 1030, "hogan": 1030, "cnx": 1030, "cwitt": 1030, "ferreira": [1030, 1035, 1036], "gomez": [1030, 1037], "klevebr": 1030, "shwed": 1030, "mohn": [1030, 1034], "danil": 1030, "baibak": [1030, 1031], "beach": 1030, "pickup": 1030, "derek": 1030, "niederhut": [1030, 1032], "dilutedsauc": 1030, "dlovel": 1030, "dor": 1030, "dougla": 1030, "duhaim": 1030, "tuzova": 1030, "eunji": 1030, "farahsae": 1030, "raimundo": 1030, "fenx": 1030, "frankhui": 1030, "franz": 1030, "wompner": 1030, "freija": 1030, "descamp": 1030, "frsi": 1030, "calvo": [1030, 1031], "georgi": [1030, 1033], "peev": [1030, 1033], "gkevinyen5418": 1030, "vermeil": 1030, "hongh": 1030, "hossein": [1030, 1031, 1032], "pourbozorg": [1030, 1031, 1032], "hristo": [1030, 1037], "hunan": 1030, "rostomyan": 1030, "iampat": 1030, "jaewon": 1030, "malcolm": 1030, "jami": 1030, "wolosonovich": 1030, "jeb": 1030, "bearer": 1030, "jinkun": 1030, "jjabl": 1030, "johnstott": 1030, "jotasi": 1030, "julietcl": 1030, "shenk": 1030, "karl": 1030, "kasper": 1030, "primdal": 1030, "lauritzen": 1030, "ksemb": 1030, "kuai": [1030, 1031], "kyeongpil": 1030, "kang": [1030, 1032], "kye": 1030, "kyledrogo": 1030, "l\u00e9o": 1030, "liutong": 1030, "lizao": 1030, "lkjcalc": 1030, "louib": [1030, 1031], "luciano": [1030, 1037], "luke": 1030, "persola": 1030, "markiwanchyshyn": 1030, "marsgui": 1030, "gubri": [1030, 1031], "koko": [1030, 1036, 1037], "copeland": [1030, 1031], "meghann": [1030, 1032], "minh": 1030, "jamaoui": [1030, 1031, 1034], "mohammad": [1030, 1031], "shahebaz": 1030, "muayyad": 1030, "alsadi": 1030, "nabarun": 1030, "pal": [1030, 1036], "narendran": 1030, "santhanam": 1030, "suh": 1030, "eng": 1030, "av": 1030, "nicolau": 1030, "werneck": 1030, "titov": [1030, 1032, 1035, 1036], "nilesh": 1030, "kevlani": 1030, "notmatthancock": [1030, 1032], "nzw": 1030, "oren": 1030, "milman": 1030, "osaid": 1030, "rehman": 1030, "nasir": 1030, "fernand": [1030, 1036, 1037], "olden": 1030, "pierreablin": 1030, "pietruh": 1030, "pinaki": 1030, "nath": 1030, "chowdhuri": [1030, 1036], "piotr": [1030, 1031], "szyma\u0144ski": [1030, 1031], "pradeep": [1030, 1031], "raamana": [1030, 1031], "pravar": 1030, "mahajan": [1030, 1032], "qingi": 1030, "rajendra": 1030, "arora": [1030, 1037], "rankylau": 1030, "kosobrodov": 1030, "rragundez": 1030, "sagnik": 1030, "bhattacharya": 1030, "radhakrishnan": 1030, "saqib": 1030, "nizam": 1030, "shamsi": 1030, "satish": 1030, "gigant": [1030, 1032, 1037, 1038], "flennerhag": 1030, "sebastien": 1030, "shalil": 1030, "awalei": 1030, "shangwu": [1030, 1031], "sharad": 1030, "vijalapuram": 1030, "shenhanc78": 1030, "rastogi": 1030, "siftikha": 1030, "sinclert": 1030, "p\u00e9rez": 1030, "solutusimmensu": 1030, "somya": 1030, "anand": [1030, 1034], "srajan": 1030, "paliw": 1030, "sriharsha": [1030, 1031], "hatwar": [1030, 1031], "mcdowel": 1030, "syonekura": 1030, "takanori": 1030, "hayashi": 1030, "tarcusx": 1030, "theriley106": 1030, "heavei": 1030, "augspurg": [1030, 1032], "trishnendu": 1030, "ghorai": 1030, "twosigmajab": 1030, "umar": [1030, 1031], "farouk": [1030, 1031], "urvang": [1030, 1032], "patel": [1030, 1032, 1033, 1034, 1036], "vadim": [1030, 1034, 1035], "markovtsev": 1030, "vinit": 1030, "vinod": 1030, "viraj": 1030, "mavani": 1030, "navkal": 1030, "vqean3": [1030, 1031], "vufg": 1030, "wallygauz": 1030, "wdevazelh": 1030, "barnett": 1030, "rosenfeld": 1030, "yime": 1030, "ymazari": 1030, "yufeng": 1030, "griffith": [1030, 1031], "z\u00e9": 1030, "vin\u00edciu": 1030, "zhenq": 1030, "zhiqe": 1030, "xiao": [1030, 1032, 1035, 1036, 1037, 1038], "couldn": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "12955": 1031, "klopfer": 1031, "14197": 1031, "14024": 1031, "nicolashug": 1031, "13974": 1031, "hoang": [1031, 1032], "fhoang7": 1031, "14393": 1031, "guillem": [1031, 1032, 1037], "subi": [1031, 1032, 1037], "14087": 1031, "14067": 1031, "stalei": [1031, 1032], "14092": 1031, "14053": 1031, "13947": 1031, "instanci": 1031, "13910": 1031, "13894": 1031, "myatt": [1031, 1032], "min_max_axi": 1031, "13741": 1031, "roddi": [1031, 1032], "macsween": [1031, 1032], "14309": 1031, "13864": 1031, "paresh": [1031, 1032], "13877": 1031, "_sag": 1031, "sag_solv": 1031, "3591": 1031, "13317": 1031, "13157": 1031, "13086": 1031, "cole": 1031, "13485": 1031, "assia": 1031, "benbihi": 1031, "13651": 1031, "reloc": 1031, "13486": 1031, "13427": 1031, "couvreur": [1031, 1032], "9069": 1031, "13835": 1031, "10727": 1031, "wood": 1031, "13250": 1031, "13241": 1031, "12143": 1031, "11650": 1031, "non_negative_factor": [1031, 1033, 1034, 1035], "12988": 1031, "8769": 1031, "11000": 1031, "thibault": 1031, "sejourn": 1031, "changedbehaviourwarn": 1031, "11526": 1031, "6848": 1031, "glemaitr": [1031, 1032, 1034], "11727": 1031, "13266": 1031, "13545": 1031, "sorro": 1031, "12807": 1031, "12513": 1031, "12543": 1031, "storch": 1031, "13260": 1031, "13283": 1031, "13524": 1031, "13174": 1031, "13496": 1031, "13620": 1031, "12436": 1031, "12983": 1031, "13251": 1031, "joshuakennethjon": 1031, "12715": 1031, "13164": 1031, "12834": 1031, "leastsquareserror": 1031, "update_terminal_region": 1031, "6463": 1031, "movelikeriv": 1031, "13193": 1031, "12599": 1031, "13779": 1031, "13780": 1031, "12916": 1031, "13641": 1031, "8478": 1031, "12177": 1031, "12583": 1031, "13601": 1031, "danylo": 1031, "densif": 1031, "13240": 1031, "bartosz": 1031, "13562": 1031, "11646": 1031, "11699": 1031, "make_dataset": 1031, "13336": 1031, "toleranbc": 1031, "11754": 1031, "13397": 1031, "fagan": 1031, "12174": 1031, "12972": 1031, "lucio": 1031, "fernandez": 1031, "arjona": 1031, "coeffeci": 1031, "13279": 1031, "13328": 1031, "13389": 1031, "basesgdclassifi": 1031, "13422": 1031, "cl\u00e9ment": [1031, 1035, 1037], "doumouro": 1031, "unhandl": 1031, "13363": 1031, "12821": 1031, "13350": 1031, "j\u00e9r\u00f4me": [1031, 1032, 1033], "dock\u00e8": [1031, 1032, 1033], "9907": 1031, "12232": 1031, "sangeeth": 1031, "11179": 1031, "13151": 1031, "12568": 1031, "8216": 1031, "romuald": 1031, "menuet": 1031, "12732": 1031, "12334": 1031, "13607": 1031, "12855": 1031, "pawel": 1031, "sendyk": 1031, "13628": 1031, "13447": 1031, "10580": 1031, "sandra": [1031, 1037], "mitrov": 1031, "13554": 1031, "celelibi": 1031, "13142": 1031, "11354": 1031, "12613": 1031, "12669": 1031, "torrella": [1031, 1032, 1038], "12861": 1031, "8773": 1031, "13366": 1031, "fournier": 1031, "10440": 1031, "12222": 1031, "10058": 1031, "chiotelli": 1031, "12279": 1031, "12582": 1031, "my_pipelin": 1031, "2568": 1031, "make_": 1031, "11364": 1031, "baze": 1031, "petrushev": 1031, "__len__": 1031, "13439": 1031, "12908": 1031, "drew": 1031, "13253": 1031, "12116": 1031, "12197": 1031, "12251": 1031, "float16": 1031, "13007": 1031, "raffaello": 1031, "baluyot": 1031, "13333": 1031, "13459": 1031, "hunter": 1031, "mcgushion": 1031, "8508": 1031, "6261": 1031, "vettigli": 1031, "justglow": 1031, "12300": 1031, "11458": 1031, "mitar": 1031, "milutinov": 1031, "12344": 1031, "13549": 1031, "warn_on_dtyp": 1031, "check_pairwise_arrai": 1031, "13382": 1031, "prathmesh": 1031, "saval": 1031, "11705": 1031, "11973": 1031, "our_rand_r": 1031, "madhura": [1031, 1033, 1034, 1037, 1038], "parikh": [1031, 1036, 1037, 1038], "13531": 1031, "check_fit_idempot": 1031, "alberto": [1031, 1035, 1036], "torr": 1031, "amourav": 1031, "assiaben": 1031, "micha\u0142owski": 1031, "brentfagan": 1031, "chenal": [1031, 1032, 1034], "choe": 1031, "drewmjohnston": 1031, "dror": 1031, "atariah": 1031, "esvhd": 1031, "falak": 1031, "gandenberg": 1031, "luqi": 1031, "jf": 1031, "kulbear": 1031, "leandro": [1031, 1035], "hermida": [1031, 1035], "luk": 1031, "manimaran": [1031, 1033, 1034, 1035, 1036], "gaido": 1031, "marinelm": 1031, "masstran": 1031, "roeschk": 1031, "aftab": 1031, "abdela": 1031, "ibraheem": 1031, "mwestt": 1031, "iijima": 1031, "oresti": 1031, "osman": [1031, 1037], "flanagan": [1031, 1032], "soriano": 1031, "peai": 1031, "pim": 1031, "haan": 1031, "raf": 1031, "rajdeep": 1031, "dua": 1031, "ra\u00fal": 1031, "garc\u00eda": [1031, 1032, 1037], "lekhwani": 1031, "varma": 1031, "shiyu": 1031, "duan": [1031, 1033], "smari": [1031, 1032, 1033], "st\u00e9phane": [1031, 1032, 1036, 1037], "surgan12": 1031, "thibsej": 1031, "xhan": 1031, "xinyuliu12": 1031, "zayd": 1031, "hammoudeh": 1031, "16397": [1032, 1033], "16500": 1032, "16505": 1032, "16076": 1032, "shack": [1032, 1033, 1034], "15930": 1032, "inder128": 1032, "15810": 1032, "15898": 1032, "gargsya": 1032, "15933": 1032, "15760": 1032, "15888": 1032, "15936": 1032, "dizietasahi": 1032, "15879": 1032, "bibhash": [1032, 1033], "chandra": [1032, 1033, 1036], "mitra": [1032, 1033, 1037], "15937": 1032, "blyston": [1032, 1033], "15863": 1032, "abstractmethod": 1032, "_check_x": 1032, "basenb": 1032, "15996": 1032, "brigitta": [1032, 1033, 1034, 1038], "sip\u0151cz": [1032, 1033, 1034, 1038], "15751": 1032, "tirth": [1032, 1033], "15868": 1032, "nikla": [1032, 1033], "smedemark": 1032, "marguli": 1032, "15797": 1032, "15947": 1032, "revamp": 1032, "14849": 1032, "_name_estim": 1032, "_gb": 1032, "facto": 1032, "_birch": 1032, "9250": 1032, "12927": 1032, "deprecationwarn": 1032, "interfer": 1032, "hinder": 1032, "15080": 1032, "14464": 1032, "13575": 1032, "10482": 1032, "13726": 1032, "shuzh": 1032, "9288": 1032, "15057": 1032, "korolev": 1032, "15120": 1032, "7943": 1032, "12303": 1032, "14510": 1032, "14890": 1032, "miguel": 1032, "cabrera": 1032, "14544": 1032, "15304": 1032, "jaim": 1032, "ferrando": 1032, "huerta": 1032, "12068": 1032, "12145": 1032, "13609": 1032, "camila": 1032, "williamson": 1032, "15661": 1032, "15160": 1032, "14259": 1032, "14764": 1032, "14740": 1032, "st\u00e9phan": 1032, "tulken": 1032, "14623": 1032, "sarra": 1032, "habchi": 1032, "15257": 1032, "willocx": 1032, "12650": 1032, "13960": 1032, "multiouput": 1032, "14908": 1032, "martina": [1032, 1034], "vila": [1032, 1034], "15382": 1032, "14933": 1032, "15138": 1032, "cusick": 1032, "14406": 1032, "14012": 1032, "faouzi": [1032, 1033], "13769": 1032, "14194": 1032, "least_absolute_devi": [1032, 1034, 1035], "13896": 1032, "13933": 1032, "14710": 1032, "categorical_crossentropi": [1032, 1036], "14869": 1032, "14682": 1032, "hancock": 1032, "5963": 1032, "pablo": [1032, 1035, 1036], "dubou": 1032, "14287": 1032, "15375": 1032, "14305": 1032, "14114": 1032, "15084": 1032, "14294": 1032, "14907": 1032, "14602": 1032, "chawla": 1032, "vectorizermixin": 1032, "14430": 1032, "strip_accents_unicod": 1032, "15100": 1032, "gradi": 1032, "overflowerror": 1032, "15463": 1032, "norvan": 1032, "sahin": 1032, "14520": 1032, "11635": 1032, "alec": 1032, "13704": 1032, "15557": 1032, "14378": 1032, "masashi": [1032, 1034], "shibata": 1032, "ashim": 1032, "bhattarai": 1032, "15010": 1032, "skip_comput": 1032, "13773": 1032, "14356": 1032, "15393": 1032, "venkatachalam": [1032, 1033, 1034, 1035, 1036], "14646": 1032, "14028": 1032, "15429": 1032, "14706": 1032, "14108": 1032, "14170": 1032, "14296": 1032, "13618": 1032, "13995": 1032, "14458": 1032, "14591": 1032, "14864": 1032, "15044": 1032, "15086": 1032, "15038": 1032, "15082": 1032, "13213": 1032, "14647": 1032, "linalgerror": 1032, "13393": 1032, "13707": 1032, "training_data_": 1032, "14357": 1032, "14900": 1032, "socastro": [1032, 1038], "9951": 1032, "14936": 1032, "15083": 1032, "12789": 1032, "15274": 1032, "13938": 1032, "15049": 1032, "toccac": 1032, "ptocca": 1032, "13231": 1032, "dong": 1032, "13467": 1032, "14595": 1032, "14865": 1032, "l\u00e9onard": [1032, 1037], "binet": [1032, 1037], "14732": 1032, "14417": 1032, "15625": 1032, "12258": 1032, "14898": 1032, "matcovici": 1032, "14593": 1032, "reboul": 1032, "14549": 1032, "14704": 1032, "15096": 1032, "14629": 1032, "15488": 1032, "15490": 1032, "12569": 1032, "bicker": 1032, "9597": 1032, "wenbo": [1032, 1034], "zhao": [1032, 1034, 1035, 1036, 1037], "14336": 1032, "dexter": 1032, "9274": 1032, "perri": 1032, "13806": 1032, "ana\u00ebl": 1032, "beaugnon": 1032, "15119": 1032, "15053": 1032, "13290": 1032, "13987": 1032, "_pairwis": [1032, 1034], "13925": 1032, "robson": 1032, "15524": 1032, "xun": [1032, 1034], "12557": 1032, "14286": 1032, "15099": 1032, "baselibsvm": 1032, "_sparse_fit": 1032, "14894": 1032, "danna": 1032, "naser": 1032, "12887": 1032, "15028": 1032, "guan": 1032, "14381": 1032, "11232": 1032, "sievert": 1032, "10815": 1032, "14035": 1032, "14475": 1032, "14538": 1032, "14872": 1032, "upcast": [1032, 1036], "15094": 1032, "choose_check_classifiers_label": 1032, "enforce_estimator_tags_i": 1032, "mock": 1032, "mockdatafram": 1032, "checkingclassifi": 1032, "newton_cg": 1032, "random_choice_csc": 1032, "fast_dict": 1032, "parallel_help": 1032, "14902": 1032, "14971": 1032, "nep": 1032, "14702": 1032, "13013": 1032, "13875": 1032, "14680": 1032, "check_classifier_multioutput": 1032, "check_regressor_multioutput": 1032, "13392": 1032, "rok": 1032, "mihevc": 1032, "check_transformer_data_not_an_arrai": 1032, "mro": [1032, 1033], "14884": 1032, "alphonsu": 1032, "abbi": [1032, 1033], "popa": [1032, 1033], "abdur": 1032, "rahmaan": 1032, "janhang": 1032, "abenbihi": 1032, "abhinav": [1032, 1035], "sagar": 1032, "jana": 1032, "lagat": 1032, "alessandro": [1032, 1034, 1037], "surac": 1032, "siqueira": 1032, "alexgoryainov": 1032, "itk": [1032, 1033, 1034], "alexshack": [1032, 1033, 1034], "akinkunl": 1032, "kaseorg": 1032, "maldonado": [1032, 1035], "angela": [1032, 1033, 1037], "ambroz": [1032, 1033], "anisha": 1032, "keshavan": 1032, "gutierrez": 1032, "anuja": 1032, "archana": [1032, 1034], "alva": 1032, "arnaudstiegl": 1032, "arpanchowdhri": 1032, "ashimb9": 1032, "ayomid": 1032, "bamidel": 1032, "baran": 1032, "buluttekin": 1032, "barrycg": 1032, "bill": [1032, 1033], "mill": 1032, "biswadip": 1032, "mandal": 1032, "blackd0t": 1032, "barklei": 1032, "c56poni": 1032, "camilaagw": 1032, "cartman_nabana": 1032, "catajara": 1032, "cgsavard": [1032, 1033], "vesteghem": 1032, "dakota": 1032, "grusak": 1032, "datenbergwerk": 1032, "dormagen": 1032, "deeplook": 1032, "drgfreeman": 1032, "cashman": 1032, "edvardlindelof": 1032, "ndirangu": [1032, 1036], "eunseop": 1032, "jeong": 1032, "fanni": 1032, "federicopisanu": 1032, "divo": 1032, "flaviomorelli": 1032, "francidona": 1032, "franco": 1032, "luqu": 1032, "freder": 1032, "haas": 1032, "g0g0gadget": 1032, "altai": 1032, "vale": 1032, "rio": [1032, 1034, 1035, 1036], "ganevgv": 1032, "gdex1": 1032, "getgaurav2": 1032, "gideon": 1032, "sonoiya": 1032, "gpapadok": [1032, 1036], "mogavero": 1032, "h4dr1en": 1032, "hadshirt": 1032, "hailei": [1032, 1033], "nguyen": [1032, 1033, 1036, 1037], "hannah": [1032, 1034, 1036], "bruce": [1032, 1033], "macdonald": [1032, 1033], "honglu": 1032, "ingrid": 1032, "spielman": 1032, "a16": [1032, 1033], "jaehong": 1032, "jai": [1032, 1036], "jeromedock": 1032, "jesper": 1032, "dramsch": 1032, "joanna": 1032, "ortiz": [1032, 1038], "kanika": 1032, "sabharw": 1032, "katarina": [1032, 1034], "slama": [1032, 1034], "kellycarmodi": 1032, "eth": 1032, "kensuk": 1032, "arai": 1032, "kesshi": [1032, 1033], "kevad": 1032, "lofti": [1032, 1033], "winata": [1032, 1034], "sheng": 1032, "dolmatov": 1032, "kirthi": 1032, "shankar": 1032, "sivamani": 1032, "katyal": 1032, "lakshmi": 1032, "krishnan": 1032, "lalliacqua": [1032, 1035], "lbfin": 1032, "loopym": 1032, "lostcoast": 1032, "huynh": [1032, 1034], "lrjball": [1032, 1033], "roeder": 1032, "maggiecheg": [1032, 1036], "maithreyi": 1032, "venkatesh": 1032, "maltimor": 1032, "maocx": 1032, "douriez": [1032, 1033], "oywa": 1032, "aladago": 1032, "mbillingr": 1032, "clare": 1032, "micah": 1032, "miguelbarao": 1032, "mina": [1032, 1033], "naghshhnejad": [1032, 1033], "motmoti": 1032, "mschaffenroth": 1032, "natasha": 1032, "nezar": 1032, "nidhin": 1032, "pattaniyil": 1032, "nishan": 1032, "mann": 1032, "nitya": 1032, "mandyam": 1032, "novaya": [1032, 1035], "nxorabl": 1032, "oleg": 1032, "stikhin": 1032, "saleem": 1032, "panpiort8": [1032, 1034], "paula": [1032, 1033], "poorna": [1032, 1034], "pspachtholz": [1032, 1033, 1034], "qdeffens": [1032, 1035], "garg": [1032, 1033], "rapha\u00ebl": 1032, "bournhonesqu": 1032, "reza": 1032, "gharibi": 1032, "payn": 1032, "rlm": 1032, "juergen": [1032, 1037], "sanjabi": 1032, "ruchitagard": 1032, "ruth": 1032, "waithera": 1032, "sackei": 1032, "samesh": [1032, 1033], "lakhotia": [1032, 1033], "sewook": 1032, "dare": 1032, "shreya": 1032, "simoncw": 1032, "smujjiga": 1032, "s\u00f6nke": 1032, "behrend": 1032, "soumirai": 1032, "steinfurt": [1032, 1034], "cowlei": 1032, "th0rwa": [1032, 1033], "theoptip": [1032, 1033], "theotheo": 1032, "thierno": 1032, "ibrahima": 1032, "diop": 1032, "schmitt": [1032, 1033], "tilen": 1032, "kusterl": 1032, "timsaur": 1032, "tola": 1032, "topisan": 1032, "ttang131": 1032, "veerlosar": 1032, "luzgin": 1032, "jeanselm": 1032, "lostanlen": 1032, "vnherdeiro": 1032, "wendi": 1032, "willdarnel": 1032, "wolframalpha": 1032, "xcjason": 1032, "martian": 1032, "xsat": 1032, "yinglr": 1032, "yokasr": 1032, "maxin": [1032, 1033], "yulia": 1032, "zamrii": 1032, "feng": [1032, 1034, 1035, 1036], "17959": 1033, "17848": 1033, "17742": 1033, "17995": 1033, "thomaz": 1033, "santana": [1033, 1036], "dsouza": [1033, 1034, 1035, 1036], "17433": 1033, "17985": 1033, "multinomialdevi": 1033, "logloss": 1033, "17694": 1033, "rempfler": 1033, "tsutomu": 1033, "kusanagi": [1033, 1035], "17357": 1033, "18016": 1033, "x_copi": 1033, "17914": 1033, "15730": 1033, "forrest": [1033, 1034], "17309": 1033, "swier": [1033, 1034], "heer": 1033, "17812": 1033, "bruno": [1033, 1034, 1035], "idl": 1033, "17210": 1033, "17235": 1033, "17204": 1033, "changed_onli": 1033, "17205": 1033, "15005": [1033, 1035], "slep009": [1033, 1035, 1036], "estimator_samples_": 1033, "16149": 1033, "11950": 1033, "11514": 1033, "16075": 1033, "16484": 1033, "16257": 1033, "simona": [1033, 1034, 1035], "maggio": [1033, 1034, 1035], "16801": 1033, "rcwoolston": 1033, "16431": 1033, "14048": 1033, "15963": 1033, "16084": 1033, "15950": 1033, "stephani": 1033, "15980": 1033, "wconnel": 1033, "15709": 1033, "15707": 1033, "maciej": 1033, "mikulski": 1033, "16006": 1033, "rushabh": 1033, "vasani": 1033, "streamhandl": 1033, "logger": 1033, "handler": 1033, "16451": 1033, "16280": 1033, "16837": 1033, "wornbb": 1033, "15669": 1033, "chaitanya": 1033, "16224": 1033, "schwetlick": [1033, 1034], "gelavizh": 1033, "ahmadi": 1033, "marija": [1033, 1034], "vlajic": [1033, 1034], "wheeler": [1033, 1034], "16841": 1033, "16655": 1033, "16718": 1033, "miotto": 1033, "16981": 1033, "g\u00f3rski": [1033, 1034], "14696": 1033, "14516": 1033, "15582": 1033, "16069": 1033, "bail": 1033, "16183": 1033, "16182": 1033, "santhosh": 1033, "16437": 1033, "hwan": 1033, "cho": 1033, "16539": 1033, "deros": 1033, "16692": 1033, "16663": 1033, "15834": 1033, "santiago": 1033, "mola": 1033, "16103": 1033, "divyaprabha": 1033, "selectormixin": 1033, "16132": 1033, "trimeta": 1033, "15503": 1033, "15782": 1033, "plgreenliru": 1033, "16403": 1033, "narendra": 1033, "mukherje": 1033, "16508": 1033, "15864": 1033, "14300": 1033, "15436": 1033, "15652": 1033, "15179": 1033, "angelaambroz": 1033, "15773": 1033, "15655": 1033, "14848": 1033, "absgrad": 1033, "_newton_cg": 1033, "16266": 1033, "standard_coef_": 1033, "standard_intercept_": 1033, "average_coef_": 1033, "average_intercept_": 1033, "16261": 1033, "brandt": 1033, "16849": 1033, "14264": 1033, "17021": 1033, "16323": 1033, "16362": 1033, "16442": 1033, "parson": [1033, 1035], "rick": 1033, "mackenbach": 1033, "16993": 1033, "emit": 1033, "15622": 1033, "mors": 1033, "15918": 1033, "kubin": 1033, "fit_grid_point": 1033, "16401": 1033, "pratama": 1033, "sutiono": 1033, "15953": 1033, "15959": 1033, "16111": 1033, "16090": 1033, "jayaratn": [1033, 1034, 1037, 1038], "14075": 1033, "meyer89": 1033, "16117": 1033, "15785": 1033, "16245": 1033, "16585": 1033, "15762": 1033, "16466": 1033, "16632": 1033, "maura": 1033, "pintor": 1033, "battista": 1033, "biggio": 1033, "15946": 1033, "ngshya": 1033, "32767": 1033, "mersenn": 1033, "twister": 1033, "31bit": 1033, "63bit": 1033, "crude": 1033, "postprocessor": 1033, "lemir": 1033, "13511": 1033, "kennel": 1033, "11296": 1033, "15558": 1033, "15806": 1033, "16331": 1033, "batiss": 1033, "15926": 1033, "16021": 1033, "sparsearrai": 1033, "16728": 1033, "uint": 1033, "17032": 1033, "_safe_tag": 1033, "16950": 1033, "15380": 1033, "acitiv": 1033, "16726": 1033, "16112": 1033, "16622": 1033, "17061": 1033, "aleksandra": 1033, "kocot": 1033, "alonso": [1033, 1035], "allend": [1033, 1035], "ana": [1033, 1035], "casado": 1033, "ankit810": 1033, "arunav": 1033, "konwar": 1033, "maingret": 1033, "beier": 1033, "berni": 1033, "bharathi": 1033, "brigi": [1033, 1034], "castachick": 1033, "castor": 1033, "corri": 1033, "bartelheim": 1033, "dani\u00ebl": 1033, "gelder": 1033, "daphn": 1033, "breuer": 1033, "cort": [1033, 1034, 1037, 1038], "dbauer9": 1033, "borovikova": 1033, "eln": 1033, "emili": [1033, 1034], "leung": 1033, "evgeni": 1033, "chasnovski": 1033, "fabiana": 1033, "facundo": [1033, 1036], "ferr\u00edn": 1033, "franziska": 1033, "boenisch": 1033, "bolmier": [1033, 1034, 1038], "gholdman1": 1033, "gonthier": 1033, "hao": [1033, 1034, 1036, 1037], "chun": [1033, 1034, 1036, 1037, 1038], "haoyin": [1033, 1035, 1036], "h\u00e9lion": 1033, "bourboux": 1033, "himanshu": [1033, 1036], "hirofumi": [1033, 1034], "suzuki": [1033, 1034], "huangk10": 1033, "kemenad": 1033, "hye": 1033, "sung": 1033, "indecisiveus": [1033, 1034], "inderjeet": 1033, "jjmistri": 1033, "haitz": [1033, 1035, 1036], "legarreta": [1033, 1035, 1036], "gorro\u00f1o": [1033, 1035, 1036], "judithabk6": 1033, "jumon": 1033, "kathryn": 1033, "krishnachaitanya9": 1033, "gia": 1033, "thuan": 1033, "lkubin": 1033, "lopusz": 1033, "lucgiffon": 1033, "lucyleeow": 1033, "kemk": 1033, "magda": 1033, "zielinska": 1033, "mandi": [1033, 1036], "gu": [1033, 1034, 1036], "manish": 1033, "aradwad": 1033, "mariana": 1033, "meirel": 1033, "mariel": 1033, "mc4229": 1033, "shoemak": 1033, "micha\u0142": 1033, "s\u0142apek": 1033, "mojca": 1033, "bertoncelj": 1033, "narendramukherje": 1033, "nicolasservel": 1033, "nkish": 1033, "noa": 1033, "tamir": [1033, 1036], "olicairn": 1033, "ur": 1033, "lenz": [1033, 1037], "delanou": 1033, "qizhi": 1033, "quang": 1033, "rachelcjordan": 1033, "raduspaimoc": 1033, "riccardo": 1033, "folloni": 1033, "ritchi": 1033, "rori": 1033, "hartong": 1033, "redden": 1033, "sambhav": 1033, "kothari": 1033, "santhoshbala18": 1033, "sarat": 1033, "addep": 1033, "scibol": 1033, "kie\u00dfl": 1033, "sergiodsr": 1033, "shiki": 1033, "shubh": 1033, "chatterje": 1033, "simonamaggio": [1033, 1034, 1035], "snowhit": 1033, "stareh": 1033, "marsh": 1033, "sunmi": 1033, "yoon": 1033, "talgatomarov": 1033, "tamirlan1": 1033, "nonner": 1033, "vink": [1033, 1035], "tiphain": 1033, "viard": 1033, "titu": 1033, "vachan": 1033, "vandana": 1033, "iyer": 1033, "waelbenamara": 1033, "wderos": 1033, "wenliwyan": 1033, "windber": 1033, "19579": 1034, "19646": 1034, "stopiter": 1034, "19922": 1034, "19732": 1034, "ishikawa": [1034, 1035], "19407": 1034, "ushtanit": [1034, 1035], "19982": 1034, "19939": 1034, "halvic": 1034, "19703": 1034, "sobkevich": 1034, "villaz\u00f3n": 1034, "terraza": 1034, "fonari": [1034, 1035], "19182": 1034, "yosuk": [1034, 1035], "kobayashi": [1034, 1035], "19721": 1034, "19659": 1034, "19211": 1034, "19847": 1034, "xiaoyu": 1034, "chai": [1034, 1037, 1038], "19308": 1034, "19234": 1034, "19727": 1034, "delong": [1034, 1035], "19888": 1034, "19924": 1034, "19271": 1034, "zhaowei": 1034, "19580": 1034, "brice": [1034, 1035], "adamson": 1034, "wil": 1034, "yegelwel": 1034, "css": 1034, "19417": 1034, "19179": 1034, "19126": 1034, "17448": 1034, "17107": 1034, "17546": 1034, "17856": 1034, "17984": 1034, "riedmann": 1034, "francesco": [1034, 1037], "casalegno": 1034, "18052": 1034, "sean": [1034, 1035, 1037], "stallei": 1034, "17937": 1034, "counts_": 1034, "init_size_": 1034, "17864": 1034, "17616": 1034, "18167": 1034, "18256": 1034, "jayratn": 1034, "16392": 1034, "17095": 1034, "18746": 1034, "norm_y_weight": 1034, "x_mean_": 1034, "y_mean_": 1034, "x_std_": 1034, "y_std_": 1034, "18768": 1034, "18302": 1034, "md5": 1034, "checksum": 1034, "14800": 1034, "17396": 1034, "jiaxiang": 1034, "17491": 1034, "18280": 1034, "17499": 1034, "17610": 1034, "18525": 1034, "11064": 1034, "17414": 1034, "18149": 1034, "17679": 1034, "18528": 1034, "villanova": [1034, 1035], "14446": 1034, "18394": 1034, "16985": 1034, "garbag": 1034, "18334": 1034, "multicor": [1034, 1035], "18341": 1034, "egor": 1034, "smirnov": 1034, "18410": 1034, "17702": 1034, "18326": 1034, "changedbehaviorwarn": 1034, "nonblasdotwarn": 1034, "17804": 1034, "17367": 1034, "15427": 1034, "gangesh": 1034, "gudmalwar": 1034, "erin": 1034, "6545": 1034, "17159": 1034, "15361": 1034, "17878": 1034, "17090": 1034, "_check_bounds_param": 1034, "12638": 1034, "lannuzel": 1034, "17526": 1034, "ayako": 1034, "yagi": 1034, "17612": 1034, "srimukh": 1034, "sripada": 1034, "16493": 1034, "darshan": 1034, "15636": 1034, "18987": 1034, "16619": 1034, "16906": 1034, "roei": 1034, "kahni": 1034, "18293": 1034, "16289": 1034, "kishimoto": 1034, "18639": 1034, "13003": 1034, "s\u00e1nchez": 1034, "18545": 1034, "laurenz": 1034, "reitsam": 1034, "17578": 1034, "knox": 1034, "6624": 1034, "marijn": 1034, "vliet": 1034, "18121": 1034, "18607": 1034, "fhaselbeck": 1034, "18622": 1034, "haesun": [1034, 1037, 1038], "10493": 1034, "17997": 1034, "maisonneuv": 1034, "square_dist": 1034, "17662": 1034, "18278": 1034, "17412": 1034, "16625": 1034, "10591": 1034, "karnowski": 1034, "plot_det_curv": [1034, 1035], "18176": 1034, "10708": 1034, "15007": 1034, "hathidara": 1034, "10711": 1034, "17192": 1034, "avi": [1034, 1035], "17225": 1034, "17569": 1034, "17651": 1034, "mato": 1034, "17777": 1034, "shubhanshu": 1034, "mishra": [1034, 1035], "17826": 1034, "decal": 1034, "willard": 1034, "17935": 1034, "cari": 1034, "goltermann": 1034, "18114": 1034, "18405": 1034, "yakov": 1034, "pchelintsev": 1034, "13900": 1034, "17478": 1034, "teon": 1034, "13204": 1034, "kosic": 1034, "18527": 1034, "18343": 1034, "devi": 1034, "sandeep": 1034, "18595": 1034, "18222": 1034, "18266": 1034, "subrat": 1034, "sahu": 1034, "15126": 1034, "17987": 1034, "17233": 1034, "zolisa": 1034, "bleki": 1034, "histgradientboost": 1034, "18124": 1034, "brocchini": 1034, "armstrong": 1034, "17427": 1034, "17038": 1034, "neighborsbas": [1034, 1037], "17148": 1034, "18691": 1034, "18370": 1034, "18612": 1034, "17603": 1034, "17604": 1034, "17606": 1034, "17608": 1034, "17609": 1034, "17633": 1034, "17661": 1034, "17932": 1034, "16352": 1034, "17759": 1034, "18269": 1034, "17876": 1034, "18429": 1034, "biernat": 1034, "17317": 1034, "17406": 1034, "wick": 1034, "18406": 1034, "17833": 1034, "yashika": 1034, "18510": 1034, "18447": 1034, "16066": 1034, "18682": 1034, "16935": 1034, "17193": 1034, "16335": 1034, "14982": 1034, "11682": 1034, "patric": [1034, 1035], "15763": 1034, "16530": 1034, "shuhua": 1034, "17386": 1034, "17187": 1034, "x_idx_sort": 1034, "17614": 1034, "check_methods_sample_order_invari": [1034, 1036], "17598": 1034, "ngo": 1034, "17992": 1034, "endian": 1034, "17644": 1034, "18508": 1034, "abo7atm": 1034, "spannbauer": 1034, "deodhar": 1034, "alexandracraciun": 1034, "amy12xx": 1034, "tiwari": 1034, "choraria": 1034, "subramaniyan": 1034, "kushwaha": 1034, "atsushi": [1034, 1035], "nukariya": [1034, 1035], "aura": 1034, "autoviz": 1034, "auto_viml": 1034, "avinash": 1034, "anak": 1034, "barankaraku": 1034, "barberogaston": 1034, "beatrizsmg": 1034, "mainy": 1034, "bossan": [1034, 1036, 1037, 1038], "pedigo": [1034, 1035], "bhavika": 1034, "devnani": 1034, "biprateep": 1034, "dei": 1034, "bmaisonn": 1034, "byron": 1034, "ceethinwa": [1034, 1035], "chaitanyamog": 1034, "clmbst": 1034, "coelhudo": 1034, "crispinlogan": [1034, 1037, 1038], "cristina": 1034, "mula": 1034, "darioka": [1034, 1036, 1037], "declan": 1034, "neill": 1034, "deeksha": 1034, "madan": 1034, "fiegel": [1034, 1035, 1037], "khoo": 1034, "eschibli": 1034, "fran": [1034, 1035, 1036], "larsson": [1034, 1035, 1036], "sheni": 1034, "genvalen": [1034, 1035, 1036, 1037, 1038], "kiragu": 1034, "gesa": 1034, "stupperich": 1034, "ghislain": 1034, "vaillant": 1034, "gim": 1034, "seng": 1034, "chevali": 1034, "bohl": [1034, 1036], "schole": 1034, "hitesh": 1034, "somani": 1034, "hoda1394": 1034, "moin": 1034, "hugorichard": 1034, "isuru": 1034, "wiryadi": 1034, "j0rd1smit": 1034, "jaehyun": 1034, "ahn": 1034, "tae": 1034, "hoctor": 1034, "vese": 1034, "jeevan": 1034, "jeroenpeterbo": 1034, "jhay": 1034, "jigna": 1034, "panchal": 1034, "jim0421": 1034, "joaquin": 1034, "gorb": 1034, "moya": 1034, "kartik": 1034, "chugh": 1034, "kaylani2": 1034, "kendrick": 1034, "cetina": 1034, "kenni": 1034, "isakov": 1034, "koki": 1034, "nishihara": 1034, "krum": [1034, 1036], "arnaudov": [1034, 1036], "oldja": 1034, "guitton": 1034, "mariam": 1034, "l\u00f6ning": 1034, "scheubrein": 1034, "megasari": 1034, "mathschi": 1034, "giudic": 1034, "milan": 1034, "straka": 1034, "muoki": 1034, "caleb": 1034, "haiat": 1034, "nadia": 1034, "tahiri": 1034, "ph": 1034, "hamada": 1034, "neil": 1034, "botelho": 1034, "nil": 1034, "noelano": 1034, "oj_lappi": 1034, "oleh": [1034, 1036], "kozynet": [1034, 1036], "pankaj": 1034, "jindal": 1034, "pardeep": 1034, "parthiv": 1034, "chigurupati": 1034, "pgithub": 1034, "probinette4": 1034, "pwalchessen": 1034, "rachel": [1034, 1037], "fischoff": 1034, "toshniw": 1034, "rafei": 1034, "iqbal": 1034, "rahul": 1034, "jakhar": 1034, "rachum": 1034, "ramyanp": [1034, 1035], "rauwuckl": 1034, "ravi": [1034, 1037], "kiran": 1034, "boggavarapu": 1034, "rishi": 1034, "advani": 1034, "rithvik": 1034, "romijnd": 1034, "tavenard": 1034, "rubi": 1034, "werman": 1034, "ryotaro": 1034, "tsukada": 1034, "sadak": 1034, "khandelw": 1034, "ezebunandu": 1034, "kimbinyi": 1034, "shail": 1034, "keller": 1034, "shao": [1034, 1035, 1036], "shooter23": [1034, 1035], "soledad": 1034, "galli": 1034, "subrat93": 1034, "sunitha": 1034, "selvan": 1034, "kusanagi2": 1034, "terenc": [1034, 1035], "honl": [1034, 1035], "thij": [1034, 1037, 1038], "thomas9292": 1034, "thorben": 1034, "tijanajovanov": 1034, "timo": 1034, "tnwei": 1034, "ufmay": 1034, "umberto": 1034, "lupo": 1034, "vika": [1034, 1036], "viniciu": [1034, 1035], "fuck": [1034, 1035], "violeta": 1034, "watchtheblur": 1034, "willpeppo": 1034, "xethan": 1034, "qianm": 1034, "yue": 1034, "yutaro": 1034, "ikeda": 1034, "zacchari": 1034, "ramzi": 1034, "zoj613": 1034, "21271": 1035, "21833": 1035, "siavash": 1035, "rezazadeh": 1035, "19210": 1035, "21295": 1035, "22050": 1035, "21991": 1035, "19869": 1035, "21481": [1035, 1036], "andr\u00e9": [1035, 1036, 1038], "babino": [1035, 1036], "disconnect": 1035, "21915": 1035, "21694": 1035, "minknowski": 1035, "cdist": 1035, "21741": 1035, "21871": 1035, "21845": 1035, "21517": 1035, "21917": 1035, "21552": 1035, "escap": [1035, 1037], "21493": 1035, "21199": 1035, "20638": 1035, "bohn\u00e9": 1035, "21179": 1035, "21195": 1035, "21130": 1035, "20761": 1035, "21251": 1035, "min_idf": 1035, "max_idf": 1035, "20752": 1035, "alek": [1035, 1036], "lefebvr": [1035, 1036], "21340": 1035, "21093": 1035, "21351": 1035, "cve": 1035, "28975": 1035, "21336": 1035, "_check_sample_weight": 1035, "only_non_neg": 1035, "20880": 1035, "andr\u00e1": [1035, 1036, 1037, 1038], "if_delegate_has_method": [1035, 1036], "21145": 1035, "zahlii": 1035, "21389": 1035, "20002": 1035, "19310": 1035, "least_squar": 1035, "19733": 1035, "lad": 1035, "absolute_loss": 1035, "20165": 1035, "18444": 1035, "18010": 1035, "threadsaf": 1035, "18736": 1035, "17443": 1035, "19641": 1035, "20087": 1035, "fauchereau": 1035, "19002": 1035, "19052": 1035, "yusuk": 1035, "nagasaka": 1035, "17622": 1035, "19024": 1035, "franki": 1035, "robertson": 1035, "20117": 1035, "natchiappan": [1035, 1036], "19883": 1035, "20597": 1035, "20899": 1035, "20200": 1035, "fit_": 1035, "partial_fit_": 1035, "19297": 1035, "20560": 1035, "18393": 1035, "bittarello": 1035, "19263": 1035, "19244": 1035, "18459": 1035, "nd": 1035, "18898": 1035, "ora": 1035, "phongpanagnam": 1035, "21080": 1035, "ledoit_wolf_shrinkag": 1035, "20416": 1035, "defoi": 1035, "20583": 1035, "19365": 1035, "ateif": 1035, "sara": 1035, "19669": 1035, "importlib": 1035, "pyoxid": 1035, "20297": 1035, "20209": 1035, "19011": 1035, "20729": 1035, "12069": 1035, "19046": 1035, "surya": [1035, 1036], "18433": 1035, "19198": 1035, "19159": 1035, "beno\u00eet": 1035, "mal\u00e9zieux": 1035, "19908": 1035, "20512": 1035, "20960": 1035, "cgroup": [1035, 1036], "quota": [1035, 1036], "20477": 1035, "19799": 1035, "19564": 1035, "19836": 1035, "19162": 1035, "10096": 1035, "fenil": 1035, "suchak": 1035, "20159": 1035, "murata": [1035, 1036], "20534": 1035, "19296": 1035, "19035": 1035, "19520": 1035, "18964": 1035, "19401": 1035, "relova": 1035, "17169": 1035, "dmytro": 1035, "lituiev": 1035, "20380": 1035, "pulido": 1035, "felip": [1035, 1036, 1037, 1038], "bidu": [1035, 1036], "rutter": 1035, "20515": 1035, "carsten": 1035, "allefeld": 1035, "19568": 1035, "shyam": 1035, "20207": 1035, "tomohiro": 1035, "endo": 1035, "20161": 1035, "shuhei": 1035, "kayawari": 1035, "arka204": [1035, 1037], "20431": 1035, "pfaffel": 1035, "19428": 1035, "hamoumi": 1035, "19411": 1035, "20959": 1035, "20554": 1035, "xiangyin": 1035, "kong": 1035, "9978": 1035, "10027": 1035, "16449": 1035, "20231": 1035, "naka": 1035, "19571": 1035, "20155": 1035, "oura": [1035, 1036, 1037], "19004": 1035, "midvidi": 1035, "19055": 1035, "19172": 1035, "19426": 1035, "19499": 1035, "strubel": 1035, "19616": 1035, "19391": 1035, "19390": 1035, "linearmodel": 1035, "17743": 1035, "17772": 1035, "17746": 1035, "17785": 1035, "17750": 1035, "17769": 1035, "20683": 1035, "19491": 1035, "19472": 1035, "shortest_path": 1035, "20531": 1035, "19415": 1035, "17036": 1035, "20326": 1035, "uttam": 1035, "9843": 1035, "19643": 1035, "attard": 1035, "19784": 1035, "18328": 1035, "20312": 1035, "divyanshu": 1035, "deoli": 1035, "18543": 1035, "20552": 1035, "19278": 1035, "20030": 1035, "tingshan": 1035, "18649": 1035, "rodion": 1035, "martynov": 1035, "20619": 1035, "baseshufflesplit": 1035, "20056": 1035, "pabloduque0": 1035, "prematur": 1035, "20904": 1035, "tomasz": 1035, "jakubek": [1035, 1036], "18925": 1035, "poznik": [1035, 1036, 1037], "18842": 1035, "19473": 1035, "jiefangxuanyan": 1035, "20072": 1035, "20842": 1035, "mart\u00edn": [1035, 1036], "19631": 1035, "19790": 1035, "flynn": [1035, 1037], "18368": 1035, "19483": 1035, "20526": 1035, "19069": 1035, "19041": 1035, "20250": 1035, "20652": 1035, "19934": 1035, "gleb": [1035, 1037, 1038], "levitskii": 1035, "19734": 1035, "robinson": 1035, "19752": 1035, "zhehao": [1035, 1036, 1037, 1038], "19527": 1035, "19788": 1035, "19356": 1035, "makoeppel": 1035, "19879": 1035, "19906": 1035, "20727": 1035, "20961": 1035, "n_input_features_": 1035, "20240": 1035, "20843": 1035, "18959": 1035, "wstate": 1035, "20023": 1035, "19336": 1035, "20272": 1035, "19459": 1035, "bezuidenhout": 1035, "clifford": 1035, "akai": 1035, "nettei": 1035, "19948": 1035, "20657": 1035, "19766": 1035, "20385": 1035, "_weighted_percentil": 1035, "huberlossfunct": 1035, "20528": 1035, "_safe_index": 1035, "20673": 1035, "is_scalar_nan": 1035, "assert_warn": 1035, "assert_warns_messag": 1035, "20521": 1035, "abdulelah": 1035, "mesfer": 1035, "adrian": [1035, 1036, 1037], "garcia": 1035, "badaracco": 1035, "sad\u0142ocha": 1035, "rubial": 1035, "alessia": 1035, "marcolini": 1035, "alihan": 1035, "zihna": 1035, "alin": 1035, "amol": 1035, "deshmukh": 1035, "pessoa": 1035, "anavelyz": 1035, "ashish": [1035, 1038], "ashvith": 1035, "shetti": 1035, "baam": [1035, 1036], "baptbillard": 1035, "bmalezieux": 1035, "bumblebe": 1035, "caherrera": 1035, "meli": [1035, 1036, 1037], "chrissobel": 1035, "yeh": 1035, "chuliang": 1035, "cliffordemmanuel": 1035, "conner": 1035, "shen": 1035, "dimitri": [1035, 1036, 1037, 1038], "papadopoulo": [1035, 1036, 1037, 1038], "orfano": [1035, 1036, 1037, 1038], "dmallia17": 1035, "ds_ana": 1035, "jardim": 1035, "edwinwenink": 1035, "eleni": 1035, "markou": 1035, "ericellwang": [1035, 1036], "ezri": 1035, "mudd": 1035, "fato": 1035, "morina": 1035, "hafner": 1035, "flyingdutchman23": 1035, "uwha": [1035, 1036], "bereng": 1035, "frederick": 1035, "frellwan": 1035, "vicent": [1035, 1036, 1037], "geroldcsend": 1035, "glen": 1035, "gl\u00f2ria": [1035, 1037], "mu\u00f1oz": [1035, 1037], "gregorystrubel": 1035, "groceryheist": 1035, "guiweb": 1035, "haidar": [1035, 1036], "almubarak": [1035, 1036], "moritz": [1035, 1037], "g\u00fcnther": 1035, "mirza": 1035, "harutaka": 1035, "kawamura": 1035, "hassan": 1035, "alsawadi": 1035, "geovan": [1035, 1036], "gome": [1035, 1036], "lima": [1035, 1036], "ilic": 1035, "ikko": 1035, "ashimin": 1035, "isaack": 1035, "mungui": 1035, "ishaan": 1035, "bhat": [1035, 1037, 1038], "ishan": [1035, 1036], "iwhalv": 1035, "preiss": 1035, "budarz": 1035, "jannik": 1035, "jennif": 1035, "jianzhu": 1035, "guo": 1035, "jnboehm": 1035, "johanwork": 1035, "paton": 1035, "n\u00e1pole": 1035, "julio": 1035, "julyrashchenko": 1035, "jvm": 1035, "kadatatlu": 1035, "kishor": 1035, "karen": 1035, "palacio": 1035, "kmatt10": 1035, "kobaski": 1035, "kot271828": 1035, "kunj": 1035, "kurumeyuta": 1035, "kxytim": 1035, "lacrosse91": 1035, "laveen": 1035, "bagai": 1035, "leonardo": 1035, "rocco": [1035, 1036, 1037], "uieda": 1035, "leopoldo": 1035, "corona": 1035, "lsturtew": 1035, "lucca": 1035, "quadro": 1035, "ly648499246": 1035, "mabu": 1035, "manaileng": 1035, "mariangela": 1035, "marielaraj": 1035, "hirzel": 1035, "mateo": 1035, "nore\u00f1a": 1035, "mathi": 1035, "batoul": 1035, "calcot": 1035, "prieur": 1035, "\u00f6zer": 1035, "miao": 1035, "cai": 1035, "karbownik": 1035, "michalkrawczyk": [1035, 1036], "mitzi": [1035, 1036], "mlondschien": 1035, "haseeb": [1035, 1036], "khoual": 1035, "jarir": 1035, "kanji": 1035, "nadim": 1035, "kawwa": 1035, "nanshan": 1035, "naozin555": 1035, "fultz": 1035, "nic": 1035, "annau": 1035, "stefani": [1035, 1037, 1038], "nigel": 1035, "bosch": 1035, "nodar": 1035, "okroshiashvili": 1035, "ogbonna": 1035, "chibuik": 1035, "ogordon100": 1035, "phongpanangam": 1035, "duqu": 1035, "ibieta": 1035, "jimenez": [1035, 1036], "lacouth": 1035, "olszewski": 1035, "dye": 1035, "pierreattard": [1035, 1036], "yve": 1035, "borgn": 1035, "pranayanchuri": 1035, "princ": 1035, "canuma": 1035, "putschblo": 1035, "ranjanikrishnan": 1035, "rene": 1035, "corneil": 1035, "ricardojnf": 1035, "richardscottoz": 1035, "sandi": 1035, "khosasi": 1035, "benhur": 1035, "flore": 1035, "shinehid": 1035, "shinnar": 1035, "tootoonian": 1035, "solosil": 1035, "kolawol": 1035, "stagg": 1035, "swpeas": 1035, "tfifi": 1035, "caswel": [1035, 1038], "timotheemathieu": 1035, "wolodzko": 1035, "tliu68": 1035, "uhmann": 1035, "tom1092": 1035, "tom\u00e1": [1035, 1036], "moreyra": 1035, "tommaso": 1035, "noto": 1035, "tsuga": 1035, "vang": 1035, "gkiasta": 1035, "vil\u00e9m": 1035, "zouhar": 1035, "vlasovet": 1035, "waijean": 1035, "whidou": 1035, "xiaoyuchai": 1035, "yasmeen": 1035, "alsaedi": 1035, "yoch": 1035, "yusukenagasaka": 1035, "yzhenman": 1035, "zeyusun": 1035, "zhaoweiwang": 1035, "msvcp140": 1036, "dll": 1036, "24631": 1036, "24446": 1036, "10805": 1036, "mathia": 1036, "23471": 1036, "24015": 1036, "23990": 1036, "23833": 1036, "24017": 1036, "sorski": [1036, 1037], "23395": 1036, "23636": 1036, "22063": 1036, "22059": 1036, "kurz": [1036, 1037], "23608": 1036, "23548": 1036, "24087": 1036, "23273": 1036, "23194": 1036, "23198": 1036, "lise": 1036, "kleiber": 1036, "23358": 1036, "23264": 1036, "feature_names_in": 1036, "23299": 1036, "23214": 1036, "collot": [1036, 1037], "baak": 1036, "23370": 1036, "23410": 1036, "compute_sample_weight": 1036, "23115": 1036, "22868": 1036, "multiindex": 1036, "22410": 1036, "23271": 1036, "21987": 1036, "22064": 1036, "22065": 1036, "22288": 1036, "22320": 1036, "21219": 1036, "21542": 1036, "23098": 1036, "22318": 1036, "23036": 1036, "binary_crossentropi": 1036, "23040": 1036, "23046": 1036, "22856": 1036, "21032": 1036, "18170": 1036, "21038": 1036, "14975": 1036, "22526": 1036, "23095": 1036, "silk": 1036, "20031": 1036, "krawczyk": 1036, "21148": 1036, "22255": 1036, "21881": 1036, "vassard": 1036, "22217": 1036, "21735": 1036, "22154": 1036, "22537": 1036, "iofal": 1036, "arisa": [1036, 1037], "22775": 1036, "22913": 1036, "randomgeek78": 1036, "22493": 1036, "19680": 1036, "thibaut": 1036, "22119": 1036, "22016": 1036, "22015": 1036, "19747": 1036, "attalla": 1036, "22498": 1036, "21482": 1036, "pujalt": 1036, "22412": 1036, "16605": 1036, "21901": 1036, "rileran": 1036, "23113": 1036, "ilion": 1036, "beyst": 1036, "21425": 1036, "stefanini": 1036, "16948": 1036, "patricio": 1036, "cerda": 1036, "22002": 1036, "21109": 1036, "inner_stats_": 1036, "iter_offset_": 1036, "18975": 1036, "22111": 1036, "22181": 1036, "21334": 1036, "21705": 1036, "stanlei": [1036, 1037, 1038], "21432": 1036, "22806": 1036, "jihan": 1036, "benni": 1036, "21713": 1036, "haya": 1036, "21567": 1036, "maggi": 1036, "chege": 1036, "22300": 1036, "15948": 1036, "sysuresh": 1036, "22553": 1036, "19490": 1036, "ferrin": 1036, "22120": 1036, "15984": 1036, "okon": 1036, "22696": 1036, "22486": 1036, "21800": 1036, "20567": 1036, "22159": 1036, "20811": 1036, "21814": 1036, "16748": 1036, "siqi": 1036, "22215": 1036, "23047": 1036, "22695": 1036, "22697": 1036, "21762": 1036, "22106": 1036, "gijsber": 1036, "21632": 1036, "genesi": [1036, 1038], "valencia": [1036, 1038], "22566": 1036, "22908": 1036, "23097": 1036, "23079": 1036, "20803": 1036, "23023": 1036, "21573": 1036, "21832": 1036, "20145": 1036, "22356": 1036, "18482": 1036, "gameiro": 1036, "kharsa": 1036, "22370": 1036, "17819": 1036, "22235": 1036, "21837": 1036, "wagner": 1036, "22199": 1036, "aidar": 1036, "shakerimoff": 1036, "tenavi": 1036, "nakamura": 1036, "22223": 1036, "marcom": 1036, "21617": 1036, "ritter": [1036, 1037], "21114": 1036, "21078": 1036, "21448": 1036, "16061": 1036, "19438": 1036, "18310": 1036, "elfner": 1036, "22249": 1036, "22137": 1036, "22694": 1036, "22808": 1036, "22950": 1036, "21086": 1036, "22206": 1036, "21808": 1036, "22548": 1036, "22062": 1036, "trujillo": [1036, 1037], "22148": 1036, "22240": 1036, "9087": 1036, "22525": 1036, "19689": 1036, "21606": 1036, "21341": 1036, "preservs": 1036, "21767": 1036, "21724": 1036, "yar": 1036, "khine": 1036, "phyo": 1036, "21998": 1036, "22891": 1036, "22899": 1036, "23256": 1036, "19794": 1036, "21534": 1036, "22254": 1036, "21805": 1036, "jeann": 1036, "dionisi": 1036, "22685": 1036, "n_neighbour": 1036, "18832": 1036, "23033": 1036, "21565": 1036, "17266": 1036, "22118": 1036, "ohad": 1036, "22284": 1036, "19158": 1036, "nicki": 1036, "skaft": 1036, "20753": 1036, "22108": 1036, "22635": 1036, "19085": 1036, "22866": 1036, "21576": 1036, "emil": 1036, "dugnat": 1036, "21873": 1036, "21177": 1036, "20408": 1036, "ceballo": 1036, "22058": 1036, "23034": 1036, "22203": 1036, "21026": 1036, "21880": 1036, "mrinal": 1036, "tyagi": 1036, "22982": 1036, "22508": 1036, "comb": 1036, "22604": 1036, "22212": 1036, "21430": 1036, "desislava": 1036, "vasileva": 1036, "22687": 1036, "22150": 1036, "22248": 1036, "20860": 1036, "shubhraneel": 1036, "21888": 1036, "21954": 1036, "22953": 1036, "16018": 1036, "21445": 1036, "21988": 1036, "get_output_feature_nam": 1036, "21569": 1036, "21079": 1036, "20653": 1036, "21434": 1036, "19916": 1036, "22735": 1036, "compute_inverse_transform": 1036, "21701": 1036, "22114": 1036, "21330": 1036, "21408": 1036, "22149": 1036, "21436": 1036, "22191": 1036, "22476": 1036, "21278": 1036, "21316": 1036, "clickabl": 1036, "21298": 1036, "22237": 1036, "check_scalar": 1036, "22218": 1036, "validationerror": 1036, "check_requires_y_non": 1036, "22578": 1036, "arcidiacono": [1036, 1037], "22595": 1036, "21310": 1036, "22027": 1036, "lanterni": 1036, "23077": 1036, "22188": 1036, "22830": 1036, "2357juan": [1036, 1037, 1038], "adamgonzo": 1036, "adijohar": 1036, "kumawat": 1036, "raghuwanshi": 1036, "duron": 1036, "ahmadjubair33": 1036, "aj": 1036, "druck": 1036, "peixinho": 1036, "arroyo": 1036, "alexanmv": 1036, "almeidayoel": 1036, "amar": [1036, 1037, 1038], "amrcod": 1036, "griva": [1036, 1037], "andrii": 1036, "herrou": 1036, "ducout": 1036, "arth": 1036, "arthurmello": 1036, "arturoamor": 1036, "atharva": 1036, "patil": 1036, "aufarkari": 1036, "avm19": [1036, 1037], "ayan": 1036, "bardiya": [1036, 1037], "behrouz": 1036, "ben3940": 1036, "bijil": 1036, "subhash": 1036, "bmreinig": 1036, "brenden": 1036, "kadota": 1036, "cdrig": 1036, "chalmer": 1036, "chitteti": 1036, "srinath": [1036, 1037], "chloe": 1036, "agath": 1036, "azencott": 1036, "christopherlim98": 1036, "weidemann": 1036, "combsccod": 1036, "daniela": [1036, 1037], "darren": [1036, 1037], "eargl": 1036, "gilbertson": [1036, 1037], "dea": [1036, 1037, 1038], "mar\u00eda": [1036, 1037, 1038], "denni": 1036, "osei": 1036, "dessyvv": 1036, "dev514": 1036, "diwakar": 1036, "ries": 1036, "drskd": 1036, "emiko": 1036, "sano": 1036, "emmanouil": 1036, "gionanidi": 1036, "ermolaevpa": [1036, 1037], "estefania": 1036, "barreto": 1036, "ojeda": 1036, "eyast": 1036, "fatima": 1036, "gasmi": 1036, "luna": 1036, "glushchenkov": 1036, "fkaren27": 1036, "fpgawesom": 1036, "ftorres16": [1036, 1037], "gabor": 1036, "berei": 1036, "kertesz": 1036, "gauthier": 1036, "giancarlo": 1036, "glennfrutiz": 1036, "guillermo": 1036, "fern\u00e1ndez": 1036, "hansin": [1036, 1037], "henrymooresc": [1036, 1037], "hideaki": 1036, "imamura": 1036, "hind": 1036, "hmasdev": 1036, "hvassard": 1036, "aki": [1036, 1037, 1038], "iasoon": 1036, "ingela": 1036, "cowton": 1036, "jalexand3r": 1036, "jauhar": 1036, "jaya": 1036, "kommireddi": 1036, "je": 1036, "jelfner": 1036, "jenni": 1036, "jirka": 1036, "borovec": 1036, "cipri\u00e1n": 1036, "loayza": 1036, "chazalon": 1036, "mess": 1036, "jovan": [1036, 1037], "stojanov": [1036, 1037], "jschuerz": 1036, "katotten": 1036, "ken4git": 1036, "doucet": 1036, "kimayoung": 1036, "koushik": 1036, "kranthi": 1036, "sedamaki": 1036, "krumetoft": 1036, "lesne": 1036, "casino": [1036, 1037], "logan": [1036, 1037, 1038], "lucieclair": 1036, "luiz": 1036, "magali": 1036, "mandjev": 1036, "wurp": [1036, 1037], "boerner": 1036, "wimld": 1036, "martel": 1036, "corentin": 1036, "mat\u00eda": 1036, "matjansen": 1036, "francia": 1036, "megabyt": 1036, "mehrdad": 1036, "moradizadeh": 1036, "melemo2": 1036, "micky774": [1036, 1037], "milana2": 1036, "millawel": 1036, "miwojc": 1036, "mizuki": 1036, "mlant": 1036, "mohit": 1036, "moonkyung94": 1036, "mpoemsl": 1036, "mrinaltyagi": 1036, "leu": 1036, "msabati": 1036, "nadirhan": 1036, "\u015fahin": 1036, "naipawat": [1036, 1037], "poolsawat": [1036, 1037], "nartayxd": 1036, "nastegiano": 1036, "nathansquan": 1036, "detlefsen": 1036, "niket": 1036, "nikhil": 1036, "suresh": 1036, "kondratyev": 1036, "husak": 1036, "partev": [1036, 1037, 1038], "pelennor": 1036, "piet": [1036, 1037], "br\u00f6mmel": [1036, 1037], "pinki": 1036, "poloso": 1036, "pramod": 1036, "anantharam": 1036, "puhuk": [1036, 1037], "purna": 1036, "mansingh": 1036, "quadv": 1036, "rahil": [1036, 1037, 1038], "boy": 1036, "raz": 1036, "hoshia": 1036, "rishabh": 1036, "barnowski": [1036, 1037], "rsnegrin": 1036, "yadav": 1036, "sakinaouisrani": 1036, "sanjai": 1036, "marreddi": 1036, "seel": 1036, "sele": [1036, 1037], "seyedsaman": 1036, "emami": 1036, "shandeng123": 1036, "sharmadharmp": 1036, "shaymernaturalint": 1036, "shuangchi": [1036, 1037], "siavrez": 1036, "slishak": 1036, "spikebh": 1036, "sply88": 1036, "kailasa": [1036, 1037], "sultan": 1036, "orazbayev": 1036, "sumit": 1036, "saha": 1036, "sven": [1036, 1037], "eschlbeck": 1036, "stehl": [1036, 1037], "swapnil": 1036, "teunp": 1036, "ferr\u00e9": 1036, "hjortkj\u00e6r": 1036, "thiruvenkadam": 1036, "toastedyeast": [1036, 1037], "mctiernan": [1036, 1037], "udit": 1036, "ugo": 1036, "marchand": 1036, "vera": [1036, 1037], "komey": [1036, 1037], "victoireloui": 1036, "vishwakarma": 1036, "vikrant": 1036, "khedkar": 1036, "chernyi": 1036, "weijiadu": 1036, "yuan": [1036, 1037, 1038], "yiyangq": 1036, "yosshi999": 1036, "yuki": 1036, "koyama": 1036, "zeel": 1036, "zempleni": 1036, "zhenfish": 1036, "\u8d75\u4e30": 1036, "25747": 1037, "base_estimator__": 1037, "25477": 1037, "25563": 1037, "25570": 1037, "25664": 1037, "25774": 1037, "25500": 1037, "25589": 1037, "25704": 1037, "min_sample_split": 1037, "25744": 1037, "25619": 1037, "25638": 1037, "25354": 1037, "25174": 1037, "25089": 1037, "25129": 1037, "25363": 1037, "25188": 1037, "25295": 1037, "spec": [1037, 1038], "25312": 1037, "backslash": 1037, "25511": 1037, "25172": 1037, "25341": 1037, "25094": 1037, "25250": 1037, "25370": 1037, "23101": 1037, "24873": 1037, "25694": 1037, "25274": 1037, "25296": 1037, "25147": 1037, "23619": 1037, "24354": 1037, "safiuddin": 1037, "khaja": 1037, "gsiisg": 1037, "23935": 1037, "22527": 1037, "_sgd_fast": 1037, "_plain_sgd": 1037, "oversc": 1037, "23798": 1037, "24543": 1037, "24465": 1037, "23734": 1037, "24699": 1037, "23865": 1037, "simd": 1037, "primit": 1037, "23446": 1037, "23197": 1037, "23604": 1037, "23585": 1037, "24556": 1037, "maladi\u00e8r": [1037, 1038], "24617": 1037, "sim4n6": 1037, "24688": 1037, "22054": 1037, "roic": 1037, "24264": 1037, "maladier": 1037, "14736": 1037, "hunt": 1037, "zhan": 1037, "20802": 1037, "pokorni": 1037, "22965": 1037, "22968": 1037, "23038": 1037, "23210": 1037, "24258": 1037, "23470": 1037, "21938": 1037, "23127": 1037, "19075": 1037, "ramo": 1037, "carre\u00f1o": 1037, "24951": 1037, "22268": 1037, "mohamedbsh": 1037, "23905": 1037, "11860": 1037, "ablin": 1037, "24528": 1037, "23726": 1037, "24421": 1037, "kshitij": [1037, 1038], "22554": 1037, "24218": 1037, "molin": 1037, "21020": 1037, "24856": 1037, "22014": 1037, "23252": 1037, "24538": 1037, "24889": 1037, "24146": 1037, "peretti": 1037, "nestor": 1037, "navarro": 1037, "nati": 1037, "tomatti": 1037, "24855": 1037, "24849": 1037, "20415": 1037, "24283": 1037, "24894": 1037, "23819": [1037, 1038], "edoardo": 1037, "abati": 1037, "24747": 1037, "24245": 1037, "24405": 1037, "16695": 1037, "vitor": 1037, "rosa": 1037, "18298": 1037, "25077": 1037, "24317": 1037, "24350": 1037, "24755": 1037, "levitski": [1037, 1038], "24637": 1037, "24767": 1037, "23275": 1037, "maxwelllzh": 1037, "24433": 1037, "yogendrasingh": 1037, "23637": 1037, "23877": 1037, "10168": 1037, "\u0142ukasz": 1037, "borchmann": 1037, "12285": 1037, "miltenberg": 1037, "13042": 1037, "parizi": 1037, "18094": 1037, "22562": 1037, "24714": 1037, "23834": 1037, "24051": 1037, "22518": 1037, "18020": 1037, "24338": 1037, "23442": 1037, "atukorala": 1037, "22710": 1037, "conroi": 1037, "trinh": 1037, "23461": 1037, "24365": 1037, "24630": 1037, "rushil": [1037, 1038], "24084": 1037, "iinfo": 1037, "24141": 1037, "24539": 1037, "23977": 1037, "23683": 1037, "andrei": 1037, "melnik": 1037, "16747": 1037, "18805": 1037, "hongshaoyang": 1037, "22269": 1037, "23139": 1037, "24645": 1037, "10468": 1037, "ruben": 1037, "22993": 1037, "24750": 1037, "rudresh": 1037, "veerkhar": 1037, "23874": 1037, "24075": 1037, "22665": 1037, "24683": 1037, "24058": 1037, "perdok": 1037, "20331": 1037, "23993": 1037, "22629": 1037, "24412": 1037, "22898": 1037, "23480": 1037, "21469": 1037, "lapack_svd_driv": 1037, "20617": 1037, "25067": 1037, "14862": 1037, "24512": 1037, "24667": 1037, "25080": 1037, "24523": 1037, "mia": 1037, "bajic": 1037, "3llobo": 1037, "kania": [1037, 1038], "anulekh": 1037, "admir": [1037, 1038], "demiraj": [1037, 1038], "adoublet": [1037, 1038], "ahmedbgh": [1037, 1038], "aiko": 1037, "akshita": 1037, "prasanth": 1037, "ala": [1037, 1038], "miola": 1037, "lebel": 1037, "buzenet": [1037, 1038], "kassa": [1037, 1038], "bera": 1037, "maennel": 1037, "aniket": 1037, "shirsat": 1037, "anthony22": [1037, 1038], "apostolo": 1037, "tsetogl": 1037, "aravindh": 1037, "artur": [1037, 1038], "hermano": [1037, 1038], "ashah002": [1037, 1038], "ashwin": [1037, 1038], "azaria": [1037, 1038], "gebremichael": [1037, 1038], "b0rxington": 1037, "badr": 1037, "moufad": 1037, "bart\u0142omiej": 1037, "go\u0144da": 1037, "bdegraaff": 1037, "berkecanrizai": 1037, "bernd": 1037, "fritzk": 1037, "bhoomika": 1037, "biswaroop": 1037, "cannon": 1037, "bsh": 1037, "ceh": 1037, "chalulu": 1037, "changyao": [1037, 1038], "zablit": 1037, "veenhui": [1037, 1038], "christianwaldmann": 1037, "christin": [1037, 1038], "verrier": 1037, "dangonite57": [1037, 1038], "danielgaerb": 1037, "davidblnc": [1037, 1038], "dayn": [1037, 1038], "khant": 1037, "dhanshre": 1037, "diadochokinet": 1037, "diederikwp": 1037, "litsidi": [1037, 1038], "drewhogg": 1037, "oc": 1037, "dwight": 1037, "lindquist": 1037, "eden": 1037, "brekk": 1037, "edern": [1037, 1038], "eleanor": 1037, "eliaschiavon": 1037, "emir": [1037, 1038], "fabrizio": 1037, "damicelli": 1037, "fcharra": 1037, "siola": [1037, 1038], "tuveri": 1037, "franck": 1037, "charra": 1037, "geevarghes": 1037, "georgiamaydai": 1037, "gianr": 1037, "lazz": 1037, "guitar": 1037, "gunesbayir": [1037, 1038], "harshit5674": 1037, "hasan": 1037, "yaman": 1037, "vrigazov": 1037, "htsedebenham": 1037, "humahn": 1037, "ido": [1037, 1038], "iglesi": 1037, "iliya": 1037, "zhechev": 1037, "iren": [1037, 1038], "ivanllt": 1037, "sedykh": 1037, "mcivor": [1037, 1038], "janfidor": [1037, 1038], "jiten": 1037, "sidhpura": 1037, "jkarolczak": 1037, "jo\u00e3o": 1037, "johnathanpi": [1037, 1038], "koumenti": 1037, "panga": [1037, 1038], "johnthagen": 1037, "fleme": 1037, "choo": [1037, 1038], "yun": [1037, 1038], "keat": [1037, 1038], "juanfe88": 1037, "juliaschoepp": [1037, 1038], "jygerardi": [1037, 1038], "ka00ri": [1037, 1038], "kanishk": 1037, "sachdev": 1037, "kanissh": 1037, "kendal": 1037, "kento": [1037, 1038], "nozawa": [1037, 1038], "eliasi": [1037, 1038], "kluge": [1037, 1038], "lieret": 1037, "kirandevraj": 1037, "kraig": 1037, "vamsi": 1037, "kapadni": 1037, "lingyi1110": 1037, "mantovani": 1037, "maascha": 1037, "madinak": 1037, "maksym": 1037, "mansi": 1037, "kostelac": [1037, 1038], "marvin": [1037, 1038], "krawutschk": [1037, 1038], "masanori": [1037, 1038], "kanazu": [1037, 1038], "haberland": [1037, 1038], "mauroantonioserrano": 1037, "maxi": 1037, "marufo": 1037, "maximesaur": [1037, 1038], "smolskii": 1037, "bou": [1037, 1038], "mehgarg": 1037, "mehmetcanakbai": 1037, "baji\u0107": 1037, "flak": 1037, "hornstein": 1037, "ruiter": 1037, "paradi": 1037, "iljin": [1037, 1038], "misa": 1037, "ogura": 1037, "wilksch": 1037, "mrastgoo": 1037, "naois": 1037, "holohan": 1037, "nass": 1037, "jacobi": 1037, "nawazish": [1037, 1038], "alam": [1037, 1038], "nguy\u1ec5n": 1037, "v\u0103n": 1037, "di\u1ec5n": 1037, "fanelli": [1037, 1038], "nihal": 1037, "thukarama": 1037, "jare": 1037, "nima10khodaveisi": 1037, "nima": 1037, "sarajpoor": 1037, "nitinramvelraj": 1037, "nnlnr": [1037, 1038], "npach": [1037, 1038], "nwanna": 1037, "nymark": 1037, "kho": 1037, "holman": 1037, "oll": 1037, "lukowski": 1037, "hassoun": 1037, "tamer": 1037, "ouss1508": [1037, 1038], "oyindamola": 1037, "olatunji": 1037, "pab": [1037, 1038], "pandata": [1037, 1038], "soar": 1037, "petar": 1037, "mlinari\u0107": 1037, "pooja": [1037, 1038], "subramaniam": [1037, 1038], "priyam": 1037, "kakati": 1037, "freeland": 1037, "keerti": 1037, "rafal": [1037, 1038], "wojdyla": [1037, 1038], "raghuv": [1037, 1038], "makhija": 1037, "rehan": 1037, "guha": 1037, "klima": 1037, "crockett": 1037, "homm": 1037, "roman4oo": 1037, "rowan": 1037, "mankoo": 1037, "sabri": 1037, "monaf": 1037, "safikh": 1037, "salahuddin": 1037, "yojana": 1037, "menes": 1037, "ephrem": 1037, "sangam": 1037, "sangamswadik": 1037, "sanjai_3": [1037, 1038], "sarahremu": 1037, "sashka": [1037, 1038], "savkomax": 1037, "gustafson": [1037, 1038], "sec65": 1037, "seljak": 1037, "shadi": [1037, 1038], "gewili": [1037, 1038], "shellyfung": 1037, "shinsuk": 1037, "mori": 1037, "shiva": [1037, 1038], "shoaib": 1037, "khan": [1037, 1038], "shogo": [1037, 1038], "hida": [1037, 1038], "shrankhla": 1037, "sonniv": [1037, 1038], "sortofamudkip": [1037, 1038], "stanislav": [1037, 1038], "modrak": [1037, 1038], "stellalin7": 1037, "vaerenbergh": [1037, 1038], "schmerler": 1037, "tabea": [1037, 1038], "kossen": [1037, 1038], "thedevpanda": 1037, "syd": 1037, "sre": 1037, "weezel": [1037, 1038], "bonald": 1037, "germer": [1037, 1038], "ion": 1037, "timofei": 1037, "kornev": 1037, "pitter": 1037, "tomiock": [1037, 1038], "mathew": 1037, "tspeng": [1037, 1038], "egashira": 1037, "rey": 1037, "puerta": 1037, "vishal": 1037, "vyom": [1037, 1038], "pathak": [1037, 1038], "wattai": 1037, "wchathura": 1037, "wen": 1037, "x110": 1037, "xuniu": 1037, "yanhong": 1037, "ef": 1037, "yusuf": [1037, 1038], "raji": [1037, 1038], "adil": 1037, "khwaja": 1037, "zeeshan": [1037, 1038], "lone": [1037, 1038], "27468": 1038, "27583": 1038, "paralel": 1038, "27573": 1038, "27580": 1038, "18488": 1038, "26814": 1038, "27044": 1038, "26913": 1038, "27167": 1038, "27243": 1038, "26602": 1038, "26521": 1038, "26748": 1038, "26600": 1038, "shreesha": 1038, "27002": 1038, "26416": 1038, "tao": 1038, "26772": 1038, "reintroduc": 1038, "26754": 1038, "26893": 1038, "senger": 1038, "26760": 1038, "26940": 1038, "26931": 1038, "26903": 1038, "roehr": 1038, "27292": 1038, "25196": 1038, "24871": 1038, "25752": 1038, "25438": 1038, "yotam": 1038, "avidar": 1038, "constantini": 1038, "26337": 1038, "25120": 1038, "27311": 1038, "25294": 1038, "25308": 1038, "25291": 1038, "25367": 1038, "25402": 1038, "25044": 1038, "smt": 1038, "26082": 1038, "24027": 1038, "25815": 1038, "24568": 1038, "26121": 1038, "25805": 1038, "26385": 1038, "26657": 1038, "binesh": 1038, "bannerje": 1038, "25251": 1038, "26503": 1038, "26286": 1038, "26323": 1038, "26033": 1038, "26108": 1038, "barth\u00e9lemi": 1038, "26433": 1038, "26386": 1038, "26551": 1038, "consistenli": 1038, "26579": 1038, "25784": 1038, "25490": 1038, "25956": 1038, "22409": 1038, "25177": 1038, "24882": 1038, "25186": 1038, "breve": 1038, "26318": 1038, "25506": 1038, "25601": 1038, "fidor": 1038, "25931": 1038, "25629": 1038, "26242": 1038, "toplak": 1038, "sckit": 1038, "25297": 1038, "24230": 1038, "25102": 1038, "25973": 1038, "25232": 1038, "26454": 1038, "25209": 1038, "26644": 1038, "lemo": 1038, "21809": 1038, "25732": 1038, "25190": 1038, "26207": 1038, "25587": 1038, "25697": 1038, "25214": 1038, "26653": 1038, "25531": 1038, "17388": 1038, "24769": 1038, "25713": 1038, "18723": 1038, "sahil": 1038, "24677": 1038, "24668": 1038, "dberenbaum": 1038, "25987": 1038, "26019": 1038, "25432": 1038, "25672": 1038, "lene": 1038, "preuss": 1038, "25299": 1038, "omarmanzoor": 1038, "26194": 1038, "26264": 1038, "barata": 1038, "onggo": 1038, "23099": 1038, "overriden": 1038, "25659": 1038, "26333": 1038, "24140": 1038, "24076": 1038, "25417": 1038, "24083": 1038, "25443": 1038, "feature_union": 1038, "25093": 1038, "25220": 1038, "26325": 1038, "25334": 1038, "25677": 1038, "20524": 1038, "niuk": 1038, "23731": 1038, "24145": 1038, "22506": 1038, "24935": 1038, "seladu": 1038, "25257": 1038, "26424": 1038, "correcli": 1038, "26400": 1038, "26566": 1038, "26093": 1038, "23595": 1038, "26376": 1038, "25387": 1038, "26289": 1038, "25813": 1038, "26106": 1038, "25814": 1038, "check_transformers_unfitted_stateless": 1038, "25733": 1038, "19664": 1038, "environmenterror": 1038, "ioerror": 1038, "windowserror": 1038, "26466": 1038, "kushwah": 1038, "handk": 1038, "adien": 1038, "mansouri": 1038, "alexl": 1038, "amai": 1038, "annegnx": 1038, "ansam": 1038, "zedan": 1038, "dutt": 1038, "aymericbasset": 1038, "tripramudya": 1038, "benedek": 1038, "harsanyi": 1038, "brevin": 1038, "kund": 1038, "troillard": 1038, "carla": 1038, "berenbaum": 1038, "proding": 1038, "butyugina": 1038, "elabonga": 1038, "atuo": 1038, "farhan": 1038, "hujiahong726": 1038, "ili": 1038, "jb": 1038, "mountford": 1038, "jessicakk0711": 1038, "jiawei": 1038, "joei": 1038, "hedlund": 1038, "linu": 1038, "fouquet": 1038, "harfouch": 1038, "mdarii": 1038, "murezzda": 1038, "nightwalkx": 1038, "nishu": 1038, "piontek": 1038, "pnucci": 1038, "sadra": 1038, "barikbin": 1038, "searchforpass": 1038, "seoeun": 1038, "th\u00e9ophil": 1038, "barang": 1038, "veghit": 1038, "vignesh": 1038, "vijeth": 1038, "moudgalya": 1038, "windiana42": 1038, "yuchen": 1038}, "objects": {"sklearn": [[402, 0, 0, "-", "base"], [402, 0, 0, "-", "calibration"], [402, 0, 0, "-", "cluster"], [402, 0, 0, "-", "compose"], [462, 4, 1, "", "config_context"], [402, 0, 0, "-", "covariance"], [402, 0, 0, "-", "cross_decomposition"], [402, 0, 0, "-", "datasets"], [402, 0, 0, "-", "decomposition"], [402, 0, 0, "-", "discriminant_analysis"], [402, 0, 0, "-", "dummy"], [402, 0, 0, "-", "ensemble"], [402, 0, 0, "-", "exceptions"], [402, 0, 0, "-", "experimental"], [402, 0, 0, "-", "feature_extraction"], [402, 0, 0, "-", "feature_selection"], [402, 0, 0, "-", "gaussian_process"], [620, 4, 1, "", "get_config"], [402, 0, 0, "-", "impute"], [402, 0, 0, "-", "inspection"], [402, 0, 0, "-", "isotonic"], [402, 0, 0, "-", "kernel_approximation"], [402, 0, 0, "-", "kernel_ridge"], [402, 0, 0, "-", "linear_model"], [402, 0, 0, "-", "manifold"], [402, 0, 0, "-", "metrics"], [402, 0, 0, "-", "mixture"], [402, 0, 0, "-", "model_selection"], [402, 0, 0, "-", "multiclass"], [402, 0, 0, "-", "multioutput"], [402, 0, 0, "-", "naive_bayes"], [402, 0, 0, "-", "neighbors"], [402, 0, 0, "-", "neural_network"], [402, 0, 0, "-", "pipeline"], [402, 0, 0, "-", "preprocessing"], [402, 0, 0, "-", "random_projection"], [402, 0, 0, "-", "semi_supervised"], [891, 4, 1, "", "set_config"], [892, 4, 1, "", "show_versions"], [402, 0, 0, "-", "svm"], [402, 0, 0, "-", "tree"], [402, 0, 0, "-", "utils"]], "sklearn.base": [[417, 1, 1, "", "BaseEstimator"], [418, 1, 1, "", "BiclusterMixin"], [419, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [420, 1, 1, "", "ClassifierMixin"], [421, 1, 1, "", "ClusterMixin"], [422, 1, 1, "", "DensityMixin"], [423, 1, 1, "", "MetaEstimatorMixin"], [424, 1, 1, "", "OneToOneFeatureMixin"], [425, 1, 1, "", "OutlierMixin"], [426, 1, 1, "", "RegressorMixin"], [427, 1, 1, "", "TransformerMixin"], [428, 4, 1, "", "clone"], [429, 4, 1, "", "is_classifier"], [430, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[417, 2, 1, "", "get_metadata_routing"], [417, 2, 1, "", "get_params"], [417, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[418, 3, 1, "", "biclusters_"], [418, 2, 1, "", "get_indices"], [418, 2, 1, "", "get_shape"], [418, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[419, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[420, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[421, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[422, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[424, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[425, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[426, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[427, 2, 1, "", "fit_transform"], [427, 2, 1, "", "set_output"]], "sklearn.calibration": [[431, 1, 1, "", "CalibratedClassifierCV"], [432, 1, 1, "", "CalibrationDisplay"], [433, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[431, 2, 1, "", "fit"], [431, 2, 1, "", "get_metadata_routing"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "predict"], [431, 2, 1, "", "predict_proba"], [431, 2, 1, "", "score"], [431, 2, 1, "", "set_fit_request"], [431, 2, 1, "", "set_params"], [431, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[432, 2, 1, "", "from_estimator"], [432, 2, 1, "", "from_predictions"], [432, 2, 1, "", "plot"]], "sklearn.cluster": [[434, 1, 1, "", "AffinityPropagation"], [435, 1, 1, "", "AgglomerativeClustering"], [436, 1, 1, "", "Birch"], [437, 1, 1, "", "BisectingKMeans"], [438, 1, 1, "", "DBSCAN"], [439, 1, 1, "", "FeatureAgglomeration"], [440, 1, 1, "", "HDBSCAN"], [441, 1, 1, "", "KMeans"], [442, 1, 1, "", "MeanShift"], [443, 1, 1, "", "MiniBatchKMeans"], [444, 1, 1, "", "OPTICS"], [445, 1, 1, "", "SpectralBiclustering"], [446, 1, 1, "", "SpectralClustering"], [447, 1, 1, "", "SpectralCoclustering"], [448, 4, 1, "", "affinity_propagation"], [449, 4, 1, "", "cluster_optics_dbscan"], [450, 4, 1, "", "cluster_optics_xi"], [451, 4, 1, "", "compute_optics_graph"], [414, 4, 1, "", "dbscan"], [452, 4, 1, "", "estimate_bandwidth"], [453, 4, 1, "", "k_means"], [454, 4, 1, "", "kmeans_plusplus"], [455, 4, 1, "", "mean_shift"], [456, 4, 1, "", "spectral_clustering"], [457, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[434, 2, 1, "", "fit"], [434, 2, 1, "", "fit_predict"], [434, 2, 1, "", "get_metadata_routing"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "predict"], [434, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[435, 2, 1, "", "fit"], [435, 2, 1, "", "fit_predict"], [435, 2, 1, "", "get_metadata_routing"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[436, 2, 1, "", "fit"], [436, 2, 1, "", "fit_predict"], [436, 2, 1, "", "fit_transform"], [436, 2, 1, "", "get_feature_names_out"], [436, 2, 1, "", "get_metadata_routing"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "partial_fit"], [436, 2, 1, "", "predict"], [436, 2, 1, "", "set_output"], [436, 2, 1, "", "set_params"], [436, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "fit_predict"], [437, 2, 1, "", "fit_transform"], [437, 2, 1, "", "get_feature_names_out"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "predict"], [437, 2, 1, "", "score"], [437, 2, 1, "", "set_fit_request"], [437, 2, 1, "", "set_output"], [437, 2, 1, "", "set_params"], [437, 2, 1, "", "set_predict_request"], [437, 2, 1, "", "set_score_request"], [437, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "fit_predict"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "set_fit_request"], [438, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[439, 2, 1, "", "fit"], [439, 3, 1, "", "fit_predict"], [439, 2, 1, "", "fit_transform"], [439, 2, 1, "", "get_feature_names_out"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "inverse_transform"], [439, 2, 1, "", "set_output"], [439, 2, 1, "", "set_params"], [439, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[440, 2, 1, "", "dbscan_clustering"], [440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "fit_transform"], [441, 2, 1, "", "get_feature_names_out"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "predict"], [441, 2, 1, "", "score"], [441, 2, 1, "", "set_fit_request"], [441, 2, 1, "", "set_output"], [441, 2, 1, "", "set_params"], [441, 2, 1, "", "set_predict_request"], [441, 2, 1, "", "set_score_request"], [441, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "partial_fit"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "score"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "set_partial_fit_request"], [443, 2, 1, "", "set_predict_request"], [443, 2, 1, "", "set_score_request"], [443, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[445, 3, 1, "", "biclusters_"], [445, 2, 1, "", "fit"], [445, 2, 1, "", "get_indices"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "get_shape"], [445, 2, 1, "", "get_submatrix"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[447, 3, 1, "", "biclusters_"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "get_indices"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "get_shape"], [447, 2, 1, "", "get_submatrix"], [447, 2, 1, "", "set_params"]], "sklearn.compose": [[458, 1, 1, "", "ColumnTransformer"], [459, 1, 1, "", "TransformedTargetRegressor"], [460, 4, 1, "", "make_column_selector"], [461, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[458, 2, 1, "", "fit"], [458, 2, 1, "", "fit_transform"], [458, 2, 1, "", "get_feature_names_out"], [458, 2, 1, "", "get_metadata_routing"], [458, 2, 1, "", "get_params"], [458, 3, 1, "", "named_transformers_"], [458, 2, 1, "", "set_output"], [458, 2, 1, "", "set_params"], [458, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[459, 2, 1, "", "fit"], [459, 2, 1, "", "get_metadata_routing"], [459, 2, 1, "", "get_params"], [459, 3, 1, "", "n_features_in_"], [459, 2, 1, "", "predict"], [459, 2, 1, "", "score"], [459, 2, 1, "", "set_params"], [459, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[463, 1, 1, "", "EllipticEnvelope"], [464, 1, 1, "", "EmpiricalCovariance"], [465, 1, 1, "", "GraphicalLasso"], [466, 1, 1, "", "GraphicalLassoCV"], [467, 1, 1, "", "LedoitWolf"], [468, 1, 1, "", "MinCovDet"], [469, 1, 1, "", "OAS"], [470, 1, 1, "", "ShrunkCovariance"], [471, 4, 1, "", "empirical_covariance"], [472, 4, 1, "", "graphical_lasso"], [473, 4, 1, "", "ledoit_wolf"], [474, 4, 1, "", "ledoit_wolf_shrinkage"], [416, 4, 1, "", "oas"], [475, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[463, 2, 1, "", "correct_covariance"], [463, 2, 1, "", "decision_function"], [463, 2, 1, "", "error_norm"], [463, 2, 1, "", "fit"], [463, 2, 1, "", "fit_predict"], [463, 2, 1, "", "get_metadata_routing"], [463, 2, 1, "", "get_params"], [463, 2, 1, "", "get_precision"], [463, 2, 1, "", "mahalanobis"], [463, 2, 1, "", "predict"], [463, 2, 1, "", "reweight_covariance"], [463, 2, 1, "", "score"], [463, 2, 1, "", "score_samples"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[464, 2, 1, "", "error_norm"], [464, 2, 1, "", "fit"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 2, 1, "", "get_precision"], [464, 2, 1, "", "mahalanobis"], [464, 2, 1, "", "score"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[465, 2, 1, "", "error_norm"], [465, 2, 1, "", "fit"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 2, 1, "", "get_precision"], [465, 2, 1, "", "mahalanobis"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[466, 2, 1, "", "error_norm"], [466, 2, 1, "", "fit"], [466, 2, 1, "", "get_metadata_routing"], [466, 2, 1, "", "get_params"], [466, 2, 1, "", "get_precision"], [466, 2, 1, "", "mahalanobis"], [466, 2, 1, "", "score"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[467, 2, 1, "", "error_norm"], [467, 2, 1, "", "fit"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "get_precision"], [467, 2, 1, "", "mahalanobis"], [467, 2, 1, "", "score"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[468, 2, 1, "", "correct_covariance"], [468, 2, 1, "", "error_norm"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "get_precision"], [468, 2, 1, "", "mahalanobis"], [468, 2, 1, "", "reweight_covariance"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[476, 1, 1, "", "CCA"], [477, 1, 1, "", "PLSCanonical"], [478, 1, 1, "", "PLSRegression"], [479, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[476, 2, 1, "", "fit"], [476, 2, 1, "", "fit_transform"], [476, 2, 1, "", "get_feature_names_out"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "inverse_transform"], [476, 2, 1, "", "predict"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_output"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_predict_request"], [476, 2, 1, "", "set_score_request"], [476, 2, 1, "", "set_transform_request"], [476, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[477, 2, 1, "", "fit"], [477, 2, 1, "", "fit_transform"], [477, 2, 1, "", "get_feature_names_out"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "inverse_transform"], [477, 2, 1, "", "predict"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_output"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_predict_request"], [477, 2, 1, "", "set_score_request"], [477, 2, 1, "", "set_transform_request"], [477, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[478, 2, 1, "", "fit"], [478, 2, 1, "", "fit_transform"], [478, 2, 1, "", "get_feature_names_out"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "inverse_transform"], [478, 2, 1, "", "predict"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_output"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_predict_request"], [478, 2, 1, "", "set_score_request"], [478, 2, 1, "", "set_transform_request"], [478, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[479, 2, 1, "", "fit"], [479, 2, 1, "", "fit_transform"], [479, 2, 1, "", "get_feature_names_out"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "set_output"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "transform"]], "sklearn.datasets": [[480, 4, 1, "", "clear_data_home"], [481, 4, 1, "", "dump_svmlight_file"], [482, 4, 1, "", "fetch_20newsgroups"], [483, 4, 1, "", "fetch_20newsgroups_vectorized"], [484, 4, 1, "", "fetch_california_housing"], [485, 4, 1, "", "fetch_covtype"], [486, 4, 1, "", "fetch_kddcup99"], [487, 4, 1, "", "fetch_lfw_pairs"], [488, 4, 1, "", "fetch_lfw_people"], [489, 4, 1, "", "fetch_olivetti_faces"], [490, 4, 1, "", "fetch_openml"], [491, 4, 1, "", "fetch_rcv1"], [492, 4, 1, "", "fetch_species_distributions"], [493, 4, 1, "", "get_data_home"], [494, 4, 1, "", "load_breast_cancer"], [495, 4, 1, "", "load_diabetes"], [496, 4, 1, "", "load_digits"], [497, 4, 1, "", "load_files"], [498, 4, 1, "", "load_iris"], [499, 4, 1, "", "load_linnerud"], [500, 4, 1, "", "load_sample_image"], [501, 4, 1, "", "load_sample_images"], [502, 4, 1, "", "load_svmlight_file"], [503, 4, 1, "", "load_svmlight_files"], [504, 4, 1, "", "load_wine"], [505, 4, 1, "", "make_biclusters"], [506, 4, 1, "", "make_blobs"], [507, 4, 1, "", "make_checkerboard"], [508, 4, 1, "", "make_circles"], [509, 4, 1, "", "make_classification"], [510, 4, 1, "", "make_friedman1"], [511, 4, 1, "", "make_friedman2"], [512, 4, 1, "", "make_friedman3"], [513, 4, 1, "", "make_gaussian_quantiles"], [514, 4, 1, "", "make_hastie_10_2"], [515, 4, 1, "", "make_low_rank_matrix"], [516, 4, 1, "", "make_moons"], [517, 4, 1, "", "make_multilabel_classification"], [518, 4, 1, "", "make_regression"], [519, 4, 1, "", "make_s_curve"], [520, 4, 1, "", "make_sparse_coded_signal"], [521, 4, 1, "", "make_sparse_spd_matrix"], [522, 4, 1, "", "make_sparse_uncorrelated"], [523, 4, 1, "", "make_spd_matrix"], [524, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[525, 1, 1, "", "DictionaryLearning"], [526, 1, 1, "", "FactorAnalysis"], [527, 1, 1, "", "FastICA"], [528, 1, 1, "", "IncrementalPCA"], [529, 1, 1, "", "KernelPCA"], [530, 1, 1, "", "LatentDirichletAllocation"], [531, 1, 1, "", "MiniBatchDictionaryLearning"], [532, 1, 1, "", "MiniBatchNMF"], [533, 1, 1, "", "MiniBatchSparsePCA"], [534, 1, 1, "", "NMF"], [535, 1, 1, "", "PCA"], [536, 1, 1, "", "SparseCoder"], [537, 1, 1, "", "SparsePCA"], [538, 1, 1, "", "TruncatedSVD"], [539, 4, 1, "", "dict_learning"], [540, 4, 1, "", "dict_learning_online"], [415, 4, 1, "", "fastica"], [541, 4, 1, "", "non_negative_factorization"], [542, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[525, 2, 1, "", "fit"], [525, 2, 1, "", "fit_transform"], [525, 2, 1, "", "get_feature_names_out"], [525, 2, 1, "", "get_metadata_routing"], [525, 2, 1, "", "get_params"], [525, 2, 1, "", "set_output"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[526, 2, 1, "", "fit"], [526, 2, 1, "", "fit_transform"], [526, 2, 1, "", "get_covariance"], [526, 2, 1, "", "get_feature_names_out"], [526, 2, 1, "", "get_metadata_routing"], [526, 2, 1, "", "get_params"], [526, 2, 1, "", "get_precision"], [526, 2, 1, "", "score"], [526, 2, 1, "", "score_samples"], [526, 2, 1, "", "set_output"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_transform"], [527, 2, 1, "", "get_feature_names_out"], [527, 2, 1, "", "get_metadata_routing"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "inverse_transform"], [527, 2, 1, "", "set_inverse_transform_request"], [527, 2, 1, "", "set_output"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "set_transform_request"], [527, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[528, 2, 1, "", "fit"], [528, 2, 1, "", "fit_transform"], [528, 2, 1, "", "get_covariance"], [528, 2, 1, "", "get_feature_names_out"], [528, 2, 1, "", "get_metadata_routing"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "get_precision"], [528, 2, 1, "", "inverse_transform"], [528, 2, 1, "", "partial_fit"], [528, 2, 1, "", "set_output"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "set_partial_fit_request"], [528, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "inverse_transform"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "partial_fit"], [530, 2, 1, "", "perplexity"], [530, 2, 1, "", "score"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "partial_fit"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "partial_fit"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "set_partial_fit_request"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_covariance"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "get_precision"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "score"], [535, 2, 1, "", "score_samples"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 3, 1, "", "n_components_"], [536, 3, 1, "", "n_features_in_"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[543, 1, 1, "", "LinearDiscriminantAnalysis"], [544, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[543, 2, 1, "", "decision_function"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "predict_log_proba"], [543, 2, 1, "", "predict_proba"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "set_score_request"], [543, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[544, 2, 1, "", "decision_function"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_log_proba"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[545, 1, 1, "", "DummyClassifier"], [546, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "predict_log_proba"], [545, 2, 1, "", "predict_proba"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_fit_request"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_fit_request"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "set_predict_request"], [546, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[547, 1, 1, "", "AdaBoostClassifier"], [548, 1, 1, "", "AdaBoostRegressor"], [549, 1, 1, "", "BaggingClassifier"], [550, 1, 1, "", "BaggingRegressor"], [551, 1, 1, "", "ExtraTreesClassifier"], [552, 1, 1, "", "ExtraTreesRegressor"], [553, 1, 1, "", "GradientBoostingClassifier"], [554, 1, 1, "", "GradientBoostingRegressor"], [555, 1, 1, "", "HistGradientBoostingClassifier"], [556, 1, 1, "", "HistGradientBoostingRegressor"], [557, 1, 1, "", "IsolationForest"], [558, 1, 1, "", "RandomForestClassifier"], [559, 1, 1, "", "RandomForestRegressor"], [560, 1, 1, "", "RandomTreesEmbedding"], [561, 1, 1, "", "StackingClassifier"], [562, 1, 1, "", "StackingRegressor"], [563, 1, 1, "", "VotingClassifier"], [564, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[547, 3, 1, "", "base_estimator_"], [547, 2, 1, "", "decision_function"], [547, 3, 1, "", "feature_importances_"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_log_proba"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_fit_request"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_score_request"], [547, 2, 1, "", "staged_decision_function"], [547, 2, 1, "", "staged_predict"], [547, 2, 1, "", "staged_predict_proba"], [547, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[548, 3, 1, "", "base_estimator_"], [548, 3, 1, "", "feature_importances_"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_fit_request"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_score_request"], [548, 2, 1, "", "staged_predict"], [548, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[549, 3, 1, "", "base_estimator_"], [549, 2, 1, "", "decision_function"], [549, 3, 1, "", "estimators_samples_"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_fit_request"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[550, 3, 1, "", "base_estimator_"], [550, 3, 1, "", "estimators_samples_"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[551, 2, 1, "", "apply"], [551, 3, 1, "", "base_estimator_"], [551, 2, 1, "", "decision_path"], [551, 3, 1, "", "feature_importances_"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[552, 2, 1, "", "apply"], [552, 3, 1, "", "base_estimator_"], [552, 2, 1, "", "decision_path"], [552, 3, 1, "", "feature_importances_"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[553, 2, 1, "", "apply"], [553, 3, 1, "", "base_estimator_"], [553, 2, 1, "", "decision_function"], [553, 3, 1, "", "feature_importances_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"], [553, 2, 1, "", "staged_decision_function"], [553, 2, 1, "", "staged_predict"], [553, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[554, 2, 1, "", "apply"], [554, 3, 1, "", "base_estimator_"], [554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[555, 2, 1, "", "decision_function"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 3, 1, "", "n_iter_"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"], [555, 2, 1, "", "staged_decision_function"], [555, 2, 1, "", "staged_predict"], [555, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 3, 1, "", "n_iter_"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"], [556, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[557, 3, 1, "", "base_estimator_"], [557, 2, 1, "", "decision_function"], [557, 3, 1, "", "estimators_samples_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "fit_predict"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score_samples"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[558, 2, 1, "", "apply"], [558, 3, 1, "", "base_estimator_"], [558, 2, 1, "", "decision_path"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[559, 2, 1, "", "apply"], [559, 3, 1, "", "base_estimator_"], [559, 2, 1, "", "decision_path"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[560, 2, 1, "", "apply"], [560, 3, 1, "", "base_estimator_"], [560, 2, 1, "", "decision_path"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "fit_transform"], [560, 2, 1, "", "get_feature_names_out"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_output"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[561, 2, 1, "", "decision_function"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "fit_transform"], [561, 2, 1, "", "get_feature_names_out"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 3, 1, "", "n_features_in_"], [561, 3, 1, "", "named_estimators"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_output"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "fit_transform"], [562, 2, 1, "", "get_feature_names_out"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 3, 1, "", "n_features_in_"], [562, 3, 1, "", "named_estimators"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_output"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_transform"], [563, 2, 1, "", "get_feature_names_out"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 3, 1, "", "n_features_in_"], [563, 3, 1, "", "named_estimators"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "predict_proba"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_output"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_feature_names_out"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 3, 1, "", "n_features_in_"], [564, 3, 1, "", "named_estimators"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"], [564, 2, 1, "", "transform"]], "sklearn.exceptions": [[565, 1, 1, "", "ConvergenceWarning"], [566, 1, 1, "", "DataConversionWarning"], [567, 1, 1, "", "DataDimensionalityWarning"], [568, 1, 1, "", "EfficiencyWarning"], [569, 1, 1, "", "FitFailedWarning"], [570, 1, 1, "", "InconsistentVersionWarning"], [571, 1, 1, "", "NotFittedError"], [572, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[565, 2, 1, "", "add_note"], [565, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[566, 2, 1, "", "add_note"], [566, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[567, 2, 1, "", "add_note"], [567, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[568, 2, 1, "", "add_note"], [568, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[569, 2, 1, "", "add_note"], [569, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[570, 2, 1, "", "add_note"], [570, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[571, 2, 1, "", "add_note"], [571, 5, 1, "", "name"], [571, 5, 1, "", "obj"], [571, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[572, 2, 1, "", "add_note"], [572, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[573, 0, 0, "-", "enable_halving_search_cv"], [574, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[575, 1, 1, "", "DictVectorizer"], [576, 1, 1, "", "FeatureHasher"], [402, 0, 0, "-", "image"], [402, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "inverse_transform"], [575, 2, 1, "", "restrict"], [575, 2, 1, "", "set_inverse_transform_request"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_metadata_routing"], [576, 2, 1, "", "get_params"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "set_transform_request"], [576, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[577, 1, 1, "", "PatchExtractor"], [578, 4, 1, "", "extract_patches_2d"], [579, 4, 1, "", "grid_to_graph"], [580, 4, 1, "", "img_to_graph"], [581, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_metadata_routing"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[582, 1, 1, "", "CountVectorizer"], [583, 1, 1, "", "HashingVectorizer"], [584, 1, 1, "", "TfidfTransformer"], [585, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[582, 2, 1, "", "build_analyzer"], [582, 2, 1, "", "build_preprocessor"], [582, 2, 1, "", "build_tokenizer"], [582, 2, 1, "", "decode"], [582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "get_stop_words"], [582, 2, 1, "", "inverse_transform"], [582, 2, 1, "", "set_fit_request"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "set_transform_request"], [582, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[583, 2, 1, "", "build_analyzer"], [583, 2, 1, "", "build_preprocessor"], [583, 2, 1, "", "build_tokenizer"], [583, 2, 1, "", "decode"], [583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "get_stop_words"], [583, 2, 1, "", "partial_fit"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 3, 1, "", "idf_"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "set_transform_request"], [584, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[585, 2, 1, "", "build_analyzer"], [585, 2, 1, "", "build_preprocessor"], [585, 2, 1, "", "build_tokenizer"], [585, 2, 1, "", "decode"], [585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "get_stop_words"], [585, 3, 1, "", "idf_"], [585, 2, 1, "", "inverse_transform"], [585, 2, 1, "", "set_fit_request"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "set_transform_request"], [585, 2, 1, "", "transform"]], "sklearn.feature_selection": [[586, 1, 1, "", "GenericUnivariateSelect"], [587, 1, 1, "", "RFE"], [588, 1, 1, "", "RFECV"], [589, 1, 1, "", "SelectFdr"], [590, 1, 1, "", "SelectFpr"], [591, 1, 1, "", "SelectFromModel"], [592, 1, 1, "", "SelectFwe"], [593, 1, 1, "", "SelectKBest"], [594, 1, 1, "", "SelectPercentile"], [595, 1, 1, "", "SelectorMixin"], [596, 1, 1, "", "SequentialFeatureSelector"], [597, 1, 1, "", "VarianceThreshold"], [598, 4, 1, "", "chi2"], [599, 4, 1, "", "f_classif"], [600, 4, 1, "", "f_regression"], [601, 4, 1, "", "mutual_info_classif"], [602, 4, 1, "", "mutual_info_regression"], [603, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "get_support"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[587, 3, 1, "", "classes_"], [587, 2, 1, "", "decision_function"], [587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_support"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "predict"], [587, 2, 1, "", "predict_log_proba"], [587, 2, 1, "", "predict_proba"], [587, 2, 1, "", "score"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[588, 3, 1, "", "classes_"], [588, 2, 1, "", "decision_function"], [588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_support"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "predict"], [588, 2, 1, "", "predict_log_proba"], [588, 2, 1, "", "predict_proba"], [588, 2, 1, "", "score"], [588, 2, 1, "", "set_fit_request"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_support"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_support"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 3, 1, "", "n_features_in_"], [591, 2, 1, "", "partial_fit"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 3, 1, "", "threshold_"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[604, 1, 1, "", "GaussianProcessClassifier"], [605, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 3, 1, "", "kernel_"], [604, 2, 1, "", "log_marginal_likelihood"], [604, 2, 1, "", "predict"], [604, 2, 1, "", "predict_proba"], [604, 2, 1, "", "score"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "log_marginal_likelihood"], [605, 2, 1, "", "predict"], [605, 2, 1, "", "sample_y"], [605, 2, 1, "", "score"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "set_predict_request"], [605, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[606, 1, 1, "", "CompoundKernel"], [607, 1, 1, "", "ConstantKernel"], [608, 1, 1, "", "DotProduct"], [609, 1, 1, "", "ExpSineSquared"], [610, 1, 1, "", "Exponentiation"], [611, 1, 1, "", "Hyperparameter"], [612, 1, 1, "", "Kernel"], [613, 1, 1, "", "Matern"], [614, 1, 1, "", "PairwiseKernel"], [615, 1, 1, "", "Product"], [616, 1, 1, "", "RBF"], [617, 1, 1, "", "RationalQuadratic"], [618, 1, 1, "", "Sum"], [619, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[606, 2, 1, "", "__call__"], [606, 3, 1, "", "bounds"], [606, 2, 1, "", "clone_with_theta"], [606, 2, 1, "", "diag"], [606, 2, 1, "", "get_params"], [606, 3, 1, "", "hyperparameters"], [606, 2, 1, "", "is_stationary"], [606, 3, 1, "", "n_dims"], [606, 3, 1, "", "requires_vector_input"], [606, 2, 1, "", "set_params"], [606, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[607, 2, 1, "", "__call__"], [607, 3, 1, "", "bounds"], [607, 2, 1, "", "clone_with_theta"], [607, 2, 1, "", "diag"], [607, 2, 1, "", "get_params"], [607, 3, 1, "", "hyperparameters"], [607, 2, 1, "", "is_stationary"], [607, 3, 1, "", "n_dims"], [607, 3, 1, "", "requires_vector_input"], [607, 2, 1, "", "set_params"], [607, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[608, 2, 1, "", "__call__"], [608, 3, 1, "", "bounds"], [608, 2, 1, "", "clone_with_theta"], [608, 2, 1, "", "diag"], [608, 2, 1, "", "get_params"], [608, 3, 1, "", "hyperparameters"], [608, 2, 1, "", "is_stationary"], [608, 3, 1, "", "n_dims"], [608, 3, 1, "", "requires_vector_input"], [608, 2, 1, "", "set_params"], [608, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[609, 2, 1, "", "__call__"], [609, 3, 1, "", "bounds"], [609, 2, 1, "", "clone_with_theta"], [609, 2, 1, "", "diag"], [609, 2, 1, "", "get_params"], [609, 3, 1, "", "hyperparameter_length_scale"], [609, 3, 1, "", "hyperparameters"], [609, 2, 1, "", "is_stationary"], [609, 3, 1, "", "n_dims"], [609, 3, 1, "", "requires_vector_input"], [609, 2, 1, "", "set_params"], [609, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[610, 2, 1, "", "__call__"], [610, 3, 1, "", "bounds"], [610, 2, 1, "", "clone_with_theta"], [610, 2, 1, "", "diag"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "hyperparameters"], [610, 2, 1, "", "is_stationary"], [610, 3, 1, "", "n_dims"], [610, 3, 1, "", "requires_vector_input"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[611, 2, 1, "", "__call__"], [611, 5, 1, "", "bounds"], [611, 2, 1, "", "count"], [611, 5, 1, "", "fixed"], [611, 2, 1, "", "index"], [611, 5, 1, "", "n_elements"], [611, 5, 1, "", "name"], [611, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.impute": [[621, 1, 1, "", "IterativeImputer"], [622, 1, 1, "", "KNNImputer"], [623, 1, 1, "", "MissingIndicator"], [624, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "fit_transform"], [621, 2, 1, "", "get_feature_names_out"], [621, 2, 1, "", "get_metadata_routing"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "set_output"], [621, 2, 1, "", "set_params"], [621, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "fit_transform"], [622, 2, 1, "", "get_feature_names_out"], [622, 2, 1, "", "get_metadata_routing"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "set_output"], [622, 2, 1, "", "set_params"], [622, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "fit_transform"], [623, 2, 1, "", "get_feature_names_out"], [623, 2, 1, "", "get_metadata_routing"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "set_output"], [623, 2, 1, "", "set_params"], [623, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "fit_transform"], [624, 2, 1, "", "get_feature_names_out"], [624, 2, 1, "", "get_metadata_routing"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "inverse_transform"], [624, 2, 1, "", "set_output"], [624, 2, 1, "", "set_params"], [624, 2, 1, "", "transform"]], "sklearn.inspection": [[625, 1, 1, "", "DecisionBoundaryDisplay"], [626, 1, 1, "", "PartialDependenceDisplay"], [627, 4, 1, "", "partial_dependence"], [628, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[625, 2, 1, "", "from_estimator"], [625, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[626, 2, 1, "", "from_estimator"], [626, 2, 1, "", "plot"]], "sklearn.isotonic": [[629, 1, 1, "", "IsotonicRegression"], [630, 4, 1, "", "check_increasing"], [631, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_fit_request"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "set_predict_request"], [629, 2, 1, "", "set_score_request"], [629, 2, 1, "", "set_transform_request"], [629, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[632, 1, 1, "", "AdditiveChi2Sampler"], [633, 1, 1, "", "Nystroem"], [634, 1, 1, "", "PolynomialCountSketch"], [635, 1, 1, "", "RBFSampler"], [636, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[637, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_fit_request"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[638, 1, 1, "", "ARDRegression"], [639, 1, 1, "", "BayesianRidge"], [640, 1, 1, "", "ElasticNet"], [641, 1, 1, "", "ElasticNetCV"], [642, 1, 1, "", "GammaRegressor"], [643, 1, 1, "", "HuberRegressor"], [644, 1, 1, "", "Lars"], [645, 1, 1, "", "LarsCV"], [646, 1, 1, "", "Lasso"], [647, 1, 1, "", "LassoCV"], [648, 1, 1, "", "LassoLars"], [649, 1, 1, "", "LassoLarsCV"], [650, 1, 1, "", "LassoLarsIC"], [651, 1, 1, "", "LinearRegression"], [652, 1, 1, "", "LogisticRegression"], [653, 1, 1, "", "LogisticRegressionCV"], [654, 1, 1, "", "MultiTaskElasticNet"], [655, 1, 1, "", "MultiTaskElasticNetCV"], [656, 1, 1, "", "MultiTaskLasso"], [657, 1, 1, "", "MultiTaskLassoCV"], [658, 1, 1, "", "OrthogonalMatchingPursuit"], [659, 1, 1, "", "OrthogonalMatchingPursuitCV"], [660, 1, 1, "", "PassiveAggressiveClassifier"], [661, 4, 1, "", "PassiveAggressiveRegressor"], [662, 1, 1, "", "Perceptron"], [663, 1, 1, "", "PoissonRegressor"], [664, 1, 1, "", "QuantileRegressor"], [665, 1, 1, "", "RANSACRegressor"], [666, 1, 1, "", "Ridge"], [667, 1, 1, "", "RidgeCV"], [668, 1, 1, "", "RidgeClassifier"], [669, 1, 1, "", "RidgeClassifierCV"], [670, 1, 1, "", "SGDClassifier"], [671, 1, 1, "", "SGDOneClassSVM"], [672, 1, 1, "", "SGDRegressor"], [673, 1, 1, "", "TheilSenRegressor"], [674, 1, 1, "", "TweedieRegressor"], [675, 4, 1, "", "enet_path"], [676, 4, 1, "", "lars_path"], [677, 4, 1, "", "lars_path_gram"], [678, 4, 1, "", "lasso_path"], [679, 4, 1, "", "orthogonal_mp"], [680, 4, 1, "", "orthogonal_mp_gram"], [681, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "set_predict_request"], [638, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_fit_request"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "set_predict_request"], [639, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "path"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_fit_request"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_score_request"], [640, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "path"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"], [646, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "path"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[652, 2, 1, "", "decision_function"], [652, 2, 1, "", "densify"], [652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "predict_log_proba"], [652, 2, 1, "", "predict_proba"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"], [652, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[653, 2, 1, "", "decision_function"], [653, 2, 1, "", "densify"], [653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "predict_log_proba"], [653, 2, 1, "", "predict_proba"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"], [653, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "path"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"], [654, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "path"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "path"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"], [656, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "path"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[660, 2, 1, "", "decision_function"], [660, 2, 1, "", "densify"], [660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "partial_fit"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_partial_fit_request"], [660, 2, 1, "", "set_score_request"], [660, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[662, 2, 1, "", "decision_function"], [662, 2, 1, "", "densify"], [662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "partial_fit"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_partial_fit_request"], [662, 2, 1, "", "set_score_request"], [662, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[668, 3, 1, "", "classes_"], [668, 2, 1, "", "decision_function"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[669, 3, 1, "", "classes_"], [669, 2, 1, "", "decision_function"], [669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[670, 2, 1, "", "decision_function"], [670, 2, 1, "", "densify"], [670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "partial_fit"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "predict_log_proba"], [670, 2, 1, "", "predict_proba"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_partial_fit_request"], [670, 2, 1, "", "set_score_request"], [670, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[671, 2, 1, "", "decision_function"], [671, 2, 1, "", "densify"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "fit_predict"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "partial_fit"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score_samples"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_partial_fit_request"], [671, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[672, 2, 1, "", "densify"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "partial_fit"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_partial_fit_request"], [672, 2, 1, "", "set_score_request"], [672, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[682, 1, 1, "", "Isomap"], [683, 1, 1, "", "LocallyLinearEmbedding"], [684, 1, 1, "", "MDS"], [685, 1, 1, "", "SpectralEmbedding"], [686, 1, 1, "", "TSNE"], [687, 4, 1, "", "locally_linear_embedding"], [688, 4, 1, "", "smacof"], [689, 4, 1, "", "spectral_embedding"], [690, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[682, 2, 1, "", "fit"], [682, 2, 1, "", "fit_transform"], [682, 2, 1, "", "get_feature_names_out"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "reconstruction_error"], [682, 2, 1, "", "set_output"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[683, 2, 1, "", "fit"], [683, 2, 1, "", "fit_transform"], [683, 2, 1, "", "get_feature_names_out"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "set_output"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[684, 2, 1, "", "fit"], [684, 2, 1, "", "fit_transform"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "set_fit_request"], [684, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[685, 2, 1, "", "fit"], [685, 2, 1, "", "fit_transform"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[686, 2, 1, "", "fit"], [686, 2, 1, "", "fit_transform"], [686, 2, 1, "", "get_feature_names_out"], [686, 2, 1, "", "get_metadata_routing"], [686, 2, 1, "", "get_params"], [686, 2, 1, "", "set_output"], [686, 2, 1, "", "set_params"]], "sklearn.metrics": [[691, 1, 1, "", "ConfusionMatrixDisplay"], [692, 1, 1, "", "DetCurveDisplay"], [693, 1, 1, "", "DistanceMetric"], [694, 1, 1, "", "PrecisionRecallDisplay"], [695, 1, 1, "", "PredictionErrorDisplay"], [696, 1, 1, "", "RocCurveDisplay"], [697, 4, 1, "", "accuracy_score"], [698, 4, 1, "", "adjusted_mutual_info_score"], [699, 4, 1, "", "adjusted_rand_score"], [700, 4, 1, "", "auc"], [701, 4, 1, "", "average_precision_score"], [702, 4, 1, "", "balanced_accuracy_score"], [703, 4, 1, "", "brier_score_loss"], [704, 4, 1, "", "calinski_harabasz_score"], [705, 4, 1, "", "check_scoring"], [706, 4, 1, "", "class_likelihood_ratios"], [707, 4, 1, "", "classification_report"], [402, 0, 0, "-", "cluster"], [710, 4, 1, "", "cohen_kappa_score"], [711, 4, 1, "", "completeness_score"], [712, 4, 1, "", "confusion_matrix"], [713, 4, 1, "", "consensus_score"], [714, 4, 1, "", "coverage_error"], [715, 4, 1, "", "d2_absolute_error_score"], [716, 4, 1, "", "d2_pinball_score"], [717, 4, 1, "", "d2_tweedie_score"], [718, 4, 1, "", "davies_bouldin_score"], [719, 4, 1, "", "dcg_score"], [720, 4, 1, "", "det_curve"], [721, 4, 1, "", "explained_variance_score"], [722, 4, 1, "", "f1_score"], [723, 4, 1, "", "fbeta_score"], [724, 4, 1, "", "fowlkes_mallows_score"], [725, 4, 1, "", "get_scorer"], [726, 4, 1, "", "get_scorer_names"], [727, 4, 1, "", "hamming_loss"], [728, 4, 1, "", "hinge_loss"], [729, 4, 1, "", "homogeneity_completeness_v_measure"], [730, 4, 1, "", "homogeneity_score"], [731, 4, 1, "", "jaccard_score"], [732, 4, 1, "", "label_ranking_average_precision_score"], [733, 4, 1, "", "label_ranking_loss"], [734, 4, 1, "", "log_loss"], [735, 4, 1, "", "make_scorer"], [736, 4, 1, "", "matthews_corrcoef"], [737, 4, 1, "", "max_error"], [738, 4, 1, "", "mean_absolute_error"], [739, 4, 1, "", "mean_absolute_percentage_error"], [740, 4, 1, "", "mean_gamma_deviance"], [741, 4, 1, "", "mean_pinball_loss"], [742, 4, 1, "", "mean_poisson_deviance"], [743, 4, 1, "", "mean_squared_error"], [744, 4, 1, "", "mean_squared_log_error"], [745, 4, 1, "", "mean_tweedie_deviance"], [746, 4, 1, "", "median_absolute_error"], [747, 4, 1, "", "multilabel_confusion_matrix"], [748, 4, 1, "", "mutual_info_score"], [749, 4, 1, "", "ndcg_score"], [750, 4, 1, "", "normalized_mutual_info_score"], [402, 0, 0, "-", "pairwise"], [771, 4, 1, "", "pairwise_distances"], [772, 4, 1, "", "pairwise_distances_argmin"], [773, 4, 1, "", "pairwise_distances_argmin_min"], [774, 4, 1, "", "pairwise_distances_chunked"], [775, 4, 1, "", "precision_recall_curve"], [776, 4, 1, "", "precision_recall_fscore_support"], [777, 4, 1, "", "precision_score"], [778, 4, 1, "", "r2_score"], [779, 4, 1, "", "rand_score"], [780, 4, 1, "", "recall_score"], [781, 4, 1, "", "roc_auc_score"], [782, 4, 1, "", "roc_curve"], [783, 4, 1, "", "silhouette_samples"], [784, 4, 1, "", "silhouette_score"], [785, 4, 1, "", "top_k_accuracy_score"], [786, 4, 1, "", "v_measure_score"], [787, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[691, 2, 1, "", "from_estimator"], [691, 2, 1, "", "from_predictions"], [691, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[692, 2, 1, "", "from_estimator"], [692, 2, 1, "", "from_predictions"], [692, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[693, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[694, 2, 1, "", "from_estimator"], [694, 2, 1, "", "from_predictions"], [694, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[695, 2, 1, "", "from_estimator"], [695, 2, 1, "", "from_predictions"], [695, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[696, 2, 1, "", "from_estimator"], [696, 2, 1, "", "from_predictions"], [696, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[708, 4, 1, "", "contingency_matrix"], [709, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[751, 4, 1, "", "additive_chi2_kernel"], [752, 4, 1, "", "chi2_kernel"], [753, 4, 1, "", "cosine_distances"], [754, 4, 1, "", "cosine_similarity"], [755, 4, 1, "", "distance_metrics"], [756, 4, 1, "", "euclidean_distances"], [757, 4, 1, "", "haversine_distances"], [758, 4, 1, "", "kernel_metrics"], [759, 4, 1, "", "laplacian_kernel"], [760, 4, 1, "", "linear_kernel"], [761, 4, 1, "", "manhattan_distances"], [762, 4, 1, "", "nan_euclidean_distances"], [763, 4, 1, "", "paired_cosine_distances"], [764, 4, 1, "", "paired_distances"], [765, 4, 1, "", "paired_euclidean_distances"], [766, 4, 1, "", "paired_manhattan_distances"], [767, 4, 1, "", "pairwise_kernels"], [768, 4, 1, "", "polynomial_kernel"], [769, 4, 1, "", "rbf_kernel"], [770, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[788, 1, 1, "", "BayesianGaussianMixture"], [789, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[788, 2, 1, "", "fit"], [788, 2, 1, "", "fit_predict"], [788, 2, 1, "", "get_metadata_routing"], [788, 2, 1, "", "get_params"], [788, 2, 1, "", "predict"], [788, 2, 1, "", "predict_proba"], [788, 2, 1, "", "sample"], [788, 2, 1, "", "score"], [788, 2, 1, "", "score_samples"], [788, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[789, 2, 1, "", "aic"], [789, 2, 1, "", "bic"], [789, 2, 1, "", "fit"], [789, 2, 1, "", "fit_predict"], [789, 2, 1, "", "get_metadata_routing"], [789, 2, 1, "", "get_params"], [789, 2, 1, "", "predict"], [789, 2, 1, "", "predict_proba"], [789, 2, 1, "", "sample"], [789, 2, 1, "", "score"], [789, 2, 1, "", "score_samples"], [789, 2, 1, "", "set_params"]], "sklearn.model_selection": [[790, 1, 1, "", "GridSearchCV"], [791, 1, 1, "", "GroupKFold"], [792, 1, 1, "", "GroupShuffleSplit"], [793, 1, 1, "", "HalvingGridSearchCV"], [794, 1, 1, "", "HalvingRandomSearchCV"], [795, 1, 1, "", "KFold"], [796, 1, 1, "", "LearningCurveDisplay"], [797, 1, 1, "", "LeaveOneGroupOut"], [798, 1, 1, "", "LeaveOneOut"], [799, 1, 1, "", "LeavePGroupsOut"], [800, 1, 1, "", "LeavePOut"], [801, 1, 1, "", "ParameterGrid"], [802, 1, 1, "", "ParameterSampler"], [803, 1, 1, "", "PredefinedSplit"], [804, 1, 1, "", "RandomizedSearchCV"], [805, 1, 1, "", "RepeatedKFold"], [806, 1, 1, "", "RepeatedStratifiedKFold"], [807, 1, 1, "", "ShuffleSplit"], [808, 1, 1, "", "StratifiedGroupKFold"], [809, 1, 1, "", "StratifiedKFold"], [810, 1, 1, "", "StratifiedShuffleSplit"], [811, 1, 1, "", "TimeSeriesSplit"], [812, 1, 1, "", "ValidationCurveDisplay"], [813, 4, 1, "", "check_cv"], [814, 4, 1, "", "cross_val_predict"], [815, 4, 1, "", "cross_val_score"], [816, 4, 1, "", "cross_validate"], [817, 4, 1, "", "learning_curve"], [818, 4, 1, "", "permutation_test_score"], [819, 4, 1, "", "train_test_split"], [820, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[790, 3, 1, "", "classes_"], [790, 2, 1, "", "decision_function"], [790, 2, 1, "", "fit"], [790, 2, 1, "", "get_metadata_routing"], [790, 2, 1, "", "get_params"], [790, 2, 1, "", "inverse_transform"], [790, 3, 1, "", "n_features_in_"], [790, 2, 1, "", "predict"], [790, 2, 1, "", "predict_log_proba"], [790, 2, 1, "", "predict_proba"], [790, 2, 1, "", "score"], [790, 2, 1, "", "score_samples"], [790, 2, 1, "", "set_fit_request"], [790, 2, 1, "", "set_params"], [790, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[791, 2, 1, "", "get_metadata_routing"], [791, 2, 1, "", "get_n_splits"], [791, 2, 1, "", "set_split_request"], [791, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[792, 2, 1, "", "get_metadata_routing"], [792, 2, 1, "", "get_n_splits"], [792, 2, 1, "", "set_split_request"], [792, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[793, 3, 1, "", "classes_"], [793, 2, 1, "", "decision_function"], [793, 2, 1, "", "fit"], [793, 2, 1, "", "get_metadata_routing"], [793, 2, 1, "", "get_params"], [793, 2, 1, "", "inverse_transform"], [793, 3, 1, "", "n_features_in_"], [793, 2, 1, "", "predict"], [793, 2, 1, "", "predict_log_proba"], [793, 2, 1, "", "predict_proba"], [793, 2, 1, "", "score"], [793, 2, 1, "", "score_samples"], [793, 2, 1, "", "set_fit_request"], [793, 2, 1, "", "set_params"], [793, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[794, 3, 1, "", "classes_"], [794, 2, 1, "", "decision_function"], [794, 2, 1, "", "fit"], [794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_params"], [794, 2, 1, "", "inverse_transform"], [794, 3, 1, "", "n_features_in_"], [794, 2, 1, "", "predict"], [794, 2, 1, "", "predict_log_proba"], [794, 2, 1, "", "predict_proba"], [794, 2, 1, "", "score"], [794, 2, 1, "", "score_samples"], [794, 2, 1, "", "set_fit_request"], [794, 2, 1, "", "set_params"], [794, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_n_splits"], [795, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[796, 2, 1, "", "from_estimator"], [796, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "set_split_request"], [797, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_n_splits"], [799, 2, 1, "", "set_split_request"], [799, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_n_splits"], [800, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[804, 3, 1, "", "classes_"], [804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "inverse_transform"], [804, 3, 1, "", "n_features_in_"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_fit_request"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "set_split_request"], [808, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[812, 2, 1, "", "from_estimator"], [812, 2, 1, "", "plot"]], "sklearn.multiclass": [[821, 1, 1, "", "OneVsOneClassifier"], [822, 1, 1, "", "OneVsRestClassifier"], [823, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[821, 2, 1, "", "decision_function"], [821, 2, 1, "", "fit"], [821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_params"], [821, 3, 1, "", "n_classes_"], [821, 2, 1, "", "partial_fit"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "score"], [821, 2, 1, "", "set_params"], [821, 2, 1, "", "set_partial_fit_request"], [821, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[822, 2, 1, "", "decision_function"], [822, 2, 1, "", "fit"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 3, 1, "", "multilabel_"], [822, 3, 1, "", "n_classes_"], [822, 2, 1, "", "partial_fit"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "predict_proba"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "set_partial_fit_request"], [822, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[824, 1, 1, "", "ClassifierChain"], [825, 1, 1, "", "MultiOutputClassifier"], [826, 1, 1, "", "MultiOutputRegressor"], [827, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[824, 2, 1, "", "decision_function"], [824, 2, 1, "", "fit"], [824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "predict"], [824, 2, 1, "", "predict_proba"], [824, 2, 1, "", "score"], [824, 2, 1, "", "set_params"], [824, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "partial_fit"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "predict_proba"], [825, 2, 1, "", "score"], [825, 2, 1, "", "set_fit_request"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "partial_fit"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_fit_request"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "set_partial_fit_request"], [826, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[828, 1, 1, "", "BernoulliNB"], [829, 1, 1, "", "CategoricalNB"], [830, 1, 1, "", "ComplementNB"], [831, 1, 1, "", "GaussianNB"], [832, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "partial_fit"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "predict_joint_log_proba"], [828, 2, 1, "", "predict_log_proba"], [828, 2, 1, "", "predict_proba"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_fit_request"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_partial_fit_request"], [828, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "partial_fit"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "predict_joint_log_proba"], [829, 2, 1, "", "predict_log_proba"], [829, 2, 1, "", "predict_proba"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_fit_request"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_partial_fit_request"], [829, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "partial_fit"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "predict_joint_log_proba"], [830, 2, 1, "", "predict_log_proba"], [830, 2, 1, "", "predict_proba"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_fit_request"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_partial_fit_request"], [830, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "partial_fit"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "predict_joint_log_proba"], [831, 2, 1, "", "predict_log_proba"], [831, 2, 1, "", "predict_proba"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_fit_request"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_partial_fit_request"], [831, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "partial_fit"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "predict_joint_log_proba"], [832, 2, 1, "", "predict_log_proba"], [832, 2, 1, "", "predict_proba"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_fit_request"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_partial_fit_request"], [832, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[833, 1, 1, "", "BallTree"], [834, 1, 1, "", "KDTree"], [835, 1, 1, "", "KNeighborsClassifier"], [836, 1, 1, "", "KNeighborsRegressor"], [837, 1, 1, "", "KNeighborsTransformer"], [838, 1, 1, "", "KernelDensity"], [839, 1, 1, "", "LocalOutlierFactor"], [840, 1, 1, "", "NearestCentroid"], [841, 1, 1, "", "NearestNeighbors"], [842, 1, 1, "", "NeighborhoodComponentsAnalysis"], [843, 1, 1, "", "RadiusNeighborsClassifier"], [844, 1, 1, "", "RadiusNeighborsRegressor"], [845, 1, 1, "", "RadiusNeighborsTransformer"], [846, 4, 1, "", "kneighbors_graph"], [847, 4, 1, "", "radius_neighbors_graph"], [848, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[833, 2, 1, "", "get_arrays"], [833, 2, 1, "", "get_n_calls"], [833, 2, 1, "", "get_tree_stats"], [833, 2, 1, "", "kernel_density"], [833, 2, 1, "", "query"], [833, 2, 1, "", "query_radius"], [833, 2, 1, "", "reset_n_calls"], [833, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[834, 2, 1, "", "get_arrays"], [834, 2, 1, "", "get_n_calls"], [834, 2, 1, "", "get_tree_stats"], [834, 2, 1, "", "kernel_density"], [834, 2, 1, "", "query"], [834, 2, 1, "", "query_radius"], [834, 2, 1, "", "reset_n_calls"], [834, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "kneighbors"], [835, 2, 1, "", "kneighbors_graph"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "kneighbors"], [836, 2, 1, "", "kneighbors_graph"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "fit_transform"], [837, 2, 1, "", "get_feature_names_out"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "kneighbors"], [837, 2, 1, "", "kneighbors_graph"], [837, 2, 1, "", "set_output"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "sample"], [838, 2, 1, "", "score"], [838, 2, 1, "", "score_samples"], [838, 2, 1, "", "set_fit_request"], [838, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[839, 2, 1, "", "decision_function"], [839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_predict"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "kneighbors"], [839, 2, 1, "", "kneighbors_graph"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "score_samples"], [839, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "kneighbors"], [841, 2, 1, "", "kneighbors_graph"], [841, 2, 1, "", "radius_neighbors"], [841, 2, 1, "", "radius_neighbors_graph"], [841, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "radius_neighbors"], [843, 2, 1, "", "radius_neighbors_graph"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "radius_neighbors"], [844, 2, 1, "", "radius_neighbors_graph"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "radius_neighbors"], [845, 2, 1, "", "radius_neighbors_graph"], [845, 2, 1, "", "set_output"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "transform"]], "sklearn.neural_network": [[849, 1, 1, "", "BernoulliRBM"], [850, 1, 1, "", "MLPClassifier"], [851, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "gibbs"], [849, 2, 1, "", "partial_fit"], [849, 2, 1, "", "score_samples"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "partial_fit"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "predict_log_proba"], [850, 2, 1, "", "predict_proba"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_partial_fit_request"], [850, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "partial_fit"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[852, 1, 1, "", "FeatureUnion"], [853, 1, 1, "", "Pipeline"], [854, 4, 1, "", "make_pipeline"], [855, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[852, 3, 1, "", "feature_names_in_"], [852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 3, 1, "", "n_features_in_"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[853, 3, 1, "", "classes_"], [853, 2, 1, "", "decision_function"], [853, 3, 1, "", "feature_names_in_"], [853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_predict"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "inverse_transform"], [853, 3, 1, "", "n_features_in_"], [853, 3, 1, "", "named_steps"], [853, 2, 1, "", "predict"], [853, 2, 1, "", "predict_log_proba"], [853, 2, 1, "", "predict_proba"], [853, 2, 1, "", "score"], [853, 2, 1, "", "score_samples"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "set_score_request"], [853, 2, 1, "", "transform"]], "sklearn.preprocessing": [[856, 1, 1, "", "Binarizer"], [857, 1, 1, "", "FunctionTransformer"], [858, 1, 1, "", "KBinsDiscretizer"], [859, 1, 1, "", "KernelCenterer"], [860, 1, 1, "", "LabelBinarizer"], [861, 1, 1, "", "LabelEncoder"], [862, 1, 1, "", "MaxAbsScaler"], [863, 1, 1, "", "MinMaxScaler"], [864, 1, 1, "", "MultiLabelBinarizer"], [865, 1, 1, "", "Normalizer"], [866, 1, 1, "", "OneHotEncoder"], [867, 1, 1, "", "OrdinalEncoder"], [868, 1, 1, "", "PolynomialFeatures"], [869, 1, 1, "", "PowerTransformer"], [870, 1, 1, "", "QuantileTransformer"], [871, 1, 1, "", "RobustScaler"], [872, 1, 1, "", "SplineTransformer"], [873, 1, 1, "", "StandardScaler"], [874, 1, 1, "", "TargetEncoder"], [875, 4, 1, "", "add_dummy_feature"], [876, 4, 1, "", "binarize"], [877, 4, 1, "", "label_binarize"], [878, 4, 1, "", "maxabs_scale"], [879, 4, 1, "", "minmax_scale"], [880, 4, 1, "", "normalize"], [881, 4, 1, "", "power_transform"], [882, 4, 1, "", "quantile_transform"], [883, 4, 1, "", "robust_scale"], [884, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_transform_request"], [856, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "inverse_transform"], [858, 2, 1, "", "set_fit_request"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "set_fit_request"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "set_transform_request"], [859, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "inverse_transform"], [860, 2, 1, "", "set_inverse_transform_request"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "inverse_transform"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "inverse_transform"], [862, 2, 1, "", "partial_fit"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "inverse_transform"], [863, 2, 1, "", "partial_fit"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_transform_request"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 3, 1, "", "infrequent_categories_"], [866, 2, 1, "", "inverse_transform"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 3, 1, "", "infrequent_categories_"], [867, 2, 1, "", "inverse_transform"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 3, 1, "", "powers_"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "set_fit_request"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "partial_fit"], [873, 2, 1, "", "set_fit_request"], [873, 2, 1, "", "set_inverse_transform_request"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "set_partial_fit_request"], [873, 2, 1, "", "set_transform_request"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 3, 1, "", "infrequent_categories_"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.random_projection": [[885, 1, 1, "", "GaussianRandomProjection"], [886, 1, 1, "", "SparseRandomProjection"], [887, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "inverse_transform"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[888, 1, 1, "", "LabelPropagation"], [889, 1, 1, "", "LabelSpreading"], [890, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "predict"], [888, 2, 1, "", "predict_proba"], [888, 2, 1, "", "score"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "predict"], [889, 2, 1, "", "predict_proba"], [889, 2, 1, "", "score"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[890, 2, 1, "", "decision_function"], [890, 2, 1, "", "fit"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 2, 1, "", "predict"], [890, 2, 1, "", "predict_log_proba"], [890, 2, 1, "", "predict_proba"], [890, 2, 1, "", "score"], [890, 2, 1, "", "set_params"]], "sklearn.svm": [[893, 1, 1, "", "LinearSVC"], [894, 1, 1, "", "LinearSVR"], [895, 1, 1, "", "NuSVC"], [896, 1, 1, "", "NuSVR"], [897, 1, 1, "", "OneClassSVM"], [898, 1, 1, "", "SVC"], [899, 1, 1, "", "SVR"], [900, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[893, 2, 1, "", "decision_function"], [893, 2, 1, "", "densify"], [893, 2, 1, "", "fit"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 2, 1, "", "predict"], [893, 2, 1, "", "score"], [893, 2, 1, "", "set_fit_request"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "set_score_request"], [893, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[894, 2, 1, "", "fit"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "score"], [894, 2, 1, "", "set_fit_request"], [894, 2, 1, "", "set_params"], [894, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[895, 3, 1, "", "coef_"], [895, 2, 1, "", "decision_function"], [895, 2, 1, "", "fit"], [895, 2, 1, "", "get_metadata_routing"], [895, 2, 1, "", "get_params"], [895, 3, 1, "", "n_support_"], [895, 2, 1, "", "predict"], [895, 2, 1, "", "predict_log_proba"], [895, 2, 1, "", "predict_proba"], [895, 3, 1, "", "probA_"], [895, 3, 1, "", "probB_"], [895, 2, 1, "", "score"], [895, 2, 1, "", "set_fit_request"], [895, 2, 1, "", "set_params"], [895, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[896, 3, 1, "", "coef_"], [896, 2, 1, "", "fit"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 3, 1, "", "n_support_"], [896, 2, 1, "", "predict"], [896, 2, 1, "", "score"], [896, 2, 1, "", "set_fit_request"], [896, 2, 1, "", "set_params"], [896, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[897, 3, 1, "", "coef_"], [897, 2, 1, "", "decision_function"], [897, 2, 1, "", "fit"], [897, 2, 1, "", "fit_predict"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 3, 1, "", "n_support_"], [897, 2, 1, "", "predict"], [897, 2, 1, "", "score_samples"], [897, 2, 1, "", "set_fit_request"], [897, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[898, 3, 1, "", "coef_"], [898, 2, 1, "", "decision_function"], [898, 2, 1, "", "fit"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_params"], [898, 3, 1, "", "n_support_"], [898, 2, 1, "", "predict"], [898, 2, 1, "", "predict_log_proba"], [898, 2, 1, "", "predict_proba"], [898, 3, 1, "", "probA_"], [898, 3, 1, "", "probB_"], [898, 2, 1, "", "score"], [898, 2, 1, "", "set_fit_request"], [898, 2, 1, "", "set_params"], [898, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[899, 3, 1, "", "coef_"], [899, 2, 1, "", "fit"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 3, 1, "", "n_support_"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_fit_request"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_score_request"]], "sklearn.tree": [[901, 1, 1, "", "DecisionTreeClassifier"], [902, 1, 1, "", "DecisionTreeRegressor"], [903, 1, 1, "", "ExtraTreeClassifier"], [904, 1, 1, "", "ExtraTreeRegressor"], [905, 4, 1, "", "export_graphviz"], [906, 4, 1, "", "export_text"], [907, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[901, 2, 1, "", "apply"], [901, 2, 1, "", "cost_complexity_pruning_path"], [901, 2, 1, "", "decision_path"], [901, 3, 1, "", "feature_importances_"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_depth"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_n_leaves"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "predict_log_proba"], [901, 2, 1, "", "predict_proba"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_fit_request"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_predict_proba_request"], [901, 2, 1, "", "set_predict_request"], [901, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[902, 2, 1, "", "apply"], [902, 2, 1, "", "cost_complexity_pruning_path"], [902, 2, 1, "", "decision_path"], [902, 3, 1, "", "feature_importances_"], [902, 2, 1, "", "fit"], [902, 2, 1, "", "get_depth"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_n_leaves"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_fit_request"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_predict_request"], [902, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[903, 2, 1, "", "apply"], [903, 2, 1, "", "cost_complexity_pruning_path"], [903, 2, 1, "", "decision_path"], [903, 3, 1, "", "feature_importances_"], [903, 2, 1, "", "fit"], [903, 2, 1, "", "get_depth"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_n_leaves"], [903, 2, 1, "", "get_params"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "predict_log_proba"], [903, 2, 1, "", "predict_proba"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_fit_request"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_predict_proba_request"], [903, 2, 1, "", "set_predict_request"], [903, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[904, 2, 1, "", "apply"], [904, 2, 1, "", "cost_complexity_pruning_path"], [904, 2, 1, "", "decision_path"], [904, 3, 1, "", "feature_importances_"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_depth"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_n_leaves"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_fit_request"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_predict_request"], [904, 2, 1, "", "set_score_request"]], "sklearn.utils": [[908, 1, 1, "", "Bunch"], [909, 4, 1, "", "_safe_indexing"], [911, 4, 1, "", "as_float_array"], [912, 4, 1, "", "assert_all_finite"], [913, 4, 1, "", "check_X_y"], [914, 4, 1, "", "check_array"], [915, 4, 1, "", "check_consistent_length"], [916, 4, 1, "", "check_random_state"], [917, 4, 1, "", "check_scalar"], [920, 4, 1, "", "deprecated"], [926, 4, 1, "", "estimator_html_repr"], [933, 4, 1, "", "gen_batches"], [934, 4, 1, "", "gen_even_slices"], [936, 4, 1, "", "indexable"], [946, 4, 1, "", "murmurhash3_32"], [949, 4, 1, "", "parallel_backend"], [951, 4, 1, "", "register_parallel_backend"], [952, 4, 1, "", "resample"], [953, 4, 1, "", "safe_mask"], [954, 4, 1, "", "safe_sqr"], [955, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[908, 2, 1, "", "clear"], [908, 2, 1, "", "copy"], [908, 2, 1, "", "fromkeys"], [908, 2, 1, "", "get"], [908, 2, 1, "", "items"], [908, 2, 1, "", "keys"], [908, 2, 1, "", "pop"], [908, 2, 1, "", "popitem"], [908, 2, 1, "", "setdefault"], [908, 2, 1, "", "update"], [908, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[910, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[918, 4, 1, "", "compute_class_weight"], [919, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[921, 4, 1, "", "all_displays"], [922, 4, 1, "", "all_estimators"], [923, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[924, 4, 1, "", "check_estimator"], [925, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[927, 4, 1, "", "density"], [928, 4, 1, "", "fast_logdet"], [929, 4, 1, "", "randomized_range_finder"], [930, 4, 1, "", "randomized_svd"], [931, 4, 1, "", "safe_sparse_dot"], [932, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[935, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[937, 4, 1, "", "MetadataRequest"], [938, 4, 1, "", "MetadataRouter"], [939, 4, 1, "", "MethodMapping"], [940, 4, 1, "", "get_routing_for_object"], [941, 4, 1, "", "process_routing"]], "sklearn.utils.metaestimators": [[942, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[943, 4, 1, "", "is_multilabel"], [944, 4, 1, "", "type_of_target"], [945, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[947, 1, 1, "", "Parallel"], [948, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[947, 2, 1, "", "dispatch_next"], [947, 2, 1, "", "dispatch_one_batch"], [947, 2, 1, "", "format"], [947, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[950, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[956, 4, 1, "", "incr_mean_variance_axis"], [957, 4, 1, "", "inplace_column_scale"], [958, 4, 1, "", "inplace_csr_column_scale"], [959, 4, 1, "", "inplace_row_scale"], [960, 4, 1, "", "inplace_swap_column"], [961, 4, 1, "", "inplace_swap_row"], [962, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[963, 4, 1, "", "inplace_csr_row_normalize_l1"], [964, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[965, 4, 1, "", "check_is_fitted"], [966, 4, 1, "", "check_memory"], [967, 4, 1, "", "check_symmetric"], [968, 4, 1, "", "column_or_1d"], [969, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 388], "u": 0, "histori": [0, 1020], "govern": [0, 391], "author": [0, 1022], "document": [0, 8, 19, 167, 315, 316, 346, 347, 348, 376, 391, 1001, 1002, 1004, 1022, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "team": [0, 375, 391], "contributor": [0, 375, 376, 391, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "experi": [0, 37, 375, 391], "commun": [0, 376, 391], "emeritu": 0, "core": [0, 8, 364, 375, 380, 382, 388, 391, 983], "develop": [0, 108, 109, 167, 236, 374, 377, 378, 379, 380, 383, 384, 385, 970, 1018, 1038], "cite": 0, "scikit": [0, 236, 256, 313, 314, 315, 316, 317, 318, 319, 361, 362, 374, 377, 378, 380, 381, 388, 391, 393, 999, 1001, 1002, 1005, 1007, 1008, 1013, 1016], "learn": [0, 5, 12, 50, 95, 98, 151, 167, 169, 170, 171, 176, 220, 221, 222, 223, 235, 236, 256, 263, 291, 298, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 361, 362, 364, 372, 374, 376, 377, 378, 380, 381, 388, 391, 393, 402, 408, 410, 976, 978, 986, 994, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1013, 1014, 1015, 1016, 1017], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 86, 100, 104, 233, 376, 378, 388, 402, 993, 998, 1001], "infrastructur": 0, "support": [0, 25, 122, 167, 194, 309, 313, 314, 315, 316, 318, 319, 329, 332, 341, 388, 393, 399, 401, 402, 410, 996, 997, 1004, 1014, 1028], "exampl": [3, 6, 9, 53, 59, 75, 88, 102, 109, 128, 159, 167, 196, 197, 204, 339, 343, 364, 370, 371, 381, 388, 392, 394, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 423, 426, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 454, 456, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 473, 476, 477, 478, 481, 482, 483, 484, 485, 486, 488, 489, 490, 492, 493, 494, 495, 496, 498, 500, 504, 505, 506, 507, 508, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 575, 576, 578, 581, 582, 583, 584, 585, 587, 588, 591, 593, 594, 596, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 611, 612, 613, 616, 617, 619, 621, 622, 624, 625, 626, 627, 628, 629, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 646, 647, 649, 650, 651, 652, 653, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 678, 682, 683, 684, 685, 686, 687, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 711, 712, 713, 720, 722, 727, 728, 730, 731, 734, 735, 738, 741, 742, 743, 745, 746, 748, 750, 754, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 824, 826, 828, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 846, 849, 850, 851, 852, 853, 854, 857, 858, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 879, 882, 886, 887, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 907, 908, 916, 925, 927, 934, 938, 939, 940, 941, 942, 955, 965, 970, 973, 975, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 1007, 1013, 1014, 1015, 1019, 1022], "base": [3, 4, 85, 119, 120, 149, 167, 184, 235, 313, 314, 316, 318, 319, 376, 402, 403, 407, 410, 412, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 977, 989, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "real": [3, 9, 75, 111, 167, 371], "world": [3, 75, 167, 371], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 58, 62, 70, 85, 88, 89, 90, 91, 92, 95, 104, 112, 118, 121, 122, 132, 138, 139, 152, 154, 156, 157, 159, 161, 167, 169, 170, 171, 179, 182, 184, 189, 200, 202, 209, 218, 221, 222, 229, 234, 239, 240, 259, 267, 268, 310, 326, 327, 331, 338, 347, 353, 368, 369, 370, 371, 372, 373, 381, 388, 402, 413, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 1007, 1013, 1014, 1016, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "time": [4, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 118, 123, 136, 142, 150, 162, 166, 174, 177, 194, 219, 227, 234, 235, 244, 253, 277, 280, 295, 301, 311, 320, 328, 345, 347, 350, 357, 407], "relat": [4, 8, 370, 376, 989, 1001, 1029], "featur": [4, 51, 54, 74, 100, 117, 119, 120, 122, 126, 129, 130, 143, 145, 147, 148, 149, 167, 172, 173, 176, 179, 194, 197, 218, 234, 240, 262, 300, 304, 305, 308, 309, 313, 315, 316, 337, 347, 348, 362, 364, 376, 380, 394, 402, 404, 410, 411, 412, 971, 989, 991, 998, 1015, 1016, 1025, 1026, 1027, 1028, 1029], "engin": [4, 172, 1001, 1005], "data": [4, 7, 9, 12, 17, 20, 24, 26, 38, 47, 49, 50, 55, 57, 58, 63, 64, 66, 67, 70, 75, 78, 80, 82, 85, 86, 96, 97, 100, 101, 102, 103, 111, 113, 119, 120, 126, 128, 132, 145, 148, 149, 158, 160, 165, 169, 172, 173, 176, 180, 186, 193, 194, 204, 230, 235, 242, 251, 256, 258, 262, 267, 268, 270, 271, 274, 284, 288, 293, 300, 303, 307, 308, 309, 322, 334, 337, 341, 342, 348, 349, 358, 362, 364, 371, 381, 388, 390, 403, 404, 406, 407, 412, 991, 995, 1005, 1007, 1010, 1013, 1015, 1016], "explor": 4, "bike": [4, 171], "share": [4, 171], "demand": 4, "cross": [4, 84, 85, 138, 139, 148, 167, 189, 256, 257, 259, 260, 264, 266, 271, 310, 337, 358, 402, 406, 407, 970, 977, 1011], "valid": [4, 138, 139, 148, 189, 233, 256, 257, 259, 260, 264, 266, 271, 276, 337, 358, 362, 378, 385, 402, 407, 965, 966, 967, 968, 969, 970, 976, 977, 984, 1011], "gradient": [4, 118, 122, 123, 124, 125, 126, 127, 171, 200, 208, 214, 313, 314, 316, 318, 319, 410, 977, 995], "boost": [4, 118, 122, 123, 124, 125, 126, 127, 171, 200, 313, 314, 316, 318, 319, 410], "naiv": [4, 24, 25, 402, 983], "linear": [4, 25, 33, 34, 125, 152, 167, 170, 178, 179, 196, 200, 203, 206, 221, 222, 234, 314, 333, 338, 340, 341, 362, 385, 388, 402, 975, 977, 978, 979, 991, 1014], "regress": [4, 73, 75, 85, 86, 113, 125, 126, 135, 152, 157, 158, 159, 160, 179, 180, 183, 189, 191, 192, 193, 196, 198, 200, 202, 215, 217, 218, 232, 235, 293, 341, 354, 355, 372, 402, 404, 410, 413, 972, 974, 977, 981, 982, 984, 985, 995, 996, 997, 1014], "step": [4, 241, 389, 404], "categori": [4, 317, 319, 991], "trigonometr": 4, "period": [4, 201], "spline": [4, 201, 316, 991], "qualit": 4, "analysi": [4, 33, 34, 60, 95, 101, 103, 106, 112, 125, 171, 184, 246, 263, 264, 271, 289, 290, 291, 347, 402, 406, 408, 975, 984, 998, 1015, 1016], "impact": [4, 61, 1037, 1038], "model": [4, 7, 11, 57, 75, 85, 96, 103, 111, 118, 119, 120, 122, 126, 128, 148, 149, 152, 157, 167, 170, 171, 172, 176, 178, 179, 184, 188, 189, 194, 200, 203, 218, 230, 235, 239, 240, 245, 247, 251, 252, 254, 260, 261, 263, 268, 288, 293, 300, 308, 314, 316, 338, 341, 347, 362, 378, 388, 389, 391, 397, 398, 402, 407, 970, 976, 977, 980, 981, 983, 985, 986, 1007, 1011, 1014, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "predict": [4, 10, 24, 86, 113, 125, 135, 153, 169, 180, 200, 235, 257, 268, 322, 362, 388, 389, 406, 407, 413, 981, 992, 1007, 1014], "pairwis": [4, 261, 402, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 979], "interact": [4, 171, 318, 410, 1014], "polynomi": [4, 176, 179, 180, 201, 338, 973, 977, 979, 991, 1014], "non": [4, 14, 95, 125, 195, 200, 204, 221, 266, 333, 340, 341, 408, 977, 991], "kernel": [4, 5, 100, 152, 157, 158, 160, 161, 167, 175, 176, 234, 235, 285, 286, 294, 315, 330, 333, 338, 341, 402, 408, 409, 413, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 973, 974, 979, 991, 996, 1014], "conclud": [4, 111, 225], "remark": [4, 57, 111, 225, 233], "imag": [5, 47, 50, 53, 66, 98, 370, 402, 411, 577, 578, 579, 580, 581], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 129, 130, 132, 149, 157, 187, 203, 214, 216, 261, 265, 270, 304, 341, 347, 348, 356, 358, 364, 377, 381, 382, 384, 388, 407, 408, 410, 411, 412, 417, 420, 423, 426, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 454, 456, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 473, 476, 477, 478, 481, 482, 483, 484, 485, 486, 488, 489, 490, 492, 493, 494, 495, 496, 498, 500, 504, 505, 506, 507, 508, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 575, 576, 578, 581, 582, 583, 584, 585, 587, 588, 591, 593, 594, 596, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 611, 612, 613, 616, 617, 619, 621, 622, 624, 625, 626, 627, 628, 629, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 646, 647, 649, 650, 651, 652, 653, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 678, 682, 683, 684, 685, 686, 687, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 711, 712, 713, 720, 722, 727, 728, 730, 731, 734, 735, 738, 741, 742, 743, 745, 746, 748, 750, 754, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 824, 826, 828, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 846, 849, 850, 851, 852, 853, 854, 857, 858, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 879, 882, 886, 887, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 907, 908, 916, 925, 927, 934, 938, 939, 940, 941, 942, 955, 965, 975, 977, 978, 981, 985, 995, 996, 997, 1005, 1014, 1016, 1032], "pca": [5, 58, 73, 90, 95, 96, 99, 100, 101, 102, 103, 104, 308, 408, 535, 998, 1015], "refer": [5, 11, 25, 27, 80, 81, 98, 112, 115, 172, 176, 184, 188, 261, 266, 267, 294, 370, 371, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996], "load": [5, 7, 17, 50, 58, 90, 118, 120, 122, 126, 138, 149, 172, 193, 218, 222, 230, 234, 242, 262, 270, 271, 284, 308, 309, 334, 337, 347, 348, 349, 369, 370, 381, 388, 411, 1007, 1015, 1016], "via": [5, 53, 188, 189, 218, 410, 973], "openml": [5, 309, 313, 370], "basi": [5, 161, 413, 973, 977, 1014], "reconstruct": [5, 13, 98], "test": [5, 78, 144, 264, 267, 274, 347, 352, 374, 376, 378, 384, 385, 407, 1007, 1014, 1016], "face": [6, 50, 95, 238, 371, 1005, 1012], "recognit": [6, 371, 373, 1012], "eigenfac": [6, 95, 1012], "svm": [6, 141, 145, 146, 176, 214, 234, 316, 327, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 402, 893, 894, 895, 896, 897, 898, 899, 900, 977, 987, 995, 1014, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "complex": [7, 231, 241, 260, 263, 324, 352, 362, 403, 977, 984, 985, 995, 996, 997], "influenc": [7, 10, 362], "benchmark": [7, 10, 58, 347], "choos": [7, 970, 1007, 1009, 1011], "paramet": [7, 78, 125, 259, 315, 334, 342, 376, 378, 389, 390, 402, 404, 410, 970, 977, 981, 996, 1007, 1011, 1016], "run": [7, 58, 265], "code": [7, 95, 105, 376, 378, 381, 382, 384, 408, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "plot": [7, 8, 10, 20, 24, 30, 34, 38, 41, 47, 49, 50, 57, 63, 64, 66, 67, 78, 82, 85, 90, 91, 92, 96, 97, 101, 111, 113, 118, 121, 126, 128, 132, 133, 134, 135, 138, 148, 165, 171, 179, 180, 184, 192, 193, 194, 204, 205, 209, 222, 230, 234, 239, 240, 242, 251, 257, 258, 263, 265, 268, 270, 274, 276, 288, 300, 309, 313, 315, 316, 322, 331, 332, 337, 338, 347, 353, 383, 402, 976, 988, 1019], "result": [7, 8, 20, 38, 47, 49, 50, 57, 58, 63, 64, 67, 78, 80, 82, 96, 97, 111, 113, 118, 132, 135, 165, 176, 184, 205, 235, 239, 265, 274, 288, 309, 341, 348, 358, 970], "conclus": [7, 152, 184, 189, 284, 310, 338], "out": [8, 124, 364, 384, 407, 970, 977, 983], "classif": [8, 26, 29, 30, 32, 33, 70, 91, 140, 153, 154, 155, 156, 160, 167, 216, 237, 264, 267, 268, 271, 284, 292, 300, 313, 321, 326, 338, 347, 372, 402, 410, 413, 977, 981, 982, 984, 985, 995, 996, 997, 1014, 1016], "text": [8, 167, 231, 262, 326, 346, 347, 348, 349, 371, 402, 411, 582, 583, 584, 585, 1016], "reuter": 8, "routin": [8, 363, 385], "main": [8, 200], "outlier": [9, 182, 217, 229, 239, 287, 288, 303, 402, 977, 987, 991], "detect": [9, 229, 239, 258, 287, 288, 981, 987, 996], "set": [9, 75, 78, 102, 132, 165, 204, 268, 334, 352, 388, 407, 977, 1007, 1013, 1014, 1016], "first": [9, 37, 376], "second": [9, 37], "latenc": [10, 362], "helper": [10, 161, 222, 385], "function": [10, 34, 161, 190, 204, 205, 210, 222, 256, 274, 315, 337, 349, 385, 402, 407, 410, 413, 973, 977, 981, 996, 1014], "bulk": [10, 362], "atom": [10, 362], "speed": [10, 382], "variou": [10, 52, 207, 226], "regressor": [10, 113, 125, 179, 204, 310, 313, 316, 402, 410], "n_featur": 10, "throughput": [10, 362], "speci": [11, 294], "distribut": [11, 218, 221, 294, 307, 393, 978, 991], "visual": [12, 58, 106, 230, 235, 242, 256, 299, 314, 334, 402, 403, 404, 981, 1019], "stock": [12, 1012], "market": [12, 1012], "structur": [12, 39, 47, 67, 160, 324, 356, 1012], "retriev": [12, 313], "from": [12, 98, 149, 172, 309, 313, 363, 370, 374, 388, 402, 411, 977, 981, 1007, 1014, 1015, 1016, 1032], "internet": 12, "graph": [12, 313, 385, 388, 403, 411, 935], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 95, 167, 317, 319, 348, 372, 400, 402, 403, 408, 414, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 708, 709, 981, 1015, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "affin": [12, 38, 403, 979], "propag": [12, 38, 322, 323, 324, 403, 994], "embed": [12, 52, 221, 222, 233, 291, 410, 978], "2d": [12, 52, 97, 104, 171], "space": [12, 100, 404, 970, 978], "compress": [13, 53, 362], "sens": 13, "tomographi": 13, "l1": [13, 184, 191, 193, 216, 342, 412], "prior": [13, 161, 246], "lasso": [13, 184, 185, 186, 187, 188, 189, 194, 314, 646, 977], "topic": 14, "extract": [14, 74, 98, 218, 262, 348, 362, 364, 402, 411, 1016], "neg": [14, 95, 149, 195, 408, 977], "matrix": [14, 17, 160, 181, 255, 402, 403, 408, 981], "factor": [14, 95, 103, 106, 287, 288, 408, 987], "latent": [14, 85, 408], "dirichlet": [14, 408, 980], "alloc": [14, 408], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 63, 64, 67, 68, 76, 78, 83, 87, 93, 107, 118, 136, 142, 150, 162, 166, 174, 177, 193, 205, 219, 227, 244, 253, 274, 277, 280, 295, 301, 311, 320, 328, 345, 350, 357, 361, 362, 403, 404, 407, 988], "libsvm": [16, 370], "gui": 16, "wikipedia": 17, "princip": [17, 86, 101, 408, 998, 1015], "eigenvector": 17, "download": [17, 132, 165, 370], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 393, 411, 1016], "adjac": 17, "singular": [17, 408], "vector": [17, 25, 53, 167, 329, 332, 341, 347, 349, 402, 411, 996, 1014, 1015], "random": [17, 95, 116, 118, 130, 131, 172, 173, 233, 242, 267, 269, 358, 378, 385, 402, 407, 408, 410, 950, 970, 977, 993, 998], "svd": [17, 95, 408], "central": 17, "score": [17, 85, 118, 123, 138, 148, 165, 179, 251, 260, 267, 268, 337, 394, 403, 407, 976, 981, 996, 1011], "biclust": [18, 19, 20, 167, 372, 400, 402], "spectral": [19, 20, 21, 66, 221, 400, 403, 978], "co": [19, 21, 400], "algorithm": [19, 20, 21, 38, 44, 49, 55, 63, 64, 65, 221, 229, 382, 388, 975, 977, 982, 984, 985, 989, 997, 1014], "A": [20, 21, 47, 58, 63, 200, 316, 375, 382, 397, 407, 1010, 1013], "demo": [20, 21, 38, 47, 49, 55, 58, 63, 65], "gener": [20, 24, 34, 38, 47, 49, 55, 57, 63, 64, 66, 67, 78, 80, 82, 91, 92, 96, 97, 98, 119, 128, 145, 148, 152, 158, 159, 161, 167, 178, 179, 180, 184, 194, 200, 202, 235, 251, 258, 274, 288, 293, 300, 314, 322, 341, 342, 358, 372, 376, 390, 402, 408, 410, 977, 991, 1002, 1011], "sampl": [20, 38, 55, 63, 78, 96, 97, 145, 181, 213, 235, 262, 274, 293, 314, 341, 344, 370, 385, 390, 402, 403, 410, 977], "fit": [20, 26, 57, 96, 103, 119, 120, 123, 125, 126, 157, 179, 180, 181, 194, 197, 202, 206, 268, 288, 293, 310, 341, 358, 378, 389, 394, 410, 983, 987, 1007], "spectralbiclust": [20, 445], "calibr": [23, 24, 25, 26, 27, 125, 167, 200, 401, 402, 431, 432, 433, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "probabl": [24, 25, 26, 30, 134, 155, 401, 402, 410, 996], "classifi": [24, 25, 27, 31, 109, 135, 183, 241, 258, 279, 284, 313, 327, 331, 334, 347, 356, 401, 402, 410, 975, 984, 1014, 1016], "synthet": [24, 75, 179, 184, 258, 310, 381], "gaussian": [24, 25, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 245, 246, 247, 250, 251, 252, 303, 402, 413, 980, 983, 991, 993], "bay": [24, 25, 402, 983], "curv": [25, 27, 180, 235, 242, 252, 258, 263, 268, 270, 276, 401, 976], "summari": [25, 189, 348, 349, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "3": [26, 183, 319, 1016, 1030, 1031, 1036, 1038], "class": [26, 37, 112, 114, 134, 183, 209, 214, 264, 268, 270, 316, 333, 336, 390, 402, 407, 410, 411, 981, 984, 987, 995, 996, 1022, 1023], "compar": [26, 42, 44, 62, 78, 85, 118, 123, 131, 145, 176, 179, 186, 202, 207, 229, 235, 261, 269, 289, 298, 303, 309, 388], "comparison": [27, 31, 43, 64, 80, 104, 122, 144, 152, 221, 222, 235, 261, 272, 349, 403, 977], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 58, 89, 139, 140, 222, 300, 322, 323, 373, 1013], "normal": [33, 176, 200, 303, 307, 402, 865, 880, 981, 991], "ledoit": [33, 79, 405], "wolf": [33, 79, 405], "oa": [33, 78, 79, 416, 469], "discrimin": [33, 34, 402, 975], "quadrat": [34, 413, 975], "covari": [34, 77, 78, 80, 81, 82, 167, 248, 402, 405, 416, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 975, 1030, 1034, 1035, 1036, 1038], "ellipsoid": [34, 247], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 264, 308, 315, 317, 322, 348, 362, 376, 377, 403, 407, 1016], "evalu": [37, 58, 61, 81, 200, 239, 262, 265, 300, 309, 348, 389, 398, 400, 403, 407, 410, 970, 976, 981, 1016], "defin": [37, 47, 58, 67, 221, 256, 258, 259, 349, 981], "list": [37, 1004], "metric": [37, 40, 125, 265, 402, 403, 407, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 970, 979, 981, 984, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "fix": [37, 380, 1022, 1025, 1026, 1027, 1028, 1029, 1035], "ground": [37, 179], "truth": [37, 179], "label": [37, 268, 322, 323, 324, 371, 372, 403, 407, 410, 981, 992, 994], "grow": 37, "number": [37, 60, 122, 148, 273, 362, 378, 970, 971], "vari": [37, 297, 325, 403], "agglom": [39, 40, 52, 1015], "without": [39, 123, 289, 347], "differ": [40, 44, 62, 78, 161, 171, 303, 306, 309, 331, 338, 378, 388, 394, 403, 977, 1014], "hierarch": [41, 47, 62, 67, 319, 403, 1015], "dendrogram": 41, "birch": [42, 403, 436], "minibatchkmean": [42, 64, 95, 443], "bisect": [43, 403], "k": [43, 45, 48, 57, 58, 59, 61, 64, 67, 85, 284, 308, 348, 403, 407, 981, 984, 991, 1014, 1015], "mean": [43, 45, 48, 57, 58, 59, 61, 63, 64, 119, 120, 165, 172, 204, 348, 403, 981, 991, 1015], "regular": [43, 78, 127, 170, 193, 204, 205, 297, 342, 977, 985], "toi": [44, 62, 229, 373], "segment": [46, 66], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 261], "ward": [47, 67, 403, 1015], "an": [47, 59, 109, 165, 181, 189, 291, 313, 317, 388, 411, 970, 987, 1007, 1013, 1014], "color": 48, "quantiz": [48, 53, 1015], "dbscan": [49, 403, 414, 438], "onlin": [50, 207, 316, 317, 995], "dictionari": [50, 95, 98, 105, 408], "part": [50, 412], "agglomer": [51, 54, 998, 1015], "origin": [53, 100, 267, 291, 303], "encod": [53, 122, 309, 310, 319, 991, 992], "strategi": [53, 259, 298, 306, 319, 364, 402, 403, 981], "memori": [53, 362, 382, 384, 403], "footprint": 53, "v": [54, 67, 78, 79, 81, 86, 100, 148, 171, 172, 182, 192, 218, 264, 270, 274, 275, 352, 403, 410, 971, 991, 1007], "univari": [54, 85, 145, 337, 412, 971], "select": [54, 60, 72, 103, 138, 143, 145, 148, 149, 167, 188, 189, 194, 251, 254, 337, 388, 394, 398, 402, 407, 412, 970, 977, 1011, 1028], "hdbscan": [55, 319, 403, 440], "scale": [55, 170, 221, 224, 308, 342, 364, 884, 978, 987, 991, 998], "invari": [55, 264], "multi": [55, 112, 131, 171, 194, 209, 224, 238, 265, 268, 297, 355, 382, 402, 977, 978, 981, 985, 996, 997], "hyperparamet": [55, 157, 158, 262, 269, 611], "robust": [55, 80, 81, 179, 203, 206, 358, 402, 405, 970, 977], "min_cluster_s": 55, "min_sampl": 55, "dbscan_clust": 55, "induct": 56, "demonstr": [57, 265, 306, 322], "assumpt": 57, "possibl": [57, 381], "solut": 57, "final": [57, 152], "handwritten": [58, 222, 373], "our": [58, 256, 259, 376], "reduc": [58, 362], "initi": [59, 61, 249], "silhouett": [60, 403], "kmean": [60, 64, 314, 441], "empir": [61, 81, 233, 405], "linkag": [62, 403], "method": [62, 74, 85, 110, 152, 167, 221, 223, 249, 278, 390, 402, 403, 973, 987, 988, 1015], "shift": [63, 403], "meanshift": [63, 442], "establish": [64, 176], "pariti": 64, "between": [64, 272], "optic": [65, 373, 403, 444], "four": 66, "circl": 66, "two": [66, 114, 186, 240, 261], "unstructur": 67, "we": 67, "ar": [67, 316, 388], "nearest": [67, 167, 281, 282, 283, 284, 289, 292, 293, 313, 402, 971, 984, 1014], "neighbor": [67, 167, 221, 281, 282, 283, 284, 289, 293, 308, 313, 402, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 971, 978, 984, 1014, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "10": [67, 1022], "pipelin": [69, 70, 72, 73, 132, 146, 167, 170, 231, 236, 241, 262, 309, 337, 378, 388, 389, 402, 404, 412, 852, 853, 854, 855, 998, 1012, 1016, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "composit": [69, 167, 402, 404, 970], "estim": [69, 77, 78, 79, 80, 81, 82, 108, 109, 115, 122, 124, 131, 158, 165, 167, 179, 203, 206, 231, 236, 238, 239, 250, 269, 285, 286, 294, 313, 314, 315, 318, 358, 378, 388, 389, 390, 399, 402, 404, 405, 407, 409, 410, 970, 971, 975, 977, 981, 996, 1001, 1009, 1011, 1013, 1023, 1030, 1031, 1032], "column": [70, 71, 241], "transform": [70, 71, 72, 75, 85, 117, 130, 241, 315, 316, 317, 368, 388, 389, 404, 406, 407, 984, 991, 992, 993, 1015], "heterogen": [70, 404], "sourc": [70, 96, 374], "20": [70, 347, 371, 1016, 1030], "newsgroup": [70, 347, 371, 1016], "creat": [70, 101, 103, 112, 204, 230, 268, 310, 337, 338, 388], "mix": 71, "type": [71, 246, 378, 390, 403, 1007], "dimension": [72, 221, 224, 241, 290, 308, 348, 975, 978, 984, 998, 1014], "reduct": [72, 221, 225, 241, 290, 308, 348, 975, 984, 998], "gridsearchcv": [72, 138, 265, 410, 790], "illustr": [72, 156, 161, 291, 413], "cach": [72, 283, 404], "within": 72, "chain": [73, 241, 279, 389, 404], "logist": [73, 183, 190, 191, 192, 193, 215, 216, 977, 1014], "concaten": 74, "multipl": [74, 241, 265, 358, 383, 407, 970, 971, 981, 1030, 1031], "effect": [75, 169, 226, 303, 308, 325, 352, 984], "target": [75, 159, 218, 309, 310, 388, 390, 404, 406, 982, 991, 992], "shrinkag": [78, 405, 410, 975, 1014], "ledoitwolf": [78, 467], "max": [78, 981], "likelihood": [78, 179, 180, 264, 981, 986], "approach": [78, 189, 261], "mahalanobi": [80, 984], "distanc": [80, 402, 984], "relev": [80, 184, 977], "minimum": [81, 405], "determin": [81, 184, 405, 977, 981], "spars": [82, 95, 105, 170, 184, 186, 215, 313, 347, 348, 385, 405, 408, 412, 991, 993, 995], "invers": [82, 405, 993], "decomposit": [84, 85, 94, 95, 115, 167, 372, 402, 406, 408, 415, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 1015, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "variabl": [85, 169, 170, 363, 388, 402, 1014], "canon": [85, 406], "symmetr": 85, "pl": 85, "scatter": [85, 90], "multivari": [85, 971], "respons": [85, 391], "pls2": 85, "pls1": 85, "cca": [85, 476], "mode": [85, 362, 374], "b": 85, "deflat": 85, "compon": [86, 95, 101, 289, 290, 291, 408, 984, 998, 1015], "partial": [86, 169, 171, 240, 988], "least": [86, 125, 189, 195, 198, 977], "squar": [86, 125, 161, 195, 198, 204, 413, 973, 977, 979, 981], "The": [86, 89, 90, 169, 170, 200, 226, 233, 259, 268, 371, 380, 407, 411, 980, 981, 993, 1014, 1015], "one": [86, 122, 240, 977, 981], "power": [86, 200], "iri": [90, 102, 104, 121, 154, 209, 327, 331, 353, 373, 413, 1013], "represent": [90, 171, 231, 314, 362, 411, 1015], "randomli": [91, 92], "multilabel": [92, 237, 372, 385, 402, 981, 982, 1007], "prepar": [95, 111, 113, 176, 221, 270, 271, 308, 334, 380], "nmf": [95, 317, 408, 534], "independ": [95, 408, 1015], "fastica": [95, 96, 97, 415, 527], "minibatchsparsepca": [95, 408, 533], "center": [95, 991], "fa": [95, 103], "posit": [95, 316], "blind": 96, "separ": [96, 212, 335, 336], "ica": [96, 408, 1015], "point": [97, 291], "cloud": 97, "distort": 98, "displai": [98, 205, 230, 231, 241, 318, 319, 384, 1019, 1038], "patch": [98, 411], "noisi": [98, 159, 204], "them": [98, 375], "increment": [99, 364, 408], "kernelpca": [100, 529], "figur": 101, "probabilist": [103, 153, 408, 413], "lda": [104, 408, 975], "precomput": [105, 181, 313, 408], "rotat": 106, "pattern": 106, "__sklearn_is_fitted__": 109, "api": [109, 242, 243, 313, 316, 318, 363, 378, 383, 390, 394, 399, 402, 413, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032], "custom": [109, 259, 330, 411, 991, 996], "implement": [109, 186, 388, 403, 981, 984, 995, 996], "simpl": [109, 152, 236, 286, 382, 1013], "ensembl": [110, 117, 121, 167, 317, 402, 410, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "discret": [111, 128, 160, 304, 305, 991], "versu": [111, 115, 214, 266, 327, 362], "adaboost": [111, 112, 113, 114, 410], "baselin": [111, 176, 200], "samm": 111, "r": 111, "decis": [112, 113, 121, 128, 133, 167, 234, 284, 319, 327, 338, 351, 352, 353, 354, 355, 356, 388, 391, 402, 997], "tree": [112, 113, 117, 119, 120, 121, 130, 167, 172, 200, 313, 318, 319, 351, 352, 353, 354, 355, 356, 388, 402, 410, 412, 901, 902, 903, 904, 905, 906, 907, 984, 989, 997, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "train": [112, 113, 126, 128, 135, 148, 204, 230, 235, 239, 240, 242, 251, 274, 300, 309, 310, 315, 325, 334, 338, 347, 352, 353, 356, 407, 984, 994, 1007, 1014, 1016], "adaboostclassifi": [112, 547], "converg": 112, "error": [112, 116, 125, 138, 179, 204, 258, 274, 384, 393, 977, 981], "weight": [112, 179, 181, 213, 299, 314, 344, 394, 410, 411], "weak": [112, 410], "learner": [112, 410], "decisiontre": 113, "singl": [115, 132, 218, 230, 372, 403, 971], "bag": [115, 124, 347, 410, 411, 970, 1016], "bia": 115, "varianc": [115, 198, 412, 981, 991], "oob": 116, "forest": [116, 118, 119, 120, 131, 172, 173, 239, 242, 371, 410, 987], "histogram": [118, 314, 316, 318, 409, 410], "import": [119, 120, 126, 149, 172, 173, 234, 308, 313, 410, 989], "decreas": [119, 120, 172], "impur": [119, 120, 172, 352, 989], "permut": [119, 172, 173, 267, 313, 407, 989], "pixel": 120, "parallel": [120, 363, 374, 382, 403, 410, 947, 948, 970], "mdi": [120, 172], "surfac": [121, 234, 353], "categor": [122, 309, 315, 388, 410, 983, 991], "am": [122, 239], "hous": [122, 239, 371], "drop": 122, "hot": 122, "ordin": 122, "nativ": [122, 309, 313, 315], "limit": [122, 152, 362, 393, 397, 411], "split": [122, 315, 358, 407], "earli": [123, 208], "stop": [123, 208, 411, 995], "interv": 125, "quantil": [125, 202, 316, 317, 977], "confid": 125, "tune": [125, 259, 262, 315, 970, 1016], "hyper": [125, 259, 315, 402, 970], "preprocess": [126, 132, 167, 170, 171, 239, 241, 302, 319, 349, 358, 388, 402, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 991, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "devianc": [126, 981], "isolationforest": [128, 557], "boundari": [128, 133, 284, 327, 338], "path": [128, 187, 193, 205, 356, 393], "length": [128, 393], "monoton": [129, 410], "constraint": [129, 318, 403, 410], "name": [129, 316, 388, 404], "specifi": [129, 388, 970], "hash": [130, 385, 411], "total": [130, 352, 410], "output": [131, 238, 303, 318, 355, 997, 1014], "meta": [131, 315, 410], "combin": [132, 230], "predictor": 132, "stack": [132, 313, 410], "make": [132, 135, 165, 376, 380, 391], "measur": [132, 264, 403, 981], "votingclassifi": [133, 134, 410, 563], "calcul": 134, "individu": [135, 171, 315, 988], "vote": [135, 410], "tutori": [137, 167, 1000, 1008, 1010, 1016], "exercis": [137, 138, 139, 140, 141, 167, 1011, 1014, 1016], "diabet": [138, 240, 373, 1014], "appli": 138, "line": [138, 155], "show": [138, 270], "std": [138, 179], "bonu": 138, "how": [138, 358, 376, 382, 388], "much": 138, "can": [138, 388], "you": [138, 388], "trust": 138, "alpha": [138, 352], "f": [144, 981], "mutual": [144, 403], "inform": [144, 165, 188, 189, 380, 403, 970, 977], "anova": [146, 337], "recurs": [147, 148, 412], "elimin": [147, 148, 412, 970], "sequenti": [149, 412], "coeffici": [149, 170, 179, 204, 205, 403, 981], "toler": 149, "valu": [149, 163, 164, 165, 167, 226, 236, 313, 319, 356, 376, 408, 410, 971, 981, 989, 991, 997], "process": [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 170, 358, 391, 402, 413, 980, 1010], "machin": [151, 167, 169, 170, 171, 300, 329, 384, 402, 986, 996, 1007, 1014], "ridg": [152, 180, 182, 198, 204, 205, 235, 310, 402, 666, 974, 977], "gpc": [153, 154, 155, 156, 413], "iso": [155, 268], "xor": [156, 413], "forecast": 157, "co2": 157, "level": [157, 158, 363, 403, 410], "mona": 157, "loa": 157, "gpr": [157, 158, 413], "build": [157, 165, 374, 376, 384, 404, 1016], "design": 157, "proper": 157, "extrapol": 157, "interpret": [157, 170, 204, 239, 408, 410], "abil": 158, "nois": [158, 159, 180], "optimis": 158, "basic": [159, 218, 389, 405, 413], "introductori": 159, "free": 159, "sequenc": [160, 388], "similar": [160, 979, 981], "under": [160, 388, 1018, 1038], "posterior": 161, "cookbook": 161, "radial": [161, 413, 973, 1014], "ration": [161, 413], "quadradt": 161, "exp": [161, 413], "sine": [161, 252, 413], "dot": [161, 413], "product": [161, 218, 384, 388, 413, 615], "mat\u00e9rn": [161, 413], "miss": [163, 164, 165, 167, 313, 319, 410, 971, 991, 997], "imput": [163, 164, 165, 167, 313, 402, 621, 622, 623, 624, 971, 991, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "variant": 164, "iterativeimput": [164, 621, 971], "befor": [165, 380], "replac": 165, "0": [165, 313, 314, 315, 316, 997, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "knn": [165, 313], "iter": [165, 273, 407, 970], "releas": [167, 312, 313, 314, 315, 316, 317, 318, 319, 380, 393, 1020, 1028], "highlight": [167, 312, 313, 314, 315, 316, 317, 318, 319, 1022, 1025, 1026, 1029, 1030], "mixtur": [167, 245, 246, 247, 250, 251, 252, 402, 788, 789, 980, 1030, 1031, 1035, 1036, 1038], "inspect": [167, 168, 392, 402, 625, 626, 627, 628, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "approxim": [167, 175, 176, 234, 281, 315, 402, 405, 973], "manifold": [167, 220, 221, 222, 223, 372, 402, 682, 683, 684, 685, 686, 687, 688, 689, 690, 978, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "miscellan": [167, 228, 402, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "multioutput": [167, 278, 402, 824, 825, 826, 827, 982, 1030, 1031, 1032, 1033, 1034, 1037, 1038], "neural": [167, 171, 296, 402, 985, 986], "network": [167, 171, 296, 402, 985, 986], "semi": [167, 321, 322, 326, 327, 402, 994], "supervis": [167, 321, 322, 326, 327, 402, 985, 994, 1003, 1014], "work": [167, 346, 362, 375, 388, 1016], "failur": [169, 970], "infer": 169, "causal": [169, 170], "simul": 169, "hourli": 169, "wage": [169, 170], "descript": 169, "incom": 169, "fulli": 169, "observ": [169, 1014, 1015], "lesson": [169, 170], "common": [170, 358, 390, 399, 411, 981], "pitfal": [170, 358], "matter": 170, "check": [170, 263, 313, 384, 399, 1030, 1031, 1032], "problem": [170, 408, 996, 997, 1007, 1012, 1014, 1015], "correl": [170, 173, 406, 981, 989], "numer": [170, 363, 378], "wrong": [170, 388], "depend": [171, 236, 240, 374, 988, 1022, 1035, 1036], "condit": [171, 315, 988], "expect": [171, 315, 988], "preprocessor": 171, "1": [171, 197, 316, 317, 318, 319, 388, 1016, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "wai": [171, 376, 388], "layer": [171, 297, 985], "perceptron": [171, 297, 662, 977, 985], "ic": [171, 988], "pdp": 171, "3d": 171, "accuraci": [172, 234, 347, 352, 981], "": [172, 308, 310, 379, 388, 410, 981], "multicollinear": 173, "breast": [173, 373], "cancer": [173, 373], "handl": [173, 971], "scalabl": [176, 263, 314], "partit": 176, "bayesian": [179, 180, 246, 261, 402, 977, 980], "recov": 179, "true": [179, 180], "margin": [179, 180, 212, 335, 339], "log": [179, 180, 981], "expans": 179, "sinusoid": 180, "cubic": 180, "l": 180, "elast": [181, 185, 977], "net": [181, 185, 977], "gram": 181, "huberregressor": [182, 643], "strong": 182, "signal": [184, 408, 1015], "automat": [184, 389, 977], "ard": [184, 977], "elasticnet": [184, 314, 640], "dens": 186, "lar": [187, 644, 977], "criteria": [188, 388, 977, 997], "aic": 189, "bic": [189, 251], "criterion": [189, 315, 970, 995], "coordin": 189, "descent": [189, 208, 214, 977, 995], "angl": [189, 977], "penalti": [191, 211, 342], "sparsiti": [191, 197, 411, 1014], "multinomi": [192, 216, 977, 983], "One": [192, 214, 270, 316, 333, 407, 987, 995], "rest": [192, 270], "joint": 194, "task": [194, 402, 977, 1001], "seri": [194, 407], "onli": [197, 217, 1033, 1035], "2": [197, 318, 1016, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "ordinari": [198, 977], "orthogon": [199, 977], "match": [199, 977], "pursuit": [199, 977], "poisson": [200, 218, 314, 315, 981], "loss": [200, 210, 314, 317, 319, 410, 981], "french": 200, "motor": 200, "third": [200, 236, 393], "parti": [200, 236, 393], "liabil": 200, "claim": [200, 218], "constant": [200, 971], "rank": [200, 402, 981], "takeawai": 200, "interpol": 201, "quantileregressor": [202, 664], "linearregress": [202, 651], "ransac": [203, 977], "l2": [204, 342], "purpos": [204, 349, 1002], "thi": [204, 1002], "solver": [207, 408, 977], "stochast": [208, 214, 221, 298, 977, 978, 986, 995], "sgd": [209, 210, 211, 212, 213, 977, 995], "convex": 210, "maximum": [212, 335, 986], "hyperplan": [212, 335, 336], "multiclass": [215, 270, 313, 385, 401, 402, 821, 822, 823, 943, 944, 945, 981, 982, 1007, 1014, 1031, 1034, 1035, 1036], "20newgroup": 215, "mnist": [216, 299], "theil": [217, 977], "sen": [217, 977], "y": [217, 388, 406, 992, 994], "direct": 217, "x": 217, "tweedi": [218, 981], "insur": 218, "definit": [218, 300, 988, 1032], "frequenc": [218, 1016], "sever": [218, 223], "gamma": [218, 319, 981], "pure": 218, "premium": 218, "tweedieregressor": [218, 674], "local": [221, 222, 287, 288, 978, 987], "isomap": [221, 222, 682, 978], "multidimension": 221, "t": [221, 226, 978], "techniqu": 222, "sphere": 223, "swiss": 225, "roll": [225, 378], "And": [225, 391], "hole": 225, "sne": [226, 978], "perplex": 226, "shape": [226, 1007], "anomali": 229, "object": [230, 256, 378, 388, 970, 981, 1013, 1019], "confusionmatrixdisplai": [230, 691], "roccurvedisplai": [230, 696], "precisionrecalldisplai": [230, 694], "compact": 231, "rich": [231, 314], "html": 231, "isoton": [232, 401, 402, 629, 630, 631, 972, 1030, 1031, 1032, 1034, 1036, 1037], "johnson": [233, 993], "lindenstrauss": [233, 993], "bound": 233, "theoret": [233, 977], "explicit": 234, "map": [234, 307, 991], "rbf": [234, 333, 334, 338, 413, 616, 979, 996, 1014], "python": [234, 363, 382, 397, 1000, 1001, 1028], "packag": [234, 1001, 1034], "svr": [235, 341, 899, 996], "construct": 235, "look": [235, 341], "metadata": [236, 319, 347, 390, 394], "rout": [236, 319, 390, 394], "router": 236, "consum": 236, "deprec": [236, 376, 402, 920, 1032], "default": [236, 288, 376], "chang": [236, 376, 391, 1005, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "complet": [238, 403], "kddcup99": 239, "sa": 239, "covertyp": [239, 371], "cardiotocographi": 239, "ablat": 239, "studi": 239, "advanc": [240, 394], "With": [240, 1016], "togeth": [240, 270, 1012, 1015], "grid": [241, 259, 261, 269, 272, 970, 1011, 1016], "search": [241, 259, 261, 269, 272, 389, 970, 1011, 1016], "over": 241, "roc": [242, 258, 270, 271, 313, 981], "svc": [242, 338, 342, 898, 996], "introduc": 243, "set_output": [243, 318, 378], "concentr": 246, "variat": [246, 980], "gmm": [248, 249], "densiti": [250, 285, 286, 294, 319, 409, 927, 996], "best": [251, 377, 388], "confus": [255, 403, 981], "behavior": 256, "indic": 256, "mani": [256, 318, 363, 388], "cv": [256, 358], "tradeoff": [258, 981], "det": [258, 981], "refit": [259, 1007], "balanc": [260, 981], "statist": [261, 1001, 1010, 1013], "frequentist": 261, "practic": [261, 358, 377, 381, 977, 978, 985, 995, 996, 997], "equival": 261, "all": [261, 270, 317, 393, 1012, 1037, 1038], "take": 261, "home": 261, "messag": 261, "ratio": [264, 981], "pre": [264, 358, 389], "post": [264, 352], "respect": 264, "preval": 264, "cross_val_scor": [265, 815], "nest": [266, 404, 1011], "see": [266, 404], "also": [266, 380, 404], "signific": 267, "precis": [268, 981], "recal": [268, 981], "In": 268, "binari": [268, 977, 981], "averag": [268, 270, 403, 410, 981], "micro": [268, 270], "each": [268, 273, 347, 970], "f1": 268, "receiv": [270, 271, 981], "oper": [270, 271, 375, 385, 413, 981], "characterist": [270, 271, 981], "specif": [270, 374, 378, 397, 970, 1001, 1002], "ovr": 270, "macro": 270, "ovo": 270, "success": [272, 273, 315, 970], "halv": [272, 273, 315, 970], "candid": [273, 970], "amount": [273, 970], "resourc": [273, 363, 376, 970, 1000, 1004], "underfit": 275, "overfit": 275, "tsne": [281, 686], "1d": 286, "novelti": [287, 987, 996], "lof": [287, 288], "neighborhood": [289, 290, 291, 984], "centroid": [292, 984], "mlpclassifi": [298, 850], "mlp": 299, "restrict": [300, 986], "boltzmann": [300, 986], "scaler": 303, "standardscal": [303, 873], "minmaxscal": [303, 863], "maxabsscal": [303, 862], "robustscal": [303, 871], "powertransform": [303, 869], "quantiletransform": [303, 870], "uniform": [303, 991], "kbinsdiscret": [304, 306, 858], "continu": [304, 376], "rescal": 308, "other": [309, 370, 388, 410, 1001, 1022], "intern": 310, "22": [313, 1032], "new": [313, 315, 316, 318, 319, 376, 388, 1000, 1022, 1023, 1025, 1026, 1027, 1028, 1029], "prune": [313, 352, 997], "datafram": [313, 388], "compat": [313, 376, 378, 399], "auc": [313, 700], "now": [313, 316, 1032], "23": [314, 1033], "stabil": 314, "improv": [314, 315, 316, 317, 318, 375, 376, 1025, 1026], "24": [315, 1034], "histgradientboost": 315, "self": [315, 325, 994], "sequentialfeatureselector": [315, 596], "polynomialcountsketch": [315, 634], "decisiontreeregressor": [315, 902], "keyword": [316, 1033, 1035], "argument": [316, 378, 1033, 1035], "more": [316, 388, 397, 985], "flexibl": [316, 971], "stabl": 316, "histgradientboostingregressor": [317, 556], "get_feature_names_out": 317, "avail": [317, 970, 1019], "group": [317, 319, 407, 1005, 1015], "infrequ": [317, 319, 991], "onehotencod": [317, 866], "minibatchnmf": [317, 532], "version": [317, 370, 374, 380, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "bisectingkmean": [317, 437], "divid": 317, "panda": [318, 381, 388], "enhanc": [318, 391, 1001, 1025, 1026, 1027, 1028, 1029], "faster": [318, 410], "parser": [318, 370], "fetch_openml": [318, 490], "experiment": [318, 380, 399, 402, 573, 574, 1038], "arrai": [318, 356, 385, 399, 1007], "lineardiscriminantanalysi": [318, 543], "effici": [318, 385], "targetencod": [319, 874], "model_select": [319, 402, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "validationcurvedisplai": [319, 812], "ordinalencod": [319, 867], "most": 322, "uncertain": 322, "activ": 323, "threshold": 325, "linearsvc": [332, 893], "unbalanc": [336, 996], "some": 337, "plai": 337, "percentil": 337, "sigmoid": [338, 401, 979, 1014], "case": [342, 977, 981], "tie": 343, "break": 343, "word": [347, 411, 1016], "strip": 347, "quantifi": [348, 981], "qualiti": [348, 981], "tfidfvector": [348, 349, 585], "lsa": 348, "top": [348, 981], "term": [348, 390, 411], "per": 348, "hashingvector": [348, 583], "featurehash": [349, 576], "dictvector": [349, 575], "special": 349, "cost": [352, 997], "leav": [352, 407, 977], "understand": 356, "what": [356, 388], "i": [356, 381, 388, 407, 1005], "here": [356, 1016], "recommend": [358, 371, 1001], "inconsist": 358, "leakag": 358, "dure": 358, "avoid": [358, 404], "control": [358, 410, 985], "none": 358, "randomst": 358, "instanc": [358, 364], "repeat": [358, 404, 407], "call": [358, 375], "splitter": [358, 402], "subtleti": 358, "get": [358, 388, 389], "reproduc": [358, 381], "across": 358, "execut": [358, 388], "configur": [362, 363], "overhead": 362, "input": [362, 378, 399, 403, 991], "tip": [362, 377, 384, 970, 978, 985, 995, 996, 997], "trick": [362, 382, 384, 411], "algebra": [362, 385], "librari": [362, 363], "reshap": [362, 1013], "link": [362, 370, 981], "manag": [363, 393], "higher": 363, "joblib": [363, 382], "lower": 363, "openmp": [363, 377], "numpi": [363, 381], "scipi": 363, "oversubscript": 363, "spawn": 363, "too": 363, "thread": 363, "switch": 363, "environ": 363, "sklearn_assume_finit": 363, "sklearn_working_memori": 363, "sklearn_se": 363, "sklearn_tests_global_random_se": 363, "sklearn_skip_network_test": 363, "sklearn_run_float32_test": 363, "sklearn_enable_debug_cython_direct": 363, "sklearn_build_enable_debug_symbol": 363, "sklearn_pairwise_dist_chunk_s": 363, "computation": 364, "bigger": 364, "stream": 364, "note": [364, 407, 977], "tabl": [365, 388], "Of": 365, "content": [365, 388, 1007], "util": [369, 381, 385, 402, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 1016, 1019, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "svmlight": 370, "format": [370, 381, 388, 397, 982], "org": [370, 380, 1005], "repositori": 370, "arff": 370, "extern": [370, 1000, 1007, 1022, 1031], "olivetti": 371, "consider": [371, 977], "wild": 371, "rcv1": 371, "kddcup": 371, "99": 371, "california": 371, "plant": 373, "linnerrud": 373, "wine": 373, "wisconsin": 373, "diagnost": 373, "instal": [374, 393], "nightli": 374, "runtim": 374, "tag": [374, 376, 378], "edit": 374, "platform": [374, 384, 393], "instruct": 374, "window": [374, 393], "maco": 374, "compil": [374, 382], "conda": 374, "forg": 374, "homebrew": 374, "linux": [374, 388, 393], "system": 374, "freebsd": 374, "altern": [374, 970], "bug": [375, 376, 380, 1004, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "triag": 375, "issu": [375, 376], "curat": 375, "fruit": 375, "discuss": 375, "pr": [375, 380], "help": [375, 376, 388], "review": [375, 376, 384, 1016], "member": 375, "close": 375, "tough": 375, "typic": 375, "workflow": [375, 376], "contribut": [376, 388], "submit": 376, "report": [376, 381, 981], "request": [376, 380, 384, 388], "good": [376, 381], "video": [376, 1000], "git": 376, "pull": [376, 380, 384, 388], "checklist": [376, 380], "integr": 376, "ci": 376, "stall": 376, "unclaim": 376, "easi": 376, "want": 376, "github": 376, "action": 376, "coverag": [376, 384, 981], "write": 376, "matplotlib": 376, "monitor": 376, "tracker": [376, 1004], "maintain": [376, 380, 391, 397], "backward": 376, "guidelin": [376, 378], "read": 376, "exist": 376, "cython": [377, 382, 384], "convent": [377, 1007], "knowledg": 377, "eas": 377, "instanti": 378, "attribut": [378, 390, 970], "option": 378, "univers": 378, "your": [378, 381, 981], "own": [378, 388, 981], "templat": 378, "baseestim": [378, 417], "mixin": 378, "get_param": 378, "set_param": 378, "init": 378, "clone": [378, 428], "check_is_fit": [378, 965], "assert": 378, "guid": [379, 1018], "major": [380, 410, 1030, 1031], "minor": 380, "known": [380, 1030, 1031], "merg": 380, "web": 380, "site": 380, "craft": 381, "minim": [381, 997, 1035, 1036], "provid": 381, "fail": 381, "comment": 381, "boil": 381, "down": 381, "script": 381, "someth": 381, "small": 381, "do": [381, 388], "NOT": 381, "unless": 381, "extrem": [381, 410], "necessari": 381, "markdown": 381, "make_regress": [381, 518], "make_classif": [381, 509], "make_blob": [381, 506], "optim": [382, 402, 970], "c": 382, "profil": 382, "usag": [382, 388, 394, 399, 401, 404, 410, 411, 977], "extens": [382, 393], "yep": 382, "gperftool": 382, "debugg": 382, "gdb": 382, "gprof": 382, "valgrind": [382, 384], "callgrind": 382, "kcachegrind": 382, "warm": 382, "restart": 382, "overview": [383, 403, 987], "ax": 383, "saniti": 384, "preserv": 384, "fold": [384, 407], "unfold": 384, "outdat": 384, "diff": 384, "remot": 384, "track": [384, 404], "branch": 384, "pytest": 384, "alias": 384, "flag": 384, "standard": [384, 991], "repli": 384, "debug": 384, "arm64": 384, "x86_64": 384, "tool": [385, 388], "matric": [385, 991], "warn": [385, 402], "except": [385, 402, 565, 566, 567, 568, 569, 570, 571, 572, 1034, 1038], "dispatch": 386, "frequent": 388, "ask": 388, "question": [388, 1004], "lot": 388, "peopl": [388, 1022, 1023, 1024, 1025], "pronounc": 388, "why": [388, 410], "pypi": 388, "deep": 388, "reinforc": 388, "Will": 388, "add": 388, "graphic": [388, 986], "did": 388, "remov": [388, 412, 991, 1022], "hmm": 388, "gpu": 388, "need": 388, "doe": 388, "directli": 388, "plan": 388, "so": 388, "my": 388, "ani": 388, "attent": 388, "inclus": 388, "includ": 388, "should": 388, "save": 388, "export": 388, "deploi": 388, "bunch": [388, 908], "usabl": 388, "deal": 388, "string": 388, "sometim": 388, "crash": 388, "freez": 388, "n_job": 388, "osx": [388, 393], "job": 388, "than": 388, "random_st": 388, "entir": 388, "start": 389, "processor": 389, "next": 389, "glossari": 390, "element": 390, "concept": [390, 977], "properti": 390, "role": 391, "technic": 391, "committe": 391, "propos": 391, "slep": 391, "latest": 393, "alpin": 393, "arch": 393, "debian": 393, "ubuntu": 393, "fedora": 393, "netbsd": 393, "macport": 393, "mac": 393, "anaconda": 393, "enthought": 393, "deploy": 393, "intel": 393, "winpython": 393, "troubleshoot": 393, "caus": 393, "unweight": 394, "interfac": [394, 402], "persist": 397, "serial": 397, "secur": 397, "skop": 397, "interoper": [397, 1001], "pytorch": 399, "mathemat": [400, 403, 410, 973, 975, 977, 984, 985, 988, 995, 996, 997], "formul": [400, 403, 410, 975, 977, 984, 985, 995, 996, 997], "sklearn": [402, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "compos": [402, 458, 459, 460, 461, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "cross_decomposit": [402, 476, 477, 478, 479, 1032, 1034, 1036, 1038], "loader": 402, "discriminant_analysi": [402, 543, 544, 1030, 1031, 1034, 1036, 1037, 1038], "dummi": [402, 545, 546, 981, 1030, 1031, 1032, 1035, 1036], "feature_extract": [402, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "feature_select": [402, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "gaussian_process": [402, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "kernel_approxim": [402, 632, 633, 634, 635, 636, 1032, 1034, 1035, 1036, 1037, 1038], "kernel_ridg": [402, 637], "linear_model": [402, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "classic": 402, "glm": 402, "naive_bay": [402, 828, 829, 830, 831, 832, 1030, 1032, 1033, 1034, 1035, 1037, 1038], "neural_network": [402, 849, 850, 851, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "random_project": [402, 885, 886, 887, 1036], "semi_supervis": [402, 888, 889, 890, 1032, 1033, 1034, 1038], "recent": 402, "low": [403, 410, 412], "mini": [403, 408], "batch": [403, 408], "assign": 403, "featureagglomer": [403, 439], "hierarchi": 403, "ad": 403, "connect": [403, 411, 1015], "consumpt": 403, "larg": [403, 411], "size": [403, 410], "reachabl": 403, "rand": 403, "index": [403, 936], "advantag": 403, "drawback": 403, "homogen": 403, "fowlk": 403, "mallow": 403, "calinski": 403, "harabasz": 403, "davi": 403, "bouldin": 403, "conting": 403, "pair": 403, "access": 404, "featureunion": [404, 852], "columntransform": [404, 458], "shrunk": 405, "oracl": 405, "plscanon": [406, 477], "plssvd": [406, 479], "plsregress": [406, 478], "held": 407, "cross_valid": [407, 816], "obtain": 407, "d": [407, 984], "loo": 407, "p": [407, 1005], "lpo": 407, "shuffl": [407, 955], "stratif": 407, "stratifi": 407, "stratifiedgroupkfold": [407, 808], "predefin": [407, 981], "decompos": 408, "exact": 408, "sparsepca": [408, 537], "kpca": 408, "choic": [408, 984], "truncat": 408, "semant": 408, "nnmf": 408, "frobeniu": 408, "norm": 408, "beta": 408, "diverg": 408, "gradientboostingclassifi": [410, 553], "histgradientboostingclassifi": [410, 555], "gradientboostingregressor": [410, 554], "addit": [410, 973], "rate": 410, "subsampl": 410, "hard": 410, "soft": 410, "dict": 411, "tf": 411, "idf": 411, "decod": 411, "applic": [411, 1015], "corpu": 411, "selectfrommodel": [412, 591], "biclustermixin": 418, "classnameprefixfeaturesoutmixin": 419, "classifiermixin": 420, "clustermixin": 421, "densitymixin": 422, "metaestimatormixin": 423, "onetoonefeaturemixin": 424, "outliermixin": 425, "regressormixin": 426, "transformermixin": 427, "is_classifi": 429, "is_regressor": 430, "calibratedclassifiercv": 431, "calibrationdisplai": 432, "from_estim": [432, 625, 626, 691, 692, 694, 695, 696, 796, 812], "calibration_curv": 433, "affinitypropag": 434, "agglomerativeclust": 435, "spectralclust": 446, "spectralcoclust": 447, "affinity_propag": 448, "cluster_optics_dbscan": 449, "cluster_optics_xi": 450, "compute_optics_graph": 451, "estimate_bandwidth": 452, "k_mean": 453, "kmeans_plusplu": 454, "mean_shift": 455, "spectral_clust": 456, "ward_tre": 457, "transformedtargetregressor": 459, "make_column_selector": 460, "make_column_transform": 461, "config_context": 462, "ellipticenvelop": 463, "empiricalcovari": 464, "graphicallasso": 465, "graphicallassocv": 466, "mincovdet": 468, "shrunkcovari": 470, "empirical_covari": 471, "graphical_lasso": 472, "ledoit_wolf": 473, "ledoit_wolf_shrinkag": 474, "shrunk_covari": 475, "clear_data_hom": 480, "dump_svmlight_fil": 481, "fetch_20newsgroup": 482, "fetch_20newsgroups_vector": 483, "fetch_california_h": 484, "fetch_covtyp": 485, "fetch_kddcup99": 486, "fetch_lfw_pair": 487, "fetch_lfw_peopl": 488, "fetch_olivetti_fac": 489, "fetch_rcv1": 491, "fetch_species_distribut": 492, "get_data_hom": 493, "load_breast_canc": 494, "load_diabet": 495, "load_digit": 496, "load_fil": 497, "load_iri": 498, "load_linnerud": 499, "load_sample_imag": [500, 501], "load_svmlight_fil": [502, 503], "load_win": 504, "make_biclust": 505, "make_checkerboard": 507, "make_circl": 508, "make_friedman1": 510, "make_friedman2": 511, "make_friedman3": 512, "make_gaussian_quantil": 513, "make_hastie_10_2": 514, "make_low_rank_matrix": 515, "make_moon": 516, "make_multilabel_classif": 517, "make_s_curv": 519, "make_sparse_coded_sign": 520, "make_sparse_spd_matrix": 521, "make_sparse_uncorrel": 522, "make_spd_matrix": 523, "make_swiss_rol": 524, "dictionarylearn": 525, "factoranalysi": 526, "incrementalpca": 528, "latentdirichletalloc": 530, "minibatchdictionarylearn": 531, "sparsecod": 536, "truncatedsvd": 538, "dict_learn": 539, "dict_learning_onlin": 540, "non_negative_factor": 541, "sparse_encod": 542, "quadraticdiscriminantanalysi": 544, "dummyclassifi": 545, "dummyregressor": 546, "adaboostregressor": 548, "baggingclassifi": 549, "baggingregressor": 550, "extratreesclassifi": 551, "extratreesregressor": 552, "randomforestclassifi": 558, "randomforestregressor": 559, "randomtreesembed": 560, "stackingclassifi": 561, "stackingregressor": 562, "votingregressor": 564, "convergencewarn": 565, "dataconversionwarn": 566, "datadimensionalitywarn": 567, "efficiencywarn": 568, "fitfailedwarn": 569, "inconsistentversionwarn": 570, "notfittederror": 571, "undefinedmetricwarn": 572, "enable_halving_search_cv": 573, "enable_iterative_imput": 574, "patchextractor": 577, "extract_patches_2d": 578, "grid_to_graph": 579, "img_to_graph": 580, "reconstruct_from_patches_2d": 581, "countvector": 582, "tfidftransform": 584, "genericunivariateselect": 586, "rfe": 587, "rfecv": 588, "selectfdr": 589, "selectfpr": 590, "selectfw": 592, "selectkbest": 593, "selectpercentil": 594, "selectormixin": 595, "variancethreshold": 597, "chi2": 598, "f_classif": 599, "f_regress": 600, "mutual_info_classif": 601, "mutual_info_regress": 602, "r_regress": 603, "gaussianprocessclassifi": 604, "gaussianprocessregressor": 605, "compoundkernel": 606, "constantkernel": 607, "dotproduct": 608, "expsinesquar": 609, "exponenti": 610, "matern": 613, "pairwisekernel": 614, "rationalquadrat": 617, "sum": 618, "whitekernel": 619, "get_config": 620, "knnimput": 622, "missingind": 623, "simpleimput": 624, "decisionboundarydisplai": 625, "partialdependencedisplai": 626, "partial_depend": 627, "permutation_import": 628, "isotonicregress": 629, "check_increas": 630, "isotonic_regress": 631, "additivechi2sampl": 632, "nystroem": [633, 973], "rbfsampler": 635, "skewedchi2sampl": 636, "kernelridg": 637, "ardregress": 638, "bayesianridg": 639, "elasticnetcv": 641, "gammaregressor": 642, "larscv": 645, "lassocv": 647, "lassolar": 648, "lassolarscv": 649, "lassolars": 650, "logisticregress": 652, "logisticregressioncv": 653, "multitaskelasticnet": 654, "multitaskelasticnetcv": 655, "multitasklasso": 656, "multitasklassocv": 657, "orthogonalmatchingpursuit": 658, "orthogonalmatchingpursuitcv": 659, "passiveaggressiveclassifi": 660, "passiveaggressiveregressor": 661, "poissonregressor": 663, "ransacregressor": 665, "ridgecv": 667, "ridgeclassifi": 668, "ridgeclassifiercv": 669, "sgdclassifi": 670, "sgdoneclasssvm": 671, "sgdregressor": 672, "theilsenregressor": 673, "enet_path": 675, "lars_path": 676, "lars_path_gram": 677, "lasso_path": 678, "orthogonal_mp": 679, "orthogonal_mp_gram": 680, "ridge_regress": 681, "locallylinearembed": 683, "md": [684, 978], "spectralembed": 685, "locally_linear_embed": 687, "smacof": 688, "spectral_embed": 689, "trustworthi": 690, "from_predict": [691, 694, 695, 696], "detcurvedisplai": 692, "distancemetr": 693, "predictionerrordisplai": 695, "accuracy_scor": 697, "adjusted_mutual_info_scor": 698, "adjusted_rand_scor": 699, "average_precision_scor": 701, "balanced_accuracy_scor": 702, "brier_score_loss": 703, "calinski_harabasz_scor": 704, "check_scor": 705, "class_likelihood_ratio": 706, "classification_report": 707, "contingency_matrix": 708, "pair_confusion_matrix": 709, "cohen_kappa_scor": 710, "completeness_scor": 711, "confusion_matrix": 712, "consensus_scor": 713, "coverage_error": 714, "d2_absolute_error_scor": 715, "d2_pinball_scor": 716, "d2_tweedie_scor": 717, "davies_bouldin_scor": 718, "dcg_score": 719, "det_curv": 720, "explained_variance_scor": 721, "f1_score": 722, "fbeta_scor": 723, "fowlkes_mallows_scor": 724, "get_scor": 725, "get_scorer_nam": 726, "hamming_loss": 727, "hinge_loss": 728, "homogeneity_completeness_v_measur": 729, "homogeneity_scor": 730, "jaccard_scor": 731, "label_ranking_average_precision_scor": 732, "label_ranking_loss": 733, "log_loss": 734, "make_scor": 735, "matthews_corrcoef": 736, "max_error": 737, "mean_absolute_error": 738, "mean_absolute_percentage_error": 739, "mean_gamma_devi": 740, "mean_pinball_loss": 741, "mean_poisson_devi": 742, "mean_squared_error": 743, "mean_squared_log_error": 744, "mean_tweedie_devi": 745, "median_absolute_error": 746, "multilabel_confusion_matrix": 747, "mutual_info_scor": 748, "ndcg_score": 749, "normalized_mutual_info_scor": 750, "additive_chi2_kernel": 751, "chi2_kernel": 752, "cosine_dist": 753, "cosine_similar": 754, "distance_metr": 755, "euclidean_dist": 756, "haversine_dist": 757, "kernel_metr": 758, "laplacian_kernel": 759, "linear_kernel": 760, "manhattan_dist": 761, "nan_euclidean_dist": 762, "paired_cosine_dist": 763, "paired_dist": 764, "paired_euclidean_dist": 765, "paired_manhattan_dist": 766, "pairwise_kernel": 767, "polynomial_kernel": 768, "rbf_kernel": 769, "sigmoid_kernel": 770, "pairwise_dist": 771, "pairwise_distances_argmin": 772, "pairwise_distances_argmin_min": 773, "pairwise_distances_chunk": 774, "precision_recall_curv": 775, "precision_recall_fscore_support": 776, "precision_scor": 777, "r2_score": 778, "rand_scor": 779, "recall_scor": 780, "roc_auc_scor": 781, "roc_curv": 782, "silhouette_sampl": 783, "silhouette_scor": 784, "top_k_accuracy_scor": 785, "v_measure_scor": 786, "zero_one_loss": 787, "bayesiangaussianmixtur": 788, "gaussianmixtur": 789, "groupkfold": 791, "groupshufflesplit": 792, "halvinggridsearchcv": 793, "halvingrandomsearchcv": 794, "kfold": 795, "learningcurvedisplai": 796, "leaveonegroupout": 797, "leaveoneout": 798, "leavepgroupsout": 799, "leavepout": 800, "parametergrid": 801, "parametersampl": 802, "predefinedsplit": 803, "randomizedsearchcv": 804, "repeatedkfold": 805, "repeatedstratifiedkfold": 806, "shufflesplit": 807, "stratifiedkfold": 809, "stratifiedshufflesplit": 810, "timeseriessplit": 811, "check_cv": 813, "cross_val_predict": 814, "learning_curv": 817, "permutation_test_scor": 818, "train_test_split": 819, "validation_curv": 820, "onevsoneclassifi": [821, 982], "onevsrestclassifi": [822, 982], "outputcodeclassifi": [823, 982], "classifierchain": [824, 982], "multioutputclassifi": [825, 982], "multioutputregressor": [826, 982], "regressorchain": [827, 982], "bernoullinb": 828, "categoricalnb": 829, "complementnb": 830, "gaussiannb": 831, "multinomialnb": 832, "balltre": [833, 984], "kdtree": [834, 984], "kneighborsclassifi": 835, "kneighborsregressor": 836, "kneighborstransform": 837, "kerneldens": 838, "localoutlierfactor": 839, "nearestcentroid": 840, "nearestneighbor": 841, "neighborhoodcomponentsanalysi": 842, "radiusneighborsclassifi": 843, "radiusneighborsregressor": 844, "radiusneighborstransform": 845, "kneighbors_graph": 846, "radius_neighbors_graph": 847, "sort_graph_by_row_valu": 848, "bernoullirbm": 849, "mlpregressor": 851, "make_pipelin": 854, "make_union": 855, "binar": [856, 876, 991, 992], "functiontransform": 857, "kernelcenter": 859, "labelbinar": [860, 992], "labelencod": 861, "multilabelbinar": [864, 992], "polynomialfeatur": 868, "splinetransform": 872, "add_dummy_featur": 875, "label_binar": 877, "maxabs_scal": 878, "minmax_scal": 879, "power_transform": 881, "quantile_transform": 882, "robust_scal": 883, "gaussianrandomproject": 885, "sparserandomproject": 886, "johnson_lindenstrauss_min_dim": 887, "labelpropag": 888, "labelspread": 889, "selftrainingclassifi": 890, "set_config": 891, "show_vers": 892, "linearsvr": 894, "nusvc": 895, "nusvr": 896, "oneclasssvm": 897, "l1_min_c": 900, "decisiontreeclassifi": 901, "extratreeclassifi": 903, "extratreeregressor": 904, "export_graphviz": 905, "export_text": 906, "plot_tre": 907, "_safe_index": 909, "arrayfunc": 910, "min_po": 910, "as_float_arrai": 911, "assert_all_finit": 912, "check_x_i": 913, "check_arrai": 914, "check_consistent_length": 915, "check_random_st": 916, "check_scalar": 917, "class_weight": [918, 919], "compute_class_weight": 918, "compute_sample_weight": 919, "discoveri": [921, 922, 923], "all_displai": 921, "all_estim": 922, "all_funct": 923, "estimator_check": [924, 925], "check_estim": 924, "parametrize_with_check": 925, "estimator_html_repr": 926, "extmath": [927, 928, 929, 930, 931, 932], "fast_logdet": 928, "randomized_range_find": 929, "randomized_svd": 930, "safe_sparse_dot": 931, "weighted_mod": 932, "gen_batch": 933, "gen_even_slic": 934, "single_source_shortest_path_length": 935, "metadata_rout": [937, 938, 939, 940, 941], "metadatarequest": 937, "metadatarout": 938, "methodmap": 939, "get_routing_for_object": 940, "process_rout": 941, "metaestim": 942, "available_if": 942, "is_multilabel": 943, "type_of_target": 944, "unique_label": 945, "murmurhash3_32": 946, "delai": 948, "parallel_backend": 949, "sample_without_replac": 950, "register_parallel_backend": 951, "resampl": 952, "safe_mask": 953, "safe_sqr": 954, "sparsefunc": [956, 957, 958, 959, 960, 961, 962, 1031], "incr_mean_variance_axi": 956, "inplace_column_scal": 957, "inplace_csr_column_scal": 958, "inplace_row_scal": 959, "inplace_swap_column": 960, "inplace_swap_row": 961, "mean_variance_axi": 962, "sparsefuncs_fast": [963, 964], "inplace_csr_row_normalize_l1": 963, "inplace_csr_row_normalize_l2": 964, "check_memori": 966, "check_symmetr": 967, "column_or_1d": 968, "has_fit_paramet": 969, "exhaust": 970, "min_resourc": 970, "aggress": [970, 977], "analyz": 970, "cv_results_": 970, "brute": [970, 984], "forc": [970, 984], "keep": 971, "mark": 971, "nan": 971, "chi": [973, 979], "skew": 973, "tensor": 973, "sketch": 973, "detail": [973, 977, 995, 996], "qda": 975, "omp": 977, "liblinear": 977, "passiv": 977, "scenario": 977, "trade": 977, "off": 977, "which": 977, "consensu": 977, "median": [977, 981], "huber": 977, "extend": 977, "introduct": [978, 1007], "modifi": 978, "hessian": 978, "eigenmap": 978, "tangent": 978, "align": 978, "cosin": 979, "laplacian": 979, "pro": 980, "con": 980, "rule": 981, "cohen": 981, "kappa": 981, "ham": 981, "jaccard": 981, "hing": 981, "matthew": 981, "zero": 981, "brier": 981, "discount": 981, "cumul": 981, "gain": 981, "r\u00b2": 981, "absolut": 981, "logarithm": 981, "percentag": 981, "explain": 981, "pinbal": 981, "d\u00b2": 981, "complement": 983, "bernoulli": [983, 986], "unsupervis": [984, 986, 998, 1015, 1017], "find": 984, "ball": 984, "leaf_siz": 984, "shrunken": 984, "warm_start": 985, "parametr": 986, "up": 987, "ellipt": 987, "envelop": 987, "isol": 987, "outlin": 989, "mislead": 989, "strongli": 989, "rang": 991, "whiten": 991, "bin": 991, "lemma": 993, "unlabel": 994, "entri": 994, "id3": 997, "c4": 997, "5": [997, 1022], "c5": 997, "cart": 997, "welcom": 999, "talk": 1000, "scientif": [1000, 1010], "framework": 1001, "domain": 1001, "translat": 1001, "roadmap": 1002, "statement": 1002, "2018": 1002, "architectur": 1002, "goal": 1002, "subpackag": 1002, "mail": 1004, "user": [1004, 1018], "gitter": 1004, "who": 1005, "j": 1005, "morgan": 1005, "spotifi": 1005, "inria": 1005, "betawork": 1005, "hug": 1005, "evernot": 1005, "t\u00e9l\u00e9com": 1005, "paristech": 1005, "book": 1005, "com": 1005, "aweb": 1005, "yhat": 1005, "rangespan": 1005, "birchbox": 1005, "bestofmedia": 1005, "phimeca": 1005, "howaboutw": 1005, "peerindex": 1005, "datarobot": 1005, "okcupid": 1005, "love": 1005, "publica": 1005, "machinali": 1005, "solido": 1005, "infonea": 1005, "dataiku": 1005, "otto": 1005, "zopa": 1005, "mar": 1005, "bnp": 1005, "pariba": 1005, "cardif": 1005, "section": 1007, "cast": 1007, "updat": [1007, 1032], "right": 1009, "put": 1012, "open": 1012, "ship": 1013, "would": 1013, "high": 1014, "solv": [1014, 1015], "vocabulari": 1014, "curs": 1014, "iris": 1014, "same": 1014, "seek": 1015, "constrain": 1015, "inverse_transform": 1015, "setup": 1016, "token": 1016, "occurr": 1016, "languag": 1016, "identif": 1016, "sentiment": 1016, "movi": 1016, "cli": 1016, "where": 1016, "12": 1022, "changelog": [1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "11": 1022, "9": 1022, "8": 1022, "7": 1022, "6": [1022, 1028], "modul": [1022, 1030, 1031, 1037, 1038], "misc": 1022, "4": [1022, 1030], "earlier": 1022, "13": 1023, "14": 1024, "15": 1025, "16": 1026, "17": 1027, "18": 1028, "last": 1028, "19": 1029, "21": 1031, "legend": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "post1": 1032, "websit": 1032, "clear": 1032, "public": 1032, "futurewarn": 1032, "enforc": [1033, 1035]}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1022, "authors"], [1022, "id20"]], "Documentation Team": [[0, "documentation-team"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [391, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [167, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [111, "concluding-remarks"], [225, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [81, "references"], [115, "references"], [176, "references"], [184, "references"], [188, null], [261, null], [294, "references"], [371, null], [371, null], [371, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [411, null], [413, "references"], [971, "references"], [971, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [988, null], [991, null], [991, null], [994, null], [994, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [126, "load-the-data"], [284, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [189, "conclusion"], [284, "conclusion"], [310, "conclusion"], [338, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [78, "plot-results"], [96, "plot-results"], [97, "plot-results"], [118, "plot-results"], [288, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [362, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [334, "visualization"], [402, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[15, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [68, "computation-times"], [76, "computation-times"], [83, "computation-times"], [87, "computation-times"], [93, "computation-times"], [107, "computation-times"], [136, "computation-times"], [142, "computation-times"], [150, "computation-times"], [162, "computation-times"], [166, "computation-times"], [174, "computation-times"], [177, "computation-times"], [219, "computation-times"], [227, "computation-times"], [244, "computation-times"], [253, "computation-times"], [277, "computation-times"], [280, "computation-times"], [295, "computation-times"], [301, "computation-times"], [311, "computation-times"], [320, "computation-times"], [328, "computation-times"], [345, "computation-times"], [350, "computation-times"], [357, "computation-times"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [167, "biclustering"], [372, "biclustering"], [400, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[20, "generate-sample-data"], [38, "generate-sample-data"], [55, "generate-sample-data"], [63, "generate-sample-data"], [78, "generate-sample-data"], [96, "generate-sample-data"], [97, "generate-sample-data"], [145, "generate-sample-data"], [235, "generate-sample-data"], [274, "generate-sample-data"], [293, "generate-sample-data"], [341, "generate-sample-data"]], "Fitting SpectralBiclustering": [[20, "fitting-spectralbiclustering"]], "Plotting results": [[20, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[23, "calibration"], [167, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [179, "generate-synthetic-dataset"], [179, "id1"], [184, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [189, "dataset"], [267, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [401, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [983, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [349, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Classification": [[29, "classification"], [32, "classification"], [160, "classification"], [167, "classification"], [410, "classification"], [410, "id10"], [977, "classification"], [984, "id4"], [985, "classification"], [995, "classification"], [996, "classification"], [997, "classification"], [1014, "classification"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Classifier comparison": [[31, "classifier-comparison"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"]], "Clustering": [[36, "clustering"], [167, "clustering"], [403, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Plot result": [[38, "plot-result"], [63, "plot-result"], [67, "plot-result"], [67, "id2"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[47, "generate-data"], [67, "generate-data"], [80, "generate-data"], [194, "generate-data"], [300, "generate-data"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [67, "compute-clustering"], [67, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[49, "data-generation"], [57, "data-generation"], [128, "data-generation"], [148, "data-generation"], [158, "data-generation"], [251, "data-generation"], [322, "data-generation"], [342, "data-generation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Plot the results": [[50, "plot-the-results"], [82, "plot-the-results"], [135, "plot-the-results"], [165, "plot-the-results"]], "Feature agglomeration": [[51, "feature-agglomeration"], [998, "feature-agglomeration"], [1015, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[55, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[55, "scale-invariance"]], "Multi-Scale Clustering": [[55, "multi-scale-clustering"]], "Hyperparameter Robustness": [[55, "hyperparameter-robustness"]], "min_cluster_size": [[55, "min-cluster-size"]], "min_samples": [[55, "min-samples"]], "dbscan_clustering": [[55, "dbscan-clustering"]], "Inductive Clustering": [[56, "inductive-clustering"]], "Demonstration of k-means assumptions": [[57, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[57, "fit-models-and-plot-results"]], "Possible solutions": [[57, "possible-solutions"]], "Final remarks": [[57, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[58, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[58, "load-the-dataset"]], "Define our evaluation benchmark": [[58, "define-our-evaluation-benchmark"]], "Run the benchmark": [[58, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[58, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[59, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[60, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[61, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[62, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[63, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[63, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[64, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[64, "generate-the-data"], [66, "generate-the-data"], [82, "generate-the-data"]], "Compute clustering with KMeans": [[64, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[64, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[64, "establishing-parity-between-clusters"]], "Plotting the results": [[64, "plotting-the-results"], [111, "plotting-the-results"], [113, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[65, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[66, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[66, "plotting-four-circles"]], "Plotting two circles": [[66, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[67, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[67, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[69, "pipelines-and-composite-estimators"], [167, "pipelines-and-composite-estimators"], [404, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[70, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[70, "newsgroups-dataset"]], "Creating transformers": [[70, "creating-transformers"]], "Classification pipeline": [[70, "classification-pipeline"]], "Column Transformer with Mixed Types": [[71, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[72, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[72, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[72, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[73, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[74, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[75, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[75, "synthetic-example"]], "Real-world data set": [[75, "real-world-data-set"]], "Covariance estimation": [[77, "covariance-estimation"], [167, "covariance-estimation"], [405, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[78, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[78, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[78, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[79, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[80, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[80, null], [112, null], [172, null], [266, null], [267, null], [370, null], [371, null], [400, null], [400, null], [400, null], [401, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [405, null], [405, null], [405, null], [405, null], [407, null], [407, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [411, null], [411, null], [970, null], [970, null], [973, null], [974, null], [975, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [978, null], [978, null], [978, null], [978, null], [978, null], [978, null], [978, null], [978, null], [979, null], [979, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [982, null], [982, null], [982, null], [983, null], [983, null], [983, null], [984, null], [984, null], [984, null], [985, null], [986, null], [987, null], [987, null], [987, null], [987, null], [989, null], [991, null], [991, null], [993, null], [993, null], [993, null], [995, null], [995, null], [996, null]], "Comparison of results": [[80, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[81, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[81, "minimum-covariance-determinant-estimator"]], "Evaluation": [[81, "evaluation"], [300, "evaluation"]], "Sparse inverse covariance estimation": [[82, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[82, "estimate-the-covariance"]], "Cross decomposition": [[84, "cross-decomposition"], [167, "cross-decomposition"], [406, "cross-decomposition"]], "Compare cross decomposition methods": [[85, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[85, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[85, "canonical-symmetric-pls"]], "Transform data": [[85, "transform-data"]], "Scatter plot of scores": [[85, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[85, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[85, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[85, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[86, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[86, "the-data"]], "Projection on one component and predictive power": [[86, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[88, "dataset-examples"], [167, "dataset-examples"]], "The Digit Dataset": [[89, "the-digit-dataset"]], "The Iris Dataset": [[90, "the-iris-dataset"]], "Loading the iris dataset": [[90, "loading-the-iris-dataset"]], "Scatter Plot of the Iris dataset": [[90, "scatter-plot-of-the-iris-dataset"]], "Plot a PCA representation": [[90, "plot-a-pca-representation"]], "Plot randomly generated classification dataset": [[91, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[92, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[94, "decomposition"], [95, "decomposition"], [167, "decomposition"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [221, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[99, "incremental-pca"], [408, "incremental-pca"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Create the data": [[101, "create-the-data"], [103, "create-the-data"]], "Plot the figures": [[101, "plot-the-figures"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[103, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [408, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[108, "developing-estimators"], [167, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[109, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[109, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[110, "ensemble-methods"], [167, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[111, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[111, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[111, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[112, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[112, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[112, "training-the-adaboostclassifier"]], "Analysis": [[112, "analysis"]], "Convergence of the AdaBoostClassifier": [[112, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[112, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[113, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[113, "preparing-the-data"], [176, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[113, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[114, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[115, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[116, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[117, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[118, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[118, "load-dataset"]], "Compute score and computation times": [[118, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[119, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[119, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[119, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[119, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[120, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[120, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[120, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[121, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[122, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[122, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[122, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[122, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[122, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[122, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[122, "model-comparison"]], "Limiting the number of splits": [[122, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[123, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[123, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[123, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[124, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[125, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[125, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[125, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[125, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[125, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[126, "gradient-boosting-regression"]], "Data preprocessing": [[126, "data-preprocessing"]], "Fit regression model": [[126, "fit-regression-model"], [293, "fit-regression-model"], [341, "fit-regression-model"]], "Plot training deviance": [[126, "plot-training-deviance"]], "Plot feature importance": [[126, "plot-feature-importance"]], "Gradient Boosting regularization": [[127, "gradient-boosting-regularization"]], "IsolationForest example": [[128, "isolationforest-example"]], "Training of the model": [[128, "training-of-the-model"]], "Plot discrete decision boundary": [[128, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[128, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[129, "monotonic-constraints"], [410, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[129, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[130, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[131, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[132, "combine-predictors-using-stacking"]], "Download the dataset": [[132, "download-the-dataset"]], "Make pipeline to preprocess the data": [[132, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[132, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[132, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[133, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[134, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[135, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[135, "training-classifiers"]], "Making predictions": [[135, "making-predictions"]], "Tutorial exercises": [[137, "tutorial-exercises"], [167, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[138, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[138, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[138, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[138, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[139, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[140, "digits-classification-exercise"]], "SVM Exercise": [[141, "svm-exercise"]], "Feature Selection": [[143, "feature-selection"], [167, "feature-selection"]], "Comparison of F-test and mutual information": [[144, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[145, "univariate-feature-selection"]], "Univariate feature selection": [[145, "id1"], [412, "univariate-feature-selection"]], "Compare with SVMs": [[145, "compare-with-svms"]], "Pipeline ANOVA SVM": [[146, "pipeline-anova-svm"]], "Recursive feature elimination": [[147, "recursive-feature-elimination"], [412, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[148, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[148, "model-training-and-selection"], [251, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[148, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[149, "model-based-and-sequential-feature-selection"]], "Loading the data": [[149, "loading-the-data"]], "Feature importance from coefficients": [[149, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[149, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[149, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[149, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[151, "gaussian-process-for-machine-learning"], [167, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[152, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[152, "generating-a-dataset"]], "Limitations of a simple linear model": [[152, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[152, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[152, "kernel-ridge"]], "Gaussian process regression": [[152, "gaussian-process-regression"]], "Final conclusion": [[152, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[153, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[154, "gaussian-process-classification-gpc-on-iris-dataset"], [413, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[155, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[156, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[157, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Build the dataset": [[157, "build-the-dataset"]], "Design the proper kernel": [[157, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[157, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[157, "interpretation-of-kernel-hyperparameters"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[158, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Optimisation of kernel hyperparameters in GPR": [[158, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[159, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[159, "dataset-generation"], [202, "dataset-generation"]], "Example with noise-free target": [[159, "example-with-noise-free-target"]], "Example with noisy targets": [[159, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[160, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[160, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[160, "regression"], [410, "regression"], [410, "id9"], [977, "regression"], [985, "regression"], [995, "regression"], [996, "regression"], [997, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[161, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[161, "helper-function"]], "Dataset and Gaussian process generation": [[161, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[161, "kernel-cookbook"]], "Radial Basis Function kernel": [[161, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[161, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[161, "exp-sine-squared-kernel"], [413, "exp-sine-squared-kernel"]], "Dot-product kernel": [[161, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[161, "matern-kernel"], [413, "matern-kernel"]], "Missing Value Imputation": [[163, "missing-value-imputation"], [167, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[164, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[165, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[165, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[165, "impute-the-missing-data-and-score"]], "Missing information": [[165, "missing-information"]], "Estimate the score": [[165, "estimate-the-score"]], "Replace missing values by 0": [[165, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[165, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[165, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[165, "iterative-imputation-of-the-missing-values"]], "Examples": [[167, "examples"], [364, "examples"], [371, null], [407, null], [407, null], [412, null], [412, null], [413, null], [994, null], [994, null], [998, null], [998, null], [998, null], [1022, "examples"]], "Release Highlights": [[167, "release-highlights"], [312, "release-highlights"]], "Decision Trees": [[167, "decision-trees"], [351, "decision-trees"], [997, "decision-trees"]], "Gaussian Mixture Models": [[167, "gaussian-mixture-models"], [245, "gaussian-mixture-models"]], "Generalized Linear Models": [[167, "generalized-linear-models"], [178, "generalized-linear-models"], [977, "generalized-linear-models"]], "Inspection": [[167, "inspection"], [168, "inspection"], [392, "inspection"]], "Kernel Approximation": [[167, "kernel-approximation"], [175, "kernel-approximation"], [973, "kernel-approximation"]], "Manifold learning": [[167, "manifold-learning"], [220, "manifold-learning"], [978, "manifold-learning"]], "Miscellaneous": [[167, "miscellaneous"], [228, "miscellaneous"], [402, "miscellaneous"], [1030, "miscellaneous"], [1030, "id40"], [1031, "miscellaneous"], [1032, "miscellaneous"], [1033, "miscellaneous"], [1033, "id13"], [1034, "miscellaneous"], [1035, "miscellaneous"], [1038, "miscellaneous"]], "Model Selection": [[167, "model-selection"], [254, "model-selection"]], "Multioutput methods": [[167, "multioutput-methods"], [278, "multioutput-methods"]], "Nearest Neighbors": [[167, "nearest-neighbors"], [282, "nearest-neighbors"], [984, "nearest-neighbors"]], "Neural Networks": [[167, "neural-networks"], [296, "neural-networks"]], "Preprocessing": [[167, "preprocessing"], [302, "preprocessing"]], "Semi Supervised Classification": [[167, "semi-supervised-classification"], [321, "semi-supervised-classification"]], "Support Vector Machines": [[167, "support-vector-machines"], [329, "support-vector-machines"], [996, "support-vector-machines"]], "Working with text documents": [[167, "working-with-text-documents"], [346, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[169, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[169, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[169, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[169, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[169, "income-prediction-with-partial-observations"]], "Lessons learned": [[169, "lessons-learned"], [170, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[170, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[170, "the-dataset-wages"]], "The machine-learning pipeline": [[170, "the-machine-learning-pipeline"]], "Processing the dataset": [[170, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[170, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[170, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[170, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[170, "preprocessing-numerical-variables"]], "Linear models with regularization": [[170, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[170, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[170, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[171, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[171, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[171, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[171, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[171, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[171, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[171, "multi-layer-perceptron"]], "Gradient boosting": [[171, "gradient-boosting"]], "Analysis of the plots": [[171, "analysis-of-the-plots"]], "ICE vs. PDP": [[171, "ice-vs-pdp"]], "2D interaction plots": [[171, "d-interaction-plots"]], "3D representation": [[171, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[172, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[172, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[172, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[172, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[173, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[173, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[173, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[176, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[176, "partitioning-the-data"]], "Feature normalization": [[176, "feature-normalization"]], "Establishing a baseline model": [[176, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[176, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[176, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[176, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[179, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[179, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[179, "fit-the-regressors"], [179, "id2"]], "Plot the true and estimated coefficients": [[179, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[179, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[179, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[179, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[180, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[180, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[180, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[180, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[181, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[182, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[183, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[184, "l1-based-models-for-sparse-signals"]], "Lasso": [[184, "lasso"], [977, "lasso"]], "Automatic Relevance Determination (ARD)": [[184, "automatic-relevance-determination-ard"]], "ElasticNet": [[184, "elasticnet"]], "Plot and analysis of the results": [[184, "plot-and-analysis-of-the-results"]], "Conclusions": [[184, "conclusions"]], "Lasso and Elastic Net": [[185, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[186, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[186, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[186, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[187, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[188, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[189, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[189, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[189, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[189, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[189, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[189, "summary-of-cross-validation-approach"]], "Logistic function": [[190, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[191, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[192, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[193, "regularization-path-of-l1-logistic-regression"]], "Load data": [[193, "load-data"]], "Compute regularization path": [[193, "compute-regularization-path"]], "Plot regularization path": [[193, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[194, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[194, "fit-models"]], "Plot support and time series": [[194, "plot-support-and-time-series"]], "Non-negative least squares": [[195, "non-negative-least-squares"]], "Linear Regression Example": [[196, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[197, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[198, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[199, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[200, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[200, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[200, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[200, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[200, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[200, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[200, "evaluation-of-the-ranking-power"]], "Main takeaways": [[200, "main-takeaways"]], "Polynomial and Spline interpolation": [[201, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[201, "periodic-splines"]], "Quantile regression": [[202, "quantile-regression"]], "Fitting a QuantileRegressor": [[202, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[202, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[203, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[204, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[204, "purpose-of-this-example"]], "Creating a non-noisy data set": [[204, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[204, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[204, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[204, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[205, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[205, "compute-paths"]], "Display results": [[205, "display-results"]], "Robust linear estimator fitting": [[206, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[207, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[208, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[209, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[210, "sgd-convex-loss-functions"]], "SGD: Penalties": [[211, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[212, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[213, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[214, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[215, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[216, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[217, "theil-sen-regression"]], "Outliers only in the y direction": [[217, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[217, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[218, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[218, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[218, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[218, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[218, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[221, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[221, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[221, "locally-linear-embeddings"]], "Isomap Embedding": [[221, "isomap-embedding"]], "Multidimensional scaling": [[221, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[221, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[221, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[222, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[222, "load-digits-dataset"]], "Helper function to plot embedding": [[222, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[222, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[223, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[224, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[225, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[225, "swiss-roll"]], "Swiss-Hole": [[225, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[226, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[229, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[230, "visualizations-with-display-objects"]], "Load Data and train model": [[230, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[230, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[230, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[230, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[230, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[231, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[231, "compact-text-representation"]], "Rich HTML representation": [[231, "rich-html-representation"]], "Isotonic Regression": [[232, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[233, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[233, "theoretical-bounds"]], "Empirical validation": [[233, "empirical-validation"]], "Remarks": [[233, "remarks"]], "Explicit feature map approximation for RBF kernels": [[234, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[234, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[234, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[234, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[235, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[235, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[235, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[235, "look-at-the-results"], [341, "look-at-the-results"]], "Visualize training and prediction times": [[235, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[235, "visualize-the-learning-curves"]], "Metadata Routing": [[236, "metadata-routing"], [319, "metadata-routing"], [390, "metadata-routing"], [394, "id1"]], "Estimators": [[236, "estimators"], [358, "estimators"], [358, "id2"], [378, "estimators"], [402, "estimators"]], "Router and Consumer": [[236, "router-and-consumer"]], "Simple Pipeline": [[236, "simple-pipeline"]], "Deprecation / Default Value Change": [[236, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[236, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[237, "multilabel-classification"], [982, "multilabel-classification"]], "Face completion with a multi-output estimators": [[238, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[239, "evaluation-of-outlier-detection-estimators"]], "Dataset preprocessing and model training": [[239, "dataset-preprocessing-and-model-training"]], "KDDCup99 - SA dataset": [[239, "kddcup99-sa-dataset"]], "Forest covertypes dataset": [[239, "forest-covertypes-dataset"]], "Ames Housing dataset": [[239, "ames-housing-dataset"]], "Cardiotocography dataset": [[239, "cardiotocography-dataset"]], "Plot and interpret results": [[239, "plot-and-interpret-results"]], "Ablation study": [[239, "ablation-study"]], "Advanced Plotting With Partial Dependence": [[240, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[240, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[240, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[240, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[240, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[241, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[241, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[241, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[241, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[241, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[241, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[242, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[242, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[242, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[242, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[243, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[246, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[247, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[248, "gmm-covariances"]], "GMM Initialization Methods": [[249, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[250, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[251, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[251, "plot-the-bic-scores"]], "Plot the best model": [[251, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[252, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[255, "confusion-matrix"], [981, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[256, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[256, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[256, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[256, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[257, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[258, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[258, "generate-synthetic-data"]], "Define the classifiers": [[258, "define-the-classifiers"]], "Plot ROC and DET curves": [[258, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[259, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[259, "the-dataset"]], "Define our grid-search strategy": [[259, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[259, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[260, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[261, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[261, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[261, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[261, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[261, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[261, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[261, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[262, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[262, "data-loading"]], "Pipeline with hyperparameter tuning": [[262, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[263, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[263, "learning-curve"]], "Complexity analysis": [[263, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[264, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[264, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[264, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[264, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[265, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[265, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[265, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[266, "nested-versus-non-nested-cross-validation"]], "See Also:": [[266, null], [404, null]], "Test with permutations the significance of a classification score": [[267, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[267, "permutation-test-score"], [407, "permutation-test-score"]], "Original data": [[267, "original-data"], [303, "original-data"]], "Random data": [[267, "random-data"]], "Precision-Recall": [[268, "precision-recall"]], "In binary classification settings": [[268, "in-binary-classification-settings"]], "Dataset and model": [[268, "dataset-and-model"]], "Plot the Precision-Recall curve": [[268, "plot-the-precision-recall-curve"]], "In multi-label settings": [[268, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[268, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[268, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[268, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[268, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[269, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[270, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[270, "load-and-prepare-data"], [271, "load-and-prepare-data"], [308, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[270, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[270, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[270, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[270, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[270, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[270, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[270, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[270, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[271, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[271, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[272, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[273, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[273, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[274, "train-error-vs-test-error"]], "Compute train and test errors": [[274, "compute-train-and-test-errors"]], "Plot results functions": [[274, "plot-results-functions"]], "Underfitting vs. Overfitting": [[275, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[276, "plotting-validation-curves"]], "Classifier Chain": [[279, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[281, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[283, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[284, "nearest-neighbors-classification"], [984, "nearest-neighbors-classification"]], "K-nearest neighbors classifier": [[284, "k-nearest-neighbors-classifier"]], "Decision boundary": [[284, "decision-boundary"]], "Kernel Density Estimation": [[285, "kernel-density-estimation"], [409, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[286, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[287, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[288, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[288, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[288, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[289, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[290, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[291, "neighborhood-components-analysis-illustration"]], "Original points": [[291, "original-points"]], "Learning an embedding": [[291, "learning-an-embedding"]], "Nearest Centroid Classification": [[292, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[293, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[294, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[297, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[298, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[299, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[300, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[300, "models-definition"]], "Training": [[300, "training"], [984, "training"]], "Plotting": [[300, "plotting"], [402, "plotting"], [402, "id7"], [402, "id9"]], "Compare the effect of different scalers on data with outliers": [[303, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[303, "standardscaler"]], "MinMaxScaler": [[303, "minmaxscaler"]], "MaxAbsScaler": [[303, "maxabsscaler"]], "RobustScaler": [[303, "robustscaler"]], "PowerTransformer": [[303, "powertransformer"]], "QuantileTransformer (uniform output)": [[303, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[303, "quantiletransformer-gaussian-output"]], "Normalizer": [[303, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[304, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[305, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[306, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[307, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[308, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[308, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[308, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[308, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[309, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[309, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[309, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[309, "native-categorical-feature-support"]], "Plotting the Results": [[309, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[310, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[310, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[310, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[313, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[313, "new-plotting-api"]], "Stacking Classifier and Regressor": [[313, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[313, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[313, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[313, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[313, "knn-based-imputation"]], "Tree pruning": [[313, "tree-pruning"]], "Retrieve dataframes from OpenML": [[313, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[313, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[313, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[314, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[314, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[314, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[314, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[314, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[314, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[315, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[315, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[315, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[315, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[315, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[315, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[315, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[315, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[315, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[315, "new-documentation-improvements"], [316, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[316, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[316, "keyword-and-positional-arguments"]], "Spline Transformers": [[316, "spline-transformers"]], "Quantile Regressor": [[316, "quantile-regressor"]], "Feature Names Support": [[316, "feature-names-support"]], "A more flexible plotting API": [[316, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[316, "online-one-class-svm"], [995, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[316, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[317, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[317, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[317, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[317, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[317, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[317, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[317, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[318, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[318, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[318, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[318, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[318, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[318, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[318, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[319, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[319, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[319, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[319, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[319, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[319, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[319, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Label Propagation digits: Demonstrating performance": [[322, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[322, "semi-supervised-learning"], [994, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[322, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[323, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[324, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[325, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[326, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[327, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[330, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[331, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[332, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[333, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[334, "rbf-svm-parameters"]], "Load and prepare data set": [[334, "load-and-prepare-data-set"]], "Train classifiers": [[334, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[335, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[336, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[337, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[337, "load-some-data-to-play-with"]], "Create the pipeline": [[337, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[337, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot classification boundaries with different SVM Kernels": [[338, "plot-classification-boundaries-with-different-svm-kernels"]], "Creating a dataset": [[338, "creating-a-dataset"]], "Training SVC model and plotting decision boundaries": [[338, "training-svc-model-and-plotting-decision-boundaries"]], "Linear kernel": [[338, "linear-kernel"], [979, "linear-kernel"], [1014, "linear-kernel"]], "Polynomial kernel": [[338, "polynomial-kernel"], [979, "polynomial-kernel"], [1014, "polynomial-kernel"]], "RBF kernel": [[338, "rbf-kernel"], [979, "rbf-kernel"]], "Sigmoid kernel": [[338, "sigmoid-kernel"], [979, "sigmoid-kernel"], [1014, "sigmoid-kernel"]], "SVM Margins Example": [[339, "svm-margins-example"]], "Non-linear SVM": [[340, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[341, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[342, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[342, "l1-penalty-case"]], "L2-penalty case": [[342, "l2-penalty-case"]], "SVM Tie Breaking Example": [[343, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[344, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[347, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[347, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[347, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[347, "model-without-metadata-stripping"]], "Model with metadata stripping": [[347, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[347, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[347, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[348, "clustering-text-documents-using-k-means"]], "Loading text data": [[348, "loading-text-data"]], "Quantifying the quality of clustering results": [[348, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[348, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[348, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[348, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[348, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[348, "top-terms-per-cluster"]], "HashingVectorizer": [[348, "hashingvectorizer"]], "Clustering evaluation summary": [[348, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[349, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[349, "load-data"]], "Define preprocessing functions": [[349, "define-preprocessing-functions"]], "DictVectorizer": [[349, "dictvectorizer"]], "FeatureHasher": [[349, "featurehasher"]], "Comparison with special purpose text vectorizers": [[349, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[349, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[352, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[352, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[352, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[353, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[354, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[355, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[356, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[356, "train-tree-classifier"]], "Tree structure": [[356, "tree-structure"]], "What is the values array used here?": [[356, "what-is-the-values-array-used-here"]], "Decision path": [[356, "decision-path"]], "Common pitfalls and recommended practices": [[358, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[358, "inconsistent-preprocessing"]], "Data leakage": [[358, "data-leakage"]], "Data leakage during pre-processing": [[358, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[358, "how-to-avoid-data-leakage"]], "Controlling randomness": [[358, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[358, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[358, "cv-splitters"], [358, "id3"]], "Common pitfalls and subtleties": [[358, "common-pitfalls-and-subtleties"]], "General recommendations": [[358, "general-recommendations"]], "Getting reproducible results across multiple executions": [[358, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[358, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[361, "computing-with-scikit-learn"]], "Computational Performance": [[362, "computational-performance"]], "Bulk versus Atomic mode": [[362, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[362, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[362, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[362, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[362, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[362, "feature-extraction-latency"]], "Prediction Throughput": [[362, "prediction-throughput"]], "Tips and Tricks": [[362, "tips-and-tricks"]], "Linear algebra libraries": [[362, "linear-algebra-libraries"]], "Limiting Working Memory": [[362, "limiting-working-memory"]], "Model Compression": [[362, "model-compression"]], "Model Reshaping": [[362, "model-reshaping"]], "Links": [[362, "links"]], "Parallelism, resource management, and configuration": [[363, "parallelism-resource-management-and-configuration"]], "Parallelism": [[363, "parallelism"], [970, "parallelism"]], "Higher-level parallelism with joblib": [[363, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[363, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[363, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[363, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[363, "configuration-switches"]], "Python API": [[363, "python-api"]], "Environment variables": [[363, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[363, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[363, "sklearn-working-memory"]], "SKLEARN_SEED": [[363, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[363, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[363, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[363, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[363, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[363, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[363, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[364, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[364, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[364, "streaming-instances"]], "Extracting features": [[364, "extracting-features"]], "Incremental learning": [[364, "incremental-learning"]], "Notes": [[364, "notes"], [977, "notes"]], "Table Of Contents": [[365, "table-of-contents"]], "Dataset transformations": [[368, "dataset-transformations"]], "Dataset loading utilities": [[369, "dataset-loading-utilities"], [381, "dataset-loading-utilities"]], "Loading other datasets": [[370, "loading-other-datasets"]], "Sample images": [[370, "sample-images"]], "Examples:": [[370, null], [371, null], [392, null], [400, null], [400, null], [401, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [403, null], [404, null], [404, null], [404, null], [404, null], [404, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [406, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [409, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [412, null], [412, null], [412, null], [412, null], [970, null], [970, null], [970, null], [973, null], [973, null], [975, null], [975, null], [975, null], [976, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [978, null], [980, null], [980, null], [980, null], [980, null], [981, null], [981, null], [981, null], [981, null], [981, null], [982, null], [984, null], [984, null], [984, null], [984, null], [984, null], [985, null], [985, null], [986, null], [987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [988, null], [989, null], [991, null], [991, null], [991, null], [995, null], [995, null], [996, null], [996, null], [996, null], [996, null], [996, null], [996, null], [997, null], [997, null], [997, null], [997, null], [1019, null]], "Datasets in svmlight / libsvm format": [[370, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[370, null]], "Downloading datasets from the openml.org repository": [[370, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[370, "dataset-versions"]], "ARFF parser": [[370, "arff-parser"]], "Loading from external datasets": [[370, "loading-from-external-datasets"], [1007, null]], "Real world datasets": [[371, "real-world-datasets"]], "The Olivetti faces dataset": [[371, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[371, "the-20-newsgroups-text-dataset"]], "Data Considerations": [[371, null]], "Recommendation": [[371, null]], "The Labeled Faces in the Wild face recognition dataset": [[371, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[371, "forest-covertypes"]], "RCV1 dataset": [[371, "rcv1-dataset"]], "Kddcup 99 dataset": [[371, "kddcup-99-dataset"]], "California Housing dataset": [[371, "california-housing-dataset"]], "Generated datasets": [[372, "generated-datasets"]], "Generators for classification and clustering": [[372, "generators-for-classification-and-clustering"]], "Single label": [[372, "single-label"]], "Multilabel": [[372, "multilabel"]], "Generators for regression": [[372, "generators-for-regression"]], "Generators for manifold learning": [[372, "generators-for-manifold-learning"]], "Generators for decomposition": [[372, "generators-for-decomposition"]], "Toy datasets": [[373, "toy-datasets"]], "Iris plants dataset": [[373, "iris-plants-dataset"]], "Diabetes dataset": [[373, "diabetes-dataset"], [1014, null]], "Optical recognition of handwritten digits dataset": [[373, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[373, "linnerrud-dataset"]], "Wine recognition dataset": [[373, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[373, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[374, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[374, "installing-nightly-builds"]], "Building from source": [[374, "building-from-source"]], "Dependencies": [[374, "dependencies"]], "Runtime dependencies": [[374, "runtime-dependencies"]], "Build dependencies": [[374, "build-dependencies"]], "Test dependencies": [[374, "test-dependencies"]], "Building a specific version from a tag": [[374, "building-a-specific-version-from-a-tag"]], "Editable mode": [[374, "editable-mode"]], "Platform-specific instructions": [[374, "platform-specific-instructions"]], "Windows": [[374, "windows"]], "macOS": [[374, "macos"]], "macOS compilers from conda-forge": [[374, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[374, "macos-compilers-from-homebrew"]], "Linux": [[374, "linux"]], "Linux compilers from the system": [[374, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[374, "linux-compilers-from-conda-forge"]], "FreeBSD": [[374, "freebsd"]], "Alternative compilers": [[374, "alternative-compilers"]], "Parallel builds": [[374, "parallel-builds"]], "Bug triaging and issue curation": [[375, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[375, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[375, null]], "Working on PRs to help review": [[375, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[375, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[375, null]], "A typical workflow for triaging issues": [[375, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[376, "contributing"], [388, "contributing"]], "Our community, our values": [[376, null]], "Ways to contribute": [[376, "ways-to-contribute"]], "Contributing to related projects": [[376, null]], "Submitting a bug report or a feature request": [[376, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[376, "how-to-make-a-good-bug-report"]], "Contributing code": [[376, "contributing-code"]], "Video resources": [[376, "video-resources"]], "How to contribute": [[376, "how-to-contribute"]], "Learning git:": [[376, null]], "Pull request checklist": [[376, "pull-request-checklist"]], "Continuous Integration (CI)": [[376, "continuous-integration-ci"]], "Stalled pull requests": [[376, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[376, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[376, "issues-for-new-contributors"]], "good first issue tag": [[376, null]], "Easy tag": [[376, null]], "help wanted tag": [[376, null]], "Documentation": [[376, "documentation"], [1022, "documentation"]], "Building the documentation": [[376, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[376, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[376, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[376, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[376, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[376, "monitoring-performance"]], "Issue Tracker Tags": [[376, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[376, "maintaining-backwards-compatibility"]], "Deprecation": [[376, "deprecation"]], "Change the default value of a parameter": [[376, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[376, "code-review-guidelines"]], "Communication Guidelines": [[376, "communication-guidelines"]], "Reading the existing code base": [[376, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[377, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[377, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[377, "tips-to-ease-development"]], "Tips for performance": [[377, "tips-for-performance"]], "Using OpenMP": [[377, "using-openmp"]], "Developing scikit-learn estimators": [[378, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[378, "apis-of-scikit-learn-objects"]], "Different objects": [[378, "different-objects"]], "Instantiation": [[378, "instantiation"]], "Fitting": [[378, "fitting"]], "Estimated Attributes": [[378, "estimated-attributes"]], "Optional Arguments": [[378, "optional-arguments"]], "Universal attributes": [[378, "universal-attributes"]], "Rolling your own estimator": [[378, "rolling-your-own-estimator"]], "Project template:": [[378, null]], "BaseEstimator and mixins:": [[378, null]], "get_params and set_params": [[378, "get-params-and-set-params"]], "Parameters and init": [[378, "parameters-and-init"]], "Cloning": [[378, "cloning"]], "Pipeline compatibility": [[378, "pipeline-compatibility"]], "Estimator types": [[378, "estimator-types"]], "Specific models": [[378, "specific-models"]], "Estimator Tags": [[378, "estimator-tags"]], "Developer API for set_output": [[378, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[378, "developer-api-for-check-is-fitted"]], "Coding guidelines": [[378, "coding-guidelines"]], "Input validation": [[378, "input-validation"]], "Random Numbers": [[378, "random-numbers"]], "Numerical assertions in tests": [[378, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[379, "developer-s-guide"]], "Maintainer / core-developer information": [[380, "maintainer-core-developer-information"]], "Releasing": [[380, "releasing"]], "Before a release": [[380, "before-a-release"]], "Preparing a release PR": [[380, "preparing-a-release-pr"]], "Major version release": [[380, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[380, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[380, "making-a-release"]], "Release checklist": [[380, "release-checklist"]], "Merging Pull Requests": [[380, "merging-pull-requests"]], "The scikit-learn.org web site": [[380, "the-scikit-learn-org-web-site"]], "Experimental features": [[380, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[381, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[381, "good-practices"]], "Provide a failing code example with minimal comments": [[381, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[381, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[381, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[381, "use-markdown-formatting"]], "Synthetic dataset": [[381, "synthetic-dataset"]], "NumPy": [[381, "numpy"]], "Pandas": [[381, "pandas"]], "make_regression": [[381, "make-regression"]], "make_classification": [[381, "make-classification"]], "make_blobs": [[381, "make-blobs"]], "How to optimize for speed": [[382, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[382, "python-cython-or-c-c"]], "Profiling Python code": [[382, "profiling-python-code"]], "Memory usage profiling": [[382, "memory-usage-profiling"]], "Using Cython": [[382, "using-cython"]], "Profiling compiled extensions": [[382, "profiling-compiled-extensions"]], "Using yep and gperftools": [[382, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[382, "using-a-debugger-gdb"]], "Using gprof": [[382, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[382, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[382, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[382, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[382, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[383, "developing-with-the-plotting-api"]], "Plotting API Overview": [[383, "plotting-api-overview"]], "Plotting with Multiple Axes": [[383, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[384, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[384, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[384, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[384, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[384, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[384, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[384, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[384, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[384, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[385, "utilities-for-developers"]], "Validation Tools": [[385, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[385, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[385, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[385, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[385, "graph-routines"]], "Testing Functions": [[385, "testing-functions"]], "Multiclass and multilabel utility function": [[385, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[385, "helper-functions"]], "Hash Functions": [[385, "hash-functions"]], "Warnings and Exceptions": [[385, "warnings-and-exceptions"]], "Dispatching": [[386, "dispatching"]], "Frequently Asked Questions": [[388, "frequently-asked-questions"]], "Table of Contents": [[388, "table-of-contents"]], "About the project": [[388, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[388, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[388, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[388, "why-scikit"]], "Do you support PyPy?": [[388, "do-you-support-pypy"]], "Implementation decisions": [[388, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[388, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[388, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[388, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[388, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[388, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[388, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[388, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[388, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[388, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[388, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[388, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[388, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[388, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[388, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[388, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[388, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[388, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[388, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[388, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[388, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[388, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[389, "getting-started"]], "Fitting and predicting: estimator basics": [[389, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[389, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[389, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[389, "model-evaluation"]], "Automatic parameter searches": [[389, "automatic-parameter-searches"]], "Next steps": [[389, "next-steps"]], "Glossary of Common Terms and API Elements": [[390, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[390, "general-concepts"]], "Class APIs and Estimator Types": [[390, "class-apis-and-estimator-types"]], "Target Types": [[390, "target-types"]], "Methods": [[390, "methods"]], "Parameters": [[390, "parameters"], [410, "parameters"]], "Attributes": [[390, "attributes"]], "Data and sample properties": [[390, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[391, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[391, "roles-and-responsibilities"]], "Contributors": [[391, "contributors"]], "Core Contributors": [[391, "core-contributors"]], "Communication team": [[391, "communication-team"]], "Documentation team": [[391, "documentation-team"]], "Maintainers": [[391, "maintainers"]], "Technical Committee": [[391, "technical-committee"]], "Decision Making Process": [[391, "decision-making-process"]], "Governance Model Changes": [[391, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[391, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[393, "installing-scikit-learn"]], "Installing the latest release": [[393, "installing-the-latest-release"]], "Third party distributions of scikit-learn": [[393, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[393, "alpine-linux"]], "Arch Linux": [[393, "arch-linux"]], "Debian/Ubuntu": [[393, "debian-ubuntu"]], "Fedora": [[393, "fedora"]], "NetBSD": [[393, "netbsd"]], "MacPorts for Mac OSX": [[393, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[393, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[393, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[393, "winpython-for-windows"]], "Troubleshooting": [[393, "troubleshooting"]], "Error caused by file path length limit on Windows": [[393, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[394, "usage-examples"]], "Weighted scoring and fitting": [[394, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[394, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[394, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[394, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[394, "api-interface"]], "Model persistence": [[397, "model-persistence"]], "Python specific serialization": [[397, "python-specific-serialization"]], "Security & maintainability limitations": [[397, "security-maintainability-limitations"]], "A more secure format: skops": [[397, "a-more-secure-format-skops"]], "Interoperable formats": [[397, "interoperable-formats"]], "Model selection and evaluation": [[398, "model-selection-and-evaluation"]], "Array API support (experimental)": [[399, "array-api-support-experimental"]], "Example usage": [[399, "example-usage"]], "PyTorch Support": [[399, "pytorch-support"]], "Estimators with support for Array API-compatible inputs": [[399, "estimators-with-support-for-array-api-compatible-inputs"]], "Common estimator checks": [[399, "common-estimator-checks"]], "Spectral Co-Clustering": [[400, "spectral-co-clustering"]], "Mathematical formulation": [[400, "mathematical-formulation"], [400, "id3"], [403, "mathematical-formulation"], [403, "id16"], [403, "id23"], [403, "id33"], [403, "id37"], [410, "mathematical-formulation"], [977, "mathematical-formulation"], [984, "mathematical-formulation"], [985, "mathematical-formulation"], [995, "mathematical-formulation"], [996, "mathematical-formulation"], [997, "mathematical-formulation"]], "Spectral Biclustering": [[400, "spectral-biclustering"]], "Biclustering evaluation": [[400, "biclustering-evaluation"]], "Probability calibration": [[401, "probability-calibration"]], "Calibrating a classifier": [[401, "calibrating-a-classifier"]], "Usage": [[401, "usage"], [404, "usage"], [404, "id1"], [410, "usage"], [410, "id24"], [410, "id25"], [410, "id27"], [410, "id35"], [977, "usage"]], "Sigmoid": [[401, "sigmoid"]], "Isotonic": [[401, "isotonic"]], "Multiclass support": [[401, "multiclass-support"]], "API Reference": [[402, "api-reference"]], "sklearn.base: Base classes and utility functions": [[402, "module-sklearn.base"]], "Base classes": [[402, "base-classes"]], "Functions": [[402, "functions"], [402, "id1"]], "sklearn.calibration: Probability Calibration": [[402, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[402, "module-sklearn.cluster"]], "Classes": [[402, "classes"]], "sklearn.compose: Composite Estimators": [[402, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[402, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[402, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[402, "module-sklearn.datasets"]], "Loaders": [[402, "loaders"]], "Samples generator": [[402, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[402, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[402, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[402, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[402, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[402, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[402, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[402, "module-sklearn.feature_extraction"]], "From images": [[402, "module-sklearn.feature_extraction.image"]], "From text": [[402, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[402, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[402, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[402, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[402, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[402, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[402, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[402, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[402, "module-sklearn.linear_model"]], "Linear classifiers": [[402, "linear-classifiers"]], "Classical linear regressors": [[402, "classical-linear-regressors"]], "Regressors with variable selection": [[402, "regressors-with-variable-selection"]], "Bayesian regressors": [[402, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[402, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[402, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[402, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[402, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[402, "sklearn-metrics-metrics"]], "Model Selection Interface": [[402, "model-selection-interface"]], "Classification metrics": [[402, "classification-metrics"], [981, "classification-metrics"]], "Regression metrics": [[402, "regression-metrics"], [981, "regression-metrics"]], "Multilabel ranking metrics": [[402, "multilabel-ranking-metrics"], [981, "multilabel-ranking-metrics"]], "Clustering metrics": [[402, "clustering-metrics"], [981, "clustering-metrics"]], "Biclustering metrics": [[402, "biclustering-metrics"]], "Distance metrics": [[402, "distance-metrics"]], "Pairwise metrics": [[402, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[402, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[402, "module-sklearn.model_selection"]], "Splitter Classes": [[402, "splitter-classes"]], "Splitter Functions": [[402, "splitter-functions"]], "Hyper-parameter optimizers": [[402, "hyper-parameter-optimizers"]], "Model validation": [[402, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[402, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[402, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[402, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[402, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[402, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[402, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[402, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[402, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[402, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[402, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[402, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[402, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[402, "module-sklearn.utils"]], "Recently deprecated": [[402, "recently-deprecated"]], "Input data": [[403, null]], "Overview of clustering methods": [[403, "overview-of-clustering-methods"]], "K-means": [[403, "k-means"]], "Low-level parallelism": [[403, "low-level-parallelism"], [410, "low-level-parallelism"]], "Mini Batch K-Means": [[403, "mini-batch-k-means"]], "Affinity Propagation": [[403, "affinity-propagation"]], "Mean Shift": [[403, "mean-shift"]], "Spectral clustering": [[403, "spectral-clustering"]], "Different label assignment strategies": [[403, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[403, "spectral-clustering-graphs"]], "Hierarchical clustering": [[403, "hierarchical-clustering"]], "FeatureAgglomeration": [[403, null]], "Different linkage type: Ward, complete, average, and single linkage": [[403, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[403, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[403, "adding-connectivity-constraints"]], "Varying the metric": [[403, "varying-the-metric"]], "Bisecting K-Means": [[403, "bisecting-k-means"]], "DBSCAN": [[403, "dbscan"]], "Implementation": [[403, null], [984, "implementation"]], "Memory consumption for large sample sizes": [[403, null]], "HDBSCAN": [[403, "hdbscan"]], "Mutual Reachability Graph": [[403, "mutual-reachability-graph"]], "Hierarchical Clustering": [[403, "id11"]], "OPTICS": [[403, "optics"]], "Comparison with DBSCAN": [[403, null]], "Computational Complexity": [[403, null]], "BIRCH": [[403, "birch"]], "Clustering performance evaluation": [[403, "clustering-performance-evaluation"]], "Rand index": [[403, "rand-index"]], "Advantages": [[403, "advantages"], [403, "id14"], [403, "id21"], [403, "id25"], [403, "id28"], [403, "id31"], [403, "id35"], [403, "id39"]], "Drawbacks": [[403, "drawbacks"], [403, "id15"], [403, "id22"], [403, "id26"], [403, "id29"], [403, "id32"], [403, "id36"], [403, "id40"]], "Mutual Information based scores": [[403, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[403, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[403, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[403, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[403, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[403, "davies-bouldin-index"]], "Contingency Matrix": [[403, "contingency-matrix"]], "Pair Confusion Matrix": [[403, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[404, "pipeline-chaining-estimators"]], "Build a pipeline": [[404, "build-a-pipeline"]], "Access pipeline steps": [[404, "access-pipeline-steps"]], "Tracking feature names in a pipeline": [[404, "tracking-feature-names-in-a-pipeline"]], "Access to nested parameters": [[404, "access-to-nested-parameters"]], "Caching transformers: avoid repeated computation": [[404, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[404, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[404, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[404, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[404, "visualizing-composite-estimators"]], "Empirical covariance": [[405, "empirical-covariance"]], "Shrunk Covariance": [[405, "shrunk-covariance"]], "Basic shrinkage": [[405, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[405, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[405, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[405, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[405, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[405, "minimum-covariance-determinant"]], "PLSCanonical": [[406, "plscanonical"]], "Transforming data": [[406, "transforming-data"]], "Predicting the targets Y": [[406, "predicting-the-targets-y"]], "PLSSVD": [[406, "plssvd"]], "PLSRegression": [[406, "plsregression"]], "Canonical Correlation Analysis": [[406, "canonical-correlation-analysis"]], "Reference:": [[406, null]], "Cross-validation: evaluating estimator performance": [[407, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[407, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[407, null]], "The cross_validate function and multiple metric evaluation": [[407, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[407, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[407, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[407, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[407, "k-fold"]], "Repeated K-Fold": [[407, "repeated-k-fold"]], "Leave One Out (LOO)": [[407, "leave-one-out-loo"]], "Leave P Out (LPO)": [[407, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[407, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[407, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[407, "stratified-k-fold"]], "Stratified Shuffle Split": [[407, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[407, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[407, "group-k-fold"]], "StratifiedGroupKFold": [[407, "stratifiedgroupkfold"]], "Leave One Group Out": [[407, "leave-one-group-out"]], "Leave P Groups Out": [[407, "leave-p-groups-out"]], "Group Shuffle Split": [[407, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[407, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[407, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[407, "cross-validation-of-time-series-data"]], "Time Series Split": [[407, "time-series-split"]], "A note on shuffling": [[407, "a-note-on-shuffling"]], "Cross validation and model selection": [[407, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[408, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[408, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[408, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[408, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[408, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[408, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[408, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[408, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[408, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[408, "dictionary-learning"]], "Generic dictionary learning": [[408, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[408, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[408, null]], "Factor Analysis": [[408, "factor-analysis"]], "Independent component analysis (ICA)": [[408, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[408, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[408, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[408, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[408, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[408, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[409, "density-estimation"]], "Density Estimation: Histograms": [[409, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[410, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[410, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[410, null]], "Histogram-Based Gradient Boosting": [[410, "histogram-based-gradient-boosting"]], "Missing values support": [[410, "missing-values-support"]], "Sample weight support": [[410, "sample-weight-support"]], "Categorical Features Support": [[410, "categorical-features-support"]], "Interaction constraints": [[410, "interaction-constraints"]], "Why it\u2019s faster": [[410, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[410, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[410, "fitting-additional-weak-learners"]], "Controlling the tree size": [[410, "controlling-the-tree-size"]], "Loss Functions": [[410, "loss-functions"]], "Shrinkage via learning rate": [[410, "shrinkage-via-learning-rate"]], "Subsampling": [[410, "subsampling"]], "Interpretation with feature importance": [[410, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[410, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[410, "random-forests"]], "Extremely Randomized Trees": [[410, "extremely-randomized-trees"]], "Parallelization": [[410, "parallelization"]], "Feature importance evaluation": [[410, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[410, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[410, "bagging-meta-estimator"]], "Voting Classifier": [[410, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[410, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[410, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[410, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[410, "voting-regressor"]], "Stacked generalization": [[410, "stacked-generalization"]], "AdaBoost": [[410, "adaboost"]], "Feature extraction": [[411, "feature-extraction"]], "Loading features from dicts": [[411, "loading-features-from-dicts"]], "Feature hashing": [[411, "feature-hashing"]], "Text feature extraction": [[411, "text-feature-extraction"]], "The Bag of Words representation": [[411, "the-bag-of-words-representation"]], "Sparsity": [[411, "sparsity"], [1014, "sparsity"]], "Common Vectorizer usage": [[411, "common-vectorizer-usage"]], "Using stop words": [[411, "using-stop-words"]], "Tf\u2013idf term weighting": [[411, "tfidf-term-weighting"]], "Decoding text files": [[411, "decoding-text-files"]], "Applications and examples": [[411, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[411, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[411, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Customizing the vectorizer classes": [[411, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[411, "image-feature-extraction"]], "Patch extraction": [[411, "patch-extraction"]], "Connectivity graph of an image": [[411, "connectivity-graph-of-an-image"]], "Feature selection": [[412, "feature-selection"]], "Removing features with low variance": [[412, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[412, null]], "Feature selection using SelectFromModel": [[412, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[412, "l1-based-feature-selection"]], "Reference": [[412, null], [412, null]], "Tree-based feature selection": [[412, "tree-based-feature-selection"]], "Sequential Feature Selection": [[412, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[412, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[413, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[413, "gaussian-process-regression-gpr"]], "Gaussian Process Classification (GPC)": [[413, "gaussian-process-classification-gpc"]], "GPC examples": [[413, "gpc-examples"]], "Probabilistic predictions with GPC": [[413, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[413, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[413, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[413, "gaussian-process-kernel-api"]], "Basic kernels": [[413, "basic-kernels"]], "Kernel operators": [[413, "kernel-operators"]], "Radial basis function (RBF) kernel": [[413, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[413, "rational-quadratic-kernel"]], "Dot-Product kernel": [[413, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[414, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[415, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[416, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[417, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[417, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[418, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[419, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[420, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[420, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[421, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[422, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[423, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[423, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[424, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[425, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[426, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[426, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[427, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[427, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[428, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[429, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[430, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[431, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[431, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[432, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[432, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[433, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[434, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[434, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[435, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[435, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[436, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[436, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[437, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[437, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[438, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[438, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[439, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[439, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[440, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[440, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[441, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[441, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[442, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[442, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[443, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[443, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[444, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[444, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[445, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[445, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[446, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[446, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[447, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[447, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[448, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[448, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[449, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[449, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[450, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[451, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[452, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[452, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[453, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[454, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[454, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[455, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[456, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[456, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[457, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[458, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[458, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[459, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[459, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[460, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[460, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[461, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[461, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[462, "sklearn-config-context"]], "Examples using sklearn.config_context": [[462, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[463, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[463, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[464, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[464, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[465, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[466, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[466, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[467, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[467, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[468, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[468, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[469, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[469, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[470, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[470, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[471, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[471, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[472, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[473, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[473, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[474, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[475, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[476, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[476, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[477, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[477, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[478, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[478, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[479, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[480, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[481, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[481, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[482, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[482, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[483, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[483, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[484, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[484, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[485, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[485, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[486, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[486, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[487, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[488, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[488, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[489, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[489, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[490, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[490, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[491, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[492, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[492, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[493, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[493, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[494, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[494, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[495, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[495, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[496, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[496, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[497, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[498, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[498, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[499, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[500, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[500, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[501, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[502, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[503, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[504, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[504, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[505, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[505, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[506, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[506, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[507, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[507, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[508, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[508, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[509, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[509, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[510, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[511, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[512, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[513, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[513, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[514, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[514, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[515, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[515, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[516, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[516, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[517, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[517, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[518, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[518, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[519, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[519, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[520, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[520, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[521, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[521, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[522, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[523, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[524, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[524, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[525, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[526, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[526, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[527, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[527, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[528, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[528, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[529, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[529, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[530, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[530, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[531, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[531, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[532, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[532, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[533, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[533, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[534, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[534, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[535, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[535, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[536, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[536, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[537, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[537, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[538, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[538, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[539, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[540, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[541, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[542, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[543, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[543, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[544, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[544, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[545, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[545, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[546, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[546, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[547, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[547, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[548, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[548, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[549, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[550, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[550, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[551, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[551, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[552, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[552, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[553, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[553, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[554, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[554, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[555, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[555, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[556, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[556, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[557, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[557, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[558, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[558, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[559, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[559, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[560, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[560, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[561, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[561, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[562, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[562, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[563, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[563, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[564, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[564, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[565, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[565, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[566, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[567, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[568, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[569, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[570, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[571, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[572, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[573, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[574, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[575, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[575, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[576, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[576, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[577, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[578, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[578, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[579, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[580, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[581, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[581, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[582, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[582, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[583, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[583, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[584, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[584, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[585, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[585, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[586, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[587, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[587, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[588, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[588, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[589, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[590, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[591, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[591, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[592, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[593, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[593, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[594, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[594, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[595, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[596, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[596, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[597, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[598, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[598, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[599, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[599, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[600, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[600, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[601, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[601, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[602, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[602, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[603, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[604, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[604, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[605, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[605, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[606, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[607, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[607, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[608, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[608, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[609, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[609, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[610, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[611, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[611, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[612, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[612, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[613, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[613, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[614, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[615, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[616, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[616, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[617, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[617, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[618, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[619, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[619, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[620, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[621, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[621, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[622, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[622, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[623, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[624, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[624, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[625, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[625, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[625, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[626, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[626, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[626, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[627, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[627, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[628, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[628, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[629, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[629, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[630, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[631, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[632, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[633, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[633, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[634, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[634, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[635, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[635, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[636, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[637, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[637, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[638, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[638, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[639, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[639, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[640, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[640, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[641, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[641, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[642, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[642, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[643, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[643, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[644, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[645, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[646, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[646, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[647, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[647, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[648, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[649, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[649, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[650, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[650, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[651, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[651, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[652, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[652, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[653, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[653, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[654, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[655, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[656, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[656, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[657, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[658, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[658, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[659, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[659, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[660, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[660, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[661, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[662, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[662, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[663, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[663, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[664, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[664, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[665, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[665, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[666, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[666, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[667, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[667, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[668, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[668, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[669, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[670, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[670, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[671, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[671, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[672, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[672, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[673, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[673, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[674, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[674, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[675, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[675, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[676, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[676, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[677, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[678, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[678, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[679, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[680, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[681, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[682, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[682, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[683, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[683, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[684, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[684, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[685, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[685, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[686, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[686, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[687, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[687, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[688, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[689, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[690, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[691, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[691, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[691, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[691, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[692, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[692, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[693, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[694, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[694, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[694, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[694, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[695, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[695, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[695, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[695, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[696, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[696, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[696, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[696, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[697, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[697, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[698, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[698, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[699, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[699, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[700, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[700, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[701, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[701, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[702, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[703, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[703, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[704, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[705, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[706, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[706, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[707, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[707, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[708, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[709, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[710, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[711, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[711, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[712, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[712, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[713, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[713, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[714, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[715, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[716, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[717, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[718, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[719, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[720, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[720, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[721, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[722, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[722, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[723, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[724, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[725, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[726, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[727, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[727, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[728, "sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.hinge_loss": [[728, "examples-using-sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[729, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[730, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[730, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[731, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[731, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[732, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[733, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[734, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[734, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[735, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[735, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[736, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[737, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[738, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[738, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[739, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[740, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[741, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[741, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[742, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[742, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[743, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[743, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[744, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[745, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[745, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[746, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[746, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[747, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[748, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[748, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[749, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[750, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[750, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[751, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[752, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[753, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[754, "sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[754, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[755, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[756, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[757, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[758, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[759, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[760, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[761, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[762, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[763, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[764, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[765, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[766, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[767, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[768, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[769, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[770, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[771, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[771, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[772, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[772, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[773, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[774, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[775, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[775, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[776, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[777, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[777, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[778, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[778, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[779, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[779, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[780, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[780, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[781, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[781, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[782, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[782, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[783, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[783, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[784, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[784, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[785, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[786, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[786, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[787, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[787, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[788, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[788, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[789, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[789, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[790, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[790, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[791, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[791, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[792, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[792, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[793, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[793, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[794, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[794, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[795, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[795, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[796, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[796, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[796, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[797, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[798, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[799, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[800, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[801, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[802, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[803, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[804, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[804, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[805, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[805, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[806, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[806, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[807, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[807, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[808, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[808, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[809, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[809, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[810, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[810, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[811, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[811, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[812, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[812, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[813, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[814, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[814, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[815, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[815, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[816, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[816, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[817, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[817, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[818, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[818, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[819, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[819, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[820, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[820, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[821, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[822, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[822, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[823, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[824, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[824, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[825, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[826, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[826, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[827, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[828, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[828, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[829, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[830, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[830, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[831, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[831, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[832, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[832, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[833, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[834, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[835, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[835, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[836, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[836, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[837, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[837, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[838, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[838, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[839, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[839, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[840, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[840, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[841, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[841, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[842, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[842, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[843, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[844, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[845, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[846, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[846, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[847, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[848, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[849, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[849, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[850, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[850, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[851, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[851, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[852, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[852, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[853, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[853, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[854, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[854, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[855, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[856, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[857, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[857, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[858, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[858, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[859, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[860, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[860, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[861, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[862, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[862, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[863, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[863, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[864, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[865, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[865, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[866, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[866, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[867, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[867, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[868, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[868, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[869, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[869, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[870, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[870, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[871, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[871, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[872, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[872, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[873, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[873, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[874, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[874, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[875, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[876, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[877, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[877, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[878, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[879, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[879, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[880, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[881, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[882, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[882, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[883, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[884, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[885, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[886, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[886, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[887, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[887, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[888, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[889, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[889, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[890, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[890, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[891, "sklearn-set-config"]], "Examples using sklearn.set_config": [[891, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[892, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[893, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[893, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[894, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[895, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[895, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[896, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[896, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[897, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[897, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[898, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[898, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[899, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[899, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[900, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[900, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[901, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[901, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[902, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[902, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[903, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[904, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[905, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[906, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[907, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[907, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[908, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[908, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[909, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[910, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[911, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[912, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[913, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[914, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[915, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[916, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[916, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[917, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[918, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[919, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[920, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[921, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[922, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[923, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[924, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[925, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[925, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[926, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[927, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[927, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[928, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[929, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[930, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[931, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[932, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[933, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[934, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[934, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[935, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[936, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[937, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[938, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[938, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[939, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[939, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[940, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[940, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[941, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[941, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[942, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[942, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[943, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[944, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[945, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[946, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[947, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[948, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[949, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[950, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[951, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[952, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[953, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[954, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[955, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[955, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[956, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[957, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[958, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[959, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[960, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[961, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[962, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[963, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[964, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[965, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[965, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[966, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[967, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[968, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[969, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[970, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[970, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[970, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[970, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[970, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[970, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[970, "choosing-a-resource"]], "Exhausting the available resources": [[970, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[970, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[970, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[970, "tips-for-parameter-search"]], "Specifying an objective metric": [[970, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[970, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[970, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[970, "model-selection-development-and-evaluation"]], "Robustness to failure": [[970, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[970, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[970, "model-specific-cross-validation"]], "Information Criterion": [[970, "information-criterion"]], "Out of Bag Estimates": [[970, "out-of-bag-estimates"]], "Imputation of missing values": [[971, "imputation-of-missing-values"], [991, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[971, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[971, "univariate-feature-imputation"]], "Multivariate feature imputation": [[971, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[971, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[971, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[971, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[971, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[971, "marking-imputed-values"]], "Estimators that handle NaN values": [[971, "estimators-that-handle-nan-values"]], "Isotonic regression": [[972, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[973, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[973, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[973, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[973, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[973, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[973, "mathematical-details"]], "Kernel ridge regression": [[974, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[975, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[975, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[975, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[975, "qda"]], "LDA": [[975, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[975, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[975, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[975, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[976, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[976, "validation-curve"]], "Learning curve": [[976, "learning-curve"]], "Linear Models": [[977, "linear-models"]], "Ordinary Least Squares": [[977, "ordinary-least-squares"]], "Non-Negative Least Squares": [[977, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[977, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[977, "ridge-regression-and-classification"]], "Ridge Complexity": [[977, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[977, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[977, "setting-regularization-parameter"]], "Using cross-validation": [[977, "using-cross-validation"]], "Information-criteria based model selection": [[977, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[977, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[977, "multi-task-lasso"]], "Elastic-Net": [[977, "elastic-net"]], "Multi-task Elastic-Net": [[977, "multi-task-elastic-net"]], "Least Angle Regression": [[977, "least-angle-regression"]], "LARS Lasso": [[977, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[977, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[977, "bayesian-regression"]], "Bayesian Ridge Regression": [[977, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[977, "automatic-relevance-determination-ard"]], "Logistic regression": [[977, "logistic-regression"]], "Binary Case": [[977, "binary-case"]], "Multinomial Case": [[977, "multinomial-case"]], "Solvers": [[977, "solvers"]], "Differences from liblinear:": [[977, "liblinear-differences"]], "Practical considerations": [[977, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[977, "stochastic-gradient-descent-sgd"]], "Perceptron": [[977, "perceptron"]], "Passive Aggressive Algorithms": [[977, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[977, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[977, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[977, null]], "RANSAC: RANdom SAmple Consensus": [[977, "ransac-random-sample-consensus"]], "Details of the algorithm": [[977, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[977, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[977, "theoretical-considerations"]], "Huber Regression": [[977, "huber-regression"]], "Quantile Regression": [[977, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[977, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[978, "introduction"]], "Isomap": [[978, "isomap"]], "Locally Linear Embedding": [[978, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[978, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[978, "hessian-eigenmapping"]], "Spectral Embedding": [[978, "spectral-embedding"]], "Local Tangent Space Alignment": [[978, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[978, "multi-dimensional-scaling-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[978, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Tips on practical use": [[978, "tips-on-practical-use"], [997, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[979, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[979, "cosine-similarity"]], "Laplacian kernel": [[979, "laplacian-kernel"]], "Chi-squared kernel": [[979, "chi-squared-kernel"]], "Gaussian mixture models": [[980, "gaussian-mixture-models"]], "Gaussian Mixture": [[980, "gaussian-mixture"]], "Pros:": [[980, null], [980, null]], "Cons:": [[980, null], [980, null]], "Variational Bayesian Gaussian Mixture": [[980, "variational-bayesian-gaussian-mixture"]], "The Dirichlet Process": [[980, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[981, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[981, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[981, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[981, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[981, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[981, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[981, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[981, "accuracy-score"]], "Example:": [[981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [993, null], [1014, null]], "Top-k accuracy score": [[981, "top-k-accuracy-score"]], "Balanced accuracy score": [[981, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[981, "cohen-s-kappa"]], "Classification report": [[981, "classification-report"]], "Hamming loss": [[981, "hamming-loss"]], "Precision, recall and F-measures": [[981, "precision-recall-and-f-measures"]], "Binary classification": [[981, "binary-classification"]], "Multiclass and multilabel classification": [[981, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[981, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[981, "hinge-loss"]], "Log loss": [[981, "log-loss"]], "Matthews correlation coefficient": [[981, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[981, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[981, "receiver-operating-characteristic-roc"]], "Binary case": [[981, "binary-case"]], "Multi-class case": [[981, "multi-class-case"]], "Multi-label case": [[981, "multi-label-case"]], "Detection error tradeoff (DET)": [[981, "detection-error-tradeoff-det"]], "Zero one loss": [[981, "zero-one-loss"]], "Brier score loss": [[981, "brier-score-loss"]], "Class likelihood ratios": [[981, "class-likelihood-ratios"]], "Coverage error": [[981, "coverage-error"]], "Label ranking average precision": [[981, "label-ranking-average-precision"]], "Ranking loss": [[981, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[981, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[981, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[981, "mean-absolute-error"]], "Mean squared error": [[981, "mean-squared-error"]], "Mean squared logarithmic error": [[981, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[981, "mean-absolute-percentage-error"]], "Median absolute error": [[981, "median-absolute-error"]], "Max error": [[981, "max-error"]], "Explained variance score": [[981, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[981, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[981, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[981, "pinball-loss"]], "D\u00b2 score": [[981, "d2-score"]], "D\u00b2 Tweedie score": [[981, "d2-tweedie-score"]], "D\u00b2 pinball score": [[981, "d2-pinball-score"]], "D\u00b2 absolute error score": [[981, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[981, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[981, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[982, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[982, "multiclass-classification"], [1014, null]], "Target format": [[982, "target-format"], [982, "id5"], [982, "id8"], [982, "id10"]], "OneVsRestClassifier": [[982, "onevsrestclassifier"]], "OneVsOneClassifier": [[982, "onevsoneclassifier"]], "OutputCodeClassifier": [[982, "outputcodeclassifier"]], "MultiOutputClassifier": [[982, "multioutputclassifier"]], "ClassifierChain": [[982, "classifierchain"]], "Multiclass-multioutput classification": [[982, "multiclass-multioutput-classification"]], "Multioutput regression": [[982, "multioutput-regression"]], "MultiOutputRegressor": [[982, "multioutputregressor"]], "RegressorChain": [[982, "regressorchain"]], "Naive Bayes": [[983, "naive-bayes"]], "Multinomial Naive Bayes": [[983, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[983, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[983, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[983, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[983, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[984, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[984, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[984, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[984, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[984, "nearest-neighbor-algorithms"]], "Brute Force": [[984, "brute-force"]], "K-D Tree": [[984, "k-d-tree"]], "Ball Tree": [[984, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[984, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[984, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[984, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[984, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[984, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[984, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[984, "neighborhood-components-analysis"]], "Dimensionality reduction": [[984, "dimensionality-reduction"]], "Mahalanobis distance": [[984, "mahalanobis-distance"]], "Complexity": [[984, "complexity"], [985, "complexity"], [995, "complexity"], [996, "complexity"], [997, "complexity"]], "Transform": [[984, "transform"]], "Neural network models (supervised)": [[985, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[985, "multi-layer-perceptron"]], "Regularization": [[985, "regularization"]], "Algorithms": [[985, "algorithms"]], "Tips on Practical Use": [[985, "tips-on-practical-use"], [995, "tips-on-practical-use"], [996, "tips-on-practical-use"]], "More control with warm_start": [[985, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[986, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[986, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[986, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[986, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[986, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[987, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[987, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[987, "novelty-detection"]], "Scaling up the One-Class SVM": [[987, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[987, "id1"]], "Fitting an elliptic envelope": [[987, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[987, "isolation-forest"]], "Local Outlier Factor": [[987, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[987, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[988, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[988, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[988, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[988, "mathematical-definition"]], "Computation methods": [[988, "computation-methods"]], "Permutation feature importance": [[989, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[989, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[989, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[989, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[991, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[991, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[991, "scaling-features-to-a-range"]], "Scaling sparse data": [[991, "scaling-sparse-data"]], "Scaling data with outliers": [[991, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[991, null]], "Centering kernel matrices": [[991, "centering-kernel-matrices"]], "Non-linear transformation": [[991, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[991, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[991, "mapping-to-a-gaussian-distribution"]], "Normalization": [[991, "normalization"]], "Sparse input": [[991, null], [991, null]], "Encoding categorical features": [[991, "encoding-categorical-features"]], "Infrequent categories": [[991, "infrequent-categories"]], "Target Encoder": [[991, "target-encoder"]], "Discretization": [[991, "discretization"]], "K-bins discretization": [[991, "k-bins-discretization"]], "Feature binarization": [[991, "feature-binarization"]], "Generating polynomial features": [[991, "generating-polynomial-features"]], "Polynomial features": [[991, "polynomial-features"]], "Spline transformer": [[991, "spline-transformer"]], "Custom transformers": [[991, "custom-transformers"]], "Transforming the prediction target (y)": [[992, "transforming-the-prediction-target-y"]], "Label binarization": [[992, "label-binarization"]], "LabelBinarizer": [[992, "labelbinarizer"]], "MultiLabelBinarizer": [[992, "multilabelbinarizer"]], "Label encoding": [[992, "label-encoding"]], "Random Projection": [[993, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[993, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[993, "gaussian-random-projection"]], "Sparse random projection": [[993, "sparse-random-projection"]], "Inverse Transform": [[993, "inverse-transform"]], "Unlabeled entries in y": [[994, null]], "Self Training": [[994, "self-training"]], "Label Propagation": [[994, "label-propagation"]], "Stochastic Gradient Descent": [[995, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[995, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[995, "stopping-criterion"]], "SGD": [[995, "id5"]], "Implementation details": [[995, "implementation-details"], [996, "implementation-details"]], "Multi-class classification": [[996, "multi-class-classification"]], "Scores and probabilities": [[996, "scores-and-probabilities"]], "Unbalanced problems": [[996, "unbalanced-problems"]], "Density estimation, novelty detection": [[996, "density-estimation-novelty-detection"]], "Kernel functions": [[996, "kernel-functions"]], "Parameters of the RBF Kernel": [[996, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[996, "custom-kernels"]], "SVC": [[996, "svc"]], "SVR": [[996, "svr"]], "Multi-output problems": [[997, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[997, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[997, "classification-criteria"]], "Regression criteria": [[997, "regression-criteria"]], "Missing Values Support": [[997, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[997, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[998, "unsupervised-dimensionality-reduction"]], "Pipelining": [[998, null], [1012, "pipelining"]], "PCA: principal component analysis": [[998, "pca-principal-component-analysis"]], "Random projections": [[998, "random-projections"]], "Feature scaling": [[998, null]], "Welcome to scikit-learn": [[999, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[1000, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[1000, "new-to-scientific-python"]], "External Tutorials": [[1000, "external-tutorials"]], "Videos": [[1000, "videos"]], "Related Projects": [[1001, "related-projects"]], "Interoperability and framework enhancements": [[1001, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[1001, "other-estimators-and-tasks"]], "Statistical learning with Python": [[1001, "statistical-learning-with-python"]], "Recommendation Engine packages": [[1001, "recommendation-engine-packages"]], "Domain specific packages": [[1001, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[1001, "translations-of-scikit-learn-documentation"]], "Roadmap": [[1002, "id1"]], "Purpose of this document": [[1002, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[1002, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[1002, "architectural-general-goals"]], "Subpackage-specific goals": [[1002, "subpackage-specific-goals"]], "Supervised learning": [[1003, "supervised-learning"]], "Support": [[1004, "support"]], "Mailing List": [[1004, "mailing-list"]], "User questions": [[1004, "user-questions"]], "Bug tracker": [[1004, "bug-tracker"]], "Gitter": [[1004, "gitter"]], "Documentation resources": [[1004, "documentation-resources"]], "Who is using scikit-learn?": [[1005, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1005, "id1"]], "Spotify": [[1005, "id2"]], "Inria": [[1005, "id3"]], "betaworks": [[1005, "id4"]], "Hugging Face": [[1005, "id5"]], "Evernote": [[1005, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1005, "id7"]], "Booking.com": [[1005, "id8"]], "AWeber": [[1005, "id9"]], "Yhat": [[1005, "id10"]], "Rangespan": [[1005, "id11"]], "Birchbox": [[1005, "id12"]], "Bestofmedia Group": [[1005, "id13"]], "Change.org": [[1005, "id14"]], "PHIMECA Engineering": [[1005, "id15"]], "HowAboutWe": [[1005, "id16"]], "PeerIndex": [[1005, "id17"]], "DataRobot": [[1005, "id18"]], "OkCupid": [[1005, "id19"]], "Lovely": [[1005, "id20"]], "Data Publica": [[1005, "id21"]], "Machinalis": [[1005, "id22"]], "solido": [[1005, "id23"]], "INFONEA": [[1005, "id24"]], "Dataiku": [[1005, "id25"]], "Otto Group": [[1005, "id26"]], "Zopa": [[1005, "id27"]], "MARS": [[1005, "id28"]], "BNP Paribas Cardif": [[1005, "id29"]], "An introduction to machine learning with scikit-learn": [[1007, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1007, null]], "Machine learning: the problem setting": [[1007, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1007, null], [1014, null]], "Loading an example dataset": [[1007, "loading-an-example-dataset"]], "Shape of the data arrays": [[1007, null]], "Learning and predicting": [[1007, "learning-and-predicting"]], "Choosing the parameters of the model": [[1007, null]], "Conventions": [[1007, "conventions"]], "Type casting": [[1007, "type-casting"]], "Refitting and updating parameters": [[1007, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1007, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1008, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1009, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1010, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1010, null]], "Model selection: choosing estimators and their parameters": [[1011, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1011, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1011, "cross-validation-generators"]], "Exercise": [[1011, null], [1011, null], [1014, null], [1014, null]], "Grid-search and cross-validated estimators": [[1011, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1011, "grid-search"]], "Nested cross-validation": [[1011, null]], "Cross-validated estimators": [[1011, "cross-validated-estimators"]], "Putting it all together": [[1012, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1012, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1012, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1013, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1013, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1013, null]], "An example of reshaping data would be the digits dataset": [[1013, null]], "Estimators objects": [[1013, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1014, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1014, null]], "Vocabulary: classification and regression": [[1014, null]], "Nearest neighbor and the curse of dimensionality": [[1014, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1014, null]], "k-Nearest neighbors classifier": [[1014, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1014, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1014, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1014, "linear-regression"]], "Shrinkage": [[1014, "shrinkage"]], "Different algorithms for the same problem": [[1014, null]], "Shrinkage and sparsity with logistic regression": [[1014, null]], "Support vector machines (SVMs)": [[1014, "support-vector-machines-svms"]], "Linear SVMs": [[1014, "linear-svms"]], "Using kernels": [[1014, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1014, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1014, null]], "Unsupervised learning: seeking representations of the data": [[1015, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1015, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1015, null]], "K-means clustering": [[1015, "k-means-clustering"]], "Application example: vector quantization": [[1015, null]], "Hierarchical agglomerative clustering: Ward": [[1015, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1015, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1015, null]], "Decompositions: from a signal to components and loadings": [[1015, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1015, null]], "Principal component analysis: PCA": [[1015, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1015, "independent-component-analysis-ica"]], "Working With Text Data": [[1016, "working-with-text-data"]], "Tutorial setup": [[1016, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1016, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1016, "extracting-features-from-text-files"]], "Bags of words": [[1016, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1016, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1016, "from-occurrences-to-frequencies"]], "Training a classifier": [[1016, "training-a-classifier"]], "Building a pipeline": [[1016, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1016, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1016, "parameter-tuning-using-grid-search"]], "Exercises": [[1016, "exercises"]], "Exercise 1: Language identification": [[1016, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1016, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1016, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1016, "where-to-from-here"]], "Unsupervised learning": [[1017, "unsupervised-learning"]], "User Guide": [[1018, "user-guide"]], "Under Development": [[1018, "under-development"]], "Visualizations": [[1019, "visualizations"]], "Available Plotting Utilities": [[1019, "available-plotting-utilities"]], "Display Objects": [[1019, "display-objects"]], "Release History": [[1020, "release-history"]], "Version 0.12.1": [[1022, "version-0-12-1"]], "Changelog": [[1022, "changelog"], [1022, "id1"], [1022, "id3"], [1022, "id6"], [1022, "id9"], [1022, "id12"], [1022, "id14"], [1022, "id16"], [1022, "id18"], [1022, "id19"], [1023, "changelog"], [1023, "id1"], [1024, "changelog"], [1025, "changelog"], [1026, "changelog"], [1026, "id1"], [1027, "changelog"], [1027, "id1"], [1028, "changelog"], [1028, "id1"], [1028, "id2"], [1029, "changelog"], [1029, "id1"], [1030, "changelog"], [1030, "id1"], [1030, "id5"], [1030, "id10"], [1030, "id23"], [1031, "changelog"], [1031, "id1"], [1031, "id2"], [1031, "id7"], [1032, "changelog"], [1032, "id1"], [1032, "id4"], [1033, "changelog"], [1033, "id1"], [1033, "id4"], [1034, "changelog"], [1034, "id1"], [1034, "id4"], [1035, "changelog"], [1035, "id1"], [1035, "id7"], [1036, "changelog"], [1036, "id1"], [1036, "id7"], [1037, "changelog"], [1037, "id1"], [1037, "id9"], [1038, "changelog"], [1038, "id1"], [1038, "id6"]], "People": [[1022, "people"], [1022, "id2"], [1022, "id5"], [1022, "id8"], [1022, "id11"], [1022, "id13"], [1022, "id15"], [1022, "id17"], [1023, "people"], [1023, "id2"], [1024, "people"], [1025, "people"]], "Version 0.12": [[1022, "version-0-12"]], "API changes summary": [[1022, "api-changes-summary"], [1022, "id4"], [1022, "id7"], [1022, "id10"], [1023, "api-changes-summary"], [1024, "api-changes-summary"], [1025, "api-changes-summary"], [1026, "api-changes-summary"], [1027, "api-changes-summary"], [1028, "api-changes-summary"], [1028, "id5"], [1029, "api-changes-summary"]], "Version 0.11": [[1022, "version-0-11"]], "Highlights": [[1022, "highlights"], [1025, "highlights"], [1026, "highlights"], [1029, "highlights"], [1030, "highlights"]], "Other changes": [[1022, "other-changes"]], "Version 0.10": [[1022, "version-0-10"]], "Version 0.9": [[1022, "version-0-9"]], "Version 0.8": [[1022, "version-0-8"]], "Version 0.7": [[1022, "version-0-7"]], "Version 0.6": [[1022, "version-0-6"]], "Version 0.5": [[1022, "version-0-5"]], "New classes": [[1022, "new-classes"]], "Fixes": [[1022, "fixes"]], "External dependencies": [[1022, "external-dependencies"]], "Removed modules": [[1022, "removed-modules"]], "Misc": [[1022, "misc"]], "Version 0.4": [[1022, "version-0-4"]], "Earlier versions": [[1022, "earlier-versions"]], "Version 0.13.1": [[1023, "version-0-13-1"]], "Version 0.13": [[1023, "version-0-13"]], "New Estimator Classes": [[1023, "new-estimator-classes"]], "Version 0.14": [[1024, "version-0-14"]], "Version 0.15.2": [[1025, "version-0-15-2"]], "Bug fixes": [[1025, "bug-fixes"], [1025, "id1"], [1025, "id2"], [1026, "bug-fixes"], [1026, "id2"], [1027, "bug-fixes"], [1027, "id2"], [1028, "bug-fixes"], [1028, "id4"], [1029, "bug-fixes"], [1029, "id3"]], "Version 0.15.1": [[1025, "version-0-15-1"]], "Version 0.15": [[1025, "version-0-15"]], "New features": [[1025, "new-features"], [1026, "new-features"], [1027, "new-features"], [1028, "new-features"], [1029, "new-features"]], "Enhancements": [[1025, "enhancements"], [1026, "enhancements"], [1027, "enhancements"], [1028, "enhancements"], [1028, "id3"], [1029, "enhancements"], [1029, "id2"]], "Documentation improvements": [[1025, "documentation-improvements"], [1026, "documentation-improvements"]], "Version 0.16.1": [[1026, "version-0-16-1"]], "Version 0.16": [[1026, "version-0-16"]], "Code Contributors": [[1026, "code-contributors"], [1027, "code-contributors"], [1028, "code-contributors"], [1028, "id6"]], "Version 0.17.1": [[1027, "version-0-17-1"]], "Version 0.17": [[1027, "version-0-17"]], "Version 0.18.2": [[1028, "version-0-18-2"]], "Last release with Python 2.6 support": [[1028, null], [1028, null]], "Version 0.18.1": [[1028, "version-0-18-1"]], "Version 0.18": [[1028, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1028, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1029, "version-0-19-2"]], "Related changes": [[1029, "related-changes"]], "Version 0.19.1": [[1029, "version-0-19-1"]], "API changes": [[1029, "api-changes"]], "Code and Documentation Contributors": [[1029, "code-and-documentation-contributors"], [1029, "id9"], [1030, "code-and-documentation-contributors"], [1030, "id8"], [1030, "id21"], [1030, "id41"], [1031, "code-and-documentation-contributors"], [1032, "code-and-documentation-contributors"], [1033, "code-and-documentation-contributors"], [1034, "code-and-documentation-contributors"], [1035, "code-and-documentation-contributors"], [1036, "code-and-documentation-contributors"], [1037, "code-and-documentation-contributors"], [1038, "code-and-documentation-contributors"]], "Version 0.19": [[1029, "version-0-19"]], "Changed models": [[1029, "changed-models"], [1030, "changed-models"], [1030, "id9"], [1030, "id22"], [1031, "changed-models"], [1031, "id6"], [1032, "changed-models"], [1033, "changed-models"], [1033, "id3"], [1034, "changed-models"], [1035, "changed-models"], [1036, "changed-models"], [1036, "id6"], [1037, "changed-models"], [1037, "id7"], [1038, "changed-models"], [1038, "id4"]], "Version 0.20.4": [[1030, "version-0-20-4"]], "sklearn.cluster": [[1030, "sklearn-cluster"], [1030, "id2"], [1030, "id11"], [1030, "id24"], [1031, "sklearn-cluster"], [1031, "id8"], [1032, "sklearn-cluster"], [1032, "id5"], [1033, "sklearn-cluster"], [1033, "id2"], [1033, "id5"], [1034, "sklearn-cluster"], [1035, "sklearn-cluster"], [1035, "id2"], [1035, "id9"], [1036, "sklearn-cluster"], [1036, "id8"], [1037, "sklearn-cluster"], [1037, "id12"], [1038, "sklearn-cluster"], [1038, "id8"]], "sklearn.compose": [[1030, "sklearn-compose"], [1030, "id3"], [1030, "id6"], [1030, "id12"], [1030, "id25"], [1031, "sklearn-compose"], [1031, "id9"], [1032, "sklearn-compose"], [1033, "sklearn-compose"], [1034, "sklearn-compose"], [1034, "id5"], [1035, "sklearn-compose"], [1036, "sklearn-compose"], [1037, "sklearn-compose"], [1038, "sklearn-compose"]], "sklearn.decomposition": [[1030, "sklearn-decomposition"], [1030, "id4"], [1030, "id14"], [1030, "id28"], [1031, "sklearn-decomposition"], [1031, "id11"], [1032, "sklearn-decomposition"], [1033, "sklearn-decomposition"], [1033, "id6"], [1034, "sklearn-decomposition"], [1034, "id7"], [1035, "sklearn-decomposition"], [1035, "id11"], [1036, "sklearn-decomposition"], [1036, "id10"], [1037, "sklearn-decomposition"], [1037, "id14"], [1038, "sklearn-decomposition"], [1038, "id10"]], "sklearn.model_selection": [[1030, "sklearn-model-selection"], [1030, "id35"], [1031, "sklearn-model-selection"], [1032, "sklearn-model-selection"], [1032, "id9"], [1032, "id13"], [1033, "sklearn-model-selection"], [1034, "sklearn-model-selection"], [1034, "id13"], [1035, "sklearn-model-selection"], [1036, "sklearn-model-selection"], [1037, "sklearn-model-selection"], [1037, "id20"], [1038, "sklearn-model-selection"]], "sklearn.neighbors": [[1030, "sklearn-neighbors"], [1030, "id7"], [1030, "id18"], [1030, "id36"], [1031, "sklearn-neighbors"], [1031, "id5"], [1031, "id17"], [1032, "sklearn-neighbors"], [1032, "id11"], [1034, "sklearn-neighbors"], [1035, "sklearn-neighbors"], [1035, "id5"], [1035, "id18"], [1036, "sklearn-neighbors"], [1037, "sklearn-neighbors"], [1038, "sklearn-neighbors"], [1038, "id15"]], "Version 0.20.3": [[1030, "version-0-20-3"]], "sklearn.covariance": [[1030, "sklearn-covariance"], [1030, "id26"], [1034, "sklearn-covariance"], [1035, "sklearn-covariance"], [1036, "sklearn-covariance"], [1038, "sklearn-covariance"]], "sklearn.datasets": [[1030, "sklearn-datasets"], [1030, "id13"], [1030, "id27"], [1031, "sklearn-datasets"], [1031, "id10"], [1032, "sklearn-datasets"], [1033, "sklearn-datasets"], [1034, "sklearn-datasets"], [1035, "sklearn-datasets"], [1035, "id10"], [1036, "sklearn-datasets"], [1036, "id9"], [1037, "sklearn-datasets"], [1037, "id13"], [1038, "sklearn-datasets"], [1038, "id9"]], "sklearn.feature_extraction": [[1030, "sklearn-feature-extraction"], [1030, "id15"], [1030, "id30"], [1031, "sklearn-feature-extraction"], [1032, "sklearn-feature-extraction"], [1033, "sklearn-feature-extraction"], [1033, "id8"], [1034, "sklearn-feature-extraction"], [1034, "id9"], [1035, "sklearn-feature-extraction"], [1035, "id13"], [1036, "sklearn-feature-extraction"], [1037, "sklearn-feature-extraction"], [1038, "sklearn-feature-extraction"]], "sklearn.impute": [[1030, "sklearn-impute"], [1030, "id31"], [1031, "sklearn-impute"], [1031, "id13"], [1032, "sklearn-impute"], [1032, "id6"], [1033, "sklearn-impute"], [1034, "sklearn-impute"], [1035, "sklearn-impute"], [1036, "sklearn-impute"], [1036, "id12"], [1037, "sklearn-impute"], [1038, "sklearn-impute"], [1038, "id13"]], "sklearn.linear_model": [[1030, "sklearn-linear-model"], [1030, "id16"], [1030, "id32"], [1031, "sklearn-linear-model"], [1031, "id15"], [1032, "sklearn-linear-model"], [1033, "sklearn-linear-model"], [1033, "id9"], [1034, "sklearn-linear-model"], [1034, "id11"], [1035, "sklearn-linear-model"], [1035, "id4"], [1035, "id15"], [1036, "sklearn-linear-model"], [1036, "id13"], [1037, "sklearn-linear-model"], [1037, "id18"], [1038, "sklearn-linear-model"]], "sklearn.preprocessing": [[1030, "sklearn-preprocessing"], [1030, "id19"], [1030, "id37"], [1031, "sklearn-preprocessing"], [1031, "id18"], [1032, "sklearn-preprocessing"], [1032, "id12"], [1033, "sklearn-preprocessing"], [1034, "sklearn-preprocessing"], [1034, "id15"], [1035, "sklearn-preprocessing"], [1035, "id20"], [1036, "sklearn-preprocessing"], [1036, "id4"], [1036, "id16"], [1037, "sklearn-preprocessing"], [1037, "id4"], [1037, "id22"], [1038, "sklearn-preprocessing"], [1038, "id16"]], "sklearn.svm": [[1030, "sklearn-svm"], [1030, "id38"], [1031, "sklearn-svm"], [1032, "sklearn-svm"], [1033, "sklearn-svm"], [1034, "sklearn-svm"], [1035, "sklearn-svm"], [1035, "id21"], [1036, "sklearn-svm"], [1037, "sklearn-svm"], [1038, "sklearn-svm"]], "Version 0.20.2": [[1030, "version-0-20-2"]], "sklearn.metrics": [[1030, "sklearn-metrics"], [1030, "id17"], [1030, "id33"], [1031, "sklearn-metrics"], [1031, "id4"], [1031, "id16"], [1032, "sklearn-metrics"], [1032, "id2"], [1032, "id8"], [1033, "sklearn-metrics"], [1033, "id10"], [1034, "sklearn-metrics"], [1034, "id2"], [1034, "id12"], [1035, "sklearn-metrics"], [1035, "id17"], [1036, "sklearn-metrics"], [1036, "id3"], [1036, "id15"], [1037, "sklearn-metrics"], [1038, "sklearn-metrics"], [1038, "id2"], [1038, "id14"]], "sklearn.utils": [[1030, "sklearn-utils"], [1030, "id20"], [1030, "id39"], [1031, "sklearn-utils"], [1032, "sklearn-utils"], [1032, "id14"], [1033, "sklearn-utils"], [1033, "id12"], [1034, "sklearn-utils"], [1034, "id18"], [1035, "sklearn-utils"], [1035, "id6"], [1035, "id23"], [1036, "sklearn-utils"], [1036, "id18"], [1037, "sklearn-utils"], [1037, "id6"], [1037, "id24"], [1038, "sklearn-utils"]], "Version 0.20.1": [[1030, "version-0-20-1"]], "sklearn.ensemble": [[1030, "sklearn-ensemble"], [1030, "id29"], [1031, "sklearn-ensemble"], [1031, "id12"], [1032, "sklearn-ensemble"], [1033, "sklearn-ensemble"], [1033, "id7"], [1034, "sklearn-ensemble"], [1034, "id8"], [1035, "sklearn-ensemble"], [1035, "id3"], [1035, "id12"], [1036, "sklearn-ensemble"], [1037, "sklearn-ensemble"], [1037, "id3"], [1037, "id15"], [1038, "sklearn-ensemble"], [1038, "id11"]], "sklearn.mixture": [[1030, "sklearn-mixture"], [1030, "id34"], [1031, "sklearn-mixture"], [1035, "sklearn-mixture"], [1036, "sklearn-mixture"], [1038, "sklearn-mixture"]], "Version 0.20.0": [[1030, "version-0-20-0"]], "Known Major Bugs": [[1030, "known-major-bugs"], [1031, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1030, "sklearn-discriminant-analysis"], [1031, "sklearn-discriminant-analysis"], [1034, "sklearn-discriminant-analysis"], [1036, "sklearn-discriminant-analysis"], [1037, "sklearn-discriminant-analysis"], [1038, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1030, "sklearn-dummy"], [1031, "sklearn-dummy"], [1032, "sklearn-dummy"], [1035, "sklearn-dummy"], [1036, "sklearn-dummy"]], "sklearn.feature_selection": [[1030, "sklearn-feature-selection"], [1032, "sklearn-feature-selection"], [1033, "sklearn-feature-selection"], [1034, "sklearn-feature-selection"], [1035, "sklearn-feature-selection"], [1035, "id14"], [1036, "sklearn-feature-selection"], [1036, "id2"], [1036, "id11"], [1037, "sklearn-feature-selection"], [1037, "id16"], [1038, "sklearn-feature-selection"], [1038, "id12"]], "sklearn.gaussian_process": [[1030, "sklearn-gaussian-process"], [1032, "sklearn-gaussian-process"], [1033, "sklearn-gaussian-process"], [1034, "sklearn-gaussian-process"], [1034, "id10"], [1035, "sklearn-gaussian-process"], [1036, "sklearn-gaussian-process"], [1037, "sklearn-gaussian-process"], [1038, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1030, "sklearn-isotonic"], [1031, "sklearn-isotonic"], [1032, "sklearn-isotonic"], [1034, "sklearn-isotonic"], [1036, "sklearn-isotonic"], [1037, "sklearn-isotonic"]], "sklearn.manifold": [[1030, "sklearn-manifold"], [1031, "sklearn-manifold"], [1032, "sklearn-manifold"], [1033, "sklearn-manifold"], [1034, "sklearn-manifold"], [1035, "sklearn-manifold"], [1035, "id16"], [1036, "sklearn-manifold"], [1036, "id14"], [1037, "sklearn-manifold"], [1037, "id19"], [1038, "sklearn-manifold"]], "sklearn.multioutput": [[1030, "sklearn-multioutput"], [1031, "sklearn-multioutput"], [1032, "sklearn-multioutput"], [1033, "sklearn-multioutput"], [1034, "sklearn-multioutput"], [1034, "id14"], [1037, "sklearn-multioutput"], [1038, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1030, "sklearn-naive-bayes"], [1032, "sklearn-naive-bayes"], [1032, "id10"], [1033, "sklearn-naive-bayes"], [1034, "sklearn-naive-bayes"], [1035, "sklearn-naive-bayes"], [1037, "sklearn-naive-bayes"], [1038, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1030, "sklearn-neural-network"], [1031, "sklearn-neural-network"], [1032, "sklearn-neural-network"], [1033, "sklearn-neural-network"], [1034, "sklearn-neural-network"], [1035, "sklearn-neural-network"], [1036, "sklearn-neural-network"], [1037, "sklearn-neural-network"], [1037, "id21"], [1038, "sklearn-neural-network"]], "sklearn.pipeline": [[1030, "sklearn-pipeline"], [1031, "sklearn-pipeline"], [1032, "sklearn-pipeline"], [1033, "sklearn-pipeline"], [1034, "sklearn-pipeline"], [1035, "sklearn-pipeline"], [1035, "id19"], [1036, "sklearn-pipeline"], [1037, "sklearn-pipeline"], [1038, "sklearn-pipeline"]], "sklearn.tree": [[1030, "sklearn-tree"], [1031, "sklearn-tree"], [1031, "id19"], [1032, "sklearn-tree"], [1033, "sklearn-tree"], [1034, "sklearn-tree"], [1034, "id17"], [1035, "sklearn-tree"], [1035, "id22"], [1036, "sklearn-tree"], [1036, "id5"], [1036, "id17"], [1037, "sklearn-tree"], [1037, "id5"], [1037, "id23"], [1038, "sklearn-tree"], [1038, "id3"], [1038, "id17"]], "Multiple modules": [[1030, "multiple-modules"], [1031, "multiple-modules"]], "Changes to estimator checks": [[1030, "changes-to-estimator-checks"], [1031, "changes-to-estimator-checks"], [1032, "changes-to-estimator-checks"]], "Version 0.21.3": [[1031, "version-0-21-3"]], "Legend for changelogs": [[1031, "legend-for-changelogs"], [1032, "legend-for-changelogs"], [1033, "legend-for-changelogs"], [1034, "legend-for-changelogs"], [1035, "legend-for-changelogs"], [1036, "legend-for-changelogs"], [1037, "legend-for-changelogs"], [1038, "legend-for-changelogs"]], "sklearn.inspection": [[1031, "sklearn-inspection"], [1031, "id3"], [1031, "id14"], [1032, "sklearn-inspection"], [1032, "id7"], [1033, "sklearn-inspection"], [1033, "id11"], [1034, "sklearn-inspection"], [1035, "sklearn-inspection"], [1036, "sklearn-inspection"], [1037, "sklearn-inspection"], [1037, "id17"], [1038, "sklearn-inspection"]], "Version 0.21.2": [[1031, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1031, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1031, "version-0-21-1"]], "Version 0.21.0": [[1031, "version-0-21-0"]], "sklearn.base": [[1031, "sklearn-base"], [1032, "sklearn-base"], [1034, "sklearn-base"], [1035, "sklearn-base"], [1036, "sklearn-base"], [1037, "sklearn-base"], [1037, "id2"], [1037, "id10"], [1038, "sklearn-base"]], "sklearn.calibration": [[1031, "sklearn-calibration"], [1032, "sklearn-calibration"], [1034, "sklearn-calibration"], [1035, "sklearn-calibration"], [1035, "id8"], [1036, "sklearn-calibration"], [1037, "sklearn-calibration"], [1037, "id11"], [1038, "sklearn-calibration"], [1038, "id7"]], "sklearn.externals": [[1031, "sklearn-externals"]], "sklearn.multiclass": [[1031, "sklearn-multiclass"], [1034, "sklearn-multiclass"], [1035, "sklearn-multiclass"], [1036, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1032, "version-0-22-2-post1"]], "Version 0.22.1": [[1032, "version-0-22-1"]], "sklearn.semi_supervised": [[1032, "sklearn-semi-supervised"], [1033, "sklearn-semi-supervised"], [1034, "sklearn-semi-supervised"], [1034, "id3"], [1034, "id16"], [1038, "sklearn-semi-supervised"]], "Version 0.22.0": [[1032, "version-0-22-0"]], "Website update": [[1032, "website-update"]], "Clear definition of the public API": [[1032, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1032, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1032, "sklearn-cross-decomposition"], [1034, "sklearn-cross-decomposition"], [1034, "id6"], [1036, "sklearn-cross-decomposition"], [1038, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1032, "sklearn-kernel-approximation"], [1034, "sklearn-kernel-approximation"], [1035, "sklearn-kernel-approximation"], [1036, "sklearn-kernel-approximation"], [1037, "sklearn-kernel-approximation"], [1038, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1033, "version-0-23-2"]], "Version 0.23.1": [[1033, "version-0-23-1"]], "Version 0.23.0": [[1033, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1033, "enforcing-keyword-only-arguments"], [1035, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1034, "version-0-24-2"]], "Version 0.24.1": [[1034, "version-0-24-1"]], "Packaging": [[1034, "packaging"]], "Version 0.24.0": [[1034, "version-0-24-0"]], "sklearn.exceptions": [[1034, "sklearn-exceptions"], [1038, "sklearn-exceptions"]], "Version 1.0.2": [[1035, "version-1-0-2"]], "Version 1.0.1": [[1035, "version-1-0-1"]], "Fixed models": [[1035, "fixed-models"]], "Version 1.0.0": [[1035, "version-1-0-0"]], "Minimal dependencies": [[1035, "minimal-dependencies"], [1036, "minimal-dependencies"]], "Version 1.1.3": [[1036, "version-1-1-3"]], "Version 1.1.2": [[1036, "version-1-1-2"]], "Version 1.1.1": [[1036, "version-1-1-1"]], "Version 1.1.0": [[1036, "version-1-1-0"]], "sklearn.random_projection": [[1036, "sklearn-random-projection"]], "Version 1.2.2": [[1037, "version-1-2-2"]], "Version 1.2.1": [[1037, "version-1-2-1"]], "Changes impacting all modules": [[1037, "changes-impacting-all-modules"], [1037, "id8"], [1038, "changes-impacting-all-modules"], [1038, "id5"]], "Version 1.2.0": [[1037, "version-1-2-0"]], "Version 1.3.2": [[1038, "version-1-3-2"]], "Version 1.3.1": [[1038, "version-1-3-1"]], "Version 1.3.0": [[1038, "version-1-3-0"]], "Changed displays": [[1038, "changed-displays"]], "Experimental / Under Development": [[1038, "experimental-under-development"]], "sklearn": [[1038, "sklearn"]]}, "indexentries": {"1d": [[390, "term-1d"]], "1d array": [[390, "term-1d-array"]], "2d": [[390, "term-2d"]], "2d array": [[390, "term-2d-array"]], "api": [[390, "term-API"]], "cv splitter": [[390, "term-CV-splitter"]], "slep": [[390, "term-SLEP"]], "sleps": [[390, "term-SLEPs"]], "x": [[390, "term-X"]], "xt": [[390, "term-Xt"]], "y": [[390, "term-Y"], [390, "term-y"]], "_estimator_type": [[390, "term-_estimator_type"]], "array-like": [[390, "term-array-like"]], "attribute": [[390, "term-attribute"]], "attributes": [[390, "term-attributes"]], "backwards compatibility": [[390, "term-backwards-compatibility"]], "binary": [[390, "term-binary"]], "callable": [[390, "term-callable"]], "categorical feature": [[390, "term-categorical-feature"]], "class_weight": [[390, "term-class_weight"]], "classes_": [[390, "term-classes_"]], "classifier": [[390, "term-classifier"]], "classifiers": [[390, "term-classifiers"]], "clone": [[390, "term-clone"]], "cloned": [[390, "term-cloned"]], "clusterer": [[390, "term-clusterer"]], "clusterers": [[390, "term-clusterers"]], "coef_": [[390, "term-coef_"]], "common tests": [[390, "term-common-tests"]], "components_": [[390, "term-components_"]], "consumer": [[390, "term-consumer"]], "continuous": [[390, "term-continuous"]], "continuous multi-output": [[390, "term-continuous-multi-output"]], "continuous multioutput": [[390, "term-continuous-multioutput"]], "cross fitting": [[390, "term-0"]], "cross validation": [[390, "term-1"]], "cross-fitting": [[390, "term-cross-fitting"]], "cross-validation": [[390, "term-cross-validation"]], "cross-validation estimator": [[390, "term-cross-validation-estimator"]], "cross-validation generator": [[390, "term-cross-validation-generator"]], "cross-validation splitter": [[390, "term-cross-validation-splitter"]], "cv": [[390, "term-cv"]], "data leakage": [[390, "term-data-leakage"]], "data type": [[390, "term-data-type"]], "decision_function": [[390, "term-decision_function"]], "density estimator": [[390, "term-density-estimator"]], "deprecation": [[390, "term-deprecation"]], "dimensionality": [[390, "term-dimensionality"]], "docstring": [[390, "term-docstring"]], "double underscore": [[390, "term-double-underscore"]], "double underscore notation": [[390, "term-double-underscore-notation"]], "dtype": [[390, "term-dtype"]], "duck typing": [[390, "term-duck-typing"]], "early stopping": [[390, "term-early-stopping"]], "embedding_": [[390, "term-embedding_"]], "estimator": [[390, "term-estimator"]], "estimator instance": [[390, "term-estimator-instance"]], "estimator tags": [[390, "term-estimator-tags"]], "estimators": [[390, "term-estimators"]], "evaluation metric": [[390, "term-evaluation-metric"]], "evaluation metrics": [[390, "term-evaluation-metrics"]], "examples": [[390, "term-examples"]], "experimental": [[390, "term-experimental"]], "feature": [[390, "term-feature"]], "feature extractor": [[390, "term-feature-extractor"]], "feature extractors": [[390, "term-feature-extractors"]], "feature vector": [[390, "term-feature-vector"]], "feature_importances_": [[390, "term-feature_importances_"]], "features": [[390, "term-features"]], "fit": [[390, "term-fit"]], "fit_predict": [[390, "term-fit_predict"]], "fit_transform": [[390, "term-fit_transform"]], "fitted": [[390, "term-fitted"]], "fitting": [[390, "term-fitting"]], "function": [[390, "term-function"]], "gallery": [[390, "term-gallery"]], "get_feature_names_out": [[390, "term-get_feature_names_out"]], "get_n_splits": [[390, "term-get_n_splits"]], "get_params": [[390, "term-get_params"]], "groups": [[390, "term-groups"]], "hyper-parameter": [[390, "term-hyper-parameter"]], "hyperparameter": [[390, "term-hyperparameter"]], "imputation": [[390, "term-imputation"]], "impute": [[390, "term-impute"]], "indexable": [[390, "term-indexable"]], "induction": [[390, "term-induction"]], "inductive": [[390, "term-inductive"]], "joblib": [[390, "term-joblib"]], "kernel": [[390, "term-kernel"]], "label indicator matrix": [[390, "term-label-indicator-matrix"]], "labels_": [[390, "term-labels_"]], "leakage": [[390, "term-leakage"]], "max_iter": [[390, "term-max_iter"]], "memmapping": [[390, "term-memmapping"]], "memory": [[390, "term-memory"]], "memory map": [[390, "term-memory-map"]], "memory mapping": [[390, "term-memory-mapping"]], "meta-estimator": [[390, "term-meta-estimator"]], "meta-estimators": [[390, "term-meta-estimators"]], "metadata": [[390, "term-metadata"]], "metaestimator": [[390, "term-metaestimator"]], "metaestimators": [[390, "term-metaestimators"]], "metric": [[390, "term-metric"]], "missing values": [[390, "term-missing-values"]], "multi-class": [[390, "term-multi-class"]], "multi-class multi-output": [[390, "term-multi-class-multi-output"]], "multi-label": [[390, "term-multi-label"]], "multi-output": [[390, "term-multi-output"]], "multi-output continuous": [[390, "term-multi-output-continuous"]], "multi-output multi-class": [[390, "term-multi-output-multi-class"]], "multiclass": [[390, "term-multiclass"]], "multiclass multioutput": [[390, "term-multiclass-multioutput"]], "multilabel": [[390, "term-multilabel"]], "multilabel indicator matrices": [[390, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[390, "term-multilabel-indicator-matrix"]], "multioutput": [[390, "term-multioutput"]], "multioutput continuous": [[390, "term-multioutput-continuous"]], "multioutput multiclass": [[390, "term-multioutput-multiclass"]], "n_components": [[390, "term-n_components"]], "n_features": [[390, "term-n_features"]], "n_iter_": [[390, "term-n_iter_"]], "n_iter_no_change": [[390, "term-n_iter_no_change"]], "n_jobs": [[390, "term-n_jobs"]], "n_outputs": [[390, "term-n_outputs"]], "n_samples": [[390, "term-n_samples"]], "n_targets": [[390, "term-n_targets"]], "narrative docs": [[390, "term-narrative-docs"]], "narrative documentation": [[390, "term-narrative-documentation"]], "np": [[390, "term-np"]], "online learning": [[390, "term-online-learning"]], "out-of-core": [[390, "term-out-of-core"]], "outlier detector": [[390, "term-outlier-detector"]], "outlier detectors": [[390, "term-outlier-detectors"]], "outputs": [[390, "term-outputs"]], "pair": [[390, "term-pair"]], "pairwise metric": [[390, "term-pairwise-metric"]], "pairwise metrics": [[390, "term-pairwise-metrics"]], "param": [[390, "term-param"]], "parameter": [[390, "term-parameter"]], "parameters": [[390, "term-parameters"]], "params": [[390, "term-params"]], "partial_fit": [[390, "term-partial_fit"]], "pd": [[390, "term-pd"]], "pos_label": [[390, "term-pos_label"]], "precomputed": [[390, "term-precomputed"]], "predict": [[390, "term-predict"]], "predict_log_proba": [[390, "term-predict_log_proba"]], "predict_proba": [[390, "term-predict_proba"]], "predictor": [[390, "term-predictor"]], "predictors": [[390, "term-predictors"]], "random_state": [[390, "term-random_state"]], "rectangular": [[390, "term-rectangular"]], "regressor": [[390, "term-regressor"]], "regressors": [[390, "term-regressors"]], "router": [[390, "term-router"]], "sample": [[390, "term-sample"]], "sample properties": [[390, "term-sample-properties"]], "sample property": [[390, "term-sample-property"]], "sample_weight": [[390, "term-sample_weight"]], "samples": [[390, "term-samples"]], "scikit-learn enhancement proposals": [[390, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[390, "term-scikit-learn-contrib"]], "score": [[390, "term-score"]], "score_samples": [[390, "term-score_samples"]], "scorer": [[390, "term-scorer"]], "scoring": [[390, "term-scoring"]], "semi-supervised": [[390, "term-semi-supervised"]], "semi-supervised learning": [[390, "term-semi-supervised-learning"]], "semisupervised": [[390, "term-semisupervised"]], "set_params": [[390, "term-set_params"]], "sparse graph": [[390, "term-sparse-graph"]], "sparse matrix": [[390, "term-sparse-matrix"]], "split": [[390, "term-split"]], "stateless": [[390, "term-stateless"]], "supervised": [[390, "term-supervised"]], "supervised learning": [[390, "term-supervised-learning"]], "target": [[390, "term-target"]], "targets": [[390, "term-targets"]], "transduction": [[390, "term-transduction"]], "transductive": [[390, "term-transductive"]], "transform": [[390, "term-transform"]], "transformer": [[390, "term-transformer"]], "transformers": [[390, "term-transformers"]], "unlabeled": [[390, "term-unlabeled"]], "unlabeled data": [[390, "term-unlabeled-data"]], "unsupervised": [[390, "term-unsupervised"]], "unsupervised learning": [[390, "term-unsupervised-learning"]], "vectorizer": [[390, "term-vectorizer"]], "vectorizers": [[390, "term-vectorizers"]], "verbose": [[390, "term-verbose"]], "warm_start": [[390, "term-warm_start"]], "module": [[402, "module-sklearn.base"], [402, "module-sklearn.calibration"], [402, "module-sklearn.cluster"], [402, "module-sklearn.compose"], [402, "module-sklearn.covariance"], [402, "module-sklearn.cross_decomposition"], [402, "module-sklearn.datasets"], [402, "module-sklearn.decomposition"], [402, "module-sklearn.discriminant_analysis"], [402, "module-sklearn.dummy"], [402, "module-sklearn.ensemble"], [402, "module-sklearn.exceptions"], [402, "module-sklearn.experimental"], [402, "module-sklearn.feature_extraction"], [402, "module-sklearn.feature_extraction.image"], [402, "module-sklearn.feature_extraction.text"], [402, "module-sklearn.feature_selection"], [402, "module-sklearn.gaussian_process"], [402, "module-sklearn.impute"], [402, "module-sklearn.inspection"], [402, "module-sklearn.isotonic"], [402, "module-sklearn.kernel_approximation"], [402, "module-sklearn.kernel_ridge"], [402, "module-sklearn.linear_model"], [402, "module-sklearn.manifold"], [402, "module-sklearn.metrics"], [402, "module-sklearn.metrics.cluster"], [402, "module-sklearn.metrics.pairwise"], [402, "module-sklearn.mixture"], [402, "module-sklearn.model_selection"], [402, "module-sklearn.multiclass"], [402, "module-sklearn.multioutput"], [402, "module-sklearn.naive_bayes"], [402, "module-sklearn.neighbors"], [402, "module-sklearn.neural_network"], [402, "module-sklearn.pipeline"], [402, "module-sklearn.preprocessing"], [402, "module-sklearn.random_projection"], [402, "module-sklearn.semi_supervised"], [402, "module-sklearn.svm"], [402, "module-sklearn.tree"], [402, "module-sklearn.utils"], [573, "module-sklearn.experimental.enable_halving_search_cv"], [574, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[402, "module-sklearn.base"]], "sklearn.calibration": [[402, "module-sklearn.calibration"]], "sklearn.cluster": [[402, "module-sklearn.cluster"]], "sklearn.compose": [[402, "module-sklearn.compose"]], "sklearn.covariance": [[402, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[402, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[402, "module-sklearn.datasets"]], "sklearn.decomposition": [[402, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[402, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[402, "module-sklearn.dummy"]], "sklearn.ensemble": [[402, "module-sklearn.ensemble"]], "sklearn.exceptions": [[402, "module-sklearn.exceptions"]], "sklearn.experimental": [[402, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[402, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[402, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[402, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[402, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[402, "module-sklearn.gaussian_process"]], "sklearn.impute": [[402, "module-sklearn.impute"]], "sklearn.inspection": [[402, "module-sklearn.inspection"]], "sklearn.isotonic": [[402, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[402, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[402, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[402, "module-sklearn.linear_model"]], "sklearn.manifold": [[402, "module-sklearn.manifold"]], "sklearn.metrics": [[402, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[402, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[402, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[402, "module-sklearn.mixture"]], "sklearn.model_selection": [[402, "module-sklearn.model_selection"]], "sklearn.multiclass": [[402, "module-sklearn.multiclass"]], "sklearn.multioutput": [[402, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[402, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[402, "module-sklearn.neighbors"]], "sklearn.neural_network": [[402, "module-sklearn.neural_network"]], "sklearn.pipeline": [[402, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[402, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[402, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[402, "module-sklearn.semi_supervised"]], "sklearn.svm": [[402, "module-sklearn.svm"]], "sklearn.tree": [[402, "module-sklearn.tree"]], "sklearn.utils": [[402, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[414, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[415, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[416, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[417, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[417, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[417, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[417, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[418, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[418, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[418, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[418, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[418, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[419, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[419, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[420, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[420, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[421, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[421, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[422, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[422, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[423, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[424, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[424, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[425, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[425, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[426, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[426, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[427, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[427, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[427, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[428, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[429, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[430, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[431, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[431, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[431, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[431, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[431, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[431, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[431, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[431, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[431, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[431, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[432, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[432, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[432, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[432, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[433, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[434, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[434, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[434, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[434, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[434, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[434, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[434, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[435, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[435, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[435, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[435, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[435, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[435, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[436, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[436, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[437, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[437, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[438, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[438, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[438, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[438, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[438, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[438, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[438, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[439, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[439, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[439, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[439, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[439, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[439, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[439, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[439, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[439, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[439, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[439, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[440, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[440, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[440, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[440, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[440, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[440, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[440, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[441, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[441, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[442, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[442, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[442, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[442, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[442, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[442, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[442, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[443, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[443, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[444, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[444, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[444, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[444, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[444, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[444, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[445, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[445, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[445, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[445, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[445, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[445, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[445, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[445, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[445, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[446, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[446, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[446, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[446, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[446, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[446, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[447, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[447, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[447, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[447, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[447, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[447, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[447, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[447, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[447, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[448, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[449, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[450, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[451, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[452, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[453, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[454, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[455, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[456, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[457, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[458, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[458, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[458, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[458, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[458, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[458, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[458, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[458, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[458, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[458, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[459, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[459, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[459, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[459, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[459, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[459, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[459, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[459, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[459, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[460, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[461, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[462, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[463, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[463, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[464, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[464, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[464, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[464, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[464, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[464, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[464, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[464, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[464, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[464, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[465, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[465, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[465, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[465, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[465, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[465, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[465, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[465, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[465, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[465, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[466, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[466, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[466, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[466, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[466, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[466, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[466, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[466, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[466, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[466, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[467, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[467, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[467, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[467, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[467, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[467, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[467, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[467, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[467, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[467, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[468, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[468, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[469, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[469, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[469, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[469, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[469, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[469, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[469, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[469, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[469, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[469, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[470, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[470, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[470, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[470, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[470, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[470, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[470, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[470, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[470, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[470, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[471, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[472, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[473, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[474, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[475, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[476, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[476, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[477, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[477, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[478, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[478, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[479, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[479, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[479, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[479, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[479, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[479, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[479, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[479, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[479, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[480, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[481, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[482, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[483, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[484, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[485, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[486, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[493, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[494, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[495, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[496, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[497, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[498, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[525, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[525, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[525, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[525, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[525, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[525, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[525, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[525, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[525, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[526, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[526, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[527, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[527, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[528, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[528, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[529, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[529, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[529, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[529, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[529, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[529, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[529, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[529, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[529, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[529, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[530, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[530, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[531, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[532, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[532, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[533, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[533, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[533, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[533, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[533, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[533, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[533, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[533, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[533, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[533, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[534, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[534, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[534, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[534, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[534, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[534, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[534, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[534, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[534, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[534, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[535, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[535, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[536, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[536, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[536, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[536, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[536, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[536, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[536, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[536, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[536, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[536, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[536, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[537, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[537, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[537, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[537, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[537, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[537, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[537, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[537, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[537, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[537, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[538, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[538, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[538, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[538, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[538, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[538, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[538, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[538, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[538, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[538, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[539, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[540, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[541, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[542, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[544, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[545, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[545, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[546, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[546, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[546, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[546, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[546, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[546, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[546, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[546, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[546, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[546, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[547, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[547, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[547, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[547, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[548, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[548, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[548, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[548, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[549, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[549, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[549, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[549, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[550, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[550, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[550, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[550, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[550, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[550, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[550, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[550, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[550, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[550, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[550, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[551, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[551, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[551, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[551, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[552, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[552, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[552, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[552, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[553, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[553, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[553, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[554, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[554, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[554, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[555, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[556, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[557, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[557, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[557, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[557, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[557, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[557, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[557, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[557, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[557, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[557, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[557, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[557, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[558, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[558, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[558, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[559, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[559, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[559, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[560, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[560, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[560, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[560, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[561, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[561, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[561, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[561, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[562, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[562, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[562, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[562, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[563, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[563, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[563, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[563, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[564, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[564, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[564, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[564, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[565, "sklearn.exceptions.ConvergenceWarning"]], "add_note() (sklearn.exceptions.convergencewarning method)": [[565, "sklearn.exceptions.ConvergenceWarning.add_note"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[565, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[566, "sklearn.exceptions.DataConversionWarning"]], "add_note() (sklearn.exceptions.dataconversionwarning method)": [[566, "sklearn.exceptions.DataConversionWarning.add_note"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[566, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[567, "sklearn.exceptions.DataDimensionalityWarning"]], "add_note() (sklearn.exceptions.datadimensionalitywarning method)": [[567, "sklearn.exceptions.DataDimensionalityWarning.add_note"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[567, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[568, "sklearn.exceptions.EfficiencyWarning"]], "add_note() (sklearn.exceptions.efficiencywarning method)": [[568, "sklearn.exceptions.EfficiencyWarning.add_note"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[568, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[569, "sklearn.exceptions.FitFailedWarning"]], "add_note() (sklearn.exceptions.fitfailedwarning method)": [[569, "sklearn.exceptions.FitFailedWarning.add_note"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[569, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[570, "sklearn.exceptions.InconsistentVersionWarning"]], "add_note() (sklearn.exceptions.inconsistentversionwarning method)": [[570, "sklearn.exceptions.InconsistentVersionWarning.add_note"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[570, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[571, "sklearn.exceptions.NotFittedError"]], "add_note() (sklearn.exceptions.notfittederror method)": [[571, "sklearn.exceptions.NotFittedError.add_note"]], "name (sklearn.exceptions.notfittederror attribute)": [[571, "sklearn.exceptions.NotFittedError.name"]], "obj (sklearn.exceptions.notfittederror attribute)": [[571, "sklearn.exceptions.NotFittedError.obj"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[571, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[572, "sklearn.exceptions.UndefinedMetricWarning"]], "add_note() (sklearn.exceptions.undefinedmetricwarning method)": [[572, "sklearn.exceptions.UndefinedMetricWarning.add_note"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[572, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[573, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[574, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[575, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[575, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[576, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[576, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[576, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[576, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[576, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[576, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[576, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[576, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[576, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[577, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[577, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[577, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[577, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[577, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[577, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[577, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[577, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[578, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[579, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[580, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[581, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[582, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[582, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[583, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[583, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[584, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[584, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[585, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[586, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[586, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[587, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[587, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[587, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[588, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[588, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[588, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[589, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[589, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[590, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[590, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[591, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[591, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[591, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[592, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[593, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[594, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[595, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[595, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[595, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[595, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[595, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[595, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[596, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[597, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[598, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[599, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[600, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[601, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[602, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[603, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[604, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[605, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[606, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[607, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[608, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[608, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[608, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[608, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[608, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[608, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[608, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[608, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[608, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[608, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[608, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[608, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[609, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[610, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[611, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[611, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[611, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[611, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[611, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[611, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[611, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[611, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[612, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[612, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[612, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[612, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[612, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[612, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[612, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[612, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[612, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[612, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[612, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[613, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[613, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[613, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[613, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[613, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[613, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[613, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[613, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[613, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[613, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[613, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[614, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[615, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[615, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[615, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[615, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[615, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[615, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[615, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[615, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[615, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[615, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[615, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[616, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[616, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[616, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[616, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[616, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[616, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[616, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[616, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[616, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[616, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[616, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[617, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[618, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[618, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[618, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[618, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[618, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[618, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[618, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[618, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[618, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[618, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[618, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[619, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[620, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[621, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[621, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[621, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[621, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[621, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[621, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[621, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[621, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[621, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[622, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[622, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[622, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[622, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[622, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[622, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[622, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[622, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[622, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[623, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[623, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[623, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[623, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[623, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[623, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[623, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[623, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[623, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[624, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[624, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[624, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[624, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[624, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[624, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[624, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[624, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[624, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[624, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[625, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[625, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[625, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[626, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[626, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[626, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[627, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[628, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[629, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[629, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[630, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[631, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[632, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[632, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[632, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[632, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[632, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[632, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[632, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[632, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[632, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[633, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[633, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[633, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[633, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[633, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[633, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[633, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[633, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[633, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[634, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[634, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[634, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[634, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[634, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[634, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[634, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[634, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[634, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[635, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[635, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[635, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[635, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[635, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[635, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[635, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[635, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[635, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[636, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[636, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[636, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[636, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[636, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[636, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[636, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[636, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[636, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[637, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[637, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[637, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[637, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[637, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[637, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[637, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[637, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[637, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[638, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[638, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[638, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[638, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[638, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[638, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[638, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[638, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[638, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[639, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[639, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[639, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[639, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[639, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[639, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[639, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[639, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[639, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[639, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[640, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[640, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[640, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[640, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[640, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[640, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[640, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[640, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[640, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[640, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[640, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[641, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[641, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[641, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[641, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[641, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[641, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[641, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[641, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[641, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[641, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[642, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[642, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[642, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[642, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[642, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[642, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[642, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[642, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[642, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[643, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[643, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[643, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[643, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[643, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[643, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[643, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[643, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[643, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[644, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[644, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[644, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[644, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[644, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[644, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[644, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[644, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[644, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[645, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[645, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[645, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[645, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[645, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[645, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[645, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[645, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[645, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[646, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[646, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[646, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[646, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[646, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[646, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[646, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[646, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[646, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[646, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[646, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[647, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[647, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[647, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[647, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[647, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[647, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[647, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[647, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[647, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[647, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[648, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[648, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[648, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[648, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[648, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[648, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[648, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[648, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[648, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[649, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[649, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[649, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[649, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[649, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[649, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[649, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[649, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[649, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[650, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[650, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[650, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[650, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[650, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[650, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[650, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[650, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[650, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[651, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[651, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[651, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[651, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[651, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[651, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[651, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[651, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[652, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[652, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[653, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[654, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[654, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[654, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[654, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[654, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[654, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[654, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[654, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[654, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[654, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[654, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[655, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[656, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[656, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[656, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[656, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[656, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[656, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[656, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[656, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[656, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[656, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[656, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[657, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[657, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[657, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[657, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[657, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[657, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[657, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[657, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[657, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[657, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[659, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[659, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[659, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[659, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[659, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[659, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[659, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[660, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[661, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[662, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[662, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[663, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[663, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[663, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[663, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[663, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[663, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[663, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[663, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[663, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[664, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[664, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[664, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[664, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[664, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[664, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[664, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[664, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[664, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[665, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[665, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[665, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[665, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[665, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[665, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[665, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[665, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[666, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[666, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[666, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[666, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[666, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[666, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[666, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[666, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[666, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[667, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[667, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[667, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[667, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[667, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[667, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[667, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[667, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[667, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[668, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[668, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[668, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[668, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[668, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[668, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[668, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[668, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[668, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[668, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[668, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[669, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[669, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[669, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[669, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[669, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[669, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[669, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[669, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[669, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[669, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[669, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[670, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[670, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[671, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[671, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[672, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[672, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[673, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[673, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[673, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[673, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[673, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[673, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[673, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[673, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[674, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[674, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[674, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[674, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[674, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[674, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[674, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[674, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[674, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[675, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[676, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[677, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[678, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[679, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[680, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[682, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[682, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[682, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[682, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[682, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[682, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[682, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[682, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[682, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[682, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[683, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[683, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[683, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[683, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[683, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[683, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[683, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[683, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[683, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[684, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[684, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[684, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[684, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[684, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[684, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[684, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[685, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[685, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[685, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[685, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[685, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[685, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[686, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[686, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[686, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[686, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[686, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[686, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[686, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[686, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[687, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[688, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[689, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[690, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[691, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[691, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[691, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[691, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[692, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[692, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[692, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[692, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[693, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric class method)": [[693, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[694, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[694, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[694, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[694, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[695, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[695, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[695, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[695, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[696, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[696, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[696, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[696, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[697, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[698, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[699, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[700, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[703, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[705, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[706, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[707, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[708, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[709, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[712, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[714, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[720, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[725, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[726, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[727, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[728, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[729, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[733, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[734, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[735, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[736, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[737, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[738, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[739, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[740, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[741, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[742, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[743, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[744, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[746, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[747, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[748, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[749, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[750, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[771, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[772, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[773, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[774, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[775, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[776, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[777, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[778, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[779, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[780, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[781, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[782, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[783, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[786, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[787, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[788, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[788, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[789, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[789, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[790, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[790, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[790, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[790, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[791, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[791, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[791, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[791, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[791, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[792, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[792, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[792, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[792, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[792, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[793, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[793, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[793, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[793, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[794, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[794, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[795, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[795, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[795, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[795, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[796, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[796, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[796, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[797, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[797, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[797, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[797, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[797, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[798, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[798, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[798, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[798, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[799, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[799, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[799, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[799, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[799, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[800, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[800, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[800, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[800, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[801, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[802, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[803, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[803, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[803, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[803, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[804, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[804, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[804, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[804, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[805, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[805, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[805, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[805, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[806, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[806, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[806, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[806, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[807, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[807, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[807, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[807, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[808, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[808, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[808, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[808, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[808, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[809, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[809, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[809, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[809, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[810, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[810, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[810, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[810, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[811, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[811, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[811, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[811, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[812, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[812, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[812, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[813, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[814, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[815, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[816, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[817, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[818, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[819, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[820, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[821, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[821, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[821, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[822, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[822, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[822, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[822, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[823, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[823, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[823, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[823, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[823, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[823, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[823, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[823, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[824, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[824, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[824, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[824, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[824, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[824, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[824, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[824, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[824, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[824, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[825, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[825, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[826, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[826, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[827, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[827, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[827, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[827, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[827, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[827, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[827, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[827, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[828, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[828, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[829, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[829, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[830, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[830, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[831, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[831, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[832, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[832, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[833, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[833, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[833, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[833, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[833, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[833, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[833, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[833, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[833, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[834, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[834, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[834, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[834, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[834, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[834, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[834, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[834, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[834, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[835, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[835, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[836, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[836, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[836, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[836, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[836, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[836, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[836, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[836, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[836, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[836, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[837, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[837, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[838, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[838, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[838, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[838, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[838, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[838, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[838, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[838, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[838, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[839, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[839, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[840, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[840, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[840, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[840, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[840, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[840, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[840, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[840, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[841, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[841, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[841, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[841, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[841, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[841, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[841, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[841, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[841, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[842, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[842, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[842, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[842, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[842, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[842, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[842, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[842, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[842, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[843, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[844, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[845, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[846, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[847, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[848, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[849, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[849, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[850, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[850, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[851, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[851, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[851, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[851, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[851, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[851, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[851, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[851, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[851, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[852, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[852, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[852, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[852, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[852, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[852, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[852, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[852, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[852, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[852, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[852, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[853, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[853, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[853, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[853, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[853, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[853, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[854, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[855, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[856, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[856, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[856, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[856, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[856, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[856, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[856, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[856, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[856, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[857, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[857, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[857, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[857, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[857, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[857, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[857, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[857, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[857, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[857, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[858, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[858, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[859, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[859, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[860, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[860, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[860, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[860, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[860, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[860, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[860, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[860, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[860, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[860, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[861, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[861, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[861, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[861, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[861, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[861, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[861, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[861, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[861, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[862, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[863, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[864, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[864, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[864, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[864, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[864, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[864, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[864, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[864, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[865, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[865, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[865, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[865, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[865, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[865, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[865, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[865, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[865, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[866, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[866, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[866, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[866, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[866, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[866, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[866, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[866, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[866, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[866, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[867, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[867, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[867, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[867, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[867, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[867, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[867, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[867, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[867, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[867, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[868, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[868, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[868, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[868, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[868, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[868, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[868, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[868, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[868, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[869, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[869, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[869, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[869, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[869, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[869, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[869, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[869, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[869, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[870, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[870, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[870, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[870, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[870, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[870, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[870, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[870, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[870, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[871, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[871, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[871, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[871, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[871, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[871, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[871, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[871, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[871, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[872, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[872, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[872, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[872, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[872, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[872, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[872, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[872, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[872, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[873, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[874, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[874, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[874, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[874, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[874, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[874, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[874, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[874, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[874, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[875, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[876, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[877, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[878, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[879, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[880, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[881, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[882, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[883, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[884, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[885, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[885, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[885, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[885, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[885, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[885, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[885, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[885, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[885, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[885, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[886, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[886, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[886, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[886, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[886, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[886, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[886, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[886, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[886, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[886, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[887, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[888, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[888, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[888, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[888, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[888, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[888, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[888, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[888, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[888, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[889, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[889, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[889, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[889, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[889, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[889, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[889, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[889, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[889, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[890, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[891, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[892, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[893, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[893, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[894, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[894, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[894, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[894, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[894, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[894, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[894, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[894, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[894, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[895, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[895, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[895, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[895, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[895, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[895, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[896, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[896, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[896, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[896, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[896, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[896, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[896, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[896, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[896, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[896, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[896, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[897, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[897, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[897, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[897, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[897, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[897, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[897, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[897, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[897, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[897, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[897, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[897, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[898, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[898, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[898, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[898, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[898, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[898, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[899, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[899, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[899, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[899, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[899, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[899, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[899, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[899, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[899, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[899, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[899, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[900, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[901, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[901, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[901, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[902, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[902, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[902, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[903, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[903, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[903, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[904, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[904, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[904, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[905, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[906, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[907, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[908, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[908, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[909, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[910, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[911, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[912, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[913, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[914, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[915, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[916, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[917, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[918, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[919, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[920, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[921, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[922, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[923, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[924, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[925, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[926, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[927, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[928, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[929, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[930, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[931, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[932, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[933, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[934, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[935, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[936, "sklearn.utils.indexable"]], "metadatarequest() (in module sklearn.utils.metadata_routing)": [[937, "sklearn.utils.metadata_routing.MetadataRequest"]], "metadatarouter() (in module sklearn.utils.metadata_routing)": [[938, "sklearn.utils.metadata_routing.MetadataRouter"]], "methodmapping() (in module sklearn.utils.metadata_routing)": [[939, "sklearn.utils.metadata_routing.MethodMapping"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[940, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[941, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[942, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[943, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[944, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[945, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[946, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[947, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[947, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[947, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[947, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[947, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[948, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[949, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[950, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[951, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[952, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[953, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[954, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[955, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[956, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[957, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[958, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[959, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[960, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[961, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[962, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[963, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[964, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[965, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[966, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[967, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[968, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[969, "sklearn.utils.validation.has_fit_parameter"]]}})